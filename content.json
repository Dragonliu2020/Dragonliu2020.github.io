{"meta":{"title":"Dragon Liu","subtitle":null,"description":null,"author":"Dragon Liu","url":"https://Dragonliu2018.github.io","root":"/"},"pages":[{"title":"关于","date":"2022-01-20T08:25:24.504Z","updated":"2022-01-20T08:25:24.504Z","comments":false,"path":"about/index.html","permalink":"https://Dragonliu2018.github.io/about/index.html","excerpt":"","text":"dwhihdi1"},{"title":"分类","date":"2022-01-20T08:24:01.513Z","updated":"2022-01-20T06:59:05.762Z","comments":false,"path":"categories/index.html","permalink":"https://Dragonliu2018.github.io/categories/index.html","excerpt":"","text":""},{"title":"光影流年","date":"2019-09-13T08:56:36.000Z","updated":"2021-02-26T09:56:36.000Z","comments":true,"path":"gallery/index.html","permalink":"https://Dragonliu2018.github.io/gallery/index.html","excerpt":"","text":"12"},{"title":"友情链接","date":"2019-09-13T08:58:45.000Z","updated":"2021-02-23T13:00:44.000Z","comments":true,"path":"link/index.html","permalink":"https://Dragonliu2018.github.io/link/index.html","excerpt":"","text":""},{"title":"那些年，听过的音乐","date":"2021-09-21T12:10:33.640Z","updated":"2021-02-20T02:30:40.000Z","comments":true,"path":"music/index.html","permalink":"https://Dragonliu2018.github.io/music/index.html","excerpt":"","text":"音乐名: 最美的期待 表演者: 周笔畅 发行时间: 2018-01-18 评分: 7.3 .douban-card-block { display: flex; justify-content: center; align-items: center; width: 100%; max-height: 400px; } .douban-card { display: flex; margin: 30px 10px; padding: 15px; border-radius: 10px; position: relative; justify-content: center; align-items: center; overflow: hidden; color: antiquewhite; text-decoration: none; } .douban-card:hover { text-decoration: none; } .douban-card-bgimg { position: absolute; width: 115%; height: 115%; filter: blur(15px) brightness(0.6); background-size: 100%; background-position: center; background-repeat: no-repeat; } .douban-card-img { position: relative; height: 130px; width: 80px; background-size: 100%; background-position: center; background-repeat: no-repeat; } .douban-card-img { position: relative; height: 130px; width: 80px; } .douban-card-left { position: relative; display: flex; flex-direction: column; align-items: center; } .douban-card-right { position: relative; display: flex; flex-direction: column; margin-left: 12px; font-size: 16px; font-family: 'Courier New', Courier, monospace; line-height: 1.3; color: antiquewhite; } .douban-card-item { margin-top: 4px; }"},{"title":"标签","date":"2022-01-20T06:59:05.763Z","updated":"2022-01-20T06:59:05.763Z","comments":false,"path":"tags/index.html","permalink":"https://Dragonliu2018.github.io/tags/index.html","excerpt":"","text":""},{"title":"主题更新日志","date":"2019-09-13T08:58:45.000Z","updated":"2021-02-26T13:34:46.000Z","comments":true,"path":"theme/index.html","permalink":"https://Dragonliu2018.github.io/theme/index.html","excerpt":"","text":"本站当前主题使用的是Hexo Butterfly TODO 博客相册页面 2021 年 02 月 2月23日： 添加菜单-主题 更改首页图片：点击查看 2月26日 解决博客加密文章本地测试通过，提交到GitHub后未通过问题，访问 https://dragonliu.tk 即可。参考：hexo-blog-encrypt 在 http 环境下无法使用的原因分析 文章加密部分使用 sweetalert 来美化错误提示。参考"},{"title":"Repositories","date":"2022-01-20T06:59:05.762Z","updated":"2022-01-20T06:59:05.762Z","comments":false,"path":"repository/index.html","permalink":"https://Dragonliu2018.github.io/repository/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo迁移到新电脑","slug":"Hexo迁移到新电脑","date":"2021-09-21T15:28:58.000Z","updated":"2022-01-20T08:05:30.749Z","comments":true,"path":"2021/09/21/Hexo迁移到新电脑/","link":"","permalink":"https://Dragonliu2018.github.io/2021/09/21/Hexo迁移到新电脑/","excerpt":"","text":"0 情景导入 换了一台电脑，将旧电脑的hexo博客写作环境迁移到新电脑上。 1 Git下载及配置 从官网Git下载git并安装，下面设置无密push+pull； 打开git bash，在用户主目录(其他目录也可)下运行：ssh-keygen -t rsa -C &quot;youremail@example.com&quot; 把其中的邮件地址换成自己的邮件地址，然后一路回车； 最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人； 登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。 注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了 2 安装Node.js Hexo基于Node.js，Node.js下载地址：Download | Node.js 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v； 检测npm是否安装成功，在命令行中输入npm -v 3 安装Hexo 新建文件夹，在此文件夹内使用npm命令全局安装Hexo，输入： 1cnpm install -g hexo-cli 输入hexo -v检查是否安装成功。 npm加速： 装cnpm 12&gt; npm install -g cnpm --registry=https://registry.npm.taobao.org&gt; 使用cnpm 12&gt; cnpm install xxx&gt; 参考：npm使用国内镜像加速的几种方法 4 复制原电脑上的数据 4.1 需要复制的 _config.yml：站点配置 package.json：说明使用那些包 scaffolds：文章的模板 source：自己写的博客文件 themes：主题 .gitignore：限定在提交的时候哪些文件可以忽略 4.2 需要删除的 .git：无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。 node_modules：在用npm install会重新生成 public：hexo g会重新生成 .deploy_git：在使用hexo d时也会重新生成 db.json文件 其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。 5 npm install 在git bash中切换目录到新拷贝的文件夹里，使用npm install 命令，进行模块安装。很明显我们这里没用hexo init初始化，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。 6 安装其他必要组件 123npm install hexo-deployer-git --save # 为了使用hexo d来部署到git上 npm install hexo-generator-feed --save # 为了建立RSS订阅npm install hexo-generator-sitemap --save # 为了建立站点地图 插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明 7 验证 首先本地执行，在博客根目录下执行： 12hexo ghexo s 此时可访问浏览器：http://localhost:4000/ ，查看是否转移成功。 接下来验证部署，执行： 1hexo g 在线访问出错，无法访问。开始排查： .deploy_git文件夹内的文件大小均为0kb，也就是生成了一些空文件； public文件夹内的文件大小均为0kb，但是本地可以正常访问，不知道为啥 其实在执行hexo s时，后台存在报错 12345678INFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.(node:23336) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency(Use `node --trace-warnings ...` to show where the warning was created)(node:23336) Warning: Accessing non-existent property 'column' of module exports inside circular dependency(node:23336) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency(node:23336) Warning: Accessing non-existent property 'lineno' of module exports inside circular dependency(node:23336) Warning: Accessing non-existent property 'column' of module exports inside circular dependency(node:23336) Warning: Accessing non-existent property 'filename' of module exports inside circular dependency 解决方法：Node版本太高，切换一个低版本Node可以（我这里是14.17.6切换成12.5.0就没有这个问题了） 问题已解决，可以在线访问博客了。 参考 GitHub+Hexo 搭建个人网站详细教程 使用hexo，如果换了电脑怎么更新博客？","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://Dragonliu2018.github.io/tags/Hexo/"}]},{"title":"MAC地址泛洪与欺骗","slug":"MAC地址欺骗","date":"2021-03-04T13:47:39.000Z","updated":"2022-01-20T06:28:17.793Z","comments":true,"path":"2021/03/04/MAC地址欺骗/","link":"","permalink":"https://Dragonliu2018.github.io/2021/03/04/MAC地址欺骗/","excerpt":"","text":"1 理论 1.1 原理 MAC地址欺骗是数据链路层攻击，它是利用交换机端口学习的漏洞，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。 MAC地址泛洪攻击，每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目标主机的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。 与ARP攻击不同：MAC地址欺骗改变的是端口/MAC地址映射关系，ARP攻击改变的是IP/MAC地址映射关系。 MAC地址泛洪攻击针对路由器不行，原因是路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。参考：交换机和路由器的区别在哪里 一针见血通俗解答 实验网络拓扑如下： 1.2 知识储备 MAC地址：它是一个用来确认网络设备位置的位址。在OSI模型中，第三层网络层负责IP地址，第二层数据链路层则负责MAC位址。MAC地址用于在网络中唯一标示一个网卡，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。由网络设备制造商生产时烧录在网卡(Network lnterface Card)的EPROM(一种闪存芯片，通常可以通过程序擦写)。IP地址与MAC地址在计算机里都是以二进制表示的，IP地址是32位的，而MAC地址则是48位的，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址。 交换机：主要功能是在局域网内的主机之间转发数据帧，工作核心是端口/MAC地址映射表，这张表里记录了交换机每个端口同与之相连的主机MAC地址之间的对应关系。交换机接收从主机上传来的比特流之后，要先将其缓存成数据帧，然后通过分析帧头中的MAC地址，交换机就可以判断出数据的发送方和接收方，在映射表里查找与数据帧的目的MAC地址相对应的端口。若找到则发给目的主机；若找不到则以广播的方式将这个数据帧向除了源端口以外的其它所有端口转发，从而将数据发送给了目的主机，并记录端口与MAC地址的对应关系。 2 实战 2.1 MAC地址欺骗 准备：没有交换机物理设备，vmware中桥接模式中有虚拟交换机(但是无法登陆后台)，所以只能利用路由器测试(也无法进入后台)，只能查看现象了。 此处未进行实践，可参考：MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示） 2.2 MAC地址泛洪攻击 以kali为攻击机，使用macof命令向网络中发送大量网络不存在的源mac地址，堵塞交换机(路由器)的CAM表； 攻击前，Win物理机可以ping通kali、node01、node02、node03； 攻击后，按道理此时的路由器中的CAM表中存在大量陌生MAC地址记录，但是目前无法查看；现象为：请求超时或间断ping通，但可以ping通外网及局域网内其它主机。 3 存在问题 没有物理交换机，虚拟交换机无法登陆后台 用路由器测试，但是无法登录后台查看CAM表，可参考：小米路由器开启SSH 4 参考 百度百科-MAC地址 MAC泛洪***的实施与防御 MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示） 亁颐堂现任明教教主CCNA Security 2019 7 第三天 2 MAC泛洪MAC欺骗","categories":[{"name":"安全","slug":"安全","permalink":"https://Dragonliu2018.github.io/categories/安全/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://Dragonliu2018.github.io/tags/Web/"}]},{"title":"ARP攻击","slug":"ARP欺骗-断网攻击","date":"2021-02-17T04:03:04.000Z","updated":"2022-01-20T04:49:30.139Z","comments":true,"path":"2021/02/17/ARP欺骗-断网攻击/","link":"","permalink":"https://Dragonliu2018.github.io/2021/02/17/ARP欺骗-断网攻击/","excerpt":"","text":"1 理论 1.1 原理 ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。假设A、B、C位于同一局域网内，A是PC主机，B是攻击主机，C是路由器。攻击过程如下： A将包含目标IP地址(10.0.1.1)信息的ARP Request，广播到网络中的所有主机，源主机A的IP地址和MAC地址都包括在ARP请求中； C确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址映射添加到本地ARP缓存中；并将包含其MAC地址的ARP回复消息直接发送回主机A； 当主机A收到从C发来的ARP回复消息时，会用C的IP和MAC地址映射更新ARP缓存； 攻击主机B向A发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为C的IP地址，而MAC地址为B的MAC地址； A在接收到这个应答包后，会刷新它的ARP缓存，这样在A的ARP缓存表中就出现了IP-C与MAC-B的映射； 攻击主机B向C发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为A的IP地址，而MAC地址为B的MAC地址； C在接收到这个应答包后，会刷新它的ARP缓存，这样在C的ARP缓存表中就出现了IP-A与MAC-B的映射。 这样一来，A与C之间的流量交换都会经过B，可以进行监听、篡改信息、断网攻击。 1.2 知识储备 网关：网关(Gateway)在网络层以上实现网络互连。由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关，在今天很多局域网采用路由来接入网络，因此通常指的网关就是路由器的IP！ Bridged(桥接模式)：将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。其网络结构如下图所示： 2 实战 2.1 断网攻击 准备：kali虚拟机，设置桥接模式，否则断网无效； 查看自己的网卡信息 找到目标IP：nmap扫描内网(命令nmap -sP 192.168.1.*)或使用安卓端的Net Analyzer进行LAN Scan； arpspoof进行攻击：执行下面命令后目的主机无法上网； 12arpspoof -i 自己网卡信息 -t 目标IP -r 网关例：arpspoof -i eth0 -t 192.168.1.7 -r 192.168.1.1 2.2 窃听 开启IP转发：echo 1 &gt;/proc/sys/net/ipv4/ip_forward arp攻击：arpspoof -i eth0 -t targetIP -r gateway（具体参考上面） 窃听：driftnet -i eth0（你的网卡）或wireshark 3 存在问题 攻击局域网其他系统时，kali虚拟机可以上网，但是其宿主机(物理机win10)无法上网；开启IP转发可以解决 窃听时目标主机虽然可以ping通，当时网速太慢且不稳定；driftnet无法正确抓取图片； 4 参考 百度百科-ARP 百度百科-ARP攻击 百度百科-ARP欺骗 百度百科-网关 vmware 虚拟机三种网络模式—“桥接、NAT 、仅主机”区别？ Kali Linux使用arpspoof命令进行断网攻击（ARP欺骗）【VMware一定要设置桥接模式，否则断网会无效】 使用kali进行ARP攻击与欺骗 使用kali进行局域网ARP欺骗攻击与监听 秦柯-ARP攻击","categories":[{"name":"安全","slug":"安全","permalink":"https://Dragonliu2018.github.io/categories/安全/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://Dragonliu2018.github.io/tags/Web/"}]},{"title":"图像滤波整理","slug":"图像滤波整理","date":"2020-11-08T13:53:34.000Z","updated":"2022-01-20T04:49:39.477Z","comments":true,"path":"2020/11/08/图像滤波整理/","link":"","permalink":"https://Dragonliu2018.github.io/2020/11/08/图像滤波整理/","excerpt":"","text":"图像滤波 基础知识 定义：图像滤波，即在尽量保留图像细节特征的条件下对目标图像的噪声进行抑制，是图像预处理中不可缺少的操作，其处理效果的好坏将直接影响到后续图像处理和分析的有效性和可靠性。 **比喻：**我们可以把滤波器想象成一个包含加权系数的窗口，当使用这个滤波器平滑处理图像时，就把这个窗口放到图像之上，透过这个窗口来看我们得到的图像。 公式： $$O(i, j) = \\sum_{m,n}I(i+m,j+n)K(m,n)$$ 其中O(i, j)是像素输出值，I(i+m, j+n)是像素输入值，K为滤波器（核：二维矩阵，核的不同值表示不同的算法。） 种类：低通滤波器可以消除噪声、模糊化，高通滤波器可以提取边缘。白话文讲计算机视觉-第三讲-滤波器 作用：图像滤波可以更改或者增强图像。通过滤波，可以强调一些特征或者去除图像中一些不需要的部分。滤波是一个邻域操作算子，利用给定像素周围的像素的值决定此像素的最终的输出值。常见的应用包括去噪、图像增强、检测边缘、检测角点、模板匹配等。 非学习类型算法 0x01 均值滤波 定义：用其像素点周围像素的平均值代替元像素值，在滤除噪声的同时也会滤掉图像的边缘信息。 **代码：**Python调用OpenCV实现均值滤波的核心函数：result = cv2.blur(原始图像, 核大小) 其中，核大小是以（宽度，高度）表示的元组形式，常见的形式包括：核大小（3，3）和（5，5）。boxFilter也可实现。 0x02 方框滤波 定义：方框滤波和均值滤波核基本一致，区别是需不需要均一化处理。 代码： OpenCV调用boxFilter()函数实现方框滤波。函数：result = cv2.boxFilter(原始图像, 目标图像深度, 核大小, normalize属性) 其中，目标图像深度是int类型，通常用“-1”表示与原始图像一致；核大小主要包括（3，3）和（5，5）；normalize属性表示是否对目标图像进行归一化处理，当normalize为true时需要执行均值化处理，当normalize为false时，不进行均值化处理，实际上为求周围各像素的和，很容易发生溢出，溢出时均为白色，对应像素值为255。 0x03 中值滤波 **定义：**中值滤波用测试像素周围邻域像素集中的中值代替原像素。中值滤波去除椒盐噪声和斑块噪声时，效果非常明显。在OpenCV中，可以使用函数medianBlur进行操作。 代码： OpenCV主要调用medianBlur()函数实现中值滤波。图像平滑里中值滤波的效果最好。dst = cv2.medianBlur(src, ksize) 其中，src表示源文件，ksize表示核大小。核必须是大于1的奇数，如3、5、7等。 0x04 高斯滤波 定义：加权平均，距离越近的点权重越大，距离越远的点权重越小。由于图像是二维矩阵，则采用二维高斯函数(正态分布)$$f(x,y)= \\frac{1}{2πσ^2} e{\\frac{-(x2+y2)}{2σ2}}$$ 。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。参考：高斯模糊（高斯滤波）的原理与算法 边界处理：把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。 公式：以 q为中心的窗口中，某一点 p在高斯滤波过程中。 权重(空间)： $$G§ = \\frac{1}{2πσ^2} e{\\frac{-||p-q||2}{2σ^2}}$$ 代码：Python中OpenCV主要调用GaussianBlur函数：dst = cv2.GaussianBlur(src, ksize, sigmaX) 其中，src表示原始图像；ksize表示核大小，核大小（N, N）必须是奇数；sigmaX表示X方向方差，主要控制权重，sigmaX小，表现在高斯曲线上就是曲线越高越尖，表现在滤波效果上就是模糊程度小（sigmaX大，表现在高斯曲线上就是曲线越矮越平缓，表现在滤波效果上就是模糊程度大）。 1234567891011121314151617181920212223242526272829303132333435363738#encoding:utf-8\"\"\"@author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/16\"\"\"#导入库import cv2 import numpy as np import matplotlib.pyplot as plt #读取图片img = cv2.imread('02.png')source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) #方框滤波img_box = cv2.boxFilter(source, -1, (5,5), normalize=1)# 均值滤波img_blur = cv2.blur(source, (5,5))#中值滤波img_median = cv2.medianBlur(source, 3)# 高斯滤波img_Guassian = cv2.GaussianBlur(source, (5,5), 0)#显示图形titles = ['Source Image', 'BoxFilter Image', 'Blur Image', 'Median Image', 'Guassian Image'] images = [source, img_box, img_blur, img_Guassian, img_median] for i in range(5): plt.subplot(2, 3, i+1), plt.imshow(images[i], 'gray') plt.title(titles[i]) plt.xticks([]),plt.yticks([]) plt.show() 参考：我跳 0x05 双边滤波 – 边缘保护滤波 定义：高斯滤波只考虑了周边点与中心点的空间距离来计算得到权重，会模糊掉边缘。在高斯滤波的基础上加入了像素值(灰度)权重项，也就是说既要考虑距离因素，也要考虑像素值差异的影响，像素值越相近，权重越大。参考：双边滤波详解、【图像处理】——双边滤波 公式： 像素值权重 $$G_r= exp(-{\\frac{||I_p-I_q||2}{2σ2_r}})$$ 空间距离权重 $$G_s= exp(-{\\frac{||p-q||2}{2σ2_s}})$$ 滤波窗口内每个像素值的权重和 $$W(q) = \\sum_{p\\in S} G_s§G_r§$$ —用于权重的归一化 滤波结果： $$BF = \\frac {1}{W_q}\\sum_{p\\in S} G_s§G_r§*I_p$$ 代码：OpenCV在Python中双边滤波函数是**cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace）**时间复杂度 $$O(Nr^2)$$ ① src是输入图像； ② d是在过滤期间使用的每个像素邻域的直径，如果输入d非0，则sigmaSpace由d计算得出，如果sigmaColor没输入，则sigmaColor由sigmaSpace计算得出； ③ sigmaColor是灰度值相似性高斯函数标准差，色彩空间的标准方差，一般尽可能大， 较大的参数值意味着像素邻域内较远的颜色会混合在一起， 从而产生更大面积的半相等颜色； ④ sigmaSpace是空间高斯函数标准差，坐标空间的标准方差(像素单位)，一般尽可能小。 参数值越大意味着只要它们的颜色足够接近，越远的像素都会相互影响。 当d &gt; 0时，它指定邻域大小而不考虑sigmaSpace。 否则，d与sigmaSpace成正比。 12345678910111213141516171819202122232425262728#encoding:utf-8\"\"\"@author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/16\"\"\"#导入库import cv2 import numpy as np import matplotlib.pyplot as plt #读取图片img = cv2.imread('02.png')source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB) #双边滤波img_bilateral = cv2.bilateralFilter(source, 7, 50, 50)#显示图形titles = ['Source Image', 'bilateralFilter Image'] images = [source, img_bilateral] for i in range(2): plt.subplot(1, 2, i+1), plt.imshow(images[i], 'gray') plt.title(titles[i]) plt.xticks([]),plt.yticks([]) #禁止输出坐标轴 plt.show() 0x06 引导滤波 – 边缘保护滤波 1. 定义 引导滤波的思想用一张引导图像产生权重，从而对输入图像进行处理。引导滤波除了可以用于图像平滑，还可以用于HDR压缩、细节增强、图像去雾、联合上采样等图像处理任务。引导滤波中空间域的贡献自然取决于窗口的大小，即由参数 r 决定。而标准差则是评判颜色差异性的参数，窗口中标准差越大，说明局部的像素相似性越差。 2. 公式：【图像处理】引导滤波 权重 $$W_{ij}(i,j) = \\frac{1}{|ω|^2} \\sum_{k:(i,j)\\in ω_k} (1+ \\frac{(I_i-μ_k)(I_j-μ_k)}{σ_k^2+ϵ})$$ (局部窗口 $$ω_k$$ ；ϵ是 $$L_2$$ 范数正则化系数，防止$$a_k$$ 过大； $$μ_k$$与 $$ σ_k$$ 表示 $$ I_i$$ 在窗口内的均值、标准差； $$∣w∣$$ 表示窗口内像素块的总数 ) 结果 $$q_i = \\sum_{j}{W_{ij}(I)*p_j}$$ (q、I、p分表表示输出图像、引导图像和输入图像 ，i、j 分别表示图像中像素点的索引。权重 W 仅与引导图像 I 有关，而在双边滤波中权重 W 由输入图像自身决定。) 3. 代码1(引导滤波)： 第一个代码块是手写实现引导滤波。时间复杂度O(N)，当 r 与 ϵ 越大，图像被平滑的程度越大。伪代码中：r是窗口半径， $$f_{mean}(I,r)$$ 表示在(r, r)窗口对图像做均值滤波。大佬博客：我跳 第二个代码块是使用的现有库。参考：我跳 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182# -*- coding: utf-8 -*-\"\"\"@First_author: 不用先生@Second_author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/16\"\"\"import cv2import numpy as npinput_fn = '03.png'# 函数名：my_guidedFilter_oneChannel# 函数功能：用于单通道图像（灰度图）的引导滤波函数；# 参数：srcImg：输入图像，为单通道图像；# 参数：guideImg：引导图像，为单通道图像，尺寸与输入图像一致；# 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；# 参数：eps：防止a过大的正则化参数ϵ，# 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；def my_guidedFilter_oneChannel(srcImg, guidedImg, rad=13, eps=0.1): # 转换数值类型，并归一化 srcImg = srcImg/255.0 guidedImg = guidedImg/255.0 img_shape = np.shape(srcImg)#查看矩阵或者数组的维数。 # 在(rad, rad)窗口的内对图像做均值滤波。 P_mean = cv2.boxFilter(srcImg, -1, (rad, rad), normalize=True) # p的均值平滑 I_mean = cv2.boxFilter(guidedImg,-1, (rad, rad), normalize=True) # I的均值平滑 I_square_mean = cv2.boxFilter(np.multiply(guidedImg, guidedImg), -1, (rad, rad), normalize=True) #I*I的均值平滑 I_mul_P_mean = cv2.boxFilter(np.multiply(srcImg, guidedImg), -1, (rad, rad), normalize=True)# I*p的均值平滑 var_I = I_square_mean-np.multiply(I_mean,I_mean)# 方差 cov_I_P = I_mul_P_mean-np.multiply(I_mean,P_mean)# 协方差 a = cov_I_P/(var_I+eps)# 相关因子a b = P_mean-np.multiply(a,I_mean)# 相关因子b a_mean = cv2.boxFilter(a, -1, (rad, rad), normalize=True) # 对a进行均值平滑 b_mean = cv2.boxFilter(b, -1, (rad, rad), normalize=True) # 对b进行均值平滑 dstImg = np.multiply(a_mean,guidedImg)+b_mean return dstImg*255.0 # 函数名：my_guidedFilter_threeChannel# 函数功能：用于三通道图像（RGB彩色图）的引导滤波函数；# 参数：srcImg：输入图像，为三通道图像；# 参数：guideImg：引导图像，为三通道图像，尺寸与输入图像一致；# 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；# 参数：eps：防止a过大的正则化参数ϵ，# 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；def my_guidedFilter_threeChannel(srcImg, guidedImg, rad=9, eps=0.01): img_shape = np.shape(srcImg) dstImg = np.zeros(img_shape, dtype=float) for ind in range(0,img_shape[2]): dstImg[:,:,ind] = my_guidedFilter_oneChannel(srcImg[:,:,ind], guidedImg[:,:,ind], rad, eps) dstImg = dstImg.astype(np.uint8) return dstImgdef main(): img = cv2.imread(input_fn)#读入图像 print( np.shape(img) ) dstimg = my_guidedFilter_threeChannel(img, img, 9 , 0.01)#输入图像作为自身的引导图 print( np.shape(dstimg) ) # cv2.imwrite('output.jpg',dstimg) cv2.imshow('output', dstimg) cv2.waitKey(0) if __name__ == '__main__': main() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# -*- coding: utf-8 -*-\"\"\"@First_author: Jin ZhangYu@Second_author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-contrib-pythonDate: 2020/3/16\"\"\"# 导入库import argparseimport cv2import matplotlib.pyplot as pltimport skimageimport numpy as np# 构造参数解析器# ap = argparse.ArgumentParser()# ap.add_argument(\"-H:\\project_work\\Machine_Vision_Lab\\thesis\\Gaussian\\code\", \"--02.png\", required=True, help = \"Path to the image\")# args = vars(ap.parse_args())# 加载图像并显示input_fn = '02.png'# img = cv2.imread(args[\"image\"],1)img = cv2.imread(input_fn)img = img[:,:,::-1]guide = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)# 进行导向滤波dst1 = cv2.ximgproc.guidedFilter( guide=guide, src=img, radius=16, eps=50, dDepth=-1)dst2 = cv2.ximgproc.guidedFilter( guide=guide, src=img, radius=16, eps=200, dDepth=-1)dst3 = cv2.ximgproc.guidedFilter( guide=guide, src=img, radius=16, eps=1000, dDepth=-1)# 绘制图片images = [img,[dst1,dst2,dst3]]titles = [ 'Original', ['Guided Filter eps=50','Guided Filter eps=200','Guided Filter eps=1000'] ]# 绘制原图plt.figure(figsize=(9,4))plt.subplot(2, 3, 2),plt.imshow(images[0])plt.title(titles[0], fontsize=10),plt.xticks([]), plt.yticks([])plt.subplot(2, 3, 4),plt.imshow(images[1][0])plt.title(titles[1][0], fontsize=10),plt.xticks([]), plt.yticks([])plt.subplot(2, 3, 5),plt.imshow(images[1][1])plt.title(titles[1][1], fontsize=10),plt.xticks([]), plt.yticks([])plt.subplot(2, 3, 6),plt.imshow(images[1][2])plt.title(titles[1][2], fontsize=10),plt.xticks([]), plt.yticks([])# plt.savefig('1_out.png', transparent=True, dpi=300, pad_inches = 0)plt.show() 4. 代码2(快速导向滤波) 通过下采样减少像素点，计算mean_a &amp; mean_b后进行上采样恢复到原有的尺寸大小。假设缩放比例为s,那么缩小后像素点的个数为 $$\\frac {N}{s^2}$$ ，那么时间复杂度变为 $$O(\\frac {N}{s^2})$$ 。伪代码中：fmean代表均值平滑，fsubsample代表图像下采样即缩小图像，fupsample代表图片上采样即放大图像，s为缩小系数。参考：我跳 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# -*- coding: utf-8 -*-\"\"\"@First_author: SongpingWangSongpingWangs@Second_author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/16\"\"\"import cv2import numpy as npdef guideFilter(I, p, winSize, eps, s): # 输入图像的高、宽 h, w = I.shape[:2] # 缩小图像 size = (int(round(w * s)), int(round(h * s))) small_I = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC) small_p = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC) # 缩小滑动窗口 X = winSize[0] small_winSize = (int(round(X * s)), int(round(X * s))) # I的均值平滑 p的均值平滑 mean_small_I = cv2.blur(small_I, small_winSize) mean_small_p = cv2.blur(small_p, small_winSize) # I*I和I*p的均值平滑 mean_small_II = cv2.blur(small_I * small_I, small_winSize) mean_small_Ip = cv2.blur(small_I * small_p, small_winSize) # 方差、协方差 var_small_I = mean_small_II - mean_small_I * mean_small_I cov_small_Ip = mean_small_Ip - mean_small_I * mean_small_p small_a = cov_small_Ip / (var_small_I + eps) small_b = mean_small_p - small_a * mean_small_I # 对a、b进行均值平滑 mean_small_a = cv2.blur(small_a, small_winSize) mean_small_b = cv2.blur(small_b, small_winSize) # 放大 size1 = (w, h) mean_a = cv2.resize(mean_small_a, size1, interpolation=cv2.INTER_LINEAR) mean_b = cv2.resize(mean_small_b, size1, interpolation=cv2.INTER_LINEAR) q = mean_a * I + mean_b return q if __name__ == '__main__': eps = 0.01 winSize = (16,16) #类似卷积核（数字越大，磨皮效果越好） image = cv2.imread(r'02.png', cv2.IMREAD_ANYCOLOR) image = cv2.resize(image,None,fx=0.8,fy=0.8,interpolation=cv2.INTER_CUBIC) I = image/255.0 #将图像归一化 p =I s = 3 #步长 guideFilter_img = guideFilter(I, p, winSize, eps,s) # 保存导向滤波结果 guideFilter_img = guideFilter_img * 255 #(0,1)-&gt;(0,255) guideFilter_img[guideFilter_img &gt; 255] = 255 #防止像素溢出 guideFilter_img = np.round(guideFilter_img ) guideFilter_img = guideFilter_img.astype(np.uint8) cv2.imshow(\"image\",image) cv2.imshow(\"winSize_16\", guideFilter_img ) cv2.waitKey(0) cv2.destroyAllWindows() 0x07 高通滤波 – 边缘检测/高反差保留 定义： 代码：使用的函数有：cv2.Sobel() , cv2.Schar() , cv2.Laplacian() Sobel, scharr其实是求一阶或者二阶导数。scharr是对Sobel的优化。 Laplacian是求二阶导数。cv2.Sobel() 是一种带有方向过滤器。参考：我跳 123456789101112131415161718192021222324252627282930313233343536373839404142# -*- coding: utf-8 -*-\"\"\"@First_author: SongpingWang@Second_author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/16\"\"\"\"\"\"dst = cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])src: 需要处理的图像；ddepth: 图像的深度，-1表示采用的是与原图像相同的深度。 目标图像的深度必须大于等于原图像的深度；dx和dy: 求导的阶数，0表示这个方向上没有求导，一般为0、1、2。dst 不用解释了；ksize： Sobel算子的大小，必须为1、3、5、7。 ksize=-1时，会用3x3的Scharr滤波器， 它的效果要比3x3的Sobel滤波器要好 scale： 是缩放导数的比例常数，默认没有伸缩系数；delta： 是一个可选的增量，将会加到最终的dst中， 默认情况下没有额外的值加到dst中borderType： 是判断图像边界的模式。这个参数默认值为cv2.BORDER_DEFAULT。\"\"\"import cv2img=cv2.imread('02.png',cv2.IMREAD_COLOR)x=cv2.Sobel(img,cv2.CV_16S,1,0)y=cv2.Sobel(img,cv2.CV_16S,0,1)absx=cv2.convertScaleAbs(x)absy=cv2.convertScaleAbs(y)dist=cv2.addWeighted(absx,0.5,absy,0.5,0)cv2.imshow('original_img',img)cv2.imshow('y',absy)cv2.imshow('x',absx)cv2.imshow('dsit',dist)cv2.waitKey(0)cv2.destroyAllWindows() 0x08 窗口感知的高斯引导滤波 gr.m 1234function result = gr(px, py, qx, qy, dr)% 高斯空间核函数 result = exp( - ( (qx - px)^2 + (qy - py)^2 ) / (2 * dr^2) );end gzeta.m 1234function result = gzeta(guide_img, div, px, py, qx, qy, dzeta)% 高斯频域核函数 result = exp( - ( ( guide_img(px, py, div) - guide_img(qx, qy, div) )^2 ) / (2 * dzeta^2) );end GS.m 123456789101112function output = GS(image, r, dr, px, py, div)% 求解高斯空间域滤波，返回指定像素点(p)的输出 Upsilon = 0;%τ，归一化系数 output = 0; for i = -r : r % 以p为中心的窗口半径为2r+1的区域 for j = -r : r Upsilon = Upsilon + gr(px, py, px + i, py + j, dr); output = output + gr(px, py, px + i, py + j, dr) * image(px + i,py + j,div); end end output = output / Upsilon ;end WGGF.m 1234567891011121314151617181920212223function output = WGGF(guide_img, source, r, dzeta, px, py, div, lambda)% 窗口感知的高斯引导滤波%求解WGGF在每个像素点p的输出并返回 Upsilon = 0;%τ，归一化系数 output = 0; flag = 0; for i = -r : r for j = -r : r temp = abs( guide_img(px + i, py + 1, div) - guide_img(px, py, div) ); if temp &lt;= lambda flag = flag + 1; Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta); output = output + guide_img(px + i,py + j,div) * gzeta(guide_img, div, px, py, px+i, py+j, dzeta); end end end if flag == 1 %不满足窗口感知的要求，返回3*3窗口中的像素点中值 output = medfilt2( source( (px - 1):(px + 1), (py - 1):(py + 1), j), [3,3] ); else %满足条件 output = output / Upsilon ; endend Main.m 1234567891011121314151617181920212223242526272829303132333435363738394041%% 读取图片source = im2double( imread('01.jpg') );guide_img = source;%% 求解高斯引导滤波[m ,n, div] = size(source);r = 5; %窗口半径dr = 0.5; %空域带宽for k = 1 : div for i = 1 : m for j = 1 : n if i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r %图片四周处理(原像素) continue; else guide_img(i,j,k) = GS(source, r, dr, i, j, k); %空间域滤波 end end endend%% 求解WGGFtarget = guide_img;r = 5; %窗口半径dzeta = 0.1; %频域带宽lambda = 0.12; % λ为一选定的阈值 for k = 1 : div for i = 1 : m for j = 1 : n if i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r%图片四周处理(引导像素) continue; else target(i, j, k) = WGGF(guide_img, source, r, dzeta, i, j, k, lambda); end end endend%% 显示图形figure;subplot(1,2,1), imshow(source), title('Source image');subplot(1,2,2), imshow(target), title('WGGF image'); WGGF.py(Bug) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#encoding:utf-8\"\"\"@author: Dragon LiuOperating environment: Python 3.7.1lib: opencv-pythonDate: 2020/3/22BUG: 时间复杂度O(m*n*div*r*r)，不可行，另外存在img[]访问问题\"\"\"#导入库import mathimport cv2 import numpy as np import matplotlib.pyplot as plt# 高斯空间核函数def gr(px, py, qx, qy, dr): nut = math.exp( - ( pow((qx - px), 2) + pow((qy - py), 2) ) ) #分子 det = 2 * pow(dr, 2) #分母 result = nut / det return result# 高斯频域核函数def gzeta(guide_img, div, px, py, qx, qy, dzeta): guide_img = guide_img nut = math.exp( - ( pow( ( guide_img[px, py, div] - guide_img[qx, qy, div] ), 2 ) ) ) #分子 det = 2 * pow(dzeta, 2) result = nut / det return result# 求解高斯空间域滤波，返回指定像素点(p)的输出def GS(image, r, dr, px, py, div): Upsilon = 0 #τ，归一化系数 output = 0 for i in range(r, -(r+1), -1):# 以p为中心的窗口半径为2r+1的区域 for j in range(r, -(r+1), -1): Upsilon = Upsilon + gr(px, py, px + i, py + j, dr) output = output + gr(px, py, px + i, py + j, dr) * image[px + i,py + j,div] output = output / Upsilon return output#求解指定窗口(3*3)的中值def medbox(img, x, y, div, length, width): nums = [] length = width = 3 for i in range(math.floor(length/2), -math.floor(length/2)-1, -1): for j in range(math.floor(width/2), -math.floor(width/2)-1, -1): nums.append( img[x+i, y+j, div]) return np.median(nums)#窗口感知的高斯引导滤波#求解WGGF在每个像素点p的输出并返回def WGGF(guide_img,source,r,dzeta,px,py,div, lam): guide_img = guide_img source = source Upsilon = 0 #τ，归一化系数 output = 0 flag = 0 for i in range(r, -(r+1), -1):# 以p为中心的窗口半径为2r+1的区域 for j in range(r, -(r+1), -1): temp = abs( guide_img[px + i, py + 1, div] - guide_img[px, py, div] ) if temp &lt;= lam: flag = flag + 1 Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta) output = output + guide_img[px + i,py + j,div] * gzeta(guide_img, div, px, py, px+i, py+j, dzeta) if flag == 1 or Upsilon == 0: #不满足窗口感知的要求，返回3*3窗口中的像素点中值 output = medbox( source, px, py, j, 3, 3 ) else: #满足条件 output = output / Upsilon return output# 主函数，测试def main(): #读取图片 img = cv2.imread('02.png', 1) source = cv2.cvtColor(img, cv2.COLOR_BGR2RGB) source = source / 255.0 guide_img = source print(1.666) #求解高斯引导滤波 [m ,n, div] = np.shape(source)#查看矩阵或者数组的维数。 r = 5 #窗口半径 dr = 0.5 #空域带宽 # 高斯滤波 guide_img = cv2.GaussianBlur(source, (r,r), dr) print(2.666) #求解WGGF target = guide_img r = 5 #窗口半径 dzeta = 0.1 #频域带宽 lam = 0.12 #λ为一选定的阈值 num = 0 for k in range(div): for i in range(m): for j in range(n): if i &lt;= r or i &gt;= m - r or j &lt;= r or j &gt;= n - r: #图片边界处理(引导像素) continue else: target[i, j, k] = WGGF(guide_img, source, r, dzeta, i, j, k, lam) num = num + 1 print(num) print(3.666) #显示图形 titles = ['Source Image', 'WGGF Image'] images = [source*255.0, target*255.0] for i in range(2): plt.subplot(1, 2, i+1), plt.imshow(images[i], 'gray') plt.title(titles[i]) plt.xticks([]),plt.yticks([]) #禁止输出坐标轴 plt.show() if __name__ == '__main__': main()","categories":[{"name":"其他","slug":"其他","permalink":"https://Dragonliu2018.github.io/categories/其他/"}],"tags":[{"name":"CV","slug":"CV","permalink":"https://Dragonliu2018.github.io/tags/CV/"}]},{"title":"CTF编码加密整理","slug":"CTF编码加密整理","date":"2020-07-13T01:04:26.000Z","updated":"2022-01-20T06:25:09.405Z","comments":true,"path":"2020/07/13/CTF编码加密整理/","link":"","permalink":"https://Dragonliu2018.github.io/2020/07/13/CTF编码加密整理/","excerpt":"","text":"01 常见编码 0x01 莫尔斯电码(Morse Code) 01 原理 摩尔斯电码也被称作摩斯密码，是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。 02 特征 由. -组成的字符串； 由0 1组成的字符串，且为空格间隔得一组一组的。 03 解题 通道1(英文字母小写) 通道2(英文字母大写) 通道3(英文字母小写) 01破解脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061string = '...'dic= &#123; '01': 'A', '1000': 'B', '1010': 'C', '100': 'D', '0': 'E', '0010': 'F', '110': 'G', '0000': 'H', '00': 'I', '0111': 'J', '101': 'K', '0100': 'L', '11': 'M', '10': 'N', '111': 'O', '0110': 'P', '1101': 'Q', '010': 'R', '000': 'S', '1': 'T', '001': 'U', '0001': 'V', '011': 'W', '1001': 'X', '1011': 'Y', '1100': 'Z', '01111': '1', '00111': '2', '00011': '3', '00001': '4', '00000': '5', '10000': '6', '11000': '7', '11100': '8', '11110': '9', '11111': '0', '001100': '?', '10010': '/', '101101': '()', '100001': '-', '010101': '.', '110011':',', '011010':'@', '111000':':', '101010':':', '10001':'=', '011110':\"'\", '101011':'!', '001101':'_', '010010':'\"', '10110':'(', '1111011':'&#123;', '1111101':'&#125;' &#125;; flag = ''for item in key: flag += dic[item]print( flag )print( flag.lower() ) 0x02 Base64/32/16编码 01 原理 base64、base32、base16可以分别编码转化8位字节为6位、5位、4位，16、32、64分别表示用多少个字符来编码。以base64为例：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因。 02 特征 有大写、小写、数字，密文末尾一般为==。 03 解题 通道1 通道2 0x03 Escape/Unescape编码 01 原理 Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉&quot;%u&quot;后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。 02 特征 密文中含有%u。 03 解题 通道1 工具Converter：Unescape 0x04 HTML编码 01 原理 完整编码手册：我跳 02 特征 由元素&amp;#x26;构成，26可为别的数字。 03 解题 通道1 通道2 工具Converter：Decode HTML 0x05 Unicode编码 01 原理 Unicode编码有以下四种编码方式： 源文本： The &amp;#x [Hex]： &amp;#x0054;&amp;#x0068;&amp;#x0065; &amp;# [Decimal]： &amp;#00084;&amp;#00104;&amp;#00101; \\U [Hex]： \\U0054\\U0068\\U0065 \\U+ [Hex]： \\U+0054\\U+0068\\U+0065 02 解题 通道1 通道2 0x06 URL编码 01 原理 url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。 02 解题 通道1 通道2 02 代换密码 0x01 凯撒密码(Caesar Cipher) 01 原理 凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。 加密：c=E_3(m)=m+3(\\bmod 26) 0\\leq m\\leq 25 解密：m=D_3(c)=c-3(\\bmod 26) 0\\leq c\\leq 25 凯撒有两种编码脚本，一种是字母26内循环移位，一种是127次非字母内的循环移位。 02 样例 c = xyz m = abc 03 解题 CTFcrackTools工具(所有结果罗列) 通道2(单个情况) 127次非字母内的循环移位脚本 1234567891011121314c = \"\"\"...\"\"\" #密文for p in range(127): m = '' #明文 for i in c: temp = chr( (ord(i) + p) % 127 ) if 32 &lt; ord(temp) &lt; 127: m += temp flag = 1 else: flag = 0 break if flag == 1: print('****%d****:'%p, m) 0x02 Brainfuck加密 01 原理 Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf＊ck或brainf＊＊k，甚至被简称为BF。brainfuck语言用&gt; &lt; + - . , [ ]八种符号来替换C语言的各种语法和命令。 02 解题 通道1 通道2 0x03 Ook加密 01 原理 Ook密码中只含Ook. Ook? Ook!三个不同的语法元素。 02 解题 通道1 通道2 0x04 .!?加密 01 原理 .!?密码中只含. ? !三个不同的语法元素，使用Ook解密即可。 02 解题 通道1 通道2 0x05 社会主义核心价值观 01 原理 富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善。 02 解题 通道1 通道2 0x06 标准银河字母 01 原理 标准银河字母（Standard Galactic Alphabet）出自游戏《指挥官基恩》系列。是系列中使用的书写系统。字母对应如下： 0x07 仿射加密 01 原理 仿射密码是一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。 加密：c = E_{a,b}(m) \\equiv am+b(\\bmod 26) 解密：m = D_{a,b} \\equiv a^{-1}(c-d)(\\bmod 26) 其中，a、b是密钥，为满足0≤a,b≤250\\leq a,b\\leq 250≤a,b≤25和gcd(a,26)=1gcd(a,26) = 1gcd(a,26)=1的整数。其中gcd(a,26)=1gcd(a,26) = 1gcd(a,26)=1表示a和26的最大公因子，a−1a_{-1}a​−1​​表示a的逆元，即a_{-1}*a \\equiv 1(\\mod26)。 02 解题 常规解法 123456789101112131415161718import gmpy2a = ... #密钥b = ... #密钥text = \"...\" #密文flag = \"\" #明文 text_list = [] for i in text: text_list.append( ord(i) - 97 )aa = gmpy2.invert(a, 26) #求解模逆元for i in text_list: tmp = (aa * (i - b)) % 26 flag += chr(tmp + 97)print(flag) 暴力破解 1234567891011121314text = \"...\" text_list = [] for i in text: text_list.append( ord(i) - 97 ) flag = \"\"for i in text_list: for j in range(0, 26): c = (17 * j - 8) % 26 if(c == i): flag += chr(j + 97)print(flag) 0x08 01 原理 02 解题 通道1 通道2 03 换位加密 0x01 栅栏密码(Rail-fence Cipher) 01 原理 栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文。 02 样例 c = KYsd3js2E{a2jda} KYsd3js2 E{a2jda} m = KEY{sad23jjdsa2} 03 解题 CTFcrackTools工具(所有结果罗列) 通道2(不区分大小写) 通道3(区分大小写) 0x02 转盘加密 01 原理 题目 1234567891011121314151617181： &lt;ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;3： &lt;BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;4： &lt;RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;5： &lt;IHFRLABEUOTSGJVDKCPMNZQWXY &lt;6： &lt;AMKGHIWPNYCJBFZDRUSLOQXVET &lt;7： &lt;GWTHSPYBXIZULVKMRAFDCEONJQ &lt;8： &lt;NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;9： &lt;QWATDSRFHENYVUBMCOIKZGJXPL &lt;10：&lt;WABMCXPLTDSRJQZGOIKFHENYVU &lt;11：&lt;XPLTDAOIKFZGHENYSRUBMCQWVJ &lt;12：&lt;TDSWAYXPLVUBOIKZGJRFHENMCQ &lt;13：&lt;BMCSRFHLTDENQWAOXPYVUIKZGJ &lt;14：&lt;XPHKZGJTDSENYVUBMLAOIRFCQW &lt;密钥： 2,5,1,3,6,4,9,7,8,14,10,13,11,12密文：HCBTSXWCRQGLESflag格式 flag&#123;你解密的内容&#125; 解答 这个转盘加密，比如第一个密钥匙：2、密文匙：H 把转盘第二行单独提出来 2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt; ；从H的地方一直剪切，把剪切的内容放在最前面，变成 2： &lt;HGVSFUWIKPBELNACZDTRXMJQOY &lt; 依次类推把14行都按这样的方式整一遍就得到这个： 12345678910111213142： &lt;HGVSFUWIKPBELNACZDTRXMJQOY &lt;5： &lt;CPMNZQWXYIHFRLABEUOTSGJVDK &lt;1： &lt;BVIQHKYPNTCRMOSFEZWAXJGDLU &lt;3： &lt;TEQGYXPLOCKBDMAIZVRNSJUWFH &lt;6： &lt;SLOQXVETAMKGHIWPNYCJBFZDRU &lt;4： &lt;XQYIZMJWAORPLNDVHGFCUKTEBS &lt;9： &lt;WATDSRFHENYVUBMCOIKZGJXPLQ &lt;7： &lt;CEONJQGWTHSPYBXIZULVKMRAFD &lt;8： &lt;RJLXKISEFAPMYGHBQNOZUTWDCV &lt;14： &lt;QWXPHKZGJTDSENYVUBMLAOIRFC &lt;10： &lt;GOIKFHENYVUWABMCXPLTDSRJQZ &lt;13： &lt;LTDENQWAOXPYVUIKZGJBMCSRFH &lt;11： &lt;ENYSRUBMCQWVJXPLTDAOIKFZGH &lt;12： &lt;SWAYXPLVUBOIKZGJRFHENMCQTD &lt; flag在倒数第六列。 flag{XSXSBUGKUADMIN}，可能要转化为小写。 04 文件加密 0x01 zip压缩包破解 我跳 0x02 Linux shadow 文件破解密码 john爆破：john filename 05 其他加密 01 键盘布局加密 密文：r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM 明文：TONGYUAN 0x 参考 [CTF中那些脑洞大开的编码和加密](http://blog.neargle.com/SecNewsBak/drops/CTF中那些脑洞大开的编码和加密 .html) 具体请看：https://ctf-wiki.github.io/ctf-wiki/crypto/classical/introduction-zh/","categories":[{"name":"安全","slug":"安全","permalink":"https://Dragonliu2018.github.io/categories/安全/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://Dragonliu2018.github.io/tags/Crypto/"}]},{"title":"RSA题型整理","slug":"RSA题型整理","date":"2020-07-07T02:09:17.000Z","updated":"2022-01-20T10:35:20.046Z","comments":true,"path":"2020/07/07/RSA题型整理/","link":"","permalink":"https://Dragonliu2018.github.io/2020/07/07/RSA题型整理/","excerpt":"","text":"0x00 前期准备 01 基础知识 RSA加密算法是一种非对称加密算法，在公开密钥加密和电子商业中被广泛使用。RSA是由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）在1977年一起提出的。当时他们三人都在麻省理工学院工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。 1.1 安全保证 安全性依赖于大整数分解的难题：寻找两个不同的大素数是容易的，但将两个大素数的乘积分解成原来的两个素数是极其困难的。 1.2 具体内容 假设Bob想给Alice送一个消息m： 选择两个大素数 p 和 q ，计算n=pqn=p qn=pq； 随机选取整数e和 d ，满足e d \\equiv 1(\\bmod \\varphi(n)) ，其中φ(n)\\varphi(n)φ(n) 为 nnn的欧拉函数；（r=φ(n)=φ(p)φ(q)=(p−1)(q−1)r = \\varphi(n)=\\varphi(p) \\varphi(q)=(p-1)(q-1)r=φ(n)=φ(p)φ(q)=(p−1)(q−1)，选择一个小于 r 的整数 e，使 r 与 e 互质，并求得 e 关于 r 的模逆元，命名为 d 求 $ e d \\equiv 1(\\bmod r)$。模逆元存在，当且仅当 e 与 r 互质。） 发布e和 n 为公钥， d 为私钥； 设明文为m，加密函数为c \\equiv E(m) \\equiv m^{e}(\\bmod n)，其中1&lt;m,c&lt;n1&lt;m, c&lt;n1&lt;m,c&lt;n； 解密函数为 m \\equiv D(c) \\equiv c^{d}(\\bmod n)。 (n,e)(n, e)(n,e) 是公钥, (n,d)(n, d)(n,d) 是私钥。Alice将她的公钥(n,e)(n, e)(n,e) 传给Bob，而将她的私钥 (n,d)(n, d)(n,d) 藏起来。 1.3 证明 下面使用欧拉定理证明解密函数的正确性，即已知1-4，证明 5 成立。 证明：由于 c \\equiv m^{e}(\\bmod n), 所以 c^{d} \\equiv m^{e d}(\\bmod n), 即证 m^{e d} \\equiv m(\\bmod n) 当 (m,n)=1(m, n)=1(m,n)=1 时，由欧拉定理知 , m^{\\varphi(n)} \\equiv 1(\\bmod n), 而由条件2知 e d \\equiv 1(\\bmod \\varphi(n)), 即存 在整数 k ， 使得 ed=kφ(n)+1,e d=k \\varphi(n)+1,ed=kφ(n)+1, 因此 , \\quad m^{e d} \\equiv m^{k \\varphi(n)+1} \\equiv m(\\bmod n)； 当 (m,n)≠1(m, n) \\neq 1(m,n)≠1 时，由于 n=pq,n=p q,n=pq, 因此 (m,n)=p(m, n)=p(m,n)=p 或 (m,n)=q,(m, n)=q,(m,n)=q, 即 p∣mp|mp∣m 或 q∣mq | mq∣m ， 若 p∣m,p| m,p∣m, 则显然 m^{e d} \\equiv m^{k \\varphi(n)+1} \\equiv m \\equiv 0(\\bmod p)； 若 p∤m,p\\nmid m,p∤m, 则由欧拉定理知 m^{p-1} \\equiv 1(\\bmod p), 于是m^{k \\varphi(n)+1} \\equiv m^{k(p-1)(q-1)+1} \\equiv m(\\bmod p)； 因此，对任意mmm，m^{e d} \\equiv m^{k \\varphi(n)+1} \\equiv m(\\bmod p) 成立，同理可证，对任意 m, \\quad m^{e d} \\equiv m^{k \\varphi(n)+1} \\equiv m(\\bmod q) 成立，因此 m^{e d} \\equiv m(\\bmod n) 成立。(同余性质10-最小公倍数) 1.4 安全性 假设偷听者Eve获得了Alice的公钥 nnn 和 e 以及Bob的加密消息 c,c,c, 但她无法直接获得Alice的私钥 d 。 要获得 d,d,d, 最简单的方法是将 nnn 分解为 ppp 和 q,q,q, 这样她可以得到同余方程d e=1(\\bmod (p-1)(q-1)) 并解出 d,d,d, 然后代入解密公式m\\equiv c^{d} (\\bmod n)导出mmm(破密) 。 但至今为止还没有人找到一个多项式时间的算法来分解一个大的整数的因子，同时也还没有人能够证明这种算法不存在 (见因数分解) 至今为止也没有人能够证明对nnn进行因数分解是唯一的从ccc导出mmm的方法，直到今天也还没有找到比它更简单的方法。（至少没有公开的方法） 因此今天一般认为只要nnn足够大，那么黑客就没有办法了。 假如nnn的长度小于或等于256位，那么用一台个人电脑在几个小时内就可以分解它的因子了。1999年，数百台电脑合作分解了一个512位长的nnn。一个由Shamir 和Tromer在2003年从理论上构建的硬件TWIRL，使人们开始质疑1024位长的nnn的安全性，目前推荐nnn的长度至少为2048位。 1994年彼得·秀尔（Peter Shor）证明一台量子计算机可以在多项式时间内进行因数分解。假如量子计算机有朝一日可以成为一种可行的技术的话，那么秀尔的算法可以淘汰RSA和相关的派生算法。（即依赖于分解大整数困难性的加密算法） 假如有人能够找到一种有效的分解大整数的算法的话，或者假如量子计算机可行的话，那么在解密和制造更长的钥匙之间就会展开一场竞争。但从原理上来说RSA在这种情况下是不可靠的。 1.5 参考 《信息安全数学基础》(主编：常相茂 周玉倩) 维基百科 02 Ubuntu 安装gmpy2模块 PARI/GP是一个比较强大的数论库，“针对数论中的快速计算（大数分解，代数数论，椭圆曲线…）而设计”。 需要的依赖库 gmp mpfr mpc gmp 库安装 1sudo apt-get install libgmp-dev mpfr 库安装 1sudo apt-get install libmpfr-dev mpc 库安装 1sudo apt-get install libmpc-dev gmpy2 安装 1234#python3sudo pip3 install gmpy2#python2sudo pip install gmpy2 0x01 已知n、e、c，求m 01 思路 利用 http://factordb.com/ 分解n获得p和q； 计算d； 解密得明文m。 02 代码 代码1 123456789101112131415from Crypto.Util.number import long_to_bytes,bytes_to_long,getPrime,isPrimeimport primefacdef modinv(a, n): return primefac.modinv(a, n) % nn = ...e = ...c = ...p = ...q = ...phi_n = (p-1)*(q-1)d = modinv(e, phi_n) % phi_n #求模逆元m = pow(c, d, n) #求明文print long_to_bytes(m) 代码2 1234567891011121314151617181920212223#!/usr/bin/env python# coding=utf-8import gmpy2#分解n得p,qp = gmpy2.mpz(...) #填写pq = gmpy2.mpz(...) #填写qe = gmpy2.mpz(...) #填写ec = gmpy2.mpz(...) #填写c#计算dphi_n = (p - 1) * (q - 1)d = gmpy2.invert(e, phi_n) #求解模逆元print \"private key:\"print d#求明文print \"plaintext:\"M = pow(c, d, p*q)print '[10进制]: ' + str(M)flag = str( hex(M) )[2:] #[2:-1]print '[16进制]: ' + flagprint '[ASCII码]: ' + flag.decode('hex') 0x02 低加密指数分解攻击(e = 1) 01 思路 加密过程：c \\equiv E(m) \\equiv m^{e}(\\bmod n) \\equiv m(\\bmod n)，所以明文与密文模n同余； m=c+n∗k(k=0,1,2,3...)m = c + n*k (k=0,1,2,3...)m=c+n∗k(k=0,1,2,3...)，暴力破解即可。 02 代码 123456789101112#!/usr/bin/env python# coding=utf-8import libnumn = ... #填写nc = ... #填写cmax_num = 6 #遍历上限for k in range( max_num ): m = c + n*k print libnum.n2s(m) 0x03 Rabin加密(e=2) 01 思路 理论知识：我跳 02 代码 12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env python# -*- coding: utf-8 -*-import libnumimport gmpy2#从文件中读取密文f = open('flag.enc','r')c = f.read()c = libnum.s2n(c)#字符串转数字#分解np = ... #填写pq = ... #填写pn = p * q#求解mp与mqmp = pow(c, (p+1)/4, p)mq = pow(c, (q+1)/4, q)#求解yp与yqyp = gmpy2.invert(p, q)yq = gmpy2.invert(q, p)#获得四个解r1 = (yp*p*mq + yq*q*mp) % nr2 = (-r1) % nr3 = (yp*p*mq - yq*q*mp) % nr4 = (-r3) % nprint libnum.n2s( r1 )#数字转字符串print libnum.n2s( r2 )print libnum.n2s( r3 )print libnum.n2s( r4 ) 当p=qp = qp=q时，使用python命令行将16进制转十进制，然后直接求解ccc模 n 时的平方根： 123n = ...;c = ...;PowerMod[c, 1/2, n] Wolfram 语言在线编辑：我跳 0x04 flag.enc + pubkey.pem 01 思路 解压得到两个文件【flag.enc】和【pubkey.pem】，其中【flag.enc】从文件名含有flag可以判断是加密后的密文，【pubkey.pem】是公钥文件，通过公钥文件可以得到e和n； 通过openssl对公钥文件【pubkey.pem】进行分解，使用命令【openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem】，得到 e【Exponent】和 n【Modulus】； 其他根据类型判断。 02 代码 123456789101112131415161718#!/usr/bin/env python# coding=utf-8import gmpy2import rsa#分解n得p,qn = ... #填写np = ... #填写pq = ... #填写qe = ... #填写e#计算私钥phi_n = (p - 1) * (q - 1)d = int( gmpy2.invert(e, phi_n) ) #求解模逆元privatekey = rsa.PrivateKey(n , e , d , p , q) #根据已知参数，计算私钥with open(\"./flag.enc\" , \"rb\") as f: #填写文件 print rsa.decrypt(f.read(), privatekey).decode() #使用私钥对密文进行解密，并打印 0x05 共模攻击 01 思路 用相同的N，不同的e进行加密的，可以使用共模攻击。 02 代码 12345678910111213141516171819202122232425#!/usr/bin/env python# -*- coding: utf-8 -*-from libnum import n2s, s2nfrom gmpy2 import invert, gcdextn = ... #填写ne1 = ... #填写e1e2 = ... #填写e2s = gcdext(e1, e2) s1 = s[1]s2 = -s[2]#读取密文file1 = open('flag.enc1', 'r')c1 = file1.read()c1 = s2n(c1)#字符串转数字file2 = open('flag.enc2', 'r')c2 = file2.read()c2 = s2n(c2)#字符串转数字c2 = invert(c2, n) m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % nprint n2s(m) 0x06 低加密指数分解攻击(e = 3) 01 思路 公钥中，e=3，N非常大。 加密过程：c \\equiv E(m) \\equiv m^{e}(\\bmod n) \\equiv m^3(\\bmod n)，所以明文与密文的3次方模n同余； m=c+n∗k(k=0,1,2,3...)m = c + n*k (k=0,1,2,3...)m=c+n∗k(k=0,1,2,3...)，然后开三次方，暴力破解即可。 02 代码 12345678910111213141516171819202122232425#!/usr/bin/env python# coding=utf-8from libnum import s2n, n2sfrom gmpy2 import irootn = ... #填写ne = 3#读取密文file = open('flag.enc', 'r')c = file.read()c = s2n(c)#字符串转数字file.close()i = 0 while True: res = iroot( (c + i*n), 3 ) if( res[1] == True): print res break print \"i = \" + str(i) i += 1m = ... #暴力获得的mprint n2s(m) 0x07 私钥修复+最优非对称加密填充(God Like RSA) 01 思路 压缩包里有一个密文，一个部分缺失的私钥，一个公钥，读公钥可知 N 是 4096 位的，分解无望，肯定要从私钥着手。 【vscode】打开【private.corrupted】，将对应变量填入下列脚本； 执行脚本后得到私钥，新建文件【private.pem】并将私钥复制进去； 然后执行【最优非对称加密填充】脚本。 02 代码 私钥修复脚本 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#!/usr/bin/python#-*- coding:utf-8 -*-import reimport picklefrom itertools import productfrom libnum import invmod, gcddef solve_linear(a, b, mod): if a &amp; 1 == 0 or b &amp; 1 == 0: return None return (b * invmod(a, mod)) &amp; (mod - 1) # hack for mod = power of 2def to_n(s): s = re.sub(r\"[^0-9a-f]\", \"\", s) return int(s, 16)def msk(s): cleaned = \"\".join(map(lambda x: x[-2:], s.split(\":\"))) return msk_ranges(cleaned), msk_mask(cleaned), msk_val(cleaned)def msk_ranges(s): return [range(16) if c == \" \" else [int(c, 16)] for c in s]def msk_mask(s): return int(\"\".join(\"0\" if c == \" \" else \"f\" for c in s), 16)def msk_val(s): return int(\"\".join(\"0\" if c == \" \" else c for c in s), 16)#根据文件pubilc.pem得到E = ...#文件pubilc.pem中第一个ModulusN = to_n(\"\"\"...\"\"\")#private.corrupted中的prime1p_ranges, pmask_msk, pmask_val = msk(\"\"\" ... \"\"\")#prime2q_ranges, qmask_msk, qmask_val = msk(\"\"\" ... \"\"\")#privateExponent_, dmask_msk, dmask_val = msk(\"\"\" ... \"\"\")#exponent1_, dpmask_msk, dpmask_val = msk(\"\"\" ... \"\"\")#exponent2_, dqmask_msk, dqmask_val = msk(\"\"\" ... \"\"\")def search(K, Kp, Kq, check_level, break_step): max_step = 0 cands = [0] for step in range(1, break_step + 1): #print \" \", step, \"( max =\", max_step, \")\" max_step = max(step, max_step) mod = 1 &lt;&lt; (4 * step) mask = mod - 1 cands_next = [] for p, new_digit in product(cands, p_ranges[-step]): pval = (new_digit &lt;&lt; ((step - 1) * 4)) | p if check_level &gt;= 1: qval = solve_linear(pval, N &amp; mask, mod) if qval is None or not check_val(qval, mask, qmask_msk, qmask_val): continue if check_level &gt;= 2: val = solve_linear(E, 1 + K * (N - pval - qval + 1), mod) if val is None or not check_val(val, mask, dmask_msk, dmask_val): continue if check_level &gt;= 3: val = solve_linear(E, 1 + Kp * (pval - 1), mod) if val is None or not check_val(val, mask, dpmask_msk, dpmask_val): continue if check_level &gt;= 4: val = solve_linear(E, 1 + Kq * (qval - 1), mod) if val is None or not check_val(val, mask, dqmask_msk, dqmask_val): continue if pval * qval == N: print \"Kq =\", Kq print \"pwned\" print \"p =\", pval print \"q =\", qval p = pval q = qval d = invmod(E, (p - 1) * (q - 1)) coef = invmod(p, q) from Crypto.PublicKey import RSA print RSA.construct(map(long, (N, E, d, p, q, coef))).exportKey() quit() cands_next.append(pval) if not cands_next: return False cands = cands_next return Truedef check_val(val, mask, mask_msk, mask_val): test_mask = mask_msk &amp; mask test_val = mask_val &amp; mask return val &amp; test_mask == test_valfor K in range(1, E): if K % 100 == 0: print \"checking\", K if search(K, 0, 0, check_level=2, break_step=20): print \"K =\", K breakfor Kp in range(1, E): if Kp % 1000 == 0: print \"checking\", Kp if search(K, Kp, 0, check_level=3, break_step=30): print \"Kp =\", Kp breakfor Kq in range(1, E): if Kq % 100 == 0: print \"checking\", Kq if search(K, Kp, Kq, check_level=4, break_step=9999): print \"Kq =\", Kq break 解题脚本(最优非对称加密填充) 12345678910111213141516171819#!/usr/bin/python# coding=utf-8from Crypto.PublicKey import RSAfrom Crypto.Cipher import PKCS1_OAEPwith open('pubkey.pem', 'r') as f: key = RSA.importKey(f) N = key.n e = key.eprint Nprint ewith open('private.pem', 'r') as f: private = RSA.importKey(f) oaep = PKCS1_OAEP.new(private)with open('flag.enc', 'r') as f: print oaep.decrypt(f.read()) 03 参考 RSA 私钥恢复和最优非对称加密填充 0x08 wiener attack(e特别大) 01 思路 给出的n分解无望，而且e特别大，利用wiener attack脚本分解； 然后利用一般方法求解即可。 02 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import gmpy2import libnumdef continued_fractions_expansion(numerator,denominator):#(e,N) result=[] divident=numerator%denominator quotient=numerator/denominator result.append(quotient) while divident!=0: numerator=numerator-quotient*denominator tmp=denominator denominator=numerator numerator=tmp divident=numerator%denominator quotient=numerator/denominator result.append(quotient) return result def convergents(expansion): convergents=[(expansion[0],1)] for i in range(1,len(expansion)): numerator=1 denominator=expansion[i] for j in range(i-1,-1,-1): numerator+=expansion[j]*denominator if j==0: break tmp=denominator denominator=numerator numerator=tmp convergents.append((numerator,denominator))#(k,d) return convergents def newtonSqrt(n): approx = n/2 better = (approx + n/approx)/2 while better != approx: approx = better better = (approx + n/approx)/2 return approx def wiener_attack(cons,e,N): for cs in cons: k,d=cs if k==0: continue phi_N=(e*d-1)/k #x**2-((N-phi_N)+1)*x+N=0 a=1 b=-((N-phi_N)+1) c=N delta = b*b - 4*a*c if delta&lt;=0: continue x1= (newtonSqrt(delta)-b)/(2*a) x2=-(newtonSqrt(delta)+b)/(2*a) if x1*x2==N: return [x1,x2,k,d] N = ...e = ... expansion = continued_fractions_expansion(e,N)cons = convergents(expansion) p, q, k, d = wiener_attack(cons, e, N)print pprint qc = ... #密文d = gmpy2.invert(e, (p - 1) * (q - 1))m = pow(c, d, N)print libnum.n2s(m) 0x0 reference Ubuntu 安装gmpy2模块 一大波RSA就要来了~~","categories":[{"name":"安全","slug":"安全","permalink":"https://Dragonliu2018.github.io/categories/安全/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://Dragonliu2018.github.io/tags/Crypto/"}]},{"title":"C++单元测试","slug":"C++单元测试","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T08:05:13.779Z","comments":true,"path":"2020/06/27/C++单元测试/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/C++单元测试/","excerpt":"","text":"0 情景导入 在实习时，用到了C++中的单元测试，整理一下。分别在Windows和子系统（Ubuntu）中安装配置。 1 安装googletest 1.1 环境配置 下载gtest：git clone https://github.com/google/googletest.git 安装cmake： CMake 是一个开源的跨平台的自动化构建系统，主要用于 C++ 的工程构建、测试以及打包等自动化操作。它能根据开发者编写的 CMakeLists.txt 规则文件，在不同的平台输出所需要的工程文件，然后开发者可以按照常见的构建方式使用生成的工程文件编译最终的程序。 CMake 是 Cross platform Make 的缩写，虽然名字中含有“make”，但是 CMake 和 Linux 上常见的 make 系统有所区别，是更上一层的构建系统。 Windows：首先打开 CMake 官方网站，在下载页面选择 Windows win64-x64 Installer 下载并安装 Ubuntu：apt-get install cmake windows配置clion编译环境：Window10上CLion极简配置教程 1.2 编译gtest库 使用clion打开googletest代码目录，选择gtest项目编译生成： 显示下面的信息表明编译成功（显示Error running，不用管他），生成的libgtestd.a即为gtest的库文件，项目中引用这个库文件就能使用gtest了。 2 使用googletest 2.1 引入库 新建测试项目cliontest，将libgtestd.a文件拷贝到该代码根路径的lib路径下，在CMakeList.txt中加上以下内容： 123456# 添加上库文件的路径，注意相对路径link_directories(lib/)# 添加可执行文件add_executable(cliontest main.cpp)# 链接gtest库文件target_link_libraries(cliontest libgtestd.a) 2.2 引入头文件 拷贝googletest/include下的gtest目录到项目下的include目录下，然后在CMakeList.txt中添加上对应的调用： 123include_directories( include/) 然后在代码中添加头文件gtest/gtest.h就可以使用了。 2.3 测试 修改main.cpp并运行： 12345678910111213141516171819202122#include \"gtest/gtest.h\" int add(int a, int b) &#123; return a + b;&#125; TEST(add, zero) &#123; EXPECT_EQ(0, add(0, 0));&#125; TEST(add, positive_number) &#123; EXPECT_EQ(3, add(1, 2));&#125; TEST(add, negative_number) &#123; EXPECT_EQ(-3, add(-1, -2));&#125; int main() &#123; ::testing::InitGoogleTest(); return RUN_ALL_TESTS();&#125; 3 gtest的使用教程 参考文档：Googletest Primer，google官方出品。 https://www.dyxmq.cn/program/usage-of-googletest.html 7 参考 CMake 安装指南","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"},{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://Dragonliu2018.github.io/tags/C/"}]},{"title":"C++项目的全量覆盖率和增量覆盖率","slug":"C++项目的全量覆盖率和增量覆盖率","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T08:05:18.933Z","comments":true,"path":"2020/06/27/C++项目的全量覆盖率和增量覆盖率/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/C++项目的全量覆盖率和增量覆盖率/","excerpt":"","text":"0 情景导入 2021.09.26华为实习任务复现，要求实现多次SR合并后的增量覆盖率。 关于报错 12###强制回滚到某版本git reset --hard 36409abd22dcc9f9252152b34fa9e929f7c883ec 123###解决：https://stackoverflow.com/questions/3411048/unexpected-operator-in-shell-programming/3411061./srCover.sh: 17: [: h: unexpected operator ./srCover.sh: 21: [: h: unexpected operator 1 思路 强行cherry-pick，可能存在冲突的情况： 不冲突，是准确的 冲突，使用指定版本的代码解决冲突，是不准确的 2 cherry-pick 3 生成增量覆盖率报告 3.1 生成差异文件 v1版本：dir1目录， v2版本：dir2目录， 执行： 12# diff -r -N -x \".git\" -x \"*.gcov\" -u &lt;old_src_path&gt; &lt;new_src_path&gt; &gt; diff.txtdiff -r -N -x \".git\" -x \"*.gc*\" -x \"result\" -x \"hello\" -x \"hello.info\" -u dir1 dir2 &gt; diff.txt 3.2 生成v2版本的全量覆盖率报告 代码覆盖工具(gcov、lcov)的使用 gcov是Linux下GCC自带的一个C/C++代码覆盖率分析工具,因此只要安装了gcc，就不需要再次安装了。 gcov能够生成代码覆盖信息，但是不够直观，因此需要借助lcov直观展示覆盖率，主要特点有： 基于Html输出，并生成一棵完整的HTML树 输出包括概述、覆盖率百分比、图表，能快速浏览覆盖率数据 支持大项目，提供三个级别的视图：目录视图、文件视图、源码视图 安装lcov： 12345git clone https://github.com/linux-test-project/lcov.git# 进入项目目录cd lcov# 编译make install 以hello.c为例： 123456789101112131415#include&lt;stdio.h&gt;int main()&#123; int num = 1; if (num == 0) &#123; printf(\"num is zero\\n\"); &#125; else if (num == 1) &#123; printf(\"num is one\\n\"); &#125; else &#123; printf(\"num is NAN\\n\"); &#125; printf(\"hello world\\n\"); return 0;&#125; 测试： 123456789101112131415161718192021222324252627282930313233# 编译时候加两个参数：-fprofile-arcs -ftest-coverage, 此时会生成：hello.gcnogcc -fprofile-arcs -ftest-coverage hello.c -o hello# 此时会生成： hello.gcda, hello.gcno和hello.gcda是gcov引用的关键文件)./hello# gcov根据上面的文件生成了：hello.c.gcov,就是代码覆盖信息，但看起来并不直观gcov hello.c### 内容如下：➜ dir2 cat hello.c.gcov -: 0:Source:hello.c -: 0:Graph:hello.gcno -: 0:Data:hello.gcda -: 0:Runs:1 -: 0:Programs:1 -: 1:#include&lt;stdio.h&gt; -: 2: 1: 3:int main() -: 4:&#123; 1: 5: int num = 1; 1: 6: if (num == 0) &#123; #####: 7: printf(\"num is zero\\n\"); 1: 8: &#125; else if (num == 1) &#123; 1: 9: printf(\"num is one\\n\"); -: 10: &#125; else &#123; #####: 11: printf(\"num is NAN\\n\"); -: 12: &#125; 1: 13: printf(\"hello world\\n\"); 1: 14: return 0; -: 15:&#125;# 借助lcov对hello.c.gcov进行改造，可以看见生成了hello.infolcov -d . -t 'Hello test' -o 'hello.info' -b . -c# 生成了result文件夹，借助web服务器，我们就可以很直观的看到结果了genhtml -o result hello.info 查看生成的全量覆盖率报告，用浏览器打开result文件夹内的index.html： 3.3 使用addlcov生成增量代码覆盖率文件 addlcov --diff &lt;full_cov_file&gt; diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt; &lt;full_cov_file&gt;为之前统计的v2版本上的全量覆盖率； &lt;add_cov_file&gt;为输出的增量覆盖率info文件； 是要截取的代码深度； &lt;new_src_path&gt;是v2版本源码 执行： 1addlcov --diff diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt; 报错 12345678910111213141516➜ Test1 ./addlcov --diff hello.info diff.txt -o addhello.info --strip 5 --path ./dir2Reading tracefile hello.infoReading diff diff.txtRemoving /mnt/e/Code/cpp/Test1/dir1/hello.c1 entry converted, 0 entries left unchanged.Writing data to addhello.infoSummary coverage rate: lines......: no data found functions..: no data found branches...: no data found ### bug addlcov脚本无法匹配# Try to match diff filename with filename# if ($filename =~ /^\\Q$diff_path$sep$_\\E$/) 修改为下面语句，if (1 == 1)### 单文件出现上述问题，多文件无问题 python中执行shell命令：https://blog.51cto.com/zhou123/1284377","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"},{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://Dragonliu2018.github.io/tags/C/"}]},{"title":"Win10安装Ubuntu子系统","slug":"Win10安装Ubuntu子系统","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T09:05:17.093Z","comments":true,"path":"2020/06/27/Win10安装Ubuntu子系统/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/Win10安装Ubuntu子系统/","excerpt":"","text":"0 情景导入 在Windows10 Home版操作系统下安装Linux子系统(WSL2)，用于轻量需求，方便快捷。 在微软商店内安装Linux子系统会默认安装到C盘，根据官方文档指示可以安装到其他盘（未成功）。 自定义Linux子系统，安装到非C盘。 1 安装WSL2（未成功） 微软WSL官方安装文档（中文） 微软WSL官方安装文档（英文） 1.1 启用Windows子系统功能 在安装子系统之前，启用Windows子系统功能，在Windows10的Powershell中输入： 1dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart 1.2 检查WSL2依赖是否满足 For x64 systems: Version 1903 or higher, with Build 18362 or higher. For ARM64 systems: Version 2004 or higher, with Build 19041 or higher. Builds lower than 18362 do not support WSL 2. Use the Windows Update Assistant to update your version of Windows. 检查Windows版本：win+R，输入winver 1.3 启用虚拟机功能 管理员模式打开Powershell： 1dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart 1.4 下载Linux内核更新包 下载最新安装包：跳转 点击安装上述的安装包 1.5 将 WSL 2 设置为默认版本 在Powershell中运行： 1wsl --set-default-version 2 1.6 安装Linux发行版 1.6.1 微软商店安装（只能安装在C盘） 1.6.2 命令行安装（可以安装在其他盘） cmd下，在自定义目录中下载： 1curl.exe -L -o ubuntu-1604.appx https://aka.ms/wsl-ubuntu-2004 安装： 1Add-AppxPackage .\\app_name.appx 但是出错： 123456789101112PS D:\\virtual_machine\\WSL\\Ubuntu&gt; Add-AppxPackage .\\Ubuntu2004.appxAdd-AppxPackage : 部署失败，原因是 HRESULT: 0x80073CF3, 包无法进行更新、相关性或冲突验证。从 (Ubuntu2004.appx) 使用程序包 CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2020.424.0_x64__79rhkp1fndgsc 中的目标卷 C: 执行的部署 Add 操作失败，错误为 0x80073CF3。有关诊断应用部署问题的帮助，请参阅 http://go.microsoft.com/fwlink/?LinkId=235160。注意: 有关其他信息，请在事件日志中查找 [ActivityId] a0925605-afc5-0005-a072-92a0c5afd701，或使用命令行 Get-AppPackageLog -ActivityID a0925605-afc5-0005-a072-92a0c5afd701所在位置 行:1 字符: 1+ Add-AppxPackage .\\Ubuntu2004.appx+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : WriteError: (D:\\virtual_mach...Ubuntu2004.appx:String) [Add-AppxPackage], IOException + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand 问题解决，应该是home版的windows有关，暂时没有解决。 2 安装自定义系统（成功） 微软WSL官方安装文档（中文） 安装后的问题： ping baidu.com反应慢，ping 8.8.8.8还可以 2.1 从容器中导出 tar 在Ubuntu虚拟机中进行操作： 123456789101112131415161718192021# 安装docker# https://www.runoob.com/docker/ubuntu-docker-install.htmlcurl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun# 启动 Docker 服务sudo service docker start# 下载指定系统镜像sudo docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0# 查看系统镜像sudo docker images# 使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器sudo docker run -it ImageID /bin/bash# 启动容器sudo docker start ContainerID# 查看容器sudo docker ps -a# 进入容器sudo docker attach ContainerID# 使用 grep 和 awk 获取 CentOS 容器 IDdockerContainerID=$(sudo docker container ls -a | grep -i &#123;容器名称&#125; | awk '&#123;print $1&#125;')# 根据容器 ID 导出 tar 文件：sudo docker export $dockerContainerID &gt; ubuntu.tar 2.2 将 tar 文件导入 WSL 在Windows的powershell中操作： 12345678910# 在选定目录下导入 tar 文件： wsl --import &lt;DistroName&gt; &lt;InstallLocation&gt; &lt;InstallTarFile&gt;wsl --import Ubuntu .\\Ubuntu .\\ubuntu.tar# 检查已安装的子系统实例wsl -l -v# 启动Ubuntu子系统wsl -d Ubuntu# 停止Ubuntu子系统wsl --terminate Ubuntu #停止# 卸载Ubuntu子系统wsl --unregister Ubuntu 3 安装Terminus终端 Terminus下载安装，点击设置，修改Profiles，使得默认标签页打开wsl（Ubuntu） 将Tabby(Terminus)添加到右键打开： 123456789101112131415161718192021222324252627@echo offset ICON=D:\\software\\terminus\\soft\\Tabby\\Tabby.exe #改成自己的set LABEL=Open terminal hereset COMMAND=D:\\software\\terminus\\soft\\Tabby\\Tabby.exe \\\"%%V\\\" #改成自己的set SLUG=Terminalreg delete \"HKCU\\Software\\Classes\\Directory\\Background\\shell\\%SLUG%\" /freg delete \"HKCU\\Software\\Classes\\Directory\\shell\\%SLUG%\" /freg delete \"HKCU\\Software\\Classes\\Drive\\shell\\%SLUG%\" /freg delete \"HKCU\\Software\\Classes\\LibraryFolder\\Background\\shell\\%SLUG%\" /freg add \"HKCU\\Software\\Classes\\Directory\\Background\\shell\\%SLUG%\" /f /ve /t REG_SZ /d \"%LABEL%\"reg add \"HKCU\\Software\\Classes\\Directory\\Background\\shell\\%SLUG%\" /f /v \"Icon\" /t REG_SZ /d \"%ICON%\"reg add \"HKCU\\Software\\Classes\\Directory\\Background\\shell\\%SLUG%\\command\" /f /ve /t REG_SZ /d \"%COMMAND%\"reg add \"HKCU\\Software\\Classes\\Directory\\shell\\%SLUG%\" /f /ve /t REG_SZ /d \"%LABEL%\"reg add \"HKCU\\Software\\Classes\\Directory\\shell\\%SLUG%\" /f /v \"Icon\" /t REG_SZ /d \"%ICON%\"reg add \"HKCU\\Software\\Classes\\Directory\\shell\\%SLUG%\\command\" /f /ve /t REG_SZ /d \"%COMMAND%\"reg add \"HKCU\\Software\\Classes\\Drive\\shell\\%SLUG%\" /f /ve /t REG_SZ /d \"%LABEL%\"reg add \"HKCU\\Software\\Classes\\Drive\\shell\\%SLUG%\" /f /v \"Icon\" /t REG_SZ /d \"%ICON%\"reg add \"HKCU\\Software\\Classes\\Drive\\shell\\%SLUG%\\command\" /f /ve /t REG_SZ /d \"%COMMAND%\"reg add \"HKCU\\Software\\Classes\\LibraryFolder\\Background\\shell\\%SLUG%\" /f /ve /t REG_SZ /d \"%LABEL%\"reg add \"HKCU\\Software\\Classes\\LibraryFolder\\Background\\shell\\%SLUG%\" /f /v \"Icon\" /t REG_SZ /d \"%ICON%\"reg add \"HKCU\\Software\\Classes\\LibraryFolder\\Background\\shell\\%SLUG%\\command\" /f /ve /t REG_SZ /d \"%COMMAND%\" 4 配置oh-my-zsh zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装。 zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。 通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置。 4.1 安装zsh 安装zsh 1apt install zsh -y 检查安装是否成功： 123456789cat /etc/shells# /etc/shells: valid login shells/bin/sh/bin/bash/bin/rbash/bin/dash/usr/bin/tmux/bin/zsh/usr/bin/zsh zsh设为默认shell，新开标签页生效 1chsh -s /bin/zsh 4.2 oh-my-zsh安装与配置 Ubuntu | 安装oh-my-zsh 安装： 123sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\"# 或者sh -c \"$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)\" 出现安装报错： 1curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused 解决： 如果科学上网应该不会出现此情况； 如果不能科学上网可以这样做： 打开网站: https://www.ipaddress.com/， 查询一下 raw.githubusercontent.com对应的IP 地址 在hosts文件中添加：sudo vim /etc/hosts 1199.232.28.133 raw.githubusercontent.com 主题使用robbyrussell，vim ~/.zshrc 安装插件： 1234567891011121314# 修改配置文件 vim ~/.zshrc## 添加内容plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump extract)# 解压插件，解压一个命令x全搞定extract # 不用安装# 安装autojump自动跳转插件apt install autojump# 安装zsh-autosuggestions语法历史记录插件git clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions# 安装zsh-syntax-highlighting语法高亮插件git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting# 配置文件生效source ~/.zshrc","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"}],"tags":[]},{"title":"jupyter使用","slug":"jupyter使用","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T08:05:36.627Z","comments":true,"path":"2020/06/27/jupyter使用/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/jupyter使用/","excerpt":"","text":"1 安装 打开cmd，使用pip进行安装： 1pip install jupyterlab 2 使用 cmd输入： 1jupyter-lab 在浏览器输入：http://localhost:8888/","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"},{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"python","slug":"python","permalink":"https://Dragonliu2018.github.io/tags/python/"}]},{"title":"matplotlib使用","slug":"matplotlib","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T08:05:43.622Z","comments":true,"path":"2020/06/27/matplotlib/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/matplotlib/","excerpt":"","text":"1 基础知识 官方文档 画板figure，画纸Sublpot画质，可多图绘画 画纸上最上方是标题title，用来给图形起名字 坐标轴Axis，横轴叫x坐标轴label，纵轴叫y坐标轴ylabel 图例Legend 代表图形里的内容 网格Grid，图形中的虚线，True显示网格 点 Markers：表示点的形状。 2 绘图步骤 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#导入matplotlib的pyplot模块import matplotlib.pyplot as plt#1 基础绘图#第1步：定义x和y坐标轴上的点 x坐标轴上点的数值x=[1, 2, 3, 4]#y坐标轴上点的数值y=[1, 4, 9, 16]#第2步：使用plot绘制线条第1个参数是x的坐标值，第2个参数是y的坐标值plt.plot(x,y)#第3步：显示图形plt.show()#2 定义绘图属性'''color：线条颜色，值r表示红色（red）marker：点的形状，值o表示点为圆圈标记（circle marker）linestyle：线条的形状，值dashed表示用虚线连接各点'''plt.plot(x, y, color='r',marker='o',linestyle='dashed')#plt.plot(x, y, 'ro')'''axis：坐标轴范围语法为axis[xmin, xmax, ymin, ymax]，也就是axis[x轴最小值, x轴最大值, y轴最小值, y轴最大值]'''plt.axis([0, 6, 0, 20])plt.show()#3 给图片提阿甲注释和标题等#第1步：定义x和y坐标轴上的点 x坐标轴上点的数值x=[1, 2, 3, 4]#y坐标轴上点的数值y=[1, 4, 9, 16]#第2步：使用plot绘制线条 第1个参数是x的坐标值，第2个参数是y的坐标值plt.plot(x,y)#添加文本 #x轴文本plt.xlabel('x坐标轴')#y轴文本plt.ylabel('y坐标轴')#标题plt.title('标题')#添加注释 参数名xy：箭头注释中箭头所在位置，参数名xytext：注释文本所在位置，#arrowprops在xy和xytext之间绘制箭头, shrink表示注释点与注释文本之间的图标距离plt.annotate('我是注释', xy=(2,5), xytext=(2, 10), arrowprops=dict(facecolor='black', shrink=0.01), )#第3步：显示图形plt.show() 3 多图绘制 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 柱形图fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(20, 12), dpi=100)axs[0][0].set_title('HeatLoadLight')axs[0][0].set_xlabel('DateTime')axs[0][0].set_ylabel('LoadValue')axs[0][0].bar(range(12), list, fc='g')axs[0][1].set_title('HeatLoadHeavy')axs[0][1].set_xlabel('DateTime')axs[0][1].set_ylabel('LoadValue')axs[0][1].bar(range(12), list, fc='g')axs[1][0].set_title('CoolLoadLight')axs[1][0].set_xlabel('DateTime')axs[1][0].set_ylabel('LoadValue')axs[1][0].bar(range(12), list, fc='g')axs[1][1].set_title('CoolLoadHeavy')axs[1][1].set_xlabel('DateTime')axs[1][1].set_ylabel('LoadValue')axs[1][1].bar(range(12), list, fc='g')fig.autofmt_xdate()plt.show()# 折线图fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(20, 6), dpi=100)axs[0].set_title('xxx')axs[0].set_xlabel('Hour')axs[0].set_ylabel('Value')axs[0].plot(range(168), Q_trans_light, c='red', label='Light')axs[0].plot(range(168), Q_trans_heavy, c='blue', label='Heavy')axs[0].legend(loc='best')axs[1].set_title(\"xxx\")axs[1].set_xlabel('Hour')axs[1].set_ylabel('Value')axs[1].plot(range(168), Q_trans_light, c='red', label='Light')axs[1].plot(range(168), Q_trans_heavy, c='blue', label='Heavy')axs[1].legend(loc='best')fig.autofmt_xdate()plt.show()","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"},{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"python","slug":"python","permalink":"https://Dragonliu2018.github.io/tags/python/"}]},{"title":"python中的全局变量——list","slug":"list全局变量","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T06:28:04.686Z","comments":true,"path":"2020/06/27/list全局变量/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/list全局变量/","excerpt":"","text":"1 List python中list作为全局变量无需global声明的原因： https://www.cnblogs.com/yym2013/p/5915980.html python中list变量作为全局变量时，在函数中可以直接修改。 而普通变量则需要先在函数中global声明，否则会报错。 例如： 12345678a = 1def fun(): global a a = 2 b = [1,2]def fun(): b[0] = 2 在函数中直接修改list则是可以的。 原因是： 普通变量如果在函数中赋值 a = 2 会有歧义。因为它既可以是表示引用全局变量a，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global。 而对列表list变量进行赋值 b[0] = 2 则不会有歧义。它是“明确的”，因为如果把b当作是局部变量的话，它会报KeyError，所以它只能是引用全局的b,故不需要多此一举显式声明global。","categories":[{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"python","slug":"python","permalink":"https://Dragonliu2018.github.io/tags/python/"}]},{"title":"区块链综述","slug":"区块链的那些事","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T04:49:48.539Z","comments":true,"path":"2020/06/27/区块链的那些事/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/区块链的那些事/","excerpt":"","text":"有人说区块链是一场伟大的实验，有人说区块链是一场革命，有人说区块链是一个世纪骗局，还有人说区块链是百年难得一遇的良机，人人参与是社会发展的必然趋势**[1]。而且，区块链的发明者中本聪是何许人也？仍然未知，无疑为其蒙上了一层神秘面纱。 这里需要指出的是不要将区块链与比特币混淆，区块链是以比特币为代表的加密货币的底层支撑技术；比特币是区块链的一个应用。巴菲特表示：“这是一个赌博的东西……有很多欺诈与之有关。比特币没有产生任何价值[2]。” 换言之，与其说比特币用来投资，倒不如说是用来投机。否定比特币并不意味着否定区块链，恰恰相反，我们应该好好领悟区块链的技术原理。国家支持区块链的技术的发展：在2019年10月24日中央政治局第十八次集体学习中，习总书记指出：区块链技术应用已延伸到数字金融、物联网、智能制造、供应链管理、数字资产交易等多个领域，要加快推动区块链技术和产业创新发展，积极推进区块链和经济社会融合发展[3]。 2020年4月20日国家发改委也正式将区块链技术纳入新基建范畴[3]**。 表明立场，谈技术。技术主要是来自于《比特币白皮书》，我跳。 01 介绍 区块链技术依靠共识机制和分布式账本，不需要第三方信用机构就可以避免双重支付问题；同时，通过“工作量证明”（POW，proof of work）及“权益证明”（proof of stake），区块链使得所有参与者可以在某些方面达成一致，无需信任单个节点，从而解决拜占庭将军问题。 比特币网络的全节点时时刻刻都在进行数学运算（挖矿、工作量证明），每个节点贡献自己的算力来竞争解决一个动态可调整的数学问题（进行 SHA256 运算的结果小于某个值），成功解决该数学问题的节点将获得一定数量的比特币以及该区块的记账权，并且该节点将当前时间段的所有交易打包计入一个新的区块，获得基于自愿原则的交易手续费，所有的交易都会经过算法处理（SHA256），并且经过验证，产生一定格式的区块并将该区块链接到主链上。整个比特币网络周而复始，比特币网络顺利运行。 中本聪在其比特币白皮书中非常详细地介绍了区块链系统的建立过程： 第１步 新的交易向全网所有节点广播； 第２步 每个节点把收到的交易都写入到一个区块中； 第３步 每个节点都在新的区块上进行计算，寻找一个工作量证明解； 第４步 某个节点找到工作量证明解时，就把其所在区块向全网进行广播； 第５步 其他节点收到广播的这个区块后对其进行验证，只有所有交易都被 验证是有效的且未被使用的之后，该区块才能被认可； 第６步 每个节点通过将此区块的哈希值作为父哈希值来进行下一个区块的 计算，表示节点认可了此区块有效。 由于每个区块都带有前一区块的特征，想要篡改一个区块的交易记录，必须要重新计算该块之后的所有区块，需要修改时间越久的区块，所花费的算力越大。一般来说，一个区块后面有 6 个区块，这个区块就无法被修改了，也就是认为这个区块可信。[6] 02 自问自答 问：比特币就是区块链吗？ 答：虽然前面有提及，但仍需再重复一遍。以比特币为代表的加密货币的底层支撑技术被称为区块链技术，比特币是区块链的一个应用。 问：为什么要设计工作量证明呢？ 答：这个问题从两个方面回答： 为了控制比特币生成的速度。中本聪的设计是比特币最多被细分到小数点后8位，之后将再也无法被细分。且第一个区块会有50个比特币奖励，每过21万个区块，比特币的产量减半。中本聪通过调节工作量证明的难度，使每一个新区块生成大概需要10分钟。所以比特币每四年产出速度减半一次，直到2140年，每一个区块的比特币将不能再被细分，这时比特币就开采完毕了，等比数列求和可得总量约为2100万个。 如果不设计工作量证明，将无法抵御黑客的攻击。例如，你在饿了么上支付了18元你的外卖费用。你作为黑客，如果想要修改这一笔交易，就必须重新玩一次这个区块上的新的跳一跳到1000分，且这笔交易所在的区块，之后的所有区块，你都必须完成游戏并修改直到你的链子是全网络最长的一条时，你才修改成功了。当然，中本聪实际设计的“游戏”要比跳一跳难的多，他会消耗全网巨大的CPU算力，只要黑客手上的算力无法达到全网算力的51%,要改变任意一笔交易将会变得很难，且难度系数会随着时间成指数增长。 03 常见攻击 0x01 doublespend 翻译为双重支付，或直译为“双花”。所表达的意思也很简单，一笔数字资产既支付给了A，又支付给了B。结合51％的攻击力一起食用。 0x02 Selfish mining ​ 目前还没有找到中文解释，先直译为“私自挖矿攻击”。正常挖矿过程中，矿工挖到矿了都会立刻广播结果，生怕别人跟我来抢这个区块。但是在Selfish mining中则不然。假设目前所有矿工都工作在区块0上。这时攻击者首先发信新的区块（区块1），他会保留刚挖到的区块，把该区块当做自己的私有链，在私有连上进行挖下一个区块。假如攻击者又挖到了第二个区块（区块2），而这时其他矿工挖到了新区块（区块1’，因为没有听到区块1，还工作在区块0上），攻击者会直接提交两个区块。因为这时候0-1-2这条链长于0-1’这条链，0-1-2会被选做主链。因此，攻击者能获得2个区块的奖励，而别人的算力浪费了，无法获得奖励。[3] 0x03 DoS &amp; DDoS 计算中的分布式拒绝服务（DDOS）攻击是一种攻击，其中犯罪者试图通过向网络充斥大量多余请求以试图使系统过载，使其用户无法使用网络资源。这是一种攻击不仅是区块链，而且任何在线服务都会受到影响。 [5] 0x04 Sybil 女巫攻击 Sybil 攻击是通过创建多个虚假身份来尝试操纵 P2P 网络。 对于观察者来说，这些不同的身份看起来像个人用户，但在幕后，单个实体一次控制所有这些假实体。特别是当您考虑在线投票时，这种类型的攻击非常重要。 我们看到 Sybil 攻击的另一个领域是社交网络，过多假账户可以引导公众的讨论。 Sybil 攻击的另一个可能用途是审查某些参与者。 许多 Sybil 节点可以围绕您的节点，并阻止它连接到网络上的其他诚实节点。这样可以防止您向网络发送或接收信息。 缓解 Sybil 攻击的一种方法是引入或提高创建身份的成本。这个成本必须仔细平衡。它必须足够低，以便不限制新参与者加入网络并创建合法身份。它同时也必须足够高，以至于在短时间内创建大量身份变得非常困难。在 PoW 区块链中，实际对交易打包的节点是挖矿节点。有一个现实世界的成本，即购买矿机的成本，与创建虚假的“采矿标识”相关联。另外，拥有大量挖掘节点仍然不足以对网络产生巨大影响。要产生大影响，你还需要大量的算力。换句话说，您需要大型计算机集群。相关的成本使 Sybil 难以对工作证明区块链发起攻击。[5] 0x05 51％的攻击力 对公共 PoW 区块链的最著名的攻击类型是 51％的攻击。51％攻击的目标是执行双重花费，这意味着将硬币同时花出去两次。要对区块链网络执行 51％的攻击，您需要控制网络的大部分哈希率或计算能力，正如名字一样，需要控制 51% 的算力才能发起攻击。 想要执行双花攻击的恶意矿工，他首先创建一个常规交易，再将其硬币存到交易所，再换成好币或其它货币。这发生在下面的40 区块中。与此同时，他们将开始私下挖出一条私链。这意味着他们将遵循通常的挖掘协议，但有两个例外。 首先，他们不会将自己的交易打包在自己的私人开采的链中。其次，他们不会将他们找到的块广播到网络，因此我们将其称为私有链。 如果他们控制大部分算力，他们的链条平均出块速度将比诚实链条快。PoW 区块链中的最长链规则，也称为中本聪共识，用于在这种情况下发生的情况。具有更多区块的分支链，被认为是有效链。 一旦攻击者收到用他们的硬币购买的货币或其他货币，他们就会将私链广播到整个网络。所有诚实的矿工将放弃诚实的链条，并开始挖掘恶意链。攻击者的交易视为从未发生过，因为攻击者未将其包含在恶意链中。攻击者仍在控制他们的资金，现在可以再次使用它们。 04 名词解释 0x01 Inter-block time This is the time elapsed between the generation of each block. For bitcoin the blocks are generated every 10 minutes, for litecoin it’s 2.5 minutes. Any value can be used but an appropriate value is usually between a few minutes; if the generation time is too fast it might destabilize the blockchain, if it’s too slow it may not attract many users[4]. 0x02 proof of work(PoW) 工作证明（Proof Of Work，POW），也称为工作量的证明。这里的工作是指找到一个合理的区块哈希值，它需要不断地进行大量的计算，计算时间取决于当前目标的难度和机器的运算速度。当一个节点找到这个值之后，就说明该节点确实经过了大量的计算，这就是工作量证明。由于验证只需对结果值进行一次哈希运算，因此ＰＯＷ的验证效率很高。 0x03 Hash 哈希（也称为散列）算法将任意长度的输入值映射为较短的固定长度的二进制值。例如，SHA256算法就是将任意长度的输入映射为长度为256位的固定长度输出，这个二进制值称为哈希值（也称为散列值）。数据的哈希值可以检验数据的完整性，一般用于快速查找和加密算法。哈希算法广泛应用于区块链中，区块链通常不保存原始数据，而是保存该数据的哈希值。 0x04 Merkle 树 Merkle树是由Ralph Merkle发明的一种基于数据哈希构建的树。区块链系统采用二叉树型的 Merkle树对该区块的所有交易进行归纳表示，同时生成该交易集合的数字签名。 0x05 时间戳服务 区块链系统通过给每一笔交易盖上正确的时间戳，以此证明在这个时刻这笔交易确实发生，交易中资金的所属权已经转移，之前资金所有者再次使用这笔资金时就会报错，从而解决重复支付问题。另外，每一个区块也会盖上正确的时间戳，从而形成一个按时间顺序发展的正确链表。 0x06 拜占庭将军问题(Byzantine failures) 拜占庭将军问题，是由莱斯利·兰伯特提出的点对点通信中的基本问题。含义是在存在消息丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。 拜占庭将军问题是一个协议问题，拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。问题是这些将军在地理上是分隔开来的，并且将军中存在叛徒。叛徒可以任意行动以达到以下目标：欺骗某些将军采取进攻行动；促成一个不是所有将军都同意的决定，如当将军们不希望进攻时促成进攻行动；或者迷惑某些将军，使他们无法做出决定。如果叛徒达到了这些目的之一，则任何攻击行动的结果都是注定要失败的，只有完全达成一致的努力才能获得胜利。[7] 05 发展现状 0x01 信息共享领域 区块链与其他行业融合的应用，其中最直接的一个领域就是信息领域。首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的P2P技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。[1] 0x02 版权保护 区块链 + 鉴证证明 流程简化：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间。 安全可靠：区块链的去中心化存储，保证没有一家机构可以任意篡改数据。 应用案例：2017年12月,微众银行 仲裁委(广州仲裁委) 杭州亦笔科技有限公司共同推出的仲裁联盟链,用于司法场景下的存证;2018年3月,广州首个 仲裁链 判决书出炉。[1] 0x03 物流链 区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。 区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。 区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。 物流链的所有节点接入区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。 应用案例：目前,入局物流链的玩家较多,包括腾讯 阿里 京东 沃尔玛等。[1] 06 参考 [1] 知乎：区块链怎么赚钱，有什么经济前景？ [2] 巴菲特:比特币是一种“赌博” 很多欺诈行为与之有关 [3] 【区块链技术】区块链技术如何赋能智能制造？ [4] Mastering Blockchain - Second Edition by Imran Bashir [5] 科普：区块链里常见的攻击 [6] 区块链技术概述 [7] 百度百科：拜占庭将军问题 回形针视频介绍：区块链到底是什么？ 比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1) 比特币交易如何防伪？私钥公钥地址啥意思？李永乐老师讲比特币(2) 拜占庭将军问题是什么？区块链如何解决防范恶意节点？ 【官方双语】想知道比特币（和其他加密货币）的原理吗？ 区块链入门教程 比特币挖矿攻击中的PAW和BSM 比特币中的挖矿攻击 区块链数字货币的9种共识机制比较 从POW到POS看区块链共识的发展 07 一些网站 寻找中本聪：Satoshi Nakamoto Institute Blockchain","categories":[{"name":"其他","slug":"其他","permalink":"https://Dragonliu2018.github.io/categories/其他/"}],"tags":[{"name":"区块链","slug":"区块链","permalink":"https://Dragonliu2018.github.io/tags/区块链/"}]},{"title":"物理机安装Ubuntu+Win10双系统","slug":"安装Ubuntu物理机(Win10+Ubuntu双系统)","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T08:05:02.477Z","comments":true,"path":"2020/06/27/安装Ubuntu物理机(Win10+Ubuntu双系统)/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/安装Ubuntu物理机(Win10+Ubuntu双系统)/","excerpt":"","text":"0 情景导入 宿舍中闲置一台华硕电脑，为充分利用资源，装上Ubuntu系统(20.04)； 搭建开发环境，练习远程开发； 目前在局域网中即可满足需求，后续可能配置内网穿透。 1 制作启动U盘 1.1 准备工具 4G以上的U盘 启动U盘制作工具：Ubuntu官方推荐的Rufus Ubuntu系统镜像：官网；（清华源下载速度快） 1.2 制作U盘 运行Rufus，一般情况下，选择插入的U盘设备，和刚下载的Ubuntu镜像，其它保持默认即可开始U盘制作，等待制作完成即可。 2 磁盘分区 打开控制面板，找到磁盘管理； 如果整个卷都用于磁盘分区，则删除卷，否则需要压缩卷，出现下面的未分配即可使用： 删除卷的话并不是抹除这部分空间，只是这部分空间会被系统保留出来，没有任何文件格式，对于这部分空间系统不会进行任何操作。它相当于一个无人区。 压缩卷就是把一个盘里面的空间抽出一部分变成一个没有任何文件格式和名称的盘，你接下来要对压缩出来的盘进行格式化操作，这样压缩出来的卷才可以用。 3 安装Ubuntu 3.1 U盘启动 将制作好的启动U盘插入到闲置电脑，重启(开机)按F2键进入BIOS界面；（进入BIOS需要按的键每个品牌的电脑不同） 在Boot Priority栏，将UEFI:***选项拖到开始，使其开机启动进入U盘； 保存修改退出即可，一会儿自动重启。 3.2 安装系统 从U盘启动后，在启动引导页选择安装Ubuntu进入Ubuntu； 一路默认选项，直到Installation type选择Something else，进入分区配置页面，找到free space，也就是在Windows系统中整好的磁盘分区； 分区 分区类型 分区位置 用于 挂载点 大小 boot(启动分区) 主分区 起始 ext4文件系统 /boot 1G-2G swap(交换空间) 逻辑分区 起始 交换分区 无 与物理内存一致 / 主分区 起始 ext4文件系统 / 剩余的空间 只有/是必须分区的，其它如果没有必要都不建议建议独立分区，按默认挂在root下就行。 点击下一步完成后续安装即可正确安装Ubuntu。 拔出U盘，重启即可使用双系统。 4 配置Ubuntu 4.1 apt换源并安装必要软件 点击Settings -&gt; About -&gt; Software Updates，选择合适的镜像； 安装必要软件： 1234sudo apt install vimsudo apt install net-toolssudo apt install makesudo apt install git * 4.2 科学上网 4.3 配置oh-my-zsh 参考Win10安装Ubuntu子系统 4.4 xshell连接 使用xshell连接，被拒绝(port 22): Connection failed 123456789# 查看服务器22端口是否启动lsof -i:22# 若没启动sudo apt-get install openssh-server openssh-client # 开启sshservice ssh startssh localhost# 此时检查22是否启动lsof -i:22 笔记本设置合盖不休眠：修改Login Manager配置文件。 12345678910111213sudo vim /etc/systemd/logind.conf### 修改 #### 找到其中一行：#HandleLidSwitch=suspend# 将其改为：HandleLidSwitch=ignore# 重启服务：重启计算机即可sudo restart systemd-logind # 或者service systemd-logind restart# 或者sudo shutdown -r now 4.5 查看硬件配置 1234567891011121314# 查看系统内核uname -a# 查看CPUcat /proc/cpuinfo | grep model\\ name# 查看内存cat /proc/meminfo | grep MemTotal# 查看显卡lspci | grep 'VGA'# 查看声卡lspci | grep -i 'Audio'# 查看网卡lspci | grep -i 'Network'# 查看硬盘df -lh 5 参考 装了5次Ubuntu，告诉你win10+Ubuntu双系统的正确打开方式","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"}],"tags":[]},{"title":"python读取文件整理","slug":"读取文件","date":"2020-06-27T01:44:22.000Z","updated":"2022-01-20T04:49:09.994Z","comments":true,"path":"2020/06/27/读取文件/","link":"","permalink":"https://Dragonliu2018.github.io/2020/06/27/读取文件/","excerpt":"","text":"1234file_path = 'xxx'with open(file_path) as f: for line in f.readlines(): print(line)","categories":[{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"python","slug":"python","permalink":"https://Dragonliu2018.github.io/tags/python/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-09-13T10:30:49.000Z","updated":"2022-01-20T08:05:25.036Z","comments":true,"path":"2019/09/13/hello-world/","link":"","permalink":"https://Dragonliu2018.github.io/2019/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start install Hexo 1npm install hexo -g upgrade Hexo 1npm update hexo -g init Blog 1hexo init Create a new post 12hexo new \"My New Post\" hexo n \"My New Post\" More info: Writing Run server 1hexo server More info: Server Generate static files 12hexo generatehexo g More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment Clear cache 1hexo clean Local Testing 1234hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IP","categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://Dragonliu2018.github.io/tags/Hexo/"}]}],"categories":[{"name":"环境与工具","slug":"环境与工具","permalink":"https://Dragonliu2018.github.io/categories/环境与工具/"},{"name":"安全","slug":"安全","permalink":"https://Dragonliu2018.github.io/categories/安全/"},{"name":"其他","slug":"其他","permalink":"https://Dragonliu2018.github.io/categories/其他/"},{"name":"开发","slug":"开发","permalink":"https://Dragonliu2018.github.io/categories/开发/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://Dragonliu2018.github.io/tags/Hexo/"},{"name":"Web","slug":"Web","permalink":"https://Dragonliu2018.github.io/tags/Web/"},{"name":"CV","slug":"CV","permalink":"https://Dragonliu2018.github.io/tags/CV/"},{"name":"Crypto","slug":"Crypto","permalink":"https://Dragonliu2018.github.io/tags/Crypto/"},{"name":"C++","slug":"C","permalink":"https://Dragonliu2018.github.io/tags/C/"},{"name":"python","slug":"python","permalink":"https://Dragonliu2018.github.io/tags/python/"},{"name":"区块链","slug":"区块链","permalink":"https://Dragonliu2018.github.io/tags/区块链/"}]}