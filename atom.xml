<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon Liu</title>
  
  
  <link href="https://dragonliu2018.github.io/atom.xml" rel="self"/>
  
  <link href="https://dragonliu2018.github.io/"/>
  <updated>2022-03-26T05:41:03.350Z</updated>
  <id>https://dragonliu2018.github.io/</id>
  
  <author>
    <name>Dragon Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sqlalchemy中的聚合函数</title>
    <link href="https://dragonliu2018.github.io/2022/03/26/sqlalchemy%E4%B8%AD%E7%9A%84%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <id>https://dragonliu2018.github.io/2022/03/26/sqlalchemy%E4%B8%AD%E7%9A%84%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</id>
    <published>2022-03-26T04:10:12.000Z</published>
    <updated>2022-03-26T05:41:03.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p><strong>参考</strong>：<a href="https://www.yiibai.com/sql/sql-aggregate-functions.html" target="_blank" rel="noopener">SQL聚合函数</a></p><p>SQL聚合函数，包括：<code>AVG()</code>，<code>COUNT()</code>，<code>MIN()</code>，<code>MAX()</code>和<code>SUM()</code>。</p><p>SQL聚合函数计算一组值并返回单个值。 例如，平均函数(AVG)采用值列表并返回平均值。</p><h1 id="2-实验"><a href="#2-实验" class="headerlink" title="2 实验"></a>2 实验</h1><h2 id="2-1-构建数据表"><a href="#2-1-构建数据表" class="headerlink" title="2.1 构建数据表"></a>2.1 构建数据表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    age = Column(Integer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：批量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_batch</span><span class="params">(obj_list)</span>:</span></span><br><span class="line">    session.add_all(obj_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除TestTable表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Person.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    obj_list = [Person(name=<span class="string">"dragon"</span>, age=<span class="number">22</span>),</span><br><span class="line">                Person(name=<span class="string">"pig"</span>, age=<span class="number">23</span>),</span><br><span class="line">                Person(name=<span class="string">"SY"</span>, age=<span class="number">19</span>),</span><br><span class="line">                Person(name=<span class="string">"cat"</span>, age=<span class="number">7</span>),</span><br><span class="line">                Person(name=<span class="string">"toy"</span>, age=<span class="number">8</span>),</span><br><span class="line">                Person(name=<span class="string">"sen"</span>, age=<span class="number">23</span>),</span><br><span class="line">                Person(name=<span class="string">"tor"</span>, age=<span class="number">10</span>),</span><br><span class="line">                ]</span><br><span class="line">    insert_batch(obj_list)</span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><p>数据表如下图所示：</p><p><img src="https://s2.loli.net/2022/03/26/h8yAv2Ts1OfipVX.png" width="800" height="200" alt="图片名称" align="center" id="120"></p><p><strong>下面的聚合函数，需要导入<code>func</code>：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> func</span><br></pre></td></tr></table></figure><h2 id="2-2-AVG-返回集合中的平均值"><a href="#2-2-AVG-返回集合中的平均值" class="headerlink" title="2.2 AVG() - 返回集合中的平均值"></a>2.2 AVG() - 返回集合中的平均值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_avg = session.query(func.avg(Person.age)).scalar()  <span class="comment"># 16.0000</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这里的<code>age</code>虽然是int类型的，但是最后的平均值是“准确”的小数。</p><h2 id="2-3-COUNT-返回集合中的项目数"><a href="#2-3-COUNT-返回集合中的项目数" class="headerlink" title="2.3 COUNT() - 返回集合中的项目数"></a>2.3 COUNT() - 返回集合中的项目数</h2><p><strong>参考</strong>：<a href="https://www.jianshu.com/p/b03e20cde341" target="_blank" rel="noopener">SQLAlchemy —— query</a></p><p>返回查询结果的对象的数目，下面的例子是找到了<code>toy</code>和<code>tor</code>两个对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(Person).filter(Person.name.like(<span class="string">'to%'</span>)).count()  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><p>需要单独计算某一类对象的数量，可以用 <code>func()</code> 和 <code>group_by()</code> 配合查询：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(Person.name, func.count(Person.name)).group_by(Person.name).all()</span><br><span class="line">print(u)  <span class="comment"># [('dragon', 1), ('pig', 1), ('SY', 1), ('cat', 1), ('toy', 1), ('sen', 1), ('tor', 1)]</span></span><br></pre></td></tr></table></figure><p>返回查询得到的的数值，我们使用 <code>scalar()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u = session.query(func.count(Person.age)).scalar()  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h2 id="2-4-MIN-返回集合的最小值"><a href="#2-4-MIN-返回集合的最小值" class="headerlink" title="2.4 MIN() - 返回集合的最小值"></a>2.4 MIN() - 返回集合的最小值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_min = session.query(func.min(Person.age)).scalar()  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h2 id="2-5-MAX-返回集合的最大值"><a href="#2-5-MAX-返回集合的最大值" class="headerlink" title="2.5 MAX() - 返回集合的最大值"></a>2.5 MAX() - 返回集合的最大值</h2><p><strong>参考</strong>：<a href="https://blog.51cto.com/u_15127597/3800261" target="_blank" rel="noopener">SQLAlchemy（二)：SQLAlchemy对数据的增删改查操作、属性常用数据类型详解</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">age_max = session.query(func.max(Person.age)).scalar()  <span class="comment"># 23</span></span><br></pre></td></tr></table></figure><h2 id="2-6-SUM-返回所有值的总和"><a href="#2-6-SUM-返回所有值的总和" class="headerlink" title="2.6 SUM() - 返回所有值的总和"></a>2.6 SUM() - 返回所有值的总和</h2><p><strong>参考</strong>：<a href="https://blog.csdn.net/weixin_43303732/article/details/86476069" target="_blank" rel="noopener">sqlalchemy对数据进行求和</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">age_sum = session.query(func.sum(Person.age)).scalar()  <span class="comment"># 112</span></span><br><span class="line">age_sum = session.query(func.sum(Person.age)).filter(Person.name.like(<span class="string">"to%"</span>)).scalar()  <span class="comment"># 18</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="MySQL" scheme="https://Dragonliu2018.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL错误1366：字段编码报错</title>
    <link href="https://dragonliu2018.github.io/2022/03/26/MySQL%E9%94%99%E8%AF%AF1366%EF%BC%9A%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81%E6%8A%A5%E9%94%99/"/>
    <id>https://dragonliu2018.github.io/2022/03/26/MySQL%E9%94%99%E8%AF%AF1366%EF%BC%9A%E5%AD%97%E6%AE%B5%E7%BC%96%E7%A0%81%E6%8A%A5%E9%94%99/</id>
    <published>2022-03-26T03:32:44.000Z</published>
    <updated>2022-03-26T04:05:11.334Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>在做毕设时，操作mysql时出现了这样的一个报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1366, <span class="string">"Incorrect string value: '\\xF2\\x88\\xBF\\xB6E ...' for column 'property' at row 1"</span>)</span><br></pre></td></tr></table></figure><p><strong>原因</strong>：UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而Mysql的utf8编码最多3个字节，所以数据插不进去。</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h2 id="2-1-问题复现"><a href="#2-1-问题复现" class="headerlink" title="2.1 问题复现"></a>2.1 问题复现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span></span><br><span class="line">DB = <span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Encode</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encode</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_encode"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    property = Column(TEXT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Encode表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Encode.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    property = <span class="string">"📦 🚀 森罗万象"</span></span><br><span class="line">    insert(Encode(property=property))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><p>出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1366, <span class="string">"Incorrect string value: '\\xF0\\x9F\\x93\\xA6 \\xF0...' for column 'property' at row 1"</span>)</span><br><span class="line">[SQL: INSERT INTO string_encode (property) VALUES (%(property)s)]</span><br><span class="line">[parameters: &#123;<span class="string">'property'</span>: <span class="string">'📦 🚀 森罗万象'</span>&#125;]</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/9h9h)</span><br></pre></td></tr></table></figure><h2 id="2-2-尝试解决"><a href="#2-2-尝试解决" class="headerlink" title="2.2 尝试解决"></a>2.2 尝试解决</h2><h3 id="2-2-1-Sqlalchemy-设置表编码及引擎"><a href="#2-2-1-Sqlalchemy-设置表编码及引擎" class="headerlink" title="2.2.1 Sqlalchemy 设置表编码及引擎"></a>2.2.1 Sqlalchemy 设置表编码及引擎</h3><p><strong>参考</strong>：<a href="https://blog.csdn.net/weixin_34015336/article/details/93760632" target="_blank" rel="noopener">Sqlalchemy 设置表编码及引擎</a></p><ol><li><p>设置引擎编码方式为utf8：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>?charset=utf8'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认是utf8，所以上述代码无需修改</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br></pre></td></tr></table></figure></li><li><p>设置数据库表编码方式为utf8mb4：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Encode</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_encode"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    property = Column(TEXT)</span><br><span class="line">    __table_args__ = &#123;</span><br><span class="line">        <span class="string">"mysql_charset"</span>: <span class="string">"utf8mb4"</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>删除原来的表，再次生成表结构就可以正常插入了：</p><p><img src="https://s2.loli.net/2022/03/26/TlzLxG3yScio7EY.png" width="800" height="200" alt="图片名称" align="center" id="119"></p></li></ol><p><strong>缺点</strong>：需要重新构建表，所以旧表存在大量数据就会比较麻烦；在这种情况下可以使用下面的方法。</p><h3 id="2-2-2-修改表的字符集为utf8mb4"><a href="#2-2-2-修改表的字符集为utf8mb4" class="headerlink" title="2.2.2 修改表的字符集为utf8mb4"></a>2.2.2 修改表的字符集为utf8mb4</h3><p><strong>参考</strong>：<a href="https://blog.csdn.net/qlzy_5418/article/details/91973353" target="_blank" rel="noopener">mysql之（1366，”Incorrect string value:’\xF0\x9F\x98\x82…’ for column ‘content’ at row 1”)20</a></p><ol><li><p>navicat右击需要修改的数据表，点击设计表；</p></li><li><p>选择要修改的字段<code>property</code>，将字符集修改为<code>utf8mb4</code>，然后保存：</p><p><img src="https://s2.loli.net/2022/03/26/Ne1f5wn8GOLZqxt.png" width="800" height="300" alt="图片名称" align="center" id="120"></p></li><li><p>现在就可以正常插入了：</p><p><img src="https://s2.loli.net/2022/03/26/8pfV65gsinLQFMS.png" width="800" height="300" alt="图片名称" align="center" id="121"></p></li></ol><p><strong>缺点</strong>：这种方法仅仅改变了当前表的字符集，如果以后项目迁移，重新生成表的情况，相同的问题将会再次出现。</p><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/zz975896590/article/details/119991096" target="_blank" rel="noopener">Mysql错误1366的解决办法：Incorrect string value: ‘\xF0\x9F…’ for column ‘XXX’ at row 1</a></li><li><a href="https://blog.csdn.net/wenxingchen/article/details/118021258" target="_blank" rel="noopener">pymysql.err.DataError: (1366, “Incorrect string value: ‘\xF0\x9F\x92\xA1 \xE4…‘ for column ‘d</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="MySQL" scheme="https://Dragonliu2018.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL错误1406：超长字符串</title>
    <link href="https://dragonliu2018.github.io/2022/03/25/MySQL%E9%94%99%E8%AF%AF1406%EF%BC%9A%E8%B6%85%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://dragonliu2018.github.io/2022/03/25/MySQL%E9%94%99%E8%AF%AF1406%EF%BC%9A%E8%B6%85%E9%95%BF%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-03-25T15:52:12.000Z</published>
    <updated>2022-03-26T04:04:34.463Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>在做毕设时，操作mysql时出现了这样的一个报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1406, <span class="string">"Data too long for column 'actions' at row 1"</span>)</span><br></pre></td></tr></table></figure><p>这里显示字段的长度不够存放数据，也就是解决mysql超长字符串存储问题。</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h2 id="2-1-问题复现"><a href="#2-1-问题复现" class="headerlink" title="2.1 问题复现"></a>2.1 问题复现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span></span><br><span class="line">DB = <span class="string">'xxx'</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Length</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Length</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"string_length"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    actions = Column(String(<span class="number">10</span>))  <span class="comment"># 修改此处debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Data表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Length.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    actions = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):  <span class="comment"># 修改长度进行测试</span></span><br><span class="line">        actions += <span class="string">"SY"</span></span><br><span class="line">    insert(Length(actions=actions))</span><br><span class="line">    del_table()</span><br></pre></td></tr></table></figure><p>出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sqlalchemy.exc.DataError: (pymysql.err.DataError) (1406, <span class="string">"Data too long for column 'actions' at row 1"</span>)</span><br><span class="line">[SQL: INSERT INTO string_length (actions) VALUES (%(actions)s)]</span><br><span class="line">[parameters: &#123;<span class="string">'actions'</span>: <span class="string">'SYSYSYSYSYSYSYSYSYSY'</span>&#125;]</span><br><span class="line">(Background on this error at: https://sqlalche.me/e/14/9h9h)</span><br></pre></td></tr></table></figure><h2 id="2-2-尝试解决"><a href="#2-2-尝试解决" class="headerlink" title="2.2 尝试解决"></a>2.2 尝试解决</h2><ol><li><p>修改String的长度参数，可以解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">actions = Column(String(<span class="number">21842</span>))</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：VARCHAR(0-65535 bytes)，这里测试String的长度参数最大是<code>21842</code>，具体意思与大小还不清楚。</p></li><li><p>修改长度后就发生了之前的报错：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">actions = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">21842</span>):</span><br><span class="line">    actions += <span class="string">"SY"</span></span><br><span class="line">insert(Length(actions=actions))</span><br></pre></td></tr></table></figure><p>修改字段类型为<code>TEXT</code>可以解决上述问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">actions = Column(TEXT)  <span class="comment"># 64K TEXT</span></span><br><span class="line">actions = Column(Text(<span class="number">65536</span>))  <span class="comment"># 16M MEDIUMTEXT</span></span><br><span class="line">actions = Column(Text(<span class="number">16777216</span>))  <span class="comment"># 32M LONGTEXT</span></span><br></pre></td></tr></table></figure><p>现在字符串最大长度可以到32M，可以cover大部分情况。</p></li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/Darkman_EX/article/details/85211597" target="_blank" rel="noopener">mysql报错：“DataError: (pymysql.err.DataError) (1406, “Data too long for column ‘pwd’ at row 1”</a></li><li><a href="https://blog.csdn.net/qq_41251963/article/details/86659549" target="_blank" rel="noopener">pymysql.err.DataError: (1406, “Data too long for column ‘字段名’ at row 1”)</a></li><li><a href="https://blog.csdn.net/qq392039757/article/details/83617260" target="_blank" rel="noopener">pymysql.err.DataError: (1406, “Data too long for column ‘url’ at row 1”)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="MySQL" scheme="https://Dragonliu2018.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据类型以及sqlalchemy中的对应</title>
    <link href="https://dragonliu2018.github.io/2022/03/25/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Asqlalchemy%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%BA%94/"/>
    <id>https://dragonliu2018.github.io/2022/03/25/MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8Asqlalchemy%E4%B8%AD%E7%9A%84%E5%AF%B9%E5%BA%94/</id>
    <published>2022-03-25T13:17:46.000Z</published>
    <updated>2022-03-25T16:28:09.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-MySQL数据类型"><a href="#1-MySQL数据类型" class="headerlink" title="1 MySQL数据类型"></a>1 MySQL数据类型</h1><ul><li><strong>参考</strong>：<a href="https://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">MySQL 数据类型</a></li></ul><p>MySQL 支持多种类型，大致可以分为三类：数值、日期/时间和字符串(字符)类型。</p><h2 id="1-1-数值类型"><a href="#1-1-数值类型" class="headerlink" title="1.1 数值类型"></a>1.1 数值类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">范围（有符号）</th><th style="text-align:center">范围（无符号）</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT</td><td style="text-align:center">1 Bytes</td><td style="text-align:center">(-128，127)</td><td style="text-align:center">(0，255)</td><td style="text-align:center">小整数值</td></tr><tr><td style="text-align:center">SMALLINT</td><td style="text-align:center">2 Bytes</td><td style="text-align:center">(-32768，32767)</td><td style="text-align:center">(0，65 535)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">MEDIUMINT</td><td style="text-align:center">3 Bytes</td><td style="text-align:center">(-8388608，8388607)</td><td style="text-align:center">(0，16 777 215)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">INT或INTEGER</td><td style="text-align:center">4 Bytes</td><td style="text-align:center">(-2 147 483 648，2 147 483 647)</td><td style="text-align:center">(0，4 294 967 295)</td><td style="text-align:center">大整数值</td></tr><tr><td style="text-align:center">BIGINT</td><td style="text-align:center">8 Bytes</td><td style="text-align:center">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td style="text-align:center">(0，18 446 744 073 709 551 615)</td><td style="text-align:center">极大整数值</td></tr><tr><td style="text-align:center">FLOAT</td><td style="text-align:center">4 Bytes</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">单精度浮点数值</td></tr><tr><td style="text-align:center">DOUBLE</td><td style="text-align:center">8 Bytes</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">双精度浮点数值</td></tr><tr><td style="text-align:center">DECIMAL或DEC</td><td style="text-align:center">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">依赖于M和D的值</td><td style="text-align:center">小数值</td></tr></tbody></table></div><h2 id="1-2-日期和时间类型"><a href="#1-2-日期和时间类型" class="headerlink" title="1.2 日期和时间类型"></a>1.2 日期和时间类型</h2><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小 ( bytes)</th><th style="text-align:center">范围</th><th style="text-align:center">格式</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">DATE</td><td style="text-align:center">3</td><td style="text-align:center">1000-01-01/9999-12-31</td><td style="text-align:center">YYYY-MM-DD</td><td style="text-align:center">日期值</td></tr><tr><td style="text-align:center">TIME</td><td style="text-align:center">3</td><td style="text-align:center">‘-838:59:59’/‘838:59:59’</td><td style="text-align:center">HH:MM:SS</td><td style="text-align:center">时间值或持续时间</td></tr><tr><td style="text-align:center">YEAR</td><td style="text-align:center">1</td><td style="text-align:center">1901/2155</td><td style="text-align:center">YYYY</td><td style="text-align:center">年份值</td></tr><tr><td style="text-align:center">DATETIME</td><td style="text-align:center">8</td><td style="text-align:center">1000-01-01 00:00:00/9999-12-31 23:59:59</td><td style="text-align:center">YYYY-MM-DD HH:MM:SS</td><td style="text-align:center">混合日期和时间值</td></tr><tr><td style="text-align:center">TIMESTAMP</td><td style="text-align:center">4</td><td style="text-align:center">1970-01-01 00:00:00/2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td style="text-align:center">YYYYMMDD HHMMSS</td><td style="text-align:center">混合日期和时间值，时间戳</td></tr></tbody></table></div><h2 id="1-3-字符串类型"><a href="#1-3-字符串类型" class="headerlink" title="1.3 字符串类型"></a>1.3 字符串类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">大小</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">CHAR</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">定长字符串</td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">0-65535 bytes</td><td style="text-align:center">变长字符串</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">不超过 255 个字符的二进制字符串</td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center">0-255 bytes</td><td style="text-align:center">短文本字符串</td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">二进制形式的长文本数据</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">0-65 535 bytes</td><td style="text-align:center">长文本数据</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">二进制形式的中等长度文本数据</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">0-16 777 215 bytes</td><td style="text-align:center">中等长度文本数据</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">二进制形式的极大文本数据</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">0-4 294 967 295 bytes</td><td style="text-align:center">极大文本数据</td></tr></tbody></table></div><ul><li>char(n) 和 varchar(n) 中括号中 n 代表字符的个数，并不代表字节个数，比如 CHAR(30) 就可以存储 30 个字符。</li><li>CHAR 和 VARCHAR 类型类似，但它们保存和检索的方式不同。它们的最大长度和是否尾部空格被保留等方面也不同。在存储或检索过程中不进行大小写转换。</li><li>BINARY 和 VARBINARY 类似于 CHAR 和 VARCHAR，不同的是它们包含二进制字符串而不要非二进制字符串。也就是说，它们包含字节字符串而不是字符字符串。这说明它们没有字符集，并且排序和比较基于列值字节的数值值。</li><li>BLOB 是一个二进制大对象，可以容纳可变数量的数据。有 4 种 BLOB 类型：TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB。它们区别在于可容纳存储范围不同。</li><li>有 4 种 TEXT 类型：TINYTEXT、TEXT、MEDIUMTEXT 和 LONGTEXT。对应的这 4 种 BLOB 类型，可存储的最大长度不同，可根据实际情况选择。</li></ul><h1 id="2-MySQL、sqlalchemy与Python数据类型对应"><a href="#2-MySQL、sqlalchemy与Python数据类型对应" class="headerlink" title="2 MySQL、sqlalchemy与Python数据类型对应"></a>2 MySQL、sqlalchemy与Python数据类型对应</h1><div class="table-container"><table><thead><tr><th style="text-align:center">Mysql类型</th><th style="text-align:center">sqlalchemy类型</th><th style="text-align:center">python类型</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">TINYINT(1B)</td><td style="text-align:center">Boolean</td><td style="text-align:center">bool</td><td style="text-align:center">布尔值</td></tr><tr><td style="text-align:center">SMALLINT(2B)</td><td style="text-align:center">SmallInteger</td><td style="text-align:center">int</td><td style="text-align:center">取值范围较小，一般为16位</td></tr><tr><td style="text-align:center">MEDIUMINT(3B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">INT或INTEGER(4B)</td><td style="text-align:center">Integer</td><td style="text-align:center">int</td><td style="text-align:center">普通整数，一般32位</td></tr><tr><td style="text-align:center">BIGINT(8B)</td><td style="text-align:center">BigInteger</td><td style="text-align:center">int/long</td><td style="text-align:center">不限精度的整数</td></tr><tr><td style="text-align:center">FLOAT(4B)</td><td style="text-align:center">Float</td><td style="text-align:center">float</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">DOUBLE(8B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">DECIMAL或DEC</td><td style="text-align:center">Numeric</td><td style="text-align:center">decimal.Decimal</td><td style="text-align:center">定点数</td></tr><tr><td style="text-align:center">DATE(3B)</td><td style="text-align:center">Date</td><td style="text-align:center">datetime.date</td><td style="text-align:center">日期</td></tr><tr><td style="text-align:center">TIME(3B)</td><td style="text-align:center">Time</td><td style="text-align:center">date.time</td><td style="text-align:center">时间</td></tr><tr><td style="text-align:center">YEAR(1B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">DATETIME(8B)</td><td style="text-align:center">DateTime</td><td style="text-align:center">datetime.datetime</td><td style="text-align:center">日期和时间</td></tr><tr><td style="text-align:center">TIMESTAMP(4B)</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">CHAR</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">VARCHAR</td><td style="text-align:center">String</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，而且String后面需要长度参数，否则报错</td></tr><tr><td style="text-align:center">TINYBLOB</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">TINYTEXT</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">BLOB</td><td style="text-align:center">LargeBinary</td><td style="text-align:center">str</td><td style="text-align:center">二进制文件，64K=65535bytes</td></tr><tr><td style="text-align:center">TEXT</td><td style="text-align:center">Text</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，64K=65535bytes(255bytes)</td></tr><tr><td style="text-align:center">MEDIUMBLOB</td><td style="text-align:center">LargeBinary(65536)</td><td style="text-align:center">str</td><td style="text-align:center">二进制，16M=16777215bytes</td></tr><tr><td style="text-align:center">MEDIUMTEXT</td><td style="text-align:center">Text(65536)</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，16M=16777215bytes</td></tr><tr><td style="text-align:center">LONGBLOB</td><td style="text-align:center">LargeBinary(16777216)</td><td style="text-align:center">str</td><td style="text-align:center">二进制，32M=4294967295bytes</td></tr><tr><td style="text-align:center">LONGTEXT</td><td style="text-align:center">Text(16777216)</td><td style="text-align:center">str</td><td style="text-align:center">变长字符串，32M=4294967295bytes</td></tr><tr><td style="text-align:center">ENUM</td><td style="text-align:center">Enum</td><td style="text-align:center">str</td><td style="text-align:center">一组字符串</td></tr></tbody></table></div><h1 id="3-代码实战"><a href="#3-代码实战" class="headerlink" title="3 代码实战"></a>3 代码实战</h1><h2 id="3-1-建立MySQL表"><a href="#3-1-建立MySQL表" class="headerlink" title="3.1 建立MySQL表"></a>3.1 建立MySQL表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql的用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql的密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"data_type"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    booleanData = Column(Boolean(<span class="number">0</span>))  <span class="comment"># TINYINT(1B)</span></span><br><span class="line">    smallInteger = Column(SmallInteger)  <span class="comment"># SMALLINT(2B)</span></span><br><span class="line">    integer = Column(Integer)  <span class="comment"># INT或INTEGER(4B)</span></span><br><span class="line">    bigInteger = Column(BigInteger)  <span class="comment"># BIGINT(8B)</span></span><br><span class="line">    floatData = Column(Float)  <span class="comment"># FLOAT(4B)</span></span><br><span class="line">    numericData = Column(Numeric)  <span class="comment"># DECIMAL或DEC</span></span><br><span class="line">    dateData = Column(Date)  <span class="comment"># DATE(3B)</span></span><br><span class="line">    timeData = Column(Time)  <span class="comment"># TIME(3B)</span></span><br><span class="line">    dateTime = Column(DateTime)  <span class="comment"># DATETIME(8B)</span></span><br><span class="line">    stringData = Column(String(<span class="number">250</span>))  <span class="comment"># VARCHAR</span></span><br><span class="line">    textData = Column(Text)</span><br><span class="line">    mediumText = Column(Text(<span class="number">65536</span>))</span><br><span class="line">    longText = Column(Text(<span class="number">16777216</span>))</span><br><span class="line">    largeBinary = Column(LargeBinary)</span><br><span class="line">    mediumBlob = Column(LargeBinary(<span class="number">65536</span>))</span><br><span class="line">    longBlob = Column(LargeBinary(<span class="number">16777216</span>))</span><br><span class="line">    enumData = Column(Enum(<span class="string">'father'</span>, <span class="string">'mother'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Data表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Data.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">"test data type"</span>)</span><br><span class="line">    <span class="comment"># del_table()</span></span><br></pre></td></tr></table></figure><h2 id="3-2-MySQL表结构"><a href="#3-2-MySQL表结构" class="headerlink" title="3.2 MySQL表结构"></a>3.2 MySQL表结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DESC data_type;</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br><span class="line">| Field        | Type                    | Null | Key | Default | Extra          |</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br><span class="line">| id           | int                     | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| booleanData  | tinyint(1)              | YES  |     | NULL    |                |</span><br><span class="line">| smallInteger | smallint                | YES  |     | NULL    |                |</span><br><span class="line">| <span class="built_in">integer</span>      | int                     | YES  |     | NULL    |                |</span><br><span class="line">| bigInteger   | bigint                  | YES  |     | NULL    |                |</span><br><span class="line">| floatData    | <span class="built_in">float</span>                   | YES  |     | NULL    |                |</span><br><span class="line">| numericData  | decimal(10,0)           | YES  |     | NULL    |                |</span><br><span class="line">| dateData     | date                    | YES  |     | NULL    |                |</span><br><span class="line">| timeData     | time                    | YES  |     | NULL    |                |</span><br><span class="line">| dateTime     | datetime                | YES  |     | NULL    |                |</span><br><span class="line">| stringData   | varchar(250)            | YES  |     | NULL    |                |</span><br><span class="line">| textData     | text                    | YES  |     | NULL    |                |</span><br><span class="line">| mediumText   | mediumtext              | YES  |     | NULL    |                |</span><br><span class="line">| longText     | longtext                | YES  |     | NULL    |                |</span><br><span class="line">| largeBinary  | blob                    | YES  |     | NULL    |                |</span><br><span class="line">| mediumBlob   | mediumblob              | YES  |     | NULL    |                |</span><br><span class="line">| longBlob     | longblob                | YES  |     | NULL    |                |</span><br><span class="line">| enumData     | enum(<span class="string">'father'</span>,<span class="string">'mother'</span>) | YES  |     | NULL    |                |</span><br><span class="line">+--------------+-------------------------+------+-----+---------+----------------+</span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://www.cnblogs.com/hzjdpawn/p/12893270.html" target="_blank" rel="noopener">Flask SQLAlchemy 数据类型和数据库的对应关系 </a></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="MySQL" scheme="https://Dragonliu2018.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>修复TortoiseGit文件夹和文件状态图标不显示问题</title>
    <link href="https://dragonliu2018.github.io/2022/03/25/%E4%BF%AE%E5%A4%8DTortoiseGit%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <id>https://dragonliu2018.github.io/2022/03/25/%E4%BF%AE%E5%A4%8DTortoiseGit%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%9B%BE%E6%A0%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-25T10:58:15.000Z</published>
    <updated>2022-03-25T11:11:40.257Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>今天打开git仓库项目，突然发现文件夹和文件状态图标不再显示。</p><h1 id="2-解决-修改注册表Overlay的值"><a href="#2-解决-修改注册表Overlay的值" class="headerlink" title="2 解决(修改注册表Overlay的值)"></a>2 解决(修改注册表Overlay的值)</h1><p>参考：<a href="https://www.cnblogs.com/xiesong/p/5761352.html" target="_blank" rel="noopener">【随记】修复TortoiseGit文件夹和文件状态图标不显示问题</a></p><ol><li><p>按<code>Win+R</code>键打开运行对话框，输入 <code>regedit</code> ，打开注册表；</p></li><li><p>在注册表中找到 <code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\ShellIconOverlayIdentifiers</code></p></li><li><p>修改tortoise相关的名称（如在名称前加一个空格前缀）使其置于开始位置：</p><p><img src="https://s2.loli.net/2022/03/25/fvyk7c52IzhD1HQ.png" width="900" height="400" alt="图片名称" align="center" id="117"></p></li><li><p>重启电脑，图标正常显示：</p><p><img src="https://s2.loli.net/2022/03/25/Ca8BDKsJQLfoqnY.png" width="900" height="300" alt="图片名称" align="center" id="118"></p></li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/mcsbary/article/details/90665192" target="_blank" rel="noopener">TortoiseGit 显示文件状态图标</a></li><li><a href="https://blog.csdn.net/quantum7/article/details/84639445" target="_blank" rel="noopener">解决TortoiseGit文件夹和文件状态图标不显示问题</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>借助gitbook与Gitee Pages服务搭建静态网站</title>
    <link href="https://dragonliu2018.github.io/2022/03/25/%E5%80%9F%E5%8A%A9gitbook%E4%B8%8EGitee-Pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/"/>
    <id>https://dragonliu2018.github.io/2022/03/25/%E5%80%9F%E5%8A%A9gitbook%E4%B8%8EGitee-Pages%E6%9C%8D%E5%8A%A1%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99/</id>
    <published>2022-03-25T09:03:12.000Z</published>
    <updated>2022-03-25T09:40:56.312Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>在做PA助教，需要将讲义重新部署下，静态网站。讲义仓库在Gitee，所以使用 <code>gitbook + Gitee Pages</code> 实现该需求。本文将以自己的<code>Algorithm</code>仓库进行演示：</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><p>主要参考：<a href="https://zhuanlan.zhihu.com/p/34946169" target="_blank" rel="noopener">使用 Gitbook 打造你的电子书</a></p><h2 id="2-1-本地安装gitbook"><a href="#2-1-本地安装gitbook" class="headerlink" title="2.1 本地安装gitbook"></a>2.1 本地安装gitbook</h2><h3 id="2-1-1-安装gitbook"><a href="#2-1-1-安装gitbook" class="headerlink" title="2.1.1 安装gitbook"></a>2.1.1 安装gitbook</h3><p>环境要求：</p><ul><li>NodeJS（推荐使用v4.0.0及以上版本）</li><li>Windows，Linux，Unix 或 Mac OS X</li></ul><p>Windows下在cmd中输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gitbook-cli -g</span><br></pre></td></tr></table></figure><p>执行下面的命令，查看 GitBook 版本，以验证安装成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook -V</span><br></pre></td></tr></table></figure><h3 id="2-1-2-GitBook-项目结构"><a href="#2-1-2-GitBook-项目结构" class="headerlink" title="2.1.2 GitBook 项目结构"></a>2.1.2 GitBook 项目结构</h3><p>GitBook使用简单的目录结构。在 SUMMARY （即 SUMMARY.md 文件）中列出的所有 Markdown / Asciidoc 文件将被转换为 HTML。</p><p>一个基本的 GitBook 电子书结构通常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── book.json</span><br><span class="line">├── README.md</span><br><span class="line">├── SUMMARY.md</span><br><span class="line">├── chapter-1/</span><br><span class="line">|   ├── README.md</span><br><span class="line">|   └── something.md</span><br><span class="line">└── chapter-2/</span><br><span class="line">    ├── README.md</span><br><span class="line">    └── something.md</span><br></pre></td></tr></table></figure><p>GitBook 特殊文件的功能：</p><div class="table-container"><table><thead><tr><th style="text-align:center">文件</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">book.json</td><td style="text-align:center">配置数据、包括插件配置(可选)</td></tr><tr><td style="text-align:center">README.md</td><td style="text-align:center">电子书的前言或每个文件夹的简介(必选)</td></tr><tr><td style="text-align:center">SUMMARY.md</td><td style="text-align:center">电子书目录(可选)</td></tr><tr><td style="text-align:center">GLOSSARY.md</td><td style="text-align:center">词汇/注释术语列表(可选)</td></tr></tbody></table></div><h3 id="2-1-3-创建book-json与SUMMARY-md"><a href="#2-1-3-创建book-json与SUMMARY-md" class="headerlink" title="2.1.3 创建book.json与SUMMARY.md"></a>2.1.3 创建book.json与SUMMARY.md</h3><ul><li>参考：<a href="https://www.jianshu.com/p/2160f1ba68a0" target="_blank" rel="noopener">Gitbook根据目录生成Summary.md</a></li></ul><p><code>book.json</code> 文件需要自己创建，<code>SUMMARY.md</code>文件可以使用插件(gitbook-plugin-summary)自动生成。</p><p>安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i gitbook-plugin-summary --save</span><br></pre></td></tr></table></figure><p>在<code>Algorithm</code>项目根目录创建 <code>book.json</code> 文件，并输入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"plugins"</span>: [ </span><br><span class="line"><span class="string">"summary"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-4-目录顺序"><a href="#2-1-4-目录顺序" class="headerlink" title="2.1.4 目录顺序"></a>2.1.4 目录顺序</h3><p>关于数字序号的顺序：<code>Ch10</code>、<code>Ch11</code>、<code>Ch1</code>、<code>Ch2</code>、<code>Ch3</code>、<code>Ch4</code>…</p><p>所以需要修改序号：<code>Ch1</code>、<code>Ch2</code>、<code>Ch3</code>、<code>Ch4</code>、…、<code>Ch10</code>、<code>Ch11</code></p><h3 id="2-1-5-数学公式"><a href="#2-1-5-数学公式" class="headerlink" title="2.1.5 数学公式"></a>2.1.5 数学公式</h3><p>使用<code>mathjax</code>，但是不支持行内公式，效果不好，后续再看怎么解决这一块。</p><p>参考：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/132638228" target="_blank" rel="noopener">gitbook使用mathjax</a></li><li><a href="https://blog.csdn.net/qq_42898299/article/details/106779945" target="_blank" rel="noopener">gitbook采坑笔记（一：Mathjax）</a></li></ul><h3 id="2-1-6-构建与启动服务"><a href="#2-1-6-构建与启动服务" class="headerlink" title="2.1.6 构建与启动服务"></a>2.1.6 构建与启动服务</h3><p>使用下面的命令，会在项目的目录下生成一个 <code>_book</code> 目录，里面的内容为静态站点的资源文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook build</span><br></pre></td></tr></table></figure><p>使用下列命令会运行一个 web 服务, 通过 <code>http://localhost:4000/</code> 可以预览书籍：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitbook serve</span><br></pre></td></tr></table></figure><p>至此，<code>Algorithm</code>仓库对应的静态网站已经部署成功。</p><h2 id="2-2-实现在线访问"><a href="#2-2-实现在线访问" class="headerlink" title="2.2 实现在线访问"></a>2.2 实现在线访问</h2><p>在Gitee上打开<code>Algorithm</code>仓库，点击<code>服务</code>标签，选择<code>Gitee Pages</code>图标。</p><p><strong>注意</strong>：Gitee Pages服务需要实名认证，审核需要数个工作日。</p><p><img src="https://s2.loli.net/2022/03/25/w3mcMnqHIf4dyUG.png" width="800" height="400" alt="图片名称" align="center" id="116"></p><p> <strong>部署目录需要是<code>_book</code></strong></p><p>现在访问 <a href="http://dragon-liu.gitee.io/algorithm" target="_blank" rel="noopener">http://dragon-liu.gitee.io/algorithm</a> 即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>【恶意家族进化分析】勒索病毒WannaCry家族</title>
    <link href="https://dragonliu2018.github.io/2022/03/10/%E3%80%90%E6%81%B6%E6%84%8F%E5%AE%B6%E6%97%8F%E8%BF%9B%E5%8C%96%E5%88%86%E6%9E%90%E3%80%91%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92WannaCry%E5%AE%B6%E6%97%8F/"/>
    <id>https://dragonliu2018.github.io/2022/03/10/%E3%80%90%E6%81%B6%E6%84%8F%E5%AE%B6%E6%97%8F%E8%BF%9B%E5%8C%96%E5%88%86%E6%9E%90%E3%80%91%E5%8B%92%E7%B4%A2%E7%97%85%E6%AF%92WannaCry%E5%AE%B6%E6%97%8F/</id>
    <published>2022-03-10T07:48:19.000Z</published>
    <updated>2022-03-10T12:42:11.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>WannaCry（又叫Wanna Decryptor），一种<strong>加密型勒索软件兼蠕虫病毒</strong>（Encrypting Ransomware Worm），大小3.3MB，由不法分子利用NSA（National Security Agency，美国国家安全局）泄露的危险漏洞“EternalBlue”（永恒之蓝）进行传播，为WanaCrypt0r 1.0的变种。</p><p><img src="https://s2.loli.net/2022/03/10/8HeVcJj9ELopBkn.png" width="600" height="400" alt="图片名称" align="center" id="106"></p><p>恶意软件数据集中的家族标签：<code>Trojan.Ransom.WannaCryptor.A</code>、<code>Trojan.Ransom.WannaCryptor.H</code></p><ul><li><a href>百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/WannaCry#cite_note-trendmicro-12" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="2-进化"><a href="#2-进化" class="headerlink" title="2 进化"></a>2 进化</h1><h2 id="2-1-WanaCrypt0r-1-0"><a href="#2-1-WanaCrypt0r-1-0" class="headerlink" title="2.1 WanaCrypt0r 1.0"></a>2.1 WanaCrypt0r 1.0</h2><h2 id="2-2-WannaCry"><a href="#2-2-WannaCry" class="headerlink" title="2.2 WannaCry"></a>2.2 WannaCry</h2><h2 id="2-3-WannaSister"><a href="#2-3-WannaSister" class="headerlink" title="2.3 WannaSister"></a>2.3 WannaSister</h2><h1 id="3-进化图示"><a href="#3-进化图示" class="headerlink" title="3 进化图示"></a>3 进化图示</h1><p><img src="https://s2.loli.net/2022/03/10/takqNpIlwMs82VT.png" width="800" height="500" alt="图片名称" align="center" id="107"></p><div class="table-container"><table><thead><tr><th style="text-align:center">对比项</th><th style="text-align:center">WannaCry1.0版</th><th style="text-align:center">WannaCry2.0版</th></tr></thead><tbody><tr><td style="text-align:center">时间戳</td><td style="text-align:center">未修改（最早2017.3.27）</td><td style="text-align:center">被修改</td></tr><tr><td style="text-align:center">标题</td><td style="text-align:center">Wanna Decryptor 1.0</td><td style="text-align:center">Wana Decrypt0r 2.0</td></tr><tr><td style="text-align:center">c.wry(配置文件其中包含比特币钱包地址和下载TOR地址等)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">b.wry(!WannaCryptor!.bmp桌面图片)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">r.wry(!Please Read Me!.txt FAQ)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">f.wry(测试解压文件的路径)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">t.wry加密模块是一个DLL文件)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">u.wry(!WannaDecryptor!.exe可执行程序)</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">m.wry(语言文件是RTF文件格式)</td><td style="text-align:center">存在（1种语言）</td><td style="text-align:center">存在（28种语言）</td></tr><tr><td style="text-align:center">s.wnry(释放内嵌TOR包TaskData)</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">m.vbs(脚本文件创建快捷方式)</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.res</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.pky为RSA子公钥</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">00000000.eky是RSA子私钥使用RSA主公钥加密后的文件</td><td style="text-align:center">存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">taskdl.exe删除移动到TMP目录的文件</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">taskse.exe使远程会话可以看到勒索窗体</td><td style="text-align:center">不存在</td><td style="text-align:center">存在</td></tr><tr><td style="text-align:center">资源解压密码</td><td style="text-align:center">wcry@123、wcry@2016</td><td style="text-align:center">WNcry@2ol7</td></tr></tbody></table></div><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://www.sohu.com/a/140989865_114837" target="_blank" rel="noopener">https://www.sohu.com/a/140989865_114837</a></li><li><a href="https://www.qq.com/a/20170614/057733.htm" target="_blank" rel="noopener">https://www.qq.com/a/20170614/057733.htm</a></li><li><a href="https://www.chinanews.com.cn/m/sh/2017/05-16/8225594.shtml" target="_blank" rel="noopener">https://www.chinanews.com.cn/m/sh/2017/05-16/8225594.shtml</a></li><li><a href="https://www.antiy.com/response/wannacry.html" target="_blank" rel="noopener">https://www.antiy.com/response/wannacry.html</a></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="安全" scheme="https://Dragonliu2018.github.io/categories/安全/"/>
    
    
  </entry>
  
  <entry>
    <title>《围城》书籍</title>
    <link href="https://dragonliu2018.github.io/2022/03/10/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
    <id>https://dragonliu2018.github.io/2022/03/10/%E3%80%8A%E5%9B%B4%E5%9F%8E%E3%80%8B%E4%B9%A6%E7%B1%8D/</id>
    <published>2022-03-10T02:10:34.000Z</published>
    <updated>2022-03-10T04:48:51.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>《围城》是一幅栩栩如生的世井百态图，人生的酸甜苦辣千般滋味均在其中得到了淋漓尽致的体现。钱钟书先生将自己的语言天才并入极其渊博的知识，再添加上一些讽刺主义的幽默调料，以一书而定江山。《围城》显示给我们一个真正的聪明人是怎样看人生，又怎样用所有作家都必得使用的文字来表述自己的“观”和“感”的。</p><h1 id="2-作者"><a href="#2-作者" class="headerlink" title="2 作者"></a>2 作者</h1><p>钱锺书（1910年11月21日－1998年12月19日），原名仰先，字哲良，后改名锺书，字默存，号槐聚，曾用笔名中书君，男，江苏无锡人，中国作家、文学研究家。晓畅多种外文，包括英、法、德语，亦懂拉丁文、意大利文、西班牙文等。台湾作家、诗人兼讲座教授余光中分析当代中文时，常称道钱西学列于中国人之第一流，两岸三地之作家如陶杰、宋淇，行文之时，亦多交许赞之。</p><ul><li><a href="https://baike.baidu.com/item/%E9%92%B1%E9%94%BA%E4%B9%A6/139034#4_3" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E9%8C%A2%E9%8D%BE%E6%9B%B8" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a href="#3-摘抄" class="headerlink" title="3 摘抄"></a>3 摘抄</h1><p>xxx</p><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p>昨晚读到46%(方鸿渐去往三闾大学的途中)，实在读不下去了，遂罢；等年龄大些，成熟些，再来续读。</p><p>文章开始男主方鸿渐就与周淑英（父亲自作主张订婚）、鲍小姐（露水情缘）、苏小姐（苏小姐妥协的结果）、唐小姐（貌似是白月光）产生爱情关系。一方面不太欣赏这样快餐式的爱情，另一方面自己还是对美好爱情具有种种憧憬。</p><p>豆瓣一用户的<a href="https://m.douban.com/book/comment/702501983?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">评论</a>：</p><blockquote><p>时隔多年重读，钟书先生的幽默、老辣、聪明、刻薄仍让人拍案激赏。无论是方鸿渐，还是孙柔嘉，抑或苏文纨，他们的寻常人生，不过就像苏小姐的爱情，起初因为“看得太名贵了，不肯随便施与”，及至遭遇现实的损耗，就只能迅速缴械、自怅自悔了，如此过了十几年，恐怕也只能借年轻人的生气来温暖自己的衰朽。深于一切语言、一切啼笑，“围城”内外，饱含对人生的讽刺和感伤。</p></blockquote><p>微信短视频上南师郦波教授的一段话：</p><blockquote><p>我突然想起方文山老师那首著名的”天青色等烟雨，而我在等你”，这句话是有讲究的。天青色的那个釉很难烧，他要等，他一定要等到下雨的时候，才开火烧那个，他要那个温度和湿度刚好。你不知道什么时候天会下雨，你就在这等啊，等雨一来的时候你开始烧，刚好温度湿度都特别好的时候，那个最美的天青色就出来了。所以你不知道你的另一半会什么时候出现，你只能用你的生命去等，一定有一刻，你刚好在他刚好来，你们的天青色。</p></blockquote><p>台大教授欧丽娟在B站上的一段视频也蛮不错的：<a href="https://www.bilibili.com/video/BV1Jm4y1R7N9?spm_id_from=333.999.0.0" target="_blank" rel="noopener">视频链接</a></p><blockquote><p>我们现代人的自由恋爱 很好玩呐 </p><p>有太多的形态是<strong>因为误会而结合 因为了解而分开</strong> 得之我姓 不得我命 所以啊 很多的恋爱失败就是因为发现彼此不适合 </p><p>这么这么多的恋爱经验里面告诉我们说：<strong>你不应该改变你自己 可是你因为这场突如其来的一种迷穴 而让那个强大的爱情完全改变了自己</strong> 老实说 这恐怕就是灾难的开始 因为你已经变得不是你</p><p>真的 <strong>不要误以为你对一个人可以为所欲为 用来证明你们之间情感亲密</strong> 这真的是一个谬论 可是 这个谬论太普及 甚至呢 被当成是一个错误的爱情的版本 对于爱情的定义里面就是说 我爱你 因为世上有你 所以我爱你 你是因为有什么条件的 不是因为计算过的 正因为有你 所以我觉得这个世界很圆满 我觉得我的生命也很完整 爱情就是这么样的不讲道理 也因为他的不讲道理 使得这个爱情 不也有一种我们最喜欢的一种浪漫性质吗？<strong>我不是因为计算过了 才爱上你 而这样的爱呢 也不会因为有一个更好的人 你就被取代掉 这不就是真正的爱情吗？</strong></p><p>我很希望 这不要让你们的爱情破灭 因为你们都还蛮 20岁很浪漫哈 但是我总觉得浪漫 固然很美 可是脚踏实地 他才会茁壮 也才会伟大哈 他绝对不是一个美丽的幻想而已</p><p><strong>爱 并非存在于相互的凝视 而是 两个人一起望向 外在的同一方向</strong></p></blockquote><p>回头想想，大学四年马上结束，但是还没吃过二食堂的冒菜，也许下一个中午就去尝尝，也许还没来得及去就毕业了。</p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><p>xxx</p><h1 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6 拓展"></a>6 拓展</h1><p>xxx</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="书评" scheme="https://Dragonliu2018.github.io/tags/书评/"/>
    
  </entry>
  
  <entry>
    <title>python解决循环引用问题</title>
    <link href="https://dragonliu2018.github.io/2022/03/09/python%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/"/>
    <id>https://dragonliu2018.github.io/2022/03/09/python%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-09T08:11:23.000Z</published>
    <updated>2022-03-09T12:17:30.843Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>当项目中的模块过多，或功能划分不够清晰时会出现循环引用的问题。最近在做毕设，涉及后台管理系统时出现循环引用的问题。</p><p>主要copy于：<a href="https://www.jianshu.com/p/a1e91cc53b07" target="_blank" rel="noopener">python解决循环引用问题</a></p><h1 id="2-示例"><a href="#2-示例" class="headerlink" title="2 示例"></a>2 示例</h1><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moduleB <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">    b()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br></pre></td></tr></table></figure><p>运行<code>moduleA.py</code>出现以下报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ImportError: cannot import name <span class="string">'b'</span> from partially initialized module <span class="string">'moduleB'</span> (most likely due to a circular import)</span><br></pre></td></tr></table></figure><p>导入其实是要将 <code>被导入模块所有的代码都执行一遍，遇到函数和类的定义会作申明</code>。回到循环引用中，首先导入B，进入B中，发现B中又导入了A又回到A中，但是A又导入B这就形成了循环引用。</p><h1 id="3-解决"><a href="#3-解决" class="headerlink" title="3 解决"></a>3 解决</h1><h2 id="3-1-直接导入模块名，通过模块调用其中的函数"><a href="#3-1-直接导入模块名，通过模块调用其中的函数" class="headerlink" title="3.1 直接导入模块名，通过模块调用其中的函数"></a>3.1 直接导入模块名，通过模块调用其中的函数</h2><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleB</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'aaaaaaaa'</span></span><br><span class="line">    moduleB.b()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'cccccc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moduleA</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'bbbbbbbbbb'</span></span><br><span class="line"></span><br><span class="line">    moduleA.c()</span><br></pre></td></tr></table></figure><h2 id="3-2-使用延迟导入-lazy-import"><a href="#3-2-使用延迟导入-lazy-import" class="headerlink" title="3.2 使用延迟导入(lazy import)"></a>3.2 使用延迟导入(lazy import)</h2><p>在需要用的函数内部导入，或是在底部导入。</p><p><code>moduleA.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不变</span></span><br><span class="line"><span class="keyword">from</span> moduleB <span class="keyword">import</span> b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'aaaaaaaa'</span>)</span><br><span class="line">    b()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">c</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'cccc'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a()</span><br></pre></td></tr></table></figure><p><code>moduleB.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">b</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">from</span> moduleA <span class="keyword">import</span> c</span><br><span class="line">    print(<span class="string">'bbbbbbbbbb'</span>)</span><br><span class="line">    c()</span><br></pre></td></tr></table></figure><h2 id="3-3-重新设计代码结构，将代码和并或者分离"><a href="#3-3-重新设计代码结构，将代码和并或者分离" class="headerlink" title="3.3 重新设计代码结构，将代码和并或者分离"></a>3.3 重新设计代码结构，将代码和并或者分离</h2><p>将公共功能的代码分离成单独模块，或者将一些具有关系的代码合并成一个模块。</p><p>本次毕设便采用了这个方法：将一些公共功能的代码分离，config.py(数据库配置)、entity.py(实体类)</p><p><code>config.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, TEXT</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql数据库用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># 密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br></pre></td></tr></table></figure><p><code>entity.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建Report表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Report</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'report'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    report_name = Column(String(<span class="number">100</span>))</span><br><span class="line">    report_size = Column(String(<span class="number">100</span>))</span><br><span class="line">    source_info = Column(String(<span class="number">100</span>))</span><br><span class="line">    operation = Column(String(<span class="number">100</span>))</span><br><span class="line">    tag = Column(String(<span class="number">100</span>))</span><br><span class="line">    hazard_level = Column(String(<span class="number">100</span>))</span><br><span class="line">    malware_static_info = Column(TEXT())</span><br><span class="line">    malware_dynamic_info = Column(TEXT())</span><br><span class="line">    upload_time = Column(String(<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建MidFid表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MidFid</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'malware_mid_fid'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    mid = Column(Integer())  <span class="comment"># 样本id</span></span><br><span class="line">    fid = Column(Integer())  <span class="comment"># 家族id</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python列表操作之遍历</title>
    <link href="https://dragonliu2018.github.io/2022/03/08/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E9%81%8D%E5%8E%86/"/>
    <id>https://dragonliu2018.github.io/2022/03/08/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E9%81%8D%E5%8E%86/</id>
    <published>2022-03-08T07:03:09.000Z</published>
    <updated>2022-03-08T08:06:04.920Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表遍历。</p><p>主要copy于<a href="https://blog.csdn.net/whatday/article/details/100557888" target="_blank" rel="noopener">python3 遍历列表list 四种方法</a></p><h1 id="2-方法"><a href="#2-方法" class="headerlink" title="2 方法"></a>2 方法</h1><h2 id="2-1-in"><a href="#2-1-in" class="headerlink" title="2.1 in"></a>2.1 in</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    print(item_list.index(item), item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">1 b</span></span><br><span class="line"><span class="string">2 c</span></span><br><span class="line"><span class="string">3 d</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出值；如果列表中有重复值，下标会返回第一个值的下标，如上面的第二个<code>a</code>，但是这种bug只需要添加一个计数变量就解决了。</p><h2 id="2-2-enumerate"><a href="#2-2-enumerate" class="headerlink" title="2.2 enumerate()"></a>2.2 enumerate()</h2><p><code>enumerate(sequence, [start=0])</code>，返回枚举对象(元组)</p><p>参数：</p><ul><li><code>sequence</code>：一个序列、迭代器或其他支持迭代对象。</li><li><p><code>start</code>：下标起始位置。</p><p>用法实例：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> enumerate(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">(0, 'a')</span></span><br><span class="line"><span class="string">(1, 'b')</span></span><br><span class="line"><span class="string">(2, 'c')</span></span><br><span class="line"><span class="string">(3, 'd')</span></span><br><span class="line"><span class="string">(4, 'a')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index, val <span class="keyword">in</span> enumerate(item_list):</span><br><span class="line">    print(index, val)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">0 a</span></span><br><span class="line"><span class="string">1 b</span></span><br><span class="line"><span class="string">2 c</span></span><br><span class="line"><span class="string">3 d</span></span><br><span class="line"><span class="string">4 a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出值；下标会返回对应值的下标，解决了<code>2.1</code>的问题。</p><h2 id="2-3-iter-迭代器"><a href="#2-3-iter-迭代器" class="headerlink" title="2.3 iter()迭代器"></a>2.3 iter()迭代器</h2><p> <code>iter(object, [sentinel])</code>函数用来生成迭代器，返回迭代对象。</p><p> 参数：</p><ul><li><code>object</code>：支持迭代的集合对象。</li><li><code>sentinel</code>：如果传递了第二个参数，则参数 object 必须是一个可调用的对象（如，函数），此时，iter 创建了一个迭代器对象，每次调用这个迭代器对象的<strong>next</strong>()方法时，都会调用 object。</li></ul><p>用法实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> iter(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出。</p><h2 id="2-4-range-函数"><a href="#2-4-range-函数" class="headerlink" title="2.4 range()函数"></a>2.4 range()函数</h2><p><code>range(start, end, [step])</code> 函数返回类型是<code>ndarray</code>，可用<code>list()</code>返回一个整数列表，一般用在 <code>for</code> 循环中。</p><p>参数：</p><ul><li><code>start</code>：计数从 <code>start</code> 开始，默认是从 <code>0</code> 开始，例如<code>range(5)</code>等价于<code>range(0,5)</code>；</li><li><code>end</code>：计数到 <code>end</code> 结束，但不包括 <code>end</code>。例如：<code>range(0, 5)</code>是 <code>[0, 1, 2, 3, 4]</code> 没有 <code>5</code></li><li><code>step</code>：步长，默认为<code>1</code>。例如：<code>range(0, 5)</code> 等价于 <code>range(0, 5, 1)</code></li></ul><p>用法实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(item_list)):</span><br><span class="line">    print(item_list[i])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：按顺序输出。</p><h2 id="2-5-倒序遍历"><a href="#2-5-倒序遍历" class="headerlink" title="2.5 倒序遍历"></a>2.5 倒序遍历</h2><h3 id="2-5-1-reversed函数"><a href="#2-5-1-reversed函数" class="headerlink" title="2.5.1 reversed函数"></a>2.5.1 reversed函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> reversed(item_list):</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="2-5-2-range-函数"><a href="#2-5-2-range-函数" class="headerlink" title="2.5.2 range()函数"></a>2.5.2 range()函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(item_list)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">    print(item_list[i])</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h3 id="2-5-3-切片"><a href="#2-5-3-切片" class="headerlink" title="2.5.3 切片"></a>2.5.3 切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list[::<span class="number">-1</span>]:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://www.cnblogs.com/pizitai/p/6398276.html" target="_blank" rel="noopener">Python 列表(List) 的三种遍历(序号和值)方法</a></li><li><a href="https://www.cnblogs.com/GumpYan/p/12334839.html" target="_blank" rel="noopener">python列表遍历（包括倒序遍历的三种方法）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python列表操作之排序</title>
    <link href="https://dragonliu2018.github.io/2022/03/08/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%8E%92%E5%BA%8F/"/>
    <id>https://dragonliu2018.github.io/2022/03/08/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%8E%92%E5%BA%8F/</id>
    <published>2022-03-08T07:02:59.000Z</published>
    <updated>2022-03-08T08:44:39.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表排序。</p><p>主要copy于 <a href="https://www.runoob.com/python/att-list-sort.html" target="_blank" rel="noopener">菜鸟教程——Python List sort()方法</a></p><h1 id="2-sort-方法"><a href="#2-sort-方法" class="headerlink" title="2 sort()方法"></a>2 sort()方法</h1><p><code>sort()</code> 函数用于对原列表进行排序，如果指定参数，则使用比较函数指定的比较函数。</p><p><code>sort()</code>方法语法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p><strong>参数</strong>：</p><ul><li><code>cmp</code> — 可选参数, 如果指定了该参数会使用该参数的方法进行排序。</li><li><code>key</code> — 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。</li><li><code>reverse</code> — 排序规则，<strong>reverse = True</strong> 降序， <strong>reverse = False</strong> 升序（默认）。</li></ul><p><strong>返回值</strong>：</p><p>该方法没有返回值，但是会对列表的对象进行排序。</p><p>以下实例展示了 sort() 函数的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">print(item_list)  <span class="comment"># ['a', 'b', 'c', 'd', 'a']</span></span><br><span class="line">item_list.sort()</span><br><span class="line">print(item_list)  <span class="comment"># ['a', 'a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>关于<code>key</code>参数的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取列表的第二个元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">takeSecond</span><span class="params">(elem)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> elem[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">random = [(<span class="number">2</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">4</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定第二个元素排序</span></span><br><span class="line">random.sort(key=takeSecond)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出类别</span></span><br><span class="line">print(random)  <span class="comment"># [(4, 1), (2, 2), (1, 3), (3, 4)]</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python列表操作之去重</title>
    <link href="https://dragonliu2018.github.io/2022/03/06/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%8E%BB%E9%87%8D/"/>
    <id>https://dragonliu2018.github.io/2022/03/06/python%E5%88%97%E8%A1%A8%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%8E%BB%E9%87%8D/</id>
    <published>2022-03-06T12:37:31.000Z</published>
    <updated>2022-03-08T14:51:40.910Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>最近在使用python操作mysql，涉及列表操作比较多，整理一下列表去重。</p><p>主要copy于<a href="https://zhuanlan.zhihu.com/p/364610029" target="_blank" rel="noopener">Python 列表去重的4种方式及性能对比</a></p><h1 id="2-辅助数组"><a href="#2-辅助数组" class="headerlink" title="2 辅助数组"></a>2 辅助数组</h1><p>新建一个数组，遍历原数组，如果值不在新数组里便加入到新数组中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.append(item)</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>上面使用了数组作为存储对象，实际上如果我们改成集合存储去重后的结果，性能会快不少：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = set()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> unique:</span><br><span class="line">        unique.add(item)</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># &#123;'b', 'a', 'd', 'c'&#125;</span></span><br></pre></td></tr></table></figure><p>因为集合和数组的内在数据结构完全不同，集合使用了哈希表，因此速度会比列表快许多，但缺点在于无序。</p><h1 id="3-数组-gt-集合-gt-数组"><a href="#3-数组-gt-集合-gt-数组" class="headerlink" title="3 数组-&gt;集合-&gt;数组"></a>3 数组-&gt;集合-&gt;数组</h1><p>直接对数组进行集合转化，然后再转回数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = list(set(item_list))</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['d', 'a', 'b', 'c']</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这种去重方式是最快的，但正如前面所说，集合是无序的，将数组转为集合后再转为列表，就失去了原有列表的顺序。</p><h1 id="4-保留原有数组顺序的去重（dict-fromkeys-）"><a href="#4-保留原有数组顺序的去重（dict-fromkeys-）" class="headerlink" title="4 保留原有数组顺序的去重（dict.fromkeys()）"></a>4 保留原有数组顺序的去重（dict.fromkeys()）</h1><p>Python3.6+使用<code>dict.fromkeys()</code>函数，可以保留原有数组的顺序并去重：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line"></span><br><span class="line">unique = list(dict.fromkeys(item_list))</span><br><span class="line"></span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>当然，它会比单纯用集合进行去重的方式耗时稍微久一点；<code>dict.fromkeys()</code>仅在Python3.6及以上才支持。</p><hr><p>在Python3.6以下，其实也存在fromkeys函数，只不过它由collections提供：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">item_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'a'</span>]</span><br><span class="line">unique = list(OrderedDict.fromkeys(item_list))</span><br><span class="line">print(unique)  <span class="comment"># ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure><p>比 Python3.6 的内置<code>dict.fromkeys()</code>慢一些，这是因为<code>OrderedDict</code>是用纯Python实现的。</p><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>【开源代码学习--若依】代码自动生成</title>
    <link href="https://dragonliu2018.github.io/2022/03/04/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%8B%A5%E4%BE%9D%E3%80%91%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
    <id>https://dragonliu2018.github.io/2022/03/04/%E3%80%90%E5%BC%80%E6%BA%90%E4%BB%A3%E7%A0%81%E5%AD%A6%E4%B9%A0-%E8%8B%A5%E4%BE%9D%E3%80%91%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/</id>
    <published>2022-03-04T03:18:51.000Z</published>
    <updated>2022-03-07T10:35:52.548Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-创建数据表"><a href="#1-创建数据表" class="headerlink" title="1 创建数据表"></a>1 创建数据表</h1><h1 id="2-使用若依进行代码生成"><a href="#2-使用若依进行代码生成" class="headerlink" title="2 使用若依进行代码生成"></a>2 使用若依进行代码生成</h1><h1 id="3-打通前后端"><a href="#3-打通前后端" class="headerlink" title="3 打通前后端"></a>3 打通前后端</h1><h2 id="3-1-controller"><a href="#3-1-controller" class="headerlink" title="3.1 controller"></a>3.1 controller</h2><p>MalwareDynamicController.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据mid查询malware_dynamic列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"@ss.hasPermi('system:dynamic:listmid')"</span>)</span><br><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/list/&#123;mid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> TableDataInfo <span class="title">listByMid</span><span class="params">(MalwareDynamic malwareDynamic, @PathVariable(<span class="string">"mid"</span>)</span> Long mid)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;MalwareDynamic&gt; list = malwareDynamicService.selectMalwareDynamicListByMid(malwareDynamic, mid);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-service"><a href="#3-2-service" class="headerlink" title="3.2 service"></a>3.2 service</h2><p>IMalwareDynamicService.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询malware_dynamic列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> malwareDynamic malware_dynamic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> malware_dynamic集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MalwareDynamic&gt; <span class="title">selectMalwareDynamicListByMid</span><span class="params">(MalwareDynamic malwareDynamic, Long mid)</span></span>;</span><br></pre></td></tr></table></figure><p>MalwareDynamicServiceImpl.java：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据mid查询malware_dynamic列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> malwareDynamic malware_dynamic</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> malware_dynamic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;MalwareDynamic&gt; <span class="title">selectMalwareDynamicListByMid</span><span class="params">(MalwareDynamic malwareDynamic, Long mid)</span></span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> malwareDynamicMapper.selectMalwareDynamicListByMid(malwareDynamic, mid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-mapper"><a href="#3-3-mapper" class="headerlink" title="3.3 mapper"></a>3.3 mapper</h2><p>MalwareDynamicMapper.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询malware_dynamic列表</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> behavior behavior</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> behavior集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Behavior&gt; <span class="title">selectBehaviorList</span><span class="params">(Behavior behavior)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="3-4-MalwareDynamicMapper-xml"><a href="#3-4-MalwareDynamicMapper-xml" class="headerlink" title="3.4 MalwareDynamicMapper.xml"></a>3.4 MalwareDynamicMapper.xml</h2><p>MalwareDynamicMapper.xml:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-index-vue"><a href="#3-5-index-vue" class="headerlink" title="3.5 index.vue"></a>3.5 index.vue</h2><h2 id="3-6-report-js"><a href="#3-6-report-js" class="headerlink" title="3.6 report.js"></a>3.6 report.js</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">srcu/exec/exec.c: In function ‘exec_wrapper’:</span><br><span class="line">srcu/exec/exec.c:<span class="number">238</span>:<span class="number">3</span>: error: ‘<span class="built_in">strcat</span>’ accessing <span class="number">81</span> <span class="keyword">or</span> more bytes at offsets <span class="number">264</span> <span class="keyword">and</span> <span class="number">184</span> may overlap <span class="number">1</span> byte at offset <span class="number">264</span> [-Werror=<span class="keyword">restrict</span>]</span><br><span class="line">   <span class="built_in">strcat</span>(decoding.asm_buf, decoding.assembly);</span><br></pre></td></tr></table></figure><h1 id="4-无效"><a href="#4-无效" class="headerlink" title="4 无效"></a>4 无效</h1><p>有时候出现<code>接口404</code>，此时需要关闭IDEA，然后重新打开后端项目</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="若依" scheme="https://Dragonliu2018.github.io/tags/若依/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客域名</title>
    <link href="https://dragonliu2018.github.io/2022/03/01/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/"/>
    <id>https://dragonliu2018.github.io/2022/03/01/Hexo%E5%8D%9A%E5%AE%A2%E5%9F%9F%E5%90%8D/</id>
    <published>2022-03-01T08:19:26.000Z</published>
    <updated>2022-03-01T10:42:48.757Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1 问题引入"></a>1 问题引入</h1><p>今天访问博客失败，原因是之前在<a href="https://www.freenom.com/zh/freeandpaiddomains.html" target="_blank" rel="noopener">Freenom</a>上申请的域名<code>dragonliu.tk</code>已经过期。登陆再次申请时，发现已付费：</p><p><img src="https://s2.loli.net/2022/03/01/nCtPu82NslyU4pX.png" width="700" height="400" alt="图片名称" align="center" id="99"></p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h2 id="2-1-使用github默认的域名"><a href="#2-1-使用github默认的域名" class="headerlink" title="2.1 使用github默认的域名"></a>2.1 使用github默认的域名</h2><p>将<code>source</code>目录下的<code>CNAME</code>删掉，然后重新提交博客即可<code>hexo g -d</code>，然后访问<a href="https://dragonliu2018.github.io/。">https://dragonliu2018.github.io/。</a></p><p><img src="https://s2.loli.net/2022/03/01/ftXbFJzoDOeYAMy.png" width="800" height="400" alt="图片名称" align="center" id="100"></p><h2 id="2-2-重新申请其他域名"><a href="#2-2-重新申请其他域名" class="headerlink" title="2.2 重新申请其他域名"></a>2.2 重新申请其他域名</h2><ol><li><p>申请到一个新域名<code>dragonliu.gq</code>（吐槽：这个网站需要翻墙，访问速度慢，而且老是自动登出，订单容易提交失败，域名到期无提醒。）此时这个域名还Ping不通：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping dragonliu.gq</span><br><span class="line">Ping 请求找不到主机 dragonliu.gq。请检查该名称，然后重试。</span><br></pre></td></tr></table></figure></li><li><p>在Freenom上配置Domain：</p><p><img src="https://s2.loli.net/2022/03/01/XbWzqHvLkjuRxFl.png" width="600" height="300" alt="图片名称" align="center" id="103"></p><p><img src="https://s2.loli.net/2022/03/01/k4yW6ULHx7MoTAi.png" width="600" height="200" alt="图片名称" align="center" id="102"></p><p>这里填入github博客默认域名：</p><p><img src="https://s2.loli.net/2022/03/01/juDLbsxv4TKzXlp.png" width="600" height="300" alt="图片名称" align="center" id="104"></p></li></ol><p>​    等待几分钟后可以Ping通：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">E:\01 Blog_work\Hexo-Blog&gt;ping dragonliu.gq</span><br><span class="line"></span><br><span class="line">正在 Ping dragonliu.gq [185.199.108.153] 具有 32 字节的数据:</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=58ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=74ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=74ms TTL=53</span><br><span class="line">来自 185.199.108.153 的回复: 字节=32 时间=58ms TTL=53</span><br><span class="line"></span><br><span class="line">185.199.108.153 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 58ms，最长 = 74ms，平均 = 66ms</span><br></pre></td></tr></table></figure><ol><li><p>在<code>source</code>目录下的<code>CNAME</code>文件改为对应新域名：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dragonliu.gq</span><br></pre></td></tr></table></figure></li><li><p>然后重新提交博客即可<code>hexo g -d</code>，就可以访问新域名了 <code>dragonliu.gq</code></p></li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://segmentfault.com/a/1190000021979631" target="_blank" rel="noopener">超级详细Hexo+GitHub+阿里云域名的博客搭建教程，新手也能轻松学会</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
    <category term="Hexo" scheme="https://Dragonliu2018.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python通过SQLAlchemy操作Mysql</title>
    <link href="https://dragonliu2018.github.io/2022/03/01/Python%E6%93%8D%E4%BD%9CMysql/"/>
    <id>https://dragonliu2018.github.io/2022/03/01/Python%E6%93%8D%E4%BD%9CMysql/</id>
    <published>2022-03-01T07:01:57.000Z</published>
    <updated>2022-03-01T08:05:17.039Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>Windows下安装Mysql参考：<a href="http://dragonliu.tk/2022/02/15/Windows%E4%B8%8B%E5%AE%89%E8%A3%85MySQL/" target="_blank" rel="noopener">博客——Windows下安装MySQL</a></p><p>SQLAlchemy是用Python编程语言开发的一个开源项目。它提供了SQL工具包和ORM（对象关系映射）工具，使用MIT许可证发行。</p><h1 id="2-安装"><a href="#2-安装" class="headerlink" title="2 安装"></a>2 安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install sqlalchemy</span><br><span class="line">pip3 install pymysql</span><br></pre></td></tr></table></figure><p>本文使用MySQL作为数据库，使用pymysql作为驱动，因此需要安装pymysql。</p><h1 id="3-简单使用"><a href="#3-简单使用" class="headerlink" title="3 简单使用"></a>3 简单使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine, Column, Integer, String, TEXT</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'127.0.0.1'</span></span><br><span class="line">PORT = <span class="number">3306</span></span><br><span class="line">USERNAME = <span class="string">'xxx'</span>  <span class="comment"># mysql用户名</span></span><br><span class="line">PASSWORD = <span class="string">'xxx'</span>  <span class="comment"># mysql密码</span></span><br><span class="line">DB = <span class="string">'xxx'</span>  <span class="comment"># 数据库名称</span></span><br><span class="line"><span class="comment"># f代表可以使用&#123;&#125;引用变量</span></span><br><span class="line">DB_URI = <span class="string">f'mysql+pymysql://<span class="subst">&#123;USERNAME&#125;</span>:<span class="subst">&#123;PASSWORD&#125;</span>@<span class="subst">&#123;HOST&#125;</span>:<span class="subst">&#123;PORT&#125;</span>/<span class="subst">&#123;DB&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建引擎</span></span><br><span class="line">engine = create_engine(DB_URI)</span><br><span class="line"><span class="comment"># 创建SQLORM基类，注意这里要加参数，参数为上一步创建的引擎</span></span><br><span class="line">Base = declarative_base(engine)</span><br><span class="line"><span class="comment"># 构建session对象</span></span><br><span class="line">session = sessionmaker(engine)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建实体表Person</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">'person'</span>  <span class="comment"># 表名</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>))</span><br><span class="line">    value = Column(TEXT())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库中</span></span><br><span class="line"><span class="comment"># 即如果数据库中没有student表则创建映射表student</span></span><br><span class="line">Base.metadata.create_all()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：一个</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(obj)</span>:</span></span><br><span class="line">    session.add(obj)  <span class="comment"># 添加到session</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增：批量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_batch</span><span class="params">(obj_list)</span>:</span></span><br><span class="line">    session.add_all(obj_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">()</span>:</span></span><br><span class="line">    session.query(Person).filter(Person.name == <span class="string">'Pig'</span>).delete()</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 将查找到的对象全部修改</span></span><br><span class="line">    session.query(Person).filter(Person.name == <span class="string">'dragon'</span>).update(&#123;<span class="string">'value'</span>: <span class="string">'waiting'</span>&#125;)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：所有数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_all</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person).all()</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> item_list:</span><br><span class="line">        print(item.name, item.value)</span><br><span class="line">    <span class="comment"># 若没有此句，后面执行删除表时会卡住</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：指定列查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_in_cols</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># 若没有此句，后面执行删除表时会卡住</span></span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：获取返回数据的第一行</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_first_row</span><span class="params">()</span>:</span></span><br><span class="line">    item = session.query(Person.name).first()</span><br><span class="line">    print(item)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：使用filter()方法过滤</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_filter</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.value != <span class="string">"love"</span>).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：使用order_by()进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_order</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 默认正序</span></span><br><span class="line">    item_list = session.query(Person.name, Person.value).order_by(Person.name).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># desc()倒序</span></span><br><span class="line">    item_list = session.query(Person.name, Person.value).order_by(Person.name.desc()).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：多条件查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_multi_condition</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 多条件查询条件以,分隔默认为and</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name != <span class="string">"dragon"</span>, Person.value != <span class="string">"love"</span>).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    <span class="comment"># 使用or_连接多个条件</span></span><br><span class="line">    item_list = session.query(Person.name).filter(or_(Person.name != <span class="string">"dragon"</span>, Person.value != <span class="string">"love"</span>)).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：模糊查询</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_like</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name.like(<span class="string">'%ag%'</span>)).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：是否包含传递参数列表类元素</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_in</span><span class="params">()</span>:</span></span><br><span class="line">    item_list = session.query(Person.name).filter(Person.name.in_([<span class="string">"SY"</span>, <span class="string">"dragon"</span>])).all()</span><br><span class="line">    print(item_list)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查：计算个数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_count</span><span class="params">()</span>:</span></span><br><span class="line">    num = session.query(Person).count()</span><br><span class="line">    print(num)</span><br><span class="line">    session.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除TestTable表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">del_table</span><span class="params">()</span>:</span></span><br><span class="line">    Person.__table__.drop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    insert(Person(name=<span class="string">"SY"</span>, value=<span class="string">"afascinatinggril"</span>))</span><br><span class="line">    obj_list = [Person(name=<span class="string">"dragon"</span>, value=<span class="string">"aunreasoningboy"</span>),</span><br><span class="line">                Person(name=<span class="string">"pig"</span>, value=<span class="string">"aquerulousboy"</span>),</span><br><span class="line">                ]</span><br><span class="line">    insert_batch(obj_list)</span><br><span class="line">    delete()</span><br><span class="line">    update()</span><br><span class="line">    select_all()</span><br><span class="line">    select_in_cols()</span><br><span class="line">    select_first_row()</span><br><span class="line">    select_filter()</span><br><span class="line">    select_order()</span><br><span class="line">    select_multi_condition()</span><br><span class="line">    select_like()</span><br><span class="line">    select_in()</span><br><span class="line">    select_count()</span><br><span class="line">    del_table()</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>增删改查除了查询不设计修改操作，其他增删改都需要使用commit()方法提交事务</li><li>执行查询操作后，不执行<code>session.commit()</code>，直接执行删除表操作会卡住</li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><p><a href="https://www.cnblogs.com/minseo/p/15305003.html" target="_blank" rel="noopener">sqlalchemy的基本用法</a></p></li><li><p><a href="https://www.cnpython.com/qa/33649" target="_blank" rel="noopener">如何在SQLAlchemy中删除表？</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="MySQL" scheme="https://Dragonliu2018.github.io/tags/MySQL/"/>
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>恶意样本收集</title>
    <link href="https://dragonliu2018.github.io/2022/02/28/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E6%94%B6%E9%9B%86/"/>
    <id>https://dragonliu2018.github.io/2022/02/28/%E6%81%B6%E6%84%8F%E6%A0%B7%E6%9C%AC%E6%94%B6%E9%9B%86/</id>
    <published>2022-02-28T14:49:09.000Z</published>
    <updated>2022-03-07T03:58:36.969Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>最近开始做毕设开题报告，发现勒索病毒并没有公开可用的数据集，所以需要从开源网站上去搜集，下面对一些信息汇总。</p><h1 id="2-信息汇总"><a href="#2-信息汇总" class="headerlink" title="2 信息汇总"></a>2 信息汇总</h1><div class="table-container"><table><thead><tr><th style="text-align:center">网站</th><th style="text-align:center">简介</th></tr></thead><tbody><tr><td style="text-align:center">ACT-KingKong数据集</td><td style="text-align:center">ACT实验室数据(21474条样本，2072个家族)</td></tr><tr><td style="text-align:center"><a href="https://paper.seebug.org/421/" target="_blank" rel="noopener">恶意软件分析大合集</a></td><td style="text-align:center">教程知识汇总</td></tr><tr><td style="text-align:center"><a href="https://malshare.com/" target="_blank" rel="noopener">MalShare</a></td><td style="text-align:center">Yara规则结果</td></tr><tr><td style="text-align:center"><a href="https://virusshare.com/" target="_blank" rel="noopener">VirusShare</a></td><td style="text-align:center">静态分析结果</td></tr><tr><td style="text-align:center"><a href="https://bazaar.abuse.ch/" target="_blank" rel="noopener">Malware bazaar</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.exploit-db.com/" target="_blank" rel="noopener">Exploit Database</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.virustotal.com/gui/" target="_blank" rel="noopener">VirusTotal</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.jianshu.com/p/d46f62298cab" target="_blank" rel="noopener">MMCC微软恶意软件分类挑战数据集</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://www.secrss.com/articles/2337" target="_blank" rel="noopener">Ember数据集</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://thezoo.morirt.com/" target="_blank" rel="noopener">theZoo</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><a href="https://github.com/Endermanch/MalwareDatabase" target="_blank" rel="noopener">Github Malware Database</a></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td></tr></tbody></table></div>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="安全" scheme="https://Dragonliu2018.github.io/categories/安全/"/>
    
    
  </entry>
  
  <entry>
    <title>Python字典与字符串互转</title>
    <link href="https://dragonliu2018.github.io/2022/02/28/Python%E5%AD%97%E5%85%B8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC/"/>
    <id>https://dragonliu2018.github.io/2022/02/28/Python%E5%AD%97%E5%85%B8%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%BA%92%E8%BD%AC/</id>
    <published>2022-02-28T14:15:59.000Z</published>
    <updated>2022-02-28T14:30:53.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-字符串转为字典"><a href="#1-字符串转为字典" class="headerlink" title="1 字符串转为字典"></a>1 字符串转为字典</h1><p> 如果要将字符串转为字典，则可以使用 eval，但是原来双引号会变为单引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dict_str = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "key_a": 1,</span></span><br><span class="line"><span class="string">    "key_b": 2,</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">dict_new = eval(dict_str)</span><br><span class="line">print(type(dict_new)) <span class="comment"># &lt;class 'dict'&gt;</span></span><br><span class="line">print(dict_new) <span class="comment"># &#123;'key_a': 1, 'key_b': 2&#125;</span></span><br></pre></td></tr></table></figure><h1 id="2-字典转字符串"><a href="#2-字典转字符串" class="headerlink" title="2 字典转字符串"></a>2 字典转字符串</h1><p>将字典转为字符串的方式，可以使用 str，但是原来双引号会变为单引号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict_test = &#123;</span><br><span class="line">    <span class="string">"key_a"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"key_b"</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">dict_str = str(dict_test)</span><br><span class="line">print(type(dict_str)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(dict_str) <span class="comment"># &#123;'key_a': 1, 'key_b': 2&#125;</span></span><br></pre></td></tr></table></figure><p>使用 json.dumps，就可以保住双引号；如果不用考虑双引号，则使用 str，毕竟比 json.dumps 快了一个数量级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">dict_test = &#123;</span><br><span class="line">    <span class="string">"key_a"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"key_b"</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line">dict_str = json.dumps(dict_test)</span><br><span class="line">print(type(dict_str)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(dict_str) <span class="comment"># &#123;"key_a": 1, "key_b": 2&#125;</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/Kester_/article/details/113132295" target="_blank" rel="noopener">python字典转字符串</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python获取文件信息</title>
    <link href="https://dragonliu2018.github.io/2022/02/28/Python%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/"/>
    <id>https://dragonliu2018.github.io/2022/02/28/Python%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/</id>
    <published>2022-02-28T13:44:44.000Z</published>
    <updated>2022-02-28T14:15:33.953Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-获取文件大小，创建时间，访问时间，修改时间"><a href="#1-获取文件大小，创建时间，访问时间，修改时间" class="headerlink" title="1 获取文件大小，创建时间，访问时间，修改时间"></a>1 获取文件大小，创建时间，访问时间，修改时间</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="string">'''把时间戳转化为时间: 1479264792 to 2016-11-16 10:53:12'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TimeStampToTime</span><span class="params">(timestamp)</span>:</span></span><br><span class="line">    timeStruct = time.localtime(timestamp)</span><br><span class="line">    <span class="keyword">return</span> time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>,timeStruct)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的大小,结果保留两位小数，单位为MB'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileSize</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    fsize = os.path.getsize(filePath)</span><br><span class="line">    print(fsize, <span class="string">"B"</span>)</span><br><span class="line">    print(fsize/float(<span class="number">1024</span>), <span class="string">"KB"</span>)</span><br><span class="line">    print(fsize/float(<span class="number">1024</span>*<span class="number">1024</span>), <span class="string">"MB"</span>)</span><br><span class="line">    fsize = fsize/float(<span class="number">1024</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">return</span> round(fsize, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的访问时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileAccessTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getatime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的创建时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileCreateTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getctime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"><span class="string">'''获取文件的修改时间'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_FileModifyTime</span><span class="params">(filePath)</span>:</span></span><br><span class="line">    filePath = filePath.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    t = os.path.getmtime(filePath)</span><br><span class="line">    <span class="keyword">return</span> TimeStampToTime(t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    file_path = <span class="string">"test1.py"</span></span><br><span class="line">    print(get_FileSize(file_path))</span><br><span class="line">    print(get_FileAccessTime(file_path))</span><br><span class="line">    print(get_FileCreateTime(file_path))</span><br><span class="line">    print(get_FileModifyTime(file_path))</span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://www.cnblogs.com/shaosks/p/5614630.html" target="_blank" rel="noopener">python 获取文件大小，创建时间和访问时间</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python获取当前时间</title>
    <link href="https://dragonliu2018.github.io/2022/02/28/Python%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
    <id>https://dragonliu2018.github.io/2022/02/28/Python%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</id>
    <published>2022-02-28T13:01:50.000Z</published>
    <updated>2022-02-28T14:03:39.480Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-time-time"><a href="#1-time-time" class="headerlink" title="1 time.time()"></a>1 time.time()</h1><ul><li>返回当前时间戳，值为按秒计算的浮点数</li><li><p>表示从1970年1月1日0点0分开始，到当前时间，一共经历了多少秒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">test_time = time.time()</span><br><span class="line">print(type(test_time))  <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line">print(test_time)  <span class="comment"># 1646054545.0786133</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="2-time-localtime"><a href="#2-time-localtime" class="headerlink" title="2 time.localtime()"></a>2 time.localtime()</h1><ul><li>格式化时间戳为本地的时间，年月日，时分秒等信息</li><li>若未输入参数，默认当前时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">test_time = time.localtime()</span><br><span class="line">print(type(test_time)) <span class="comment"># &lt;class 'time.struct_time'&gt;</span></span><br><span class="line">print(test_time) <span class="comment"># time.struct_time(tm_year=2022, tm_mon=2, tm_mday=28, tm_hour=21, tm_min=29, tm_sec=32, tm_wday=0, tm_yday=59, tm_isdst=0)</span></span><br><span class="line">print(test_time.tm_year) <span class="comment"># 年：2022</span></span><br><span class="line">print(test_time.tm_mon) <span class="comment"># 月：2</span></span><br><span class="line">print(test_time.tm_mday) <span class="comment"># 日：28</span></span><br><span class="line">print(test_time.tm_hour) <span class="comment"># 时：21</span></span><br><span class="line">print(test_time.tm_min) <span class="comment"># 分：29</span></span><br><span class="line">print(test_time.tm_sec) <span class="comment"># 秒：32</span></span><br><span class="line"></span><br><span class="line">t2 = time.time()</span><br><span class="line">print(time.localtime(t2)) <span class="comment"># time.struct_time(tm_year=2022, tm_mon=2, tm_mday=28, tm_hour=21, tm_min=32, tm_sec=44, tm_wday=0, tm_yday=59, tm_isdst=0)</span></span><br></pre></td></tr></table></figure><h1 id="3-time-asctime"><a href="#3-time-asctime" class="headerlink" title="3 time.asctime()"></a>3 time.asctime()</h1><ul><li>格式化时间</li><li>若未输入参数，默认当前时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.asctime()</span><br><span class="line">print(type(t1)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t1) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br><span class="line"></span><br><span class="line">t2 = time.localtime(time.time())</span><br><span class="line">print(time.asctime(t2)) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br><span class="line"></span><br><span class="line">t3 = time.asctime(time.localtime())</span><br><span class="line">print(t3) <span class="comment"># Mon Feb 28 21:37:53 2022</span></span><br></pre></td></tr></table></figure><h1 id="4-time-strftime"><a href="#4-time-strftime" class="headerlink" title="4 time.strftime()"></a>4 time.strftime()</h1><ul><li>格式化时间</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">t1 = time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime())</span><br><span class="line">print(type(t1)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t1) <span class="comment"># 2022-02-28 21:39:55</span></span><br><span class="line"></span><br><span class="line">t2 = time.strftime(<span class="string">'%a %b %d %H:%M:%S %Y'</span>, time.localtime())</span><br><span class="line">print(type(t2)) <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line">print(t2) <span class="comment"># Mon Feb 28 21:39:55 2022</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_36512295/article/details/99694528" target="_blank" rel="noopener">Python获取当前时间（time模块）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>《边城》电影（待看）</title>
    <link href="https://dragonliu2018.github.io/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
    <id>https://dragonliu2018.github.io/2022/02/28/%E3%80%8A%E8%BE%B9%E5%9F%8E%E3%80%8B%E7%94%B5%E5%BD%B1/</id>
    <published>2022-02-28T09:06:07.000Z</published>
    <updated>2022-03-26T04:04:38.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-影片信息"><a href="#1-影片信息" class="headerlink" title="1 影片信息"></a>1 影片信息</h1><ul><li><h1 id="2-剧情简介"><a href="#2-剧情简介" class="headerlink" title="2 剧情简介"></a>2 剧情简介</h1></li></ul><h1 id="3-台词"><a href="#3-台词" class="headerlink" title="3 台词"></a>3 台词</h1><blockquote><p><font color="blue">玻璃花</font>：</p></blockquote><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p><a href="https://dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/" target="_blank" rel="noopener">博客——《神鞭》书籍</a></p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><blockquote><center>改革开放练就“神鞭”</center><p>本来不</p><p>——   <font color="blue">引自 <a href="https://movie.douban.com/review/10056840/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 德尔苏 </a></font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="电影" scheme="https://Dragonliu2018.github.io/tags/电影/"/>
    
    <category term="待看" scheme="https://Dragonliu2018.github.io/tags/待看/"/>
    
  </entry>
  
</feed>
