<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon Liu</title>
  
  
  <link href="https://dragonliu2018.github.io/atom.xml" rel="self"/>
  
  <link href="https://dragonliu2018.github.io/"/>
  <updated>2022-01-21T15:16:09.068Z</updated>
  <id>https://dragonliu2018.github.io/</id>
  
  <author>
    <name>Dragon Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>示例-时评</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%B6%E8%AF%84/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%B6%E8%AF%84/</id>
    <published>2022-01-21T15:14:09.000Z</published>
    <updated>2022-01-21T15:16:09.068Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="新闻月刊" scheme="https://Dragonliu2018.github.io/categories/新闻月刊/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="时评" scheme="https://Dragonliu2018.github.io/tags/时评/"/>
    
  </entry>
  
  <entry>
    <title>示例-2022年1月新闻月刊-新闻</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-2022%E5%B9%B41%E6%9C%88%E6%96%B0%E9%97%BB%E6%9C%88%E5%88%8A-%E6%96%B0%E9%97%BB/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-2022%E5%B9%B41%E6%9C%88%E6%96%B0%E9%97%BB%E6%9C%88%E5%88%8A-%E6%96%B0%E9%97%BB/</id>
    <published>2022-01-21T15:13:57.000Z</published>
    <updated>2022-01-21T15:16:45.460Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="新闻月刊" scheme="https://Dragonliu2018.github.io/categories/新闻月刊/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="新闻" scheme="https://Dragonliu2018.github.io/tags/新闻/"/>
    
  </entry>
  
  <entry>
    <title>示例-2022年1月新闻月刊-IT</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-2022%E5%B9%B41%E6%9C%88%E6%96%B0%E9%97%BB%E6%9C%88%E5%88%8A-IT/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-2022%E5%B9%B41%E6%9C%88%E6%96%B0%E9%97%BB%E6%9C%88%E5%88%8A-IT/</id>
    <published>2022-01-21T15:13:41.000Z</published>
    <updated>2022-01-21T15:17:08.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="新闻月刊" scheme="https://Dragonliu2018.github.io/categories/新闻月刊/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="IT" scheme="https://Dragonliu2018.github.io/tags/IT/"/>
    
  </entry>
  
  <entry>
    <title>示例-《xxx》纪录片</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/</id>
    <published>2022-01-21T15:12:43.000Z</published>
    <updated>2022-01-21T15:13:01.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="纪录片" scheme="https://Dragonliu2018.github.io/tags/纪录片/"/>
    
  </entry>
  
  <entry>
    <title>示例-《乡村爱情系列》电视剧</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/</id>
    <published>2022-01-21T15:11:41.000Z</published>
    <updated>2022-01-21T15:12:29.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="电视剧" scheme="https://Dragonliu2018.github.io/tags/电视剧/"/>
    
  </entry>
  
  <entry>
    <title>示例-《城南旧事》电影</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/</id>
    <published>2022-01-21T15:10:36.000Z</published>
    <updated>2022-01-21T15:11:12.016Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="电影" scheme="https://Dragonliu2018.github.io/tags/电影/"/>
    
  </entry>
  
  <entry>
    <title>示例-旅行</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%85%E8%A1%8C/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%85%E8%A1%8C/</id>
    <published>2022-01-21T15:08:44.000Z</published>
    <updated>2022-01-21T15:09:34.611Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="旅行" scheme="https://Dragonliu2018.github.io/categories/旅行/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
  </entry>
  
  <entry>
    <title>示例-《你是人间的四月天》歌曲</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/</id>
    <published>2022-01-21T14:38:55.000Z</published>
    <updated>2022-01-21T15:08:14.366Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>「——你是爱，是暖，<br>是希望，你是人间的四月天！」</p><p>草长莺飞的四月，李宇春受大型诗词音乐文化节目《经典咏流传》邀请，将于央视一套演绎林徽因经典名作《你是人间的四月天》。通过诗歌和音乐，遥望并呼应85年前林徽因笔下的春深光景，用温柔嗓音传递恒久的美与爱。</p><p>在歌曲创作阶段，李宇春用一个多月的时间浏览相关书籍和影像，对创作者背景和时代风貌进行了详细调研，从众多经典诗词中选择《你是人间的四月天》进行演绎，并邀请音乐人彭青为这首诗词谱曲。两位女性音乐人以敏锐而温柔的视角，还原并呈现了诗歌的韵律与意象，将春日的轻灵喜悦和诗歌的东方之美进行了生动表达。</p><p>歌曲将丰盛藏于淡泊，乍听水波不兴，细节却暗藏波澜。虽然是经典的中文诗歌，编曲上却并未过多使用中国乐器元素，仅用五声调式钢琴和弦乐突显诗歌韵脚，酝酿出清丽的氛围。李宇春则用轻如呢喃的演唱方式，将「雪化后那片鹅黄」 「新鲜初放芽的绿」等春天意象，唱得格外柔软。</p><p>作为一名具有先锋态度的音乐人，同时也是一位不断探索音乐、艺术、时尚等领域多元文化价值的当代女性，李宇春与终其一生传递美的价值的林徽因一样，在自我内化和丰富的同时，凭借旺盛的生命力和开阔的视野，在各领域中勇敢地创新美的表达，延展美的样态，自由地传递一种生动而有力量的美感。</p><h1 id="2-歌手"><a href="#2-歌手" class="headerlink" title="2 歌手"></a>2 歌手</h1><p><strong>李宇春</strong>（英语：Chris Li Yu-chun，1984年3月10日－），出生于<a href="https://zh.wikipedia.org/wiki/中國" target="_blank" rel="noopener">中国</a><a href="https://zh.wikipedia.org/wiki/四川" target="_blank" rel="noopener">四川</a>成都，为<a href="https://zh.wikipedia.org/wiki/中國大陸" target="_blank" rel="noopener">中国大陆</a>女歌手、词曲创作人、电影演员、演唱会导演。</p><ul><li><a href="https://baike.baidu.com/item/%E6%9D%8E%E5%AE%87%E6%98%A5/80102" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E6%9D%8E%E5%AE%87%E6%98%A5" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-歌词"><a href="#3-歌词" class="headerlink" title="3 歌词"></a>3 歌词</h1><center>你是人间的四月天 (Live) - 李宇春词：林徽因曲：彭青编曲：郑楠演唱：李宇春音乐总监：刘卓乐团：V Band弦乐：靳海音®弦乐团混音：周天澈 混音团队我说你是人间的四月天笑响点亮了四面风轻灵在春的光艳中交舞着变你是四月早天里的云烟黄昏吹着风的软星子在无意中闪细雨点洒在花前那轻 那娉婷 你是鲜妍百花的冠冕 你戴着你是天真是庄严你是夜夜的月圆雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲你是四月早天里的云烟黄昏吹着风的软星子在无意中闪细雨点洒在花前那轻 那娉婷 你是鲜妍百花的冠冕 你戴着你是天真是庄严你是夜夜的月圆雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲你是一树一树的花开是燕在梁间呢喃你是爱 是暖 是希望你是人间的四月天</center><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p>xxx</p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><blockquote><p>四月春风，余味隽永。女中音把林徽因的词演绎得柔美而鲜活，听者微醺。以情带声是本事，她的声线是上天赐予的礼物。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/music/comment/1748566488?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 espionage</a></font></p></blockquote><hr><blockquote><p>人间四月芳菲尽，山寺桃花始盛开。人生悲欢有各自缘法，不要喟叹于眼前的春光消逝，心怀旷达，自然会在别处看见更旖旎的风光和更广阔的天地。</p><p>—— 引自 QQ音乐 陌离 </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="音乐" scheme="https://Dragonliu2018.github.io/categories/音乐/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
  </entry>
  
  <entry>
    <title>示例-摘抄</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/</id>
    <published>2022-01-21T14:27:39.000Z</published>
    <updated>2022-01-21T14:30:05.498Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Life is painting a picture, not doing a sum. </p><p>—— <font color="blue">引自 网络</font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="摘抄" scheme="https://Dragonliu2018.github.io/tags/摘抄/"/>
    
  </entry>
  
  <entry>
    <title>示例-《俗世奇人全本》书籍</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E3%80%8B%E5%85%A8%E6%9C%AC/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E3%80%8B%E5%85%A8%E6%9C%AC/</id>
    <published>2022-01-21T14:01:48.000Z</published>
    <updated>2022-01-21T14:53:16.072Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>　　天津卫本是水陆码头，居民五方杂处，性格迥然相异。然燕赵故地，血气刚烈；水咸土碱，风习强悍。近百余年来，举凡中华大灾大难，无不首当其冲，因生出各种怪异人物，既在显耀上层，更在市井民间。故而随想随记，始作于今；每人一篇，各不相关，冠之总名《俗世奇人》耳。</p><p>　　2019年，冯骥才先生又创作了18篇“俗世奇人”新作，现集成《俗世奇人全本》,呈现给读者完整的54篇“俗世奇人”系列，并收录冯骥才先生亲自手绘的58幅生动插图。</p><p>　　自上世纪九十年代至今，冯骥才先生先后创作了五十四篇“俗世奇人”系列短篇小说。其风格统一、传奇色彩浓郁、充满生活气息、人物形象活灵活现，书写了清末民初天津卫的地域风貌、风土人情、生活风尚，也展现出我国民间文化的精巧技艺与其中蕴藏的智慧。</p><h1 id="2-作者"><a href="#2-作者" class="headerlink" title="2 作者"></a>2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a href="#3-摘抄" class="headerlink" title="3 摘抄"></a>3 摘抄</h1><blockquote><p>　　酒的诀窍，还是在酒缸里。老板人奸，往酒里掺水。酒鬼们对眼睛里的世界一片模糊，对肚子里的酒却一清二楚，但谁也不肯把这层纸捅破，喝美了也就算了。老板缺德，必得报应，人近六十，没儿没女，八成要绝后。可一日，老板娘爱酸爱辣，居然有喜了老板给佛爷叩头时，动了良心，发誓今后老实做人，诚实卖酒，再不往酒里掺水掺假了。</p><p>　　就是这日，酒婆来到这家小酒馆，进门照例还是掏出包儿来，层层打开，花钱买酒，举手扬脖，把改假为真的“炮打灯”倒进肚里……真货就有真货色。这次酒婆还没出屋，人就转悠起来了。而且今儿她一路上摇晃得分外好看，上身左摇，下身右摇，愈转愈疾，初时赛风中的大鹏鸟，后来竟赛一个黑黑的大漩涡首善街的人看得惊奇，也看得纳闷，不等多想，酒婆已到路口，竟然没有酒醒，破天荒头一遭转悠到大马路上，下边的惨事就甭提了……</p><p>　　自此，酒婆在这条街上绝了迹。小酒馆里的人们却不时念叨起她来。说她才算真正够格的酒鬼。她喝酒不就菜，照例一饮而尽，不贪解馋，只求酒劲。在酒馆既不多事，也无闲话，交钱喝酒，喝完就走，从来没赊过账。真正的酒鬼，都是自得其乐，不搅和别人。</p><p>　　老板听着，忽然想到，酒婆出事那日，不正是自己不往酒里掺假的那天吗？原来祸根竟在自己身上他便别扭开了，心想这人间的道理真是说不清道不明了。到底骗人不对，还是诚实不对？不然为嘛几十年拿假酒骗人，却相安无事，都喝得挺美，可一旦认真起来反倒毁了？</p><p>—— <font color="green">引自 酒婆</font></p></blockquote><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p>xxx</p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><blockquote><p>笔记体的天津的市井风俗与奇人群像。不知道为何会想到可以做一款卡牌类手游，就叫《大天津》</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2185351037?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 RO</a></font></p></blockquote><hr><blockquote><center>《俗世奇人》| 人间烟火处见大雅</center><p>说书人于台上鲜活热闹，角儿们一个个穿着长袍马褂，举着酒盏、嬉笑着眉眼摇身登场，刹那间便驻足了一个时代。</p><p>《俗世奇人》一书以清末民初天津卫为背景，讲述了一十九个绝技与风骨并存的码头人物生平。卷轴缓缓展开，张大力丢下石锁大笑离去，北地豪气快哉纸上；苏七块挥起袖子接筋续骨，规矩不动然医道不改；刷子李、风筝魏、泥人张凭借精到手艺博得满堂彩，站在大街中央吃荤、亮堂；好嘴杨巴叩头佯罪，巧妙化解不识芝麻粒的李中堂的尴尬……想来世事洞明皆学问，人情练达即文章。</p><p>文如其人，文载其道；欲评其文，须先知其人。  </p><p>冯骥才有此二身份：一乃民间艺术工作者，曾专职民间文化研究；二乃“文革”后崛起的“伤痕文学运动”代表作家，以“文化反思小说”影响文坛。    </p><p> 这两重身份带来了两种视角，两种视角深刻地渗透在了《俗世奇人》的文学内容与语言艺术之中。     </p><p>大隐隐于市，大雅始于俗。此俗，乃民俗的俗。诗经首篇便是收录民歌的《国风》，俗世生活是一种别样的美，它蕴藏着原生态的力量与智慧。才子佳人素来为文人所道，读多了却尝到了种“为雅而雅”的拘谨刻意，于文学角度略显单薄。津门传说中的小人物则不同，无论是活出殡的刘道元，卖家产的蔡二少爷，还是干鸡鸣狗盗之事的小达子，看似上不得台面，却都因豁达质朴的性子与洋溢在灵魂中的坦诚智慧而鲜活灵动起来。“这些人空前绝后，却都是俗世里的俗人；这些事匪夷所思，却都是真人真事”，他们饱含着对生活的热爱和追求，嬉笑怒骂间定格为天津民俗画中一景，谱写了时代的大雅之章。     </p><p>诚觉世人尽可爱，也觉世事尽可戏。世态炎凉在冯骥才笔下无伤春悲秋之造作，反而展现出原生态的赤裸裸的生命热情。众人皆知底层小人物生活辛酸艰难，他偏独辟蹊径，以善意、豁达的笔笑世间形形色色——这世道不公却不公得有趣，奇闻轶事显妙趣横生，皮囊下的灵魂们热闹繁华，每个人都未曾受到奚落。当今文学基调多悲观，彷若于严肃中才能看到生命的厚重，殊不知我们正是需要一种洒脱可爱、人生如戏的智慧；也唯有在这轻快智慧的基调上，我们才能寻觅到追求本我的勇气与力量。     </p><p>窃以为经历文革动荡且怀有良知的作家可分两类，一类以沉重笔调记录黑色，一类跳脱出了时代，俯视中将昏暗看成了彩色。二者皆有思考与感悟，不论高下。于个人而言，我偏爱于后者——如王小波，如冯骥才。对时代与命运，他们是消极的，但他们选择了在消极的基调上热情快乐地活着，一如赤子。     </p><p>《俗世奇人》中有一篇写酒婆：酒婆举手仰脖，将山芋干造的假酒一饮而尽，出门走路时赛在地上画天书，然从未出事；一天酒老板良心发现，做了真酒，酒婆出门便被撞死了。关于这个故事，冯骥才站在酒老板的角度，于结尾写道：“到底骗人不对，还是诚实不对？”我却更愿站在酒婆的角度看，这样一来，冯和酒婆便有了共通之处：     </p><p>酒婆佯醉只求一时欢乐，辨不清骗人还是骗己；冯骥才以澄明轻快的心境回执过往不堪经历，又不知是否为“一晌贪欢”之举？快乐与痛苦本就分不清，既如此，那唯求它鲜活真实。       </p><p>民国小影，旧时一瞥。书籍以白描入笔，半文半白，三言两拍。语言结实、神气、不拘泥，形象俏皮，颇具古典传奇色彩，风土人情味儿浓厚。对民俗语言的精准驾驭体现出冯骥才的深厚功力，这与他对民间文化的热爱与研究紧密相关。     </p><p>后记里言：“倘若再写，算我无能。说不尽津门的爽利。”   </p><p>《俗世奇人》通篇不过百页，故事性与文学性兼具，单个拎出便是说书人口中的一段风月，具有极高的文学艺术价值。其如下酒小菜，初见惊艳，吃罢，回味悠长。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/8506941/?dt_dapp=1&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">豆瓣 ciel丫丫</a></font></p></blockquote><h1 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6 拓展"></a>6 拓展</h1><p>是否被拍成影视作品？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="书评" scheme="https://Dragonliu2018.github.io/tags/书评/"/>
    
  </entry>
  
  <entry>
    <title>jupyter使用</title>
    <link href="https://dragonliu2018.github.io/2022/01/17/jupyter%E4%BD%BF%E7%94%A8/"/>
    <id>https://dragonliu2018.github.io/2022/01/17/jupyter%E4%BD%BF%E7%94%A8/</id>
    <published>2022-01-17T01:44:22.000Z</published>
    <updated>2022-01-21T13:28:01.888Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>打开cmd，使用pip进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h1><p>cmd输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-lab</span><br></pre></td></tr></table></figure><p>在浏览器输入：<a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib使用</title>
    <link href="https://dragonliu2018.github.io/2022/01/17/matplotlib/"/>
    <id>https://dragonliu2018.github.io/2022/01/17/matplotlib/</id>
    <published>2022-01-17T01:44:22.000Z</published>
    <updated>2022-01-21T12:24:01.868Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h1><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html" target="_blank" rel="noopener">官方文档</a></p><ul><li>画板figure，画纸Sublpot画质，可多图绘画</li><li>画纸上最上方是标题title，用来给图形起名字</li><li>坐标轴Axis，横轴叫x坐标轴label，纵轴叫y坐标轴ylabel</li><li>图例Legend 代表图形里的内容</li><li>网格Grid，图形中的虚线，True显示网格</li><li>点 Markers：表示点的形状。</li></ul><h1 id="2-绘图步骤"><a href="#2-绘图步骤" class="headerlink" title="2 绘图步骤"></a>2 绘图步骤</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入matplotlib的pyplot模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 基础绘图</span></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点   x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 定义绘图属性</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">color：线条颜色，值r表示红色（red）</span></span><br><span class="line"><span class="string">marker：点的形状，值o表示点为圆圈标记（circle marker）</span></span><br><span class="line"><span class="string">linestyle：线条的形状，值dashed表示用虚线连接各点</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,linestyle=<span class="string">'dashed'</span>)</span><br><span class="line"><span class="comment">#plt.plot(x, y, 'ro')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">axis：坐标轴范围</span></span><br><span class="line"><span class="string">语法为axis[xmin, xmax, ymin, ymax]，</span></span><br><span class="line"><span class="string">也就是axis[x轴最小值, x轴最大值, y轴最小值, y轴最大值]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">20</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 给图片提阿甲注释和标题等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点  x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条 第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#添加文本 #x轴文本</span></span><br><span class="line">plt.xlabel(<span class="string">'x坐标轴'</span>)</span><br><span class="line"><span class="comment">#y轴文本</span></span><br><span class="line">plt.ylabel(<span class="string">'y坐标轴'</span>)</span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line">plt.title(<span class="string">'标题'</span>)</span><br><span class="line"><span class="comment">#添加注释 参数名xy：箭头注释中箭头所在位置，参数名xytext：注释文本所在位置，</span></span><br><span class="line"><span class="comment">#arrowprops在xy和xytext之间绘制箭头, shrink表示注释点与注释文本之间的图标距离</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">'我是注释'</span>, xy=(<span class="number">2</span>,<span class="number">5</span>), xytext=(<span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">            arrowprops=dict(facecolor=<span class="string">'black'</span>, shrink=<span class="number">0.01</span>),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="3-多图绘制"><a href="#3-多图绘制" class="headerlink" title="3 多图绘制"></a>3 多图绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">12</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_title(<span class="string">'HeatLoadLight'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_title(<span class="string">'HeatLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_title(<span class="string">'CoolLoadLight'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_title(<span class="string">'CoolLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">'xxx'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">"xxx"</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python读取文件整理</title>
    <link href="https://dragonliu2018.github.io/2022/01/17/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    <id>https://dragonliu2018.github.io/2022/01/17/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</id>
    <published>2022-01-17T01:44:22.000Z</published>
    <updated>2022-01-21T12:22:51.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-按行读取文本文件"><a href="#1-按行读取文本文件" class="headerlink" title="1 按行读取文本文件"></a>1 按行读取文本文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Win10安装Ubuntu子系统</title>
    <link href="https://dragonliu2018.github.io/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
    <id>https://dragonliu2018.github.io/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-10-27T01:44:22.000Z</published>
    <updated>2022-01-21T13:30:54.687Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><ol><li>在Windows10 Home版操作系统下安装Linux子系统(WSL2)，用于轻量需求，方便快捷。</li><li>在微软商店内安装Linux子系统会默认安装到C盘，根据官方文档指示可以安装到其他盘（未成功）。</li><li>自定义Linux子系统，安装到非C盘。</li></ol><h1 id="1-安装WSL2（未成功）"><a href="#1-安装WSL2（未成功）" class="headerlink" title="1 安装WSL2（未成功）"></a>1 安装WSL2（未成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros" target="_blank" rel="noopener">微软WSL官方安装文档（英文）</a></li></ul></blockquote><h2 id="1-1-启用Windows子系统功能"><a href="#1-1-启用Windows子系统功能" class="headerlink" title="1.1 启用Windows子系统功能"></a>1.1 启用<code>Windows子系统</code>功能</h2><p>在安装子系统之前，启用<code>Windows子系统</code>功能，在Windows10的Powershell中输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><h2 id="1-2-检查WSL2依赖是否满足"><a href="#1-2-检查WSL2依赖是否满足" class="headerlink" title="1.2 检查WSL2依赖是否满足"></a>1.2 检查WSL2依赖是否满足</h2><ul><li>For x64 systems: <strong>Version 1903</strong> or higher, with <strong>Build 18362</strong> or higher.</li><li>For ARM64 systems: <strong>Version 2004</strong> or higher, with <strong>Build 19041</strong> or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.</li></ul><p>检查Windows版本：<code>win+R</code>，输入<code>winver</code></p><h2 id="1-3-启用虚拟机功能"><a href="#1-3-启用虚拟机功能" class="headerlink" title="1.3 启用虚拟机功能"></a>1.3 启用<code>虚拟机</code>功能</h2><p>管理员模式打开Powershell：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><h2 id="1-4-下载Linux内核更新包"><a href="#1-4-下载Linux内核更新包" class="headerlink" title="1.4 下载Linux内核更新包"></a>1.4 下载Linux内核更新包</h2><ol><li>下载最新安装包：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">跳转</a></li><li>点击安装上述的安装包</li></ol><h2 id="1-5-将-WSL-2-设置为默认版本"><a href="#1-5-将-WSL-2-设置为默认版本" class="headerlink" title="1.5 将 WSL 2 设置为默认版本"></a>1.5 将 WSL 2 设置为默认版本</h2><p>在Powershell中运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="1-6-安装Linux发行版"><a href="#1-6-安装Linux发行版" class="headerlink" title="1.6 安装Linux发行版"></a>1.6 安装Linux发行版</h2><h3 id="1-6-1-微软商店安装（只能安装在C盘）"><a href="#1-6-1-微软商店安装（只能安装在C盘）" class="headerlink" title="1.6.1 微软商店安装（只能安装在C盘）"></a>1.6.1 微软商店安装（只能安装在C盘）</h3><h3 id="1-6-2-命令行安装（可以安装在其他盘）"><a href="#1-6-2-命令行安装（可以安装在其他盘）" class="headerlink" title="1.6.2 命令行安装（可以安装在其他盘）"></a>1.6.2 命令行安装（可以安装在其他盘）</h3><ol><li><p>cmd下，在自定义目录中下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl.exe -L -o ubuntu-1604.appx https://aka.ms/wsl-ubuntu-2004</span><br></pre></td></tr></table></figure></li><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-AppxPackage .\app_name.appx</span><br></pre></td></tr></table></figure><font color="red">但是出错：</font><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS D:\virtual_machine\WSL\Ubuntu&gt; Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">Add-AppxPackage : 部署失败，原因是 HRESULT: 0x80073CF3, 包无法进行更新、相关性或冲突验证。</span><br><span class="line">从  (Ubuntu2004.appx)  使用程序包 CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2020.424.0_x64__79rhkp1fndgsc 中的目</span><br><span class="line">标卷 C: 执行的部署 Add 操作失败，错误为 0x80073CF3。有关诊断应用部署问题的帮助，请参阅 http://go.microsoft.com/fwlink/?</span><br><span class="line">LinkId=235160。</span><br><span class="line">注意: 有关其他信息，请在事件日志中查找 [ActivityId] a0925605-afc5-0005-a072-92a0c5afd701，或使用命令行 Get-AppPackageLo</span><br><span class="line">g -ActivityID a0925605-afc5-0005-a072-92a0c5afd701</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : WriteError: (D:\virtual_mach...Ubuntu2004.appx:String) [Add-AppxPackage], IOException</span><br><span class="line">    + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand</span><br></pre></td></tr></table></figure><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/add-appxpackage-0x80073cfd/1303974b-3ea0-4436-8cb5-20675b1338c3" target="_blank" rel="noopener">问题解决</a>，应该是home版的windows有关，暂时没有解决。</p></li></ol><hr><h1 id="2-安装自定义系统（成功）"><a href="#2-安装自定义系统（成功）" class="headerlink" title="2 安装自定义系统（成功）"></a>2 安装自定义系统（成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/use-custom-distro" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li></ul><p>安装后的问题：</p><ol><li><code>ping baidu.com</code>反应慢，<code>ping 8.8.8.8</code>还可以</li><li></li></ol></blockquote><h2 id="2-1-从容器中导出-tar"><a href="#2-1-从容器中导出-tar" class="headerlink" title="2.1 从容器中导出 tar"></a>2.1 从容器中导出 tar</h2><p>在Ubuntu虚拟机中进行操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line"><span class="comment"># https://www.runoob.com/docker/ubuntu-docker-install.html</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 启动 Docker 服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="comment"># 下载指定系统镜像</span></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</span><br><span class="line"><span class="comment"># 查看系统镜像</span></span><br><span class="line">sudo docker images</span><br><span class="line"><span class="comment"># 使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器</span></span><br><span class="line">sudo docker run -it ImageID /bin/bash</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">sudo docker start ContainerID</span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">sudo docker ps -a</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">sudo docker attach ContainerID</span><br><span class="line"><span class="comment"># 使用 grep 和 awk 获取 CentOS 容器 ID</span></span><br><span class="line">dockerContainerID=$(sudo docker container ls -a | grep -i &#123;容器名称&#125; | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="comment"># 根据容器 ID 导出 tar 文件：</span></span><br><span class="line">sudo docker <span class="built_in">export</span> <span class="variable">$dockerContainerID</span> &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h2 id="2-2-将-tar-文件导入-WSL"><a href="#2-2-将-tar-文件导入-WSL" class="headerlink" title="2.2 将 tar 文件导入 WSL"></a>2.2 将 tar 文件导入 WSL</h2><p>在Windows的powershell中操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在选定目录下导入 tar 文件： wsl --import &lt;DistroName&gt; &lt;InstallLocation&gt; &lt;InstallTarFile&gt;</span></span><br><span class="line">wsl --import Ubuntu .\Ubuntu .\ubuntu.tar</span><br><span class="line"><span class="comment"># 检查已安装的子系统实例</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment"># 启动Ubuntu子系统</span></span><br><span class="line">wsl -d Ubuntu</span><br><span class="line"><span class="comment"># 停止Ubuntu子系统</span></span><br><span class="line">wsl --terminate Ubuntu <span class="comment">#停止</span></span><br><span class="line"><span class="comment"># 卸载Ubuntu子系统</span></span><br><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h1 id="3-安装Terminus终端"><a href="#3-安装Terminus终端" class="headerlink" title="3 安装Terminus终端"></a>3 安装Terminus终端</h1><ol><li><p><strong>Terminus</strong>下载安装，点击<code>设置</code>，修改<code>Profiles</code>，使得默认标签页打开wsl（Ubuntu）</p><p><img src="https://i.loli.net/2021/09/26/FewNKTpMnikjZ8b.png" width="700" height="400" alt="图片名称" align="center" id="33"></p></li><li><p>将Tabby(<strong>Terminus</strong>)添加到右键打开：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> ICON=D:\software\terminus\soft\Tabby\Tabby.exe <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> LABEL=Open terminal here</span><br><span class="line"><span class="built_in">set</span> COMMAND=D:\software\terminus\soft\Tabby\Tabby.exe \"%%V\" <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> SLUG=Terminal</span><br><span class="line"></span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f</span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="4-配置oh-my-zsh"><a href="#4-配置oh-my-zsh" class="headerlink" title="4 配置oh-my-zsh"></a>4 配置oh-my-zsh</h1><p>zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装。</p><p>zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。</p><p>通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置。</p><h2 id="4-1-安装zsh"><a href="#4-1-安装zsh" class="headerlink" title="4.1 安装zsh"></a>4.1 安装zsh</h2><ol><li><p>安装zsh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh -y</span><br></pre></td></tr></table></figure></li><li><p>检查安装是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure></li><li><p>zsh设为默认shell，新开标签页生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-oh-my-zsh安装与配置"><a href="#4-2-oh-my-zsh安装与配置" class="headerlink" title="4.2 oh-my-zsh安装与配置"></a>4.2 oh-my-zsh安装与配置</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/ba782b57ae96" target="_blank" rel="noopener">Ubuntu | 安装oh-my-zsh</a></li></ul></blockquote><ol><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>出现安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：</p><ul><li><p>如果科学上网应该不会出现此情况；</p></li><li><p>如果不能科学上网可以这样做：</p><ul><li><p>打开网站: <code>https://www.ipaddress.com/</code>， 查询一下 <code>raw.githubusercontent.com</code>对应的IP 地址</p></li><li><p>在hosts文件中添加：<code>sudo vim /etc/hosts</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>主题使用robbyrussell，<code>vim ~/.zshrc</code></p><p><img src="https://i.loli.net/2021/09/26/CyOAqiXPmTRYFvz.png" width="700" height="300" alt="图片名称" align="center" id="34"></p></li><li><p>安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件 </span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">## 添加内容</span></span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump extract)</span><br><span class="line"><span class="comment"># 解压插件，解压一个命令x全搞定</span></span><br><span class="line">extract <span class="comment"># 不用安装</span></span><br><span class="line"><span class="comment"># 安装autojump自动跳转插件</span></span><br><span class="line">apt install autojump</span><br><span class="line"><span class="comment"># 安装zsh-autosuggestions语法历史记录插件</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 安装zsh-syntax-highlighting语法高亮插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>物理机安装Ubuntu+Win10双系统</title>
    <link href="https://dragonliu2018.github.io/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/"/>
    <id>https://dragonliu2018.github.io/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/</id>
    <published>2021-10-27T01:44:22.000Z</published>
    <updated>2022-01-21T12:32:28.335Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><ol><li>宿舍中闲置一台华硕电脑，为充分利用资源，装上Ubuntu系统(20.04)；</li><li>搭建开发环境，练习远程开发；</li><li>目前在局域网中即可满足需求，后续可能配置内网穿透。</li></ol><h1 id="1-制作启动U盘"><a href="#1-制作启动U盘" class="headerlink" title="1 制作启动U盘"></a>1 制作启动U盘</h1><h2 id="1-1-准备工具"><a href="#1-1-准备工具" class="headerlink" title="1.1 准备工具"></a>1.1 准备工具</h2><ul><li>4G以上的U盘</li><li>启动U盘制作工具：Ubuntu官方推荐的<a href="https://rufus.ie/zh/" target="_blank" rel="noopener">Rufus</a></li><li>Ubuntu系统镜像：<a href="https://ubuntu.com/" target="_blank" rel="noopener">官网</a>；（清华源下载速度快）</li></ul><h2 id="1-2-制作U盘"><a href="#1-2-制作U盘" class="headerlink" title="1.2 制作U盘"></a>1.2 制作U盘</h2><p>运行Rufus，一般情况下，选择插入的U盘<code>设备</code>，和刚下载的Ubuntu<code>镜像</code>，其它保持默认即可开始U盘制作，等待制作完成即可。</p><p><img src="https://i.loli.net/2021/10/16/X7ljH8y4WbkhcUG.png" width="500" height="600" alt="图片名称" align="center" id="20"></p><h1 id="2-磁盘分区"><a href="#2-磁盘分区" class="headerlink" title="2 磁盘分区"></a>2 磁盘分区</h1><ol><li>打开<code>控制面板</code>，找到<code>磁盘管理</code>；</li><li>如果整个卷都用于磁盘分区，则<code>删除卷</code>，否则需要<code>压缩卷</code>，出现下面的<code>未分配</code>即可使用：</li></ol><blockquote><ul><li>删除卷的话并不是抹除这部分空间，只是这部分空间会被系统保留出来，没有任何文件格式，对于这部分空间系统不会进行任何操作。它相当于一个无人区。</li><li>压缩卷就是把一个盘里面的空间抽出一部分变成一个没有任何文件格式和名称的盘，你接下来要对压缩出来的盘进行格式化操作，这样压缩出来的卷才可以用。</li></ul></blockquote><p><img src="E:\01 Blog_work\Images\21.png" width="900" height="300" alt="图片名称" align="center" id="21"></p><h1 id="3-安装Ubuntu"><a href="#3-安装Ubuntu" class="headerlink" title="3 安装Ubuntu"></a>3 安装Ubuntu</h1><h2 id="3-1-U盘启动"><a href="#3-1-U盘启动" class="headerlink" title="3.1 U盘启动"></a>3.1 U盘启动</h2><ol><li>将制作好的启动U盘插入到闲置电脑，重启(开机)按<code>F2</code>键进入BIOS界面；（进入BIOS需要按的键每个品牌的电脑不同）</li><li>在<code>Boot Priority</code>栏，将<code>UEFI:***</code>选项拖到开始，使其开机启动进入U盘；</li><li>保存修改退出即可，一会儿自动重启。</li></ol><h2 id="3-2-安装系统"><a href="#3-2-安装系统" class="headerlink" title="3.2 安装系统"></a>3.2 安装系统</h2><ol><li><p>从U盘启动后，在启动引导页选择<code>安装Ubuntu</code>进入Ubuntu；</p></li><li><p>一路默认选项，直到<code>Installation type</code>选择<code>Something else</code>，进入分区配置页面，找到<code>free space</code>，也就是在Windows系统中整好的磁盘分区；</p><p>|      分区      | 分区类型 | 分区位置 |     用于     | 挂载点 |      大小      |<br>| :——————: | :———: | :———: | :—————: | :——: | :——————: |<br>| boot(启动分区) |  主分区  |   起始   | ext4文件系统 | /boot  |     1G-2G      |<br>| swap(交换空间) | 逻辑分区 |   起始   |   交换分区   |   无   | 与物理内存一致 |<br>|       /        |  主分区  |   起始   | ext4文件系统 |   /    |   剩余的空间   |</p><blockquote><p>只有<code>/</code>是必须分区的，其它如果没有必要都不建议建议独立分区，按默认挂在root下就行。</p></blockquote></li><li><p>点击下一步完成后续安装即可正确安装Ubuntu。</p></li><li>拔出U盘，重启即可使用双系统。</li></ol><h1 id="4-配置Ubuntu"><a href="#4-配置Ubuntu" class="headerlink" title="4 配置Ubuntu"></a>4 配置Ubuntu</h1><h2 id="4-1-apt换源并安装必要软件"><a href="#4-1-apt换源并安装必要软件" class="headerlink" title="4.1 apt换源并安装必要软件"></a>4.1 apt换源并安装必要软件</h2><ol><li><p>点击<code>Settings</code> -&gt; <code>About</code> -&gt; <code>Software Updates</code>，选择合适的镜像；</p></li><li><p>安装必要软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install net-tools</span><br><span class="line">sudo apt install make</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-科学上网"><a href="#4-2-科学上网" class="headerlink" title="* 4.2 科学上网"></a>* 4.2 科学上网</h2><h2 id="4-3-配置oh-my-zsh"><a href="#4-3-配置oh-my-zsh" class="headerlink" title="4.3 配置oh-my-zsh"></a>4.3 配置oh-my-zsh</h2><p>参考<code>Win10安装Ubuntu子系统</code></p><h2 id="4-4-xshell连接"><a href="#4-4-xshell连接" class="headerlink" title="4.4 xshell连接"></a>4.4 xshell连接</h2><ol><li><p>使用xshell连接，被拒绝<code>(port 22): Connection failed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务器22端口是否启动</span></span><br><span class="line">lsof -i:22</span><br><span class="line"><span class="comment"># 若没启动</span></span><br><span class="line">sudo apt-get install openssh-server openssh-client </span><br><span class="line"><span class="comment"># 开启ssh</span></span><br><span class="line">service ssh start</span><br><span class="line">ssh localhost</span><br><span class="line"><span class="comment"># 此时检查22是否启动</span></span><br><span class="line">lsof -i:22</span><br></pre></td></tr></table></figure></li><li><p>笔记本设置合盖不休眠：修改Login Manager配置文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/logind.conf</span><br><span class="line"><span class="comment">### 修改 ###</span></span><br><span class="line"><span class="comment"># 找到其中一行：</span></span><br><span class="line"><span class="comment">#HandleLidSwitch=suspend</span></span><br><span class="line"><span class="comment"># 将其改为：</span></span><br><span class="line">HandleLidSwitch=ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务：重启计算机即可</span></span><br><span class="line">sudo restart systemd-logind  </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">service systemd-logind restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-5-查看硬件配置"><a href="#4-5-查看硬件配置" class="headerlink" title="4.5 查看硬件配置"></a>4.5 查看硬件配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统内核</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看CPU</span></span><br><span class="line">cat /proc/cpuinfo | grep model\ name</span><br><span class="line"><span class="comment"># 查看内存</span></span><br><span class="line">cat /proc/meminfo | grep MemTotal</span><br><span class="line"><span class="comment"># 查看显卡</span></span><br><span class="line">lspci | grep <span class="string">'VGA'</span></span><br><span class="line"><span class="comment"># 查看声卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Audio'</span></span><br><span class="line"><span class="comment"># 查看网卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Network'</span></span><br><span class="line"><span class="comment"># 查看硬盘</span></span><br><span class="line">df -lh</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/101307629" target="_blank" rel="noopener">装了5次Ubuntu，告诉你win10+Ubuntu双系统的正确打开方式</a></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>C++单元测试</title>
    <link href="https://dragonliu2018.github.io/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://dragonliu2018.github.io/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</id>
    <published>2021-09-27T01:44:22.000Z</published>
    <updated>2022-01-21T13:22:03.090Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>在实习时，用到了C++中的单元测试，整理一下。分别在Windows和子系统（Ubuntu）中安装配置。</p><h1 id="1-安装googletest"><a href="#1-安装googletest" class="headerlink" title="1 安装googletest"></a>1 安装googletest</h1><h2 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h2><ol><li><p>下载gtest：<code>git clone https://github.com/google/googletest.git</code></p></li><li><p>安装cmake：</p><blockquote><p>CMake 是一个开源的跨平台的自动化构建系统，主要用于 C++ 的工程构建、测试以及打包等自动化操作。它能根据开发者编写的 CMakeLists.txt 规则文件，在不同的平台输出所需要的工程文件，然后开发者可以按照常见的构建方式使用生成的工程文件编译最终的程序。</p><p>CMake 是 Cross platform Make 的缩写，虽然名字中含有“make”，但是 CMake 和 Linux 上常见的 make 系统有所区别，是更上一层的构建系统。</p></blockquote><ul><li><strong>Windows</strong>：首先打开 CMake 官方网站，在<a href="https://cmake.org/download/" target="_blank" rel="noopener">下载页面</a>选择 Windows win64-x64 Installer 下载并安装</li><li><strong>Ubuntu</strong>：<code>apt-get install cmake</code></li></ul></li><li><p>windows配置clion编译环境：<a href="https://www.jianshu.com/p/1aa989808e15" target="_blank" rel="noopener">Window10上CLion极简配置教程</a></p></li></ol><h2 id="1-2-编译gtest库"><a href="#1-2-编译gtest库" class="headerlink" title="1.2 编译gtest库"></a>1.2 编译gtest库</h2><ol><li><p>使用clion打开<code>googletest</code>代码目录，选择<code>gtest</code>项目编译生成：</p><p><img src="https://i.loli.net/2021/10/06/quPZfVpBdWGCriI.png" width="800" height="300" alt="图片名称" align="center" id="29"></p></li><li><p>显示下面的信息表明编译成功（显示<code>Error running</code>，不用管他），生成的<code>libgtestd.a</code>即为gtest的库文件，项目中引用这个库文件就能使用gtest了。</p><p><img src="https://i.loli.net/2021/10/06/c2JyQ41X3nImkTK.png" width="900" height="200" alt="图片名称" align="center" id="30"></p></li></ol><h1 id="2-使用googletest"><a href="#2-使用googletest" class="headerlink" title="2 使用googletest"></a>2 使用googletest</h1><h2 id="2-1-引入库"><a href="#2-1-引入库" class="headerlink" title="2.1 引入库"></a>2.1 引入库</h2><p>新建测试项目<code>cliontest</code>，将libgtestd.a文件拷贝到该代码根路径的lib路径下，在CMakeList.txt中加上以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加上库文件的路径，注意相对路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(lib/)</span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(cliontest main.cpp)</span><br><span class="line"><span class="comment"># 链接gtest库文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(cliontest libgtestd.a)</span><br></pre></td></tr></table></figure><h2 id="2-2-引入头文件"><a href="#2-2-引入头文件" class="headerlink" title="2.2 引入头文件"></a>2.2 引入头文件</h2><p>拷贝<code>googletest/include</code>下的<code>gtest</code>目录到项目下的<code>include</code>目录下，然后在CMakeList.txt中添加上对应的调用：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">    <span class="keyword">include</span>/</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在代码中添加头文件gtest/gtest.h就可以使用了。</p><h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><p>修改<code>main.cpp</code>并运行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gtest/gtest.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, zero) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">0</span>, add(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, positive_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">3</span>, add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, negative_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">-3</span>, add(<span class="number">-1</span>, <span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ::testing::InitGoogleTest();</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-gtest的使用教程"><a href="#3-gtest的使用教程" class="headerlink" title="3 gtest的使用教程"></a>3 gtest的使用教程</h1><p>参考文档：<a href="https://github.com/google/googletest/blob/master/googletest/docs/primer.md" target="_blank" rel="noopener">Googletest Primer</a>，google官方出品。</p><p><a href="https://www.dyxmq.cn/program/usage-of-googletest.html" target="_blank" rel="noopener">https://www.dyxmq.cn/program/usage-of-googletest.html</a></p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://meishizaolunzi.com/cmake-an-zhuang-zhi-nan/" target="_blank" rel="noopener">CMake 安装指南</a></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="C++" scheme="https://Dragonliu2018.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++项目的全量覆盖率和增量覆盖率</title>
    <link href="https://dragonliu2018.github.io/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/"/>
    <id>https://dragonliu2018.github.io/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/</id>
    <published>2021-09-27T01:44:22.000Z</published>
    <updated>2022-01-21T13:24:36.167Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>2021.09.26华为实习任务复现，要求实现多次SR合并后的增量覆盖率。</p><h1 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###强制回滚到某版本</span></span><br><span class="line">git reset --hard 36409abd22dcc9f9252152b34fa9e929f7c883ec</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###解决：https://stackoverflow.com/questions/3411048/unexpected-operator-in-shell-programming/3411061</span></span><br><span class="line">./srCover.sh: 17: [: h: unexpected operator </span><br><span class="line">./srCover.sh: 21: [: h: unexpected operator</span><br></pre></td></tr></table></figure><h1 id="1-思路"><a href="#1-思路" class="headerlink" title="1 思路"></a>1 思路</h1><p>强行cherry-pick，可能存在冲突的情况：</p><ol><li>不冲突，是准确的</li><li>冲突，使用指定版本的代码解决冲突，是不准确的</li></ol><h1 id="2-cherry-pick"><a href="#2-cherry-pick" class="headerlink" title="2 cherry-pick"></a>2 cherry-pick</h1><h1 id="3-生成增量覆盖率报告"><a href="#3-生成增量覆盖率报告" class="headerlink" title="3 生成增量覆盖率报告"></a>3 生成增量覆盖率报告</h1><h2 id="3-1-生成差异文件"><a href="#3-1-生成差异文件" class="headerlink" title="3.1 生成差异文件"></a>3.1 生成差异文件</h2><p>v1版本：dir1目录，</p><p>v2版本：dir2目录，</p><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># diff -r  -N -x ".git" -x "*.gcov" -u &lt;old_src_path&gt; &lt;new_src_path&gt; &gt; diff.txt</span></span><br><span class="line">diff -r  -N -x <span class="string">".git"</span> -x <span class="string">"*.gc*"</span> -x <span class="string">"result"</span> -x <span class="string">"hello"</span> -x <span class="string">"hello.info"</span> -u dir1 dir2 &gt; diff.txt</span><br></pre></td></tr></table></figure><h2 id="3-2-生成v2版本的全量覆盖率报告"><a href="#3-2-生成v2版本的全量覆盖率报告" class="headerlink" title="3.2 生成v2版本的全量覆盖率报告"></a>3.2 生成v2版本的全量覆盖率报告</h2><blockquote><ul><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6943512.html" target="_blank" rel="noopener">代码覆盖工具(gcov、lcov)的使用</a></li></ul><p>gcov是Linux下GCC自带的一个C/C++代码覆盖率分析工具,因此只要安装了gcc，就不需要再次安装了。</p><p>gcov能够生成代码覆盖信息，但是不够直观，因此需要借助lcov直观展示覆盖率，主要特点有：</p><ul><li>基于Html输出，并生成一棵完整的HTML树</li><li>输出包括概述、覆盖率百分比、图表，能快速浏览覆盖率数据</li><li>支持大项目，提供三个级别的视图：目录视图、文件视图、源码视图</li></ul></blockquote><ol><li><p>安装<a href="http://ltp.sourceforge.net/coverage/lcov.php" target="_blank" rel="noopener">lcov</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linux-test-project/lcov.git</span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> lcov</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>以hello.c为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is zero\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is one\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is NAN\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译时候加两个参数：-fprofile-arcs -ftest-coverage, 此时会生成：hello.gcno</span></span><br><span class="line">gcc -fprofile-arcs -ftest-coverage hello.c -o hello</span><br><span class="line"><span class="comment"># 此时会生成： hello.gcda, hello.gcno和hello.gcda是gcov引用的关键文件)</span></span><br><span class="line">./hello</span><br><span class="line"><span class="comment"># gcov根据上面的文件生成了：hello.c.gcov,就是代码覆盖信息，但看起来并不直观</span></span><br><span class="line">gcov hello.c</span><br><span class="line"><span class="comment">### 内容如下：</span></span><br><span class="line">➜  dir2 cat hello.c.gcov </span><br><span class="line">        -:    0:Source:hello.c</span><br><span class="line">        -:    0:Graph:hello.gcno</span><br><span class="line">        -:    0:Data:hello.gcda</span><br><span class="line">        -:    0:Runs:1</span><br><span class="line">        -:    0:Programs:1</span><br><span class="line">        -:    1:<span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">        -:    2:</span><br><span class="line">        1:    3:int main()</span><br><span class="line">        -:    4:&#123;</span><br><span class="line">        1:    5:        int num = 1;</span><br><span class="line">        1:    6:        <span class="keyword">if</span> (num == 0) &#123;</span><br><span class="line">    <span class="comment">#####:    7:                printf("num is zero\n");</span></span><br><span class="line">        1:    8:        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == 1) &#123;</span><br><span class="line">        1:    9:                <span class="built_in">printf</span>(<span class="string">"num is one\n"</span>);</span><br><span class="line">        -:   10:        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">#####:   11:                printf("num is NAN\n");</span></span><br><span class="line">        -:   12:        &#125;</span><br><span class="line">        1:   13:        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">        1:   14:        <span class="built_in">return</span> 0;</span><br><span class="line">        -:   15:&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 借助lcov对hello.c.gcov进行改造，可以看见生成了hello.info</span></span><br><span class="line">lcov -d . -t <span class="string">'Hello test'</span> -o <span class="string">'hello.info'</span> -b . -c</span><br><span class="line"><span class="comment"># 生成了result文件夹，借助web服务器，我们就可以很直观的看到结果了</span></span><br><span class="line">genhtml -o result hello.info</span><br></pre></td></tr></table></figure></li><li><p>查看生成的全量覆盖率报告，用浏览器打开result文件夹内的index.html：</p><p><img src="https://i.loli.net/2021/09/26/aAG4BMTl2mjrIUZ.png" width="1000" height="250" alt="图片名称" align="center" id="31"></p></li></ol><h2 id="3-3-使用addlcov生成增量代码覆盖率文件"><a href="#3-3-使用addlcov生成增量代码覆盖率文件" class="headerlink" title="3.3 使用addlcov生成增量代码覆盖率文件"></a>3.3 使用addlcov生成增量代码覆盖率文件</h2><p><code>addlcov --diff &lt;full_cov_file&gt; diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt;</code></p><ul><li><full_cov_file>为之前统计的v2版本上的全量覆盖率；</full_cov_file></li><li><add_cov_file>为输出的增量覆盖率info文件；</add_cov_file></li><li><depth>是要截取的代码深度；</depth></li><li><new_src_path>是v2版本源码</new_src_path></li></ul><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addlcov --diff  diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt;</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  Test1 ./addlcov --diff hello.info diff.txt -o addhello.info  --strip 5 --path ./dir2</span><br><span class="line">Reading tracefile hello.info</span><br><span class="line">Reading diff diff.txt</span><br><span class="line">Removing /mnt/e/Code/cpp/Test1/dir1/hello.c</span><br><span class="line">1 entry converted, 0 entries left unchanged.</span><br><span class="line">Writing data to addhello.info</span><br><span class="line">Summary coverage rate:</span><br><span class="line">  lines......: no data found</span><br><span class="line">  <span class="built_in">functions</span>..: no data found</span><br><span class="line">  branches...: no data found</span><br><span class="line">  </span><br><span class="line"><span class="comment">### bug addlcov脚本无法匹配</span></span><br><span class="line"><span class="comment"># Try to match diff filename with filename</span></span><br><span class="line"><span class="comment"># if ($filename =~ /^\Q$diff_path$sep$_\E$/) 修改为下面语句，</span></span><br><span class="line"><span class="keyword">if</span> (1 == 1)</span><br><span class="line"><span class="comment">### 单文件出现上述问题，多文件无问题</span></span><br></pre></td></tr></table></figure><p>python中执行shell命令：<a href="https://blog.51cto.com/zhou123/1284377" target="_blank" rel="noopener">https://blog.51cto.com/zhou123/1284377</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="C++" scheme="https://Dragonliu2018.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Hexo迁移到新电脑</title>
    <link href="https://dragonliu2018.github.io/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
    <id>https://dragonliu2018.github.io/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</id>
    <published>2021-09-21T15:28:58.000Z</published>
    <updated>2022-01-21T13:25:08.792Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>换了一台电脑，将旧电脑的hexo博客写作环境迁移到新电脑上。</p><h1 id="1-Git下载及配置"><a href="#1-Git下载及配置" class="headerlink" title="1 Git下载及配置"></a>1 Git下载及配置</h1><ol><li>从官网Git下载git并安装，下面设置无密push+pull；</li><li>打开git bash，在用户主目录(其他目录也可)下运行：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 把其中的邮件地址换成自己的邮件地址，然后一路回车；</li><li>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人；</li><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。 </li><li>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了</li></ol><h1 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h1><ol><li>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 <code>node -v</code>；</li><li>检测npm是否安装成功，在命令行中输入<code>npm -v</code></li></ol><h1 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h1><p>新建文件夹，在此文件夹内使用npm命令全局安装Hexo，输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入<code>hexo -v</code>检查是否安装成功。</p><blockquote><p>npm加速：</p><ol><li><p>装cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>使用cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    cnpm install xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><p>参考：<a href="https://cloud.tencent.com/developer/article/1372949" target="_blank" rel="noopener">npm使用国内镜像加速的几种方法</a></p></blockquote><h1 id="4-复制原电脑上的数据"><a href="#4-复制原电脑上的数据" class="headerlink" title="4 复制原电脑上的数据"></a>4 复制原电脑上的数据</h1><h2 id="4-1-需要复制的"><a href="#4-1-需要复制的" class="headerlink" title="4.1 需要复制的"></a>4.1 需要复制的</h2><ul><li>_config.yml：站点配置</li><li>package.json：说明使用那些包</li><li>scaffolds：文章的模板</li><li>source：自己写的博客文件</li><li>themes：主题</li><li>.gitignore：限定在提交的时候哪些文件可以忽略</li></ul><h2 id="4-2-需要删除的"><a href="#4-2-需要删除的" class="headerlink" title="4.2 需要删除的"></a>4.2 需要删除的</h2><ul><li>.git：无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。</li><li>node_modules：在用<code>npm install</code>会重新生成</li><li>public：<code>hexo g</code>会重新生成</li><li>.deploy_git：在使用hexo d时也会重新生成</li><li>db.json文件</li></ul><p>其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。</p><h1 id="5-npm-install"><a href="#5-npm-install" class="headerlink" title="5 npm install"></a>5 npm install</h1><p>在git bash中切换目录到新拷贝的文件夹里，使用<code>npm install</code> 命令，进行模块安装。很明显我们这里<font color="red">没用hexo init初始化</font>，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h1 id="6-安装其他必要组件"><a href="#6-安装其他必要组件" class="headerlink" title="6 安装其他必要组件"></a>6 安装其他必要组件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># 为了使用hexo d来部署到git上 </span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment"># 为了建立RSS订阅</span></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment"># 为了建立站点地图</span></span><br></pre></td></tr></table></figure><p>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p><h1 id="7-验证"><a href="#7-验证" class="headerlink" title="7 验证"></a>7 验证</h1><p>首先本地执行，在博客根目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，查看是否转移成功。</p><p>接下来验证部署，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>在线访问出错，无法访问。开始排查：</p><ol><li><p>.deploy_git文件夹内的文件大小均为0kb，也就是生成了一些空文件；</p></li><li><font color="pink">public文件夹内的文件大小均为0kb，但是本地可以正常访问，不知道为啥</font></li><li><p>其实在执行<code>hexo s</code>时，后台存在报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show <span class="built_in">where</span> the warning was created)</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>解决方法：Node版本太高，切换一个低版本Node可以（我这里是14.17.6切换成12.5.0就没有这个问题了）</p></li><li><p>问题已解决，可以在线访问博客了。</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
    <category term="Hexo" scheme="https://Dragonliu2018.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>python中的全局变量——list</title>
    <link href="https://dragonliu2018.github.io/2021/06/27/list%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>https://dragonliu2018.github.io/2021/06/27/list%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</id>
    <published>2021-06-27T01:44:22.000Z</published>
    <updated>2022-01-21T13:28:10.431Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-List"><a href="#1-List" class="headerlink" title="1 List"></a>1 List</h1><p><strong>python中list作为全局变量无需global声明的原因</strong>：</p><blockquote><p><a href="https://www.cnblogs.com/yym2013/p/5915980.html" target="_blank" rel="noopener">https://www.cnblogs.com/yym2013/p/5915980.html</a></p></blockquote><p>python中list变量作为全局变量时，在函数中可以直接修改。</p><p>而普通变量则需要先在函数中global声明，否则会报错。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　<span class="keyword">global</span> a</span><br><span class="line">　　a = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　b[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>在函数中直接修改list则是可以的。</p><p>原因是：</p><p>普通变量如果在函数中赋值</p><p><code>a = 2</code></p><p>会有歧义。因为它既可以是表示引用全局变量a，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global。</p><p>而对列表list变量进行赋值</p><p><code>b[0] = 2</code></p><p>则不会有歧义。它是“明确的”，因为如果把b当作是局部变量的话，它会报KeyError，所以它只能是引用全局的b,故不需要多此一举显式声明global。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>MAC地址泛洪与欺骗</title>
    <link href="https://dragonliu2018.github.io/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/"/>
    <id>https://dragonliu2018.github.io/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/</id>
    <published>2021-03-04T13:47:39.000Z</published>
    <updated>2022-01-21T13:27:18.796Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p>　　MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。</p><p>　　MAC地址泛洪攻击，每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目标主机的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p><p>　　与ARP攻击不同：MAC地址欺骗改变的是端口/MAC地址映射关系，ARP攻击改变的是IP/MAC地址映射关系。</p><p>　　MAC地址泛洪攻击针对路由器不行，原因是路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。参考：<a href="https://www.cnblogs.com/Lynn-Zhang/articles/5754336.html" target="_blank" rel="noopener">交换机和路由器的区别在哪里 一针见血通俗解答</a></p><p>　　实验网络拓扑如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-03-05_11-19-37.jpg" width="700" height="400" alt="图片名称" align="center" id="32"></p><h2 id="1-2-知识储备"><a href="#1-2-知识储备" class="headerlink" title="1.2 知识储备"></a>1.2 知识储备</h2><ul><li><strong>MAC地址</strong>：它是一个用来确认网络设备位置的位址。在<a href="https://baike.baidu.com/item/OSI模型" target="_blank" rel="noopener">OSI模型</a>中，第三层网络层负责<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>，第二层数据链路层则负责MAC位址。MAC地址用于在网络中唯一标示一个<a href="https://baike.baidu.com/item/网卡" target="_blank" rel="noopener">网卡</a>，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。由网络设备制造商生产时烧录在网卡(Network lnterface Card)的<a href="https://baike.baidu.com/item/EPROM/1690813" target="_blank" rel="noopener">EPROM</a>(一种闪存芯片，通常可以通过程序擦写)。<a href="https://baike.baidu.com/item/IP地址/150859" target="_blank" rel="noopener">IP地址</a>与MAC地址在计算机里都是以<a href="https://baike.baidu.com/item/二进制/361457" target="_blank" rel="noopener">二进制</a>表示的，IP地址是32位的，而MAC地址则是48位的，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址。</li><li><strong>交换机</strong>：主要功能是在局域网内的主机之间转发数据帧，工作核心是<strong>端口/MAC地址映射表</strong>，这张表里记录了交换机每个端口同与之相连的主机MAC地址之间的对应关系。交换机接收从主机上传来的比特流之后，要先将其缓存成数据帧，然后通过分析帧头中的MAC地址，交换机就可以判断出数据的发送方和接收方，在映射表里查找与数据帧的目的MAC地址相对应的端口。若找到则发给目的主机；若找不到则以广播的方式将这个数据帧向除了源端口以外的其它所有端口转发，从而将数据发送给了目的主机，并记录端口与MAC地址的对应关系。</li></ul><h1 id="2-实战"><a href="#2-实战" class="headerlink" title="2 实战"></a>2 实战</h1><h2 id="2-1-MAC地址欺骗"><a href="#2-1-MAC地址欺骗" class="headerlink" title="2.1 MAC地址欺骗"></a>2.1 MAC地址欺骗</h2><ol><li><strong>准备</strong>：没有交换机物理设备，vmware中桥接模式中有虚拟交换机(但是无法登陆后台)，所以只能利用路由器测试(也无法进入后台)，只能查看现象了。</li><li>此处未进行实践，可参考：<a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li></ol><h2 id="2-2-MAC地址泛洪攻击"><a href="#2-2-MAC地址泛洪攻击" class="headerlink" title="2.2 MAC地址泛洪攻击"></a>2.2 MAC地址泛洪攻击</h2><ol><li>以<code>kali</code>为攻击机，使用<code>macof</code>命令向网络中发送大量网络不存在的源mac地址，堵塞交换机(路由器)的CAM表；</li><li>攻击前，<code>Win物理机</code>可以ping通kali、node01、node02、node03；</li><li>攻击后，按道理此时的路由器中的CAM表中存在大量陌生MAC地址记录，但是目前无法查看；现象为：请求超时或间断ping通，但可以ping通外网及局域网内其它主机。</li></ol><h1 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3 存在问题"></a>3 存在问题</h1><ul><li>没有物理交换机，虚拟交换机无法登陆后台</li><li>用路由器测试，但是无法登录后台查看CAM表，可参考：<a href="https://cloud.tencent.com/developer/article/1482014" target="_blank" rel="noopener">小米路由器开启SSH</a></li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://baike.baidu.com/item/MAC%E5%9C%B0%E5%9D%80/1254181?fr=aladdin" target="_blank" rel="noopener">百度百科-MAC地址</a></li><li><a href="https://blog.csdn.net/weixin_34234829/article/details/85088965?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs" target="_blank" rel="noopener">MAC泛洪<em>*</em>的实施与防御</a></li><li><a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li><li><a href="https://www.youtube.com/watch?v=FiDq8g0gBsI" target="_blank" rel="noopener">亁颐堂现任明教教主CCNA Security 2019 7 第三天 2 MAC泛洪MAC欺骗</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="安全" scheme="https://Dragonliu2018.github.io/categories/安全/"/>
    
    
    <category term="Web" scheme="https://Dragonliu2018.github.io/tags/Web/"/>
    
  </entry>
  
</feed>
