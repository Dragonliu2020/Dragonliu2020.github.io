<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon Liu</title>
  
  
  <link href="https://dragonliu2022.github.io/atom.xml" rel="self"/>
  
  <link href="https://dragonliu2022.github.io/"/>
  <updated>2022-07-21T16:48:37.597Z</updated>
  <id>https://dragonliu2022.github.io/</id>
  
  <author>
    <name>Dragon Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python读取表格日期类型</title>
    <link href="https://dragonliu2022.github.io/2022/07/20/Python%E8%AF%BB%E5%8F%96%E8%A1%A8%E6%A0%BC%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B/"/>
    <id>https://dragonliu2022.github.io/2022/07/20/Python%E8%AF%BB%E5%8F%96%E8%A1%A8%E6%A0%BC%E6%97%A5%E6%9C%9F%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-07-20T15:57:48.000Z</published>
    <updated>2022-07-21T16:48:37.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>读取excel表格，但是日期类型的cell取出来是个数字，需要改成日期类型。</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 转化为元组形式</span></span><br><span class="line">xlrd.xldate_as_tuple(table.cell(<span class="number">2</span>,<span class="number">2</span>).value, <span class="number">0</span>)</span><br><span class="line">(<span class="number">2014</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接转化为datetime对象</span></span><br><span class="line">xlrd.xldate.xldate_as_datetime(table.cell(<span class="number">2</span>,<span class="number">2</span>).value, <span class="number">1</span>)</span><br><span class="line">datetime.datetime(<span class="number">2018</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有转化</span></span><br><span class="line">table.cell(<span class="number">2</span>,<span class="number">2</span>).value</span><br><span class="line"><span class="number">41828.0</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/orangleliu/article/details/38476881" target="_blank" rel="noopener">[Python]xlrd 读取excel 日期类型2种方式</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://dragonliu2022.github.io/categories/Python/"/>
    
    <category term="基础" scheme="https://dragonliu2022.github.io/categories/Python/基础/"/>
    
    
  </entry>
  
  <entry>
    <title>Python读取xlsx表格文件失败</title>
    <link href="https://dragonliu2022.github.io/2022/07/20/Python%E8%AF%BB%E5%8F%96xlsx%E8%A1%A8%E6%A0%BC%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5/"/>
    <id>https://dragonliu2022.github.io/2022/07/20/Python%E8%AF%BB%E5%8F%96xlsx%E8%A1%A8%E6%A0%BC%E6%96%87%E4%BB%B6%E5%A4%B1%E8%B4%A5/</id>
    <published>2022-07-20T15:46:50.000Z</published>
    <updated>2022-07-21T16:48:41.135Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-报错"><a href="#1-报错" class="headerlink" title="1 报错"></a>1 报错</h1><p>报错信息如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xlrd.biffh.XLRDError: Excel xlsx file; not supported</span><br></pre></td></tr></table></figure><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h2 id="2-1-调低xlrd版本（推荐）"><a href="#2-1-调低xlrd版本（推荐）" class="headerlink" title="2.1 调低xlrd版本（推荐）"></a>2.1 调低xlrd版本（推荐）</h2><p>xlrd过高，卸载旧版本重新安装1.2.0：</p><div class="table-container"><table><thead><tr><th>版本</th><th>支持</th></tr></thead><tbody><tr><td>xlrd 1.2</td><td>支持 .xls 、 .xlsx 文件</td></tr><tr><td>xlrd 2.0</td><td>只支持.xls文件</td></tr></tbody></table></div><p>在cmd中执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip uninstall xlrd</span><br><span class="line">pip install xlrd==1.2.0</span><br></pre></td></tr></table></figure><p>再运行代码出现下面的报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AttributeError: <span class="string">'ElementTree'</span> object has no attribute <span class="string">'getiterator'</span></span><br></pre></td></tr></table></figure><p>在新版python3.9中，windows中使用的更新删除了getiterator方法，所以我们老版本的xlrd库调用getiterator方法时会报错。</p><ol><li>找出Python安装目录<code>python\Lib\site-packages\xlrd</code>下的<code>xlsx.py</code>文件；</li><li>如果找不到文件地址，可以在 cmd 输入 <code>pip show xlrd</code> 即可找到xlrd的文件地址；</li><li>将两个地方的<code>getiterator()</code>改成<code>iter()</code>；</li><li>然后重新载入程序就解决了。</li></ol><h2 id="2-2-调低excel版本"><a href="#2-2-调低excel版本" class="headerlink" title="2.2 调低excel版本"></a>2.2 调低excel版本</h2><p>excel文件的版本过高，复制源文件，另存为：xls格式。</p><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/sinat_37868031/article/details/113376079?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-113376079-blog-111904690.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1-113376079-blog-111904690.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1" target="_blank" rel="noopener">xlrd.biffh.XLRDError: Excel xlsx file； not supported，两种解决方案</a></li><li><a href="https://blog.csdn.net/suhao0911/article/details/110950742" target="_blank" rel="noopener">AttributeError: ‘ElementTree‘ object has no attribute ‘getiterator‘</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://dragonliu2022.github.io/categories/Python/"/>
    
    <category term="基础" scheme="https://dragonliu2022.github.io/categories/Python/基础/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux无法识别移动硬盘</title>
    <link href="https://dragonliu2022.github.io/2022/07/15/Linux%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/"/>
    <id>https://dragonliu2022.github.io/2022/07/15/Linux%E6%97%A0%E6%B3%95%E8%AF%86%E5%88%AB%E7%A7%BB%E5%8A%A8%E7%A1%AC%E7%9B%98/</id>
    <published>2022-07-15T15:34:58.000Z</published>
    <updated>2022-07-21T17:00:19.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>Centos7 插入 ntfs 类型的移动硬盘/U盘时，无法访问，提示如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error mounting xxx at xxx: Filesystem <span class="built_in">type</span> ntfs not configured <span class="keyword">in</span> kernel</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：redhat系统使用yum包管理工具，因此下面的解决方法也适用。</p></blockquote><h1 id="2-解决方法1"><a href="#2-解决方法1" class="headerlink" title="2 解决方法1"></a>2 解决方法1</h1><ol><li><p>由于 centos 默认没有ntfs的源，因此需要先加源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure></li><li><p>更新源列表到本地：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li><li><p>进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install ntfs-3g</span><br></pre></td></tr></table></figure><p>安装之后无需重启就可以正常使用移动硬盘/U盘了。</p></li></ol><h1 id="3-解决方法2"><a href="#3-解决方法2" class="headerlink" title="3 解决方法2"></a>3 解决方法2</h1><p>如果只是复制文件到主机，那么只需要cp指令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &lt;源文件地址&gt; &lt;目标地址&gt;</span><br></pre></td></tr></table></figure><blockquote><p>该方法是从软件杯初审老师哪里学到的。</p></blockquote><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/chy555chy/article/details/113747253" target="_blank" rel="noopener">centos7 filesystem type ntfs not configured in kernel</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    <category term="操作系统" scheme="https://dragonliu2022.github.io/categories/操作系统/"/>
    
    <category term="Linux" scheme="https://dragonliu2022.github.io/categories/操作系统/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux创建桌面快捷方式</title>
    <link href="https://dragonliu2022.github.io/2022/07/15/Linux%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/"/>
    <id>https://dragonliu2022.github.io/2022/07/15/Linux%E5%88%9B%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F/</id>
    <published>2022-07-15T11:10:16.000Z</published>
    <updated>2022-07-21T17:00:10.691Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>在windows下创建桌面快捷方式比较容易，右键即可。在Linux下创建快捷方式就比较麻烦了，整理下。</p><blockquote><p>这种方法在centos7和redhat系统中测试成功；</p><p>在Ubuntu上失败，有个拙劣的方法：将下面的<code>go2dir.sh</code>和<code>go2url,sh</code>脚本放到桌面，当作快捷方式。</p></blockquote><h1 id="2-跳转指定文件夹"><a href="#2-跳转指定文件夹" class="headerlink" title="2 跳转指定文件夹"></a>2 跳转指定文件夹</h1><ol><li><p>新建shell脚本<code>go2dir.sh</code>，具有文件夹跳转功能，内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">nautilus /home/dragon/cpp</span><br></pre></td></tr></table></figure><p>nautilus是终端命令，后面是指定要跳转的文件夹路径。</p><p>将脚本添加执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x go2dir.sh</span><br></pre></td></tr></table></figure><ol><li><p>在桌面上新建<code>GotoDir.desktop</code>文件，内容如下，关注<code>Exec</code>和<code>Icon</code>变量，代表脚本和图标：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=GotoDir</span><br><span class="line">Comment=Go To My Dir</span><br><span class="line">Exec=/home/dragon/go2dir.sh</span><br><span class="line">Icon=/home/dragon/go2dir.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure><ol><li>在桌面上双击快捷方式，即可实现一键跳转指定文件夹。</li></ol></li></ol></li></ol><h1 id="3-跳转指定网页-url"><a href="#3-跳转指定网页-url" class="headerlink" title="3 跳转指定网页(url)"></a>3 跳转指定网页(url)</h1><ol><li><p>新建shell脚本<code>go2url.sh</code>，具有网页跳转功能（火狐浏览器），内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"> </span><br><span class="line">firefox --new-window www.baidu.com</span><br></pre></td></tr></table></figure><p>nautilus是终端命令，后面是指定要跳转的文件夹路径。</p><p>将脚本添加执行权限：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x go2url.sh</span><br></pre></td></tr></table></figure><ol><li><p>在桌面上新建<code>GotoUrl.desktop</code>文件，内容如下，关注<code>Exec</code>和<code>Icon</code>变量，代表脚本和图标：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=GotoUrl</span><br><span class="line">Comment=Go To My Url</span><br><span class="line">Exec=/home/dragon/go2url.sh</span><br><span class="line">Icon=/home/dragon/go2url.png</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">StartupNotify=<span class="literal">true</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br></pre></td></tr></table></figure></li><li><p>在桌面上双击快捷方式，即可实现一键跳转指定网页。</p></li></ol></li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/libaineu2004/article/details/83757377" target="_blank" rel="noopener">CentOS 7 新建桌面快捷方式，实现一键跳转到指定的文件夹路径</a></li><li><a href="https://zditect.com/article/2115540.html" target="_blank" rel="noopener">从命令行 Linux 启动 Firefox</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    <category term="操作系统" scheme="https://dragonliu2022.github.io/categories/操作系统/"/>
    
    <category term="Linux" scheme="https://dragonliu2022.github.io/categories/操作系统/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>Windows下配置多个Git/Github账号</title>
    <link href="https://dragonliu2022.github.io/2022/07/05/Windows%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit-Github%E8%B4%A6%E5%8F%B7/"/>
    <id>https://dragonliu2022.github.io/2022/07/05/Windows%E4%B8%8B%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAGit-Github%E8%B4%A6%E5%8F%B7/</id>
    <published>2022-07-05T04:53:24.000Z</published>
    <updated>2022-07-05T14:18:11.143Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>一般情况下，一台电脑配置一个Git账号。但是当需要两个或以上的Github账号时，来回切换非常麻烦，所以需要配置多个Git账号。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Github账号</th><th style="text-align:center">邮箱</th><th style="text-align:center">Git SSH KEY</th></tr></thead><tbody><tr><td style="text-align:center">User1</td><td style="text-align:center">User1@email.com</td><td style="text-align:center">id_rsa_User1</td></tr><tr><td style="text-align:center">User2</td><td style="text-align:center">User2@email.com</td><td style="text-align:center">id_rsa_User2</td></tr></tbody></table></div><h1 id="2-生成SSH-KEY"><a href="#2-生成SSH-KEY" class="headerlink" title="2 生成SSH KEY"></a>2 生成SSH KEY</h1><ol><li><p>打开CMD或者GIT Bash，生成第一个账号的KEY：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;ssh-keygen -t rsa -f <span class="string">"C:\Users\Dragon Liu\.ssh\id_rsa_User1"</span> -C <span class="string">"User1@email.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\Dragon Liu\.ssh\id_rsa_User1.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\Dragon Liu\.ssh\id_rsa_User1.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:QtnbRf80ayMhPJvBE1lUHsDvhdLhgSeA7kdofqzLT/Y User1@email.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|         ..o*=oo |</span></span><br><span class="line"><span class="string">|       o. oo+o= .|</span></span><br><span class="line"><span class="string">|      o... B.*o*.|</span></span><br><span class="line"><span class="string">|     .  +o..O =++|</span></span><br><span class="line"><span class="string">|      .+So.o o.+o|</span></span><br><span class="line"><span class="string">|       .o +   o..|</span></span><br><span class="line"><span class="string">|         +o      |</span></span><br><span class="line"><span class="string">|       ..o .     |</span></span><br><span class="line"><span class="string">|        oo. E    |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></li><li><p>生成第二个账号的KEY：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">E:\&gt;ssh-keygen -t rsa -f <span class="string">"C:\Users\Dragon Liu\.ssh\id_rsa_User2"</span> -C <span class="string">"User2@email.com"</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> C:\Users\Dragon Liu\.ssh\id_rsa_User2.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> C:\Users\Dragon Liu\.ssh\id_rsa_User2.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:Ib6+x8PwGBbgMhBg0l/4IGWBCaTF81mY9BIUjrr8DI8 User2@email.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 3072]----+</span></span><br><span class="line"><span class="string">|BB.*O*           |</span></span><br><span class="line"><span class="string">|=.B+*oo          |</span></span><br><span class="line"><span class="string">|...*oBo .        |</span></span><br><span class="line"><span class="string">| .o =oo. .       |</span></span><br><span class="line"><span class="string">|.  o  ..S        |</span></span><br><span class="line"><span class="string">|..    +.         |</span></span><br><span class="line"><span class="string">|.o   ..B         |</span></span><br><span class="line"><span class="string">|  *  .. *        |</span></span><br><span class="line"><span class="string">| E +  oo .       |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure></li><li><p>进入当前用户的.ssh目录查看，生成id_rsa私钥文件和id_rsa.pub公钥文件，如下截图：</p><p><img src="https://s2.loli.net/2022/07/05/5Qoa8DRf41pGL2A.png" width="600" height="400" alt="图片名称" align="center" id="207"></p></li></ol><h1 id="3-添加至Github"><a href="#3-添加至Github" class="headerlink" title="3 添加至Github"></a>3 添加至Github</h1><ol><li><p>用户User1和User2分别登陆Github，点击<code>settings</code>，选择<code>SSH and GPG keys</code>，点击<code>New SSH key</code>：</p><p><img src="https://s2.loli.net/2022/07/05/bCyVkL3mYHnGteK.png" width="700" height="300" alt="图片名称" align="center" id="208"></p></li><li><p><code>Title</code>随便填，<code>Key</code>填<code>id_rsa_xxx.pub</code>的内容（公钥）：</p><p><img src="https://s2.loli.net/2022/07/05/1N5dJFMWxTKG3pE.png" width="600" height="300" alt="图片名称" align="center" id="209"></p></li></ol><h1 id="4-配置config文件"><a href="#4-配置config文件" class="headerlink" title="4 配置config文件"></a>4 配置config文件</h1><ol><li><p>在.ssh目录下创建一个<code>config</code>文件，每个账号配置一个Host节点。主要配置项说明：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host &lt;主机别名&gt;</span><br><span class="line">    HostName &lt;服务器真实地址&gt;</span><br><span class="line">    IdentityFile &lt;私钥文件路径&gt;</span><br><span class="line">    PreferredAuthentications &lt;认证方式&gt;</span><br><span class="line">    User &lt;用户名&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置文件内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置User1</span></span><br><span class="line">Host User1.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile <span class="string">"C:\\Users\\Dragon Liu\\.ssh\\id_rsa_User1"</span></span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User User1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置User2</span></span><br><span class="line">Host User2.github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile <span class="string">"C:\\Users\\Dragon Liu\\.ssh\\id_rsa_User2"</span></span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User User2</span><br></pre></td></tr></table></figure></li><li><p>配置完成后，在cmd或者Git Bash中输入以下命令测试该用户的SSH密钥是否生效：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@User1.github.com</span><br><span class="line">ssh -T git@User2.github.com</span><br></pre></td></tr></table></figure></li></ol><h1 id="5-使用"><a href="#5-使用" class="headerlink" title="5 使用"></a>5 使用</h1><ol><li><p>为各仓库单独配置用户名和邮箱：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"User1"</span></span><br><span class="line">git config user.email <span class="string">"User1@email.com"</span></span><br></pre></td></tr></table></figure></li><li><p>远程仓库地址需要修改：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 原来的</span></span><br><span class="line">git@github.com:xxx/xxxxx.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行修改</span></span><br><span class="line">git remote rm origin</span><br><span class="line">git remote add origin git@User1.github.com:xxx/xxxxx.git</span><br></pre></td></tr></table></figure></li></ol><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/q13554515812/article/details/83506172" target="_blank" rel="noopener">配置多个Git账号（windows 10）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    
    <category term="Git" scheme="https://dragonliu2022.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Lab3实验总结</title>
    <link href="https://dragonliu2022.github.io/2022/06/05/Lab3%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://dragonliu2022.github.io/2022/06/05/Lab3%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2022-06-05T12:52:07.000Z</published>
    <updated>2022-07-21T17:04:00.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>这个编程实验需要实现一个简单的cache, 并尝试实现各种替换算法来优化程序的性能. 在代码目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>来编译, 生成可执行文件 <code>a.out</code> . 其运行方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.out [-r seed] [trace]</span><br></pre></td></tr></table></figure><p>其中 <code>seed</code> 是随机种子, 可以用于确定性回放帮助调试, 缺省时会用系统时间作为种子; <code>trace</code> 是 <code>bz2</code> 压缩格式的访存序列, 缺省时会产生随机访存序列来测试.</p><blockquote><p>具体见讲义：<a href="https://zhong-kangwei.gitee.io/ics-pa-gitbook-2022/lab3.html" target="_blank" rel="noopener">https://zhong-kangwei.gitee.io/ics-pa-gitbook-2022/lab3.html</a></p></blockquote><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><h2 id="init-cache-（20分）"><a href="#init-cache-（20分）" class="headerlink" title="init_cache （20分）"></a>init_cache （20分）</h2><ul><li><p>cache结构设计</p><ul><li><p>思路</p><p>主存$32KB=2^{15}B$，块$64B=2^6B$，cache容量$16KB=2^{14}B$，行数$16KB/64B=2^8B$；由于四路组相联，所以cache组号占$2^8B/4=6$位，所以Tag占$15-6-6=3$位。</p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line"><span class="keyword">bool</span> valid_bit:<span class="number">1</span>;<span class="comment">//valid bit</span></span><br><span class="line"><span class="keyword">bool</span> tag:<span class="number">3</span>;<span class="comment">//Tag</span></span><br><span class="line"><span class="keyword">bool</span> data[<span class="number">64</span>];<span class="comment">//block: data</span></span><br><span class="line"><span class="keyword">bool</span> dirty_bit:<span class="number">1</span>;<span class="comment">//dirty bit</span></span><br><span class="line">&#125;Cache;</span><br><span class="line"></span><br><span class="line">Cache *cache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>cache初始化</p><ul><li><p>思路<br>算出总行数，然后遍历cache并将所有valid bit置为无效即可。</p></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_cache</span><span class="params">(<span class="keyword">int</span> total_size_width, <span class="keyword">int</span> associativity_width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lines = exp2( total_size_width - BLOCK_WIDTH );<span class="comment">//number of lines??</span></span><br><span class="line"><span class="comment">//printf("%d\n", lines);</span></span><br><span class="line">cache = <span class="built_in">malloc</span>( lines * <span class="keyword">sizeof</span>(Cache) );<span class="comment">//init a cache</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Set all valid bits as invalid</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i &lt; lines; i++ )&#123;</span><br><span class="line">cache[i].valid_bit = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="cache-read-30分"><a href="#cache-read-30分" class="headerlink" title="cache_read (30分)"></a>cache_read (30分)</h2><ul><li><p>思路：首先将主存地址进行划分，然后分情况讨论：</p><ul><li>命中成功，在相关cache组中找到符合条件(tag位相同且有效位有效)的cache行，则直接从cache中读出；</li><li>命中失败，但在该组中有空闲行，则到主存读取一块信息并设置标记位；</li><li>命中失败且在该组中未找到空闲行，则任意替代该组的某一行并设置cache。</li></ul></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//get data from cache</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">get_data</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> offset)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> ret = cache[num].data[offset] + </span><br><span class="line">(cache[num].data[offset + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) + </span><br><span class="line">(cache[num].data[offset + <span class="number">2</span>] &lt;&lt; <span class="number">16</span>) + </span><br><span class="line">(cache[num].data[offset + <span class="number">3</span>] &lt;&lt; <span class="number">24</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">cache_read</span><span class="params">(<span class="keyword">uintptr_t</span> addr)</span> </span>&#123;</span><br><span class="line">try_increase(<span class="number">1</span>);<span class="comment">//visit cache times ++</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Memory address division</span></span><br><span class="line">addr = addr &amp; <span class="number">0x7FFF</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> tag, cache_group_num, block_offset, block_num;</span><br><span class="line">block_offset = addr &amp; <span class="number">0x3C</span>;<span class="comment">//block addr: 6 bits, 4 bytes alignment</span></span><br><span class="line">cache_group_num = (addr &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>;<span class="comment">//cache group number: 6 bits</span></span><br><span class="line">tag = (addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x7</span>;<span class="comment">//tag: 3 bits</span></span><br><span class="line">block_num = (tag &lt;&lt; <span class="number">6</span>) | cache_group_num;<span class="comment">//memory block number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> paddr, ret_data;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">//flag hit or not</span></span><br><span class="line"><span class="keyword">int</span> start = cache_group_num * <span class="number">4</span>;<span class="comment">//the start of a group</span></span><br><span class="line"><span class="keyword">int</span><span class="built_in">end</span>   = start + <span class="number">3</span>;          <span class="comment">//the end of a group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Find the corresponding group</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span> ; i++ )&#123;</span><br><span class="line"><span class="comment">//Successful hit</span></span><br><span class="line"><span class="keyword">if</span>( cache[i].tag == tag &amp;&amp; cache[i].valid_bit )&#123;</span><br><span class="line">hit_increase(<span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">ret_data = get_data(i, block_offset);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//failed hit</span></span><br><span class="line"><span class="keyword">if</span>( !flag )&#123;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="literal">false</span>;<span class="comment">// flag that is there a free line</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !cache[i].valid_bit  )&#123;</span><br><span class="line">flg = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[i].data);<span class="comment">//read data from memory</span></span><br><span class="line">cache[i].tag = tag;</span><br><span class="line">cache[i].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[i].dirty_bit = <span class="literal">false</span>;</span><br><span class="line">ret_data = get_data(i, block_offset); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cannot find a free line, </span></span><br><span class="line"><span class="keyword">if</span>( !flg )&#123;</span><br><span class="line"><span class="keyword">int</span> rand_line = start + rand()%<span class="number">4</span>;<span class="comment">//find a random line</span></span><br><span class="line"><span class="comment">//if dirty, write first</span></span><br><span class="line"><span class="keyword">if</span>( cache[rand_line].dirty_bit )&#123;</span><br><span class="line">paddr = ( cache[rand_line].tag &lt;&lt; <span class="number">6</span> ) | cache_group_num ;</span><br><span class="line">mem_write(paddr, cache[rand_line].data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[rand_line].data);</span><br><span class="line">cache[rand_line].tag = tag;</span><br><span class="line">cache[rand_line].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[rand_line].dirty_bit = <span class="literal">false</span>;</span><br><span class="line">ret_data = get_data(rand_line, block_offset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret_data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="cache-write-30分"><a href="#cache-write-30分" class="headerlink" title="cache_write (30分)"></a>cache_write (30分)</h2><ul><li><p>思路：首先将主存地址进行划分，然后分情况讨论(与读类似)：</p><ul><li>命中成功，在相关cache组中找到符合条件(tag位相同且有效位有效)的cache行，则根据写掩码写入cache并置脏位；</li><li>命中失败，但在该组中有空闲行，则根据写掩码写入cache并设置标记位；</li><li>命中失败且在该组中未找到空闲行，则随机取一行；判断脏位是否为1，若为1则将当前的cache行写回主存，然后根据写掩码写入cache并设置cache。</li></ul></li><li><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set the data of cache by wmask</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_cache</span><span class="params">(<span class="keyword">int</span> num , <span class="keyword">uint32_t</span> offset , <span class="keyword">uint32_t</span> wmask , <span class="keyword">uint32_t</span> data)</span></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> standard_data;</span><br><span class="line">standard_data = get_data(num, offset); </span><br><span class="line">standard_data = ( standard_data &amp; ( ~ wmask) ) | (data &amp; wmask);</span><br><span class="line"></span><br><span class="line">cache[num].data[offset]     = standard_data         &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">1</span>] = (standard_data &gt;&gt;  <span class="number">8</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">2</span>] = (standard_data &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">cache[num].data[offset + <span class="number">3</span>] = (standard_data &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cache_write</span><span class="params">(<span class="keyword">uintptr_t</span> addr, <span class="keyword">uint32_t</span> data, <span class="keyword">uint32_t</span> wmask)</span> </span>&#123;</span><br><span class="line">try_increase(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//Memory address division</span></span><br><span class="line">addr = addr &amp; <span class="number">0x7FFF</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> tag, cache_group_num, block_offset, block_num;</span><br><span class="line">block_offset = addr &amp; <span class="number">0x3C</span>;</span><br><span class="line">cache_group_num = (addr &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>;</span><br><span class="line">tag = (addr &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x7</span>;</span><br><span class="line">    block_num = (tag &lt;&lt; <span class="number">6</span>) | cache_group_num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uint32_t</span> paddr;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;<span class="comment">// flag write hit or not</span></span><br><span class="line"><span class="keyword">int</span> start = cache_group_num * <span class="number">4</span>;<span class="comment">//the start of a group</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">end</span>   = start + <span class="number">3</span>;<span class="comment">//the end of a group</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Find the corresponding group</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//successful hit</span></span><br><span class="line"><span class="keyword">if</span>( cache[i].tag == tag &amp;&amp; cache[i].valid_bit )&#123;</span><br><span class="line">hit_increase(<span class="number">1</span>);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">set_cache(i, block_offset, wmask, data);<span class="comment">//write data</span></span><br><span class="line">cache[i].dirty_bit = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//failed hit</span></span><br><span class="line"><span class="keyword">if</span>( !flag )&#123;</span><br><span class="line"><span class="keyword">bool</span> flg = <span class="literal">false</span>;<span class="comment">//flag that is there a free line</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">int</span> i = start ; i &lt;= <span class="built_in">end</span>; i++ )&#123;</span><br><span class="line"><span class="comment">//find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !cache[i].valid_bit )&#123;</span><br><span class="line">flg = <span class="literal">true</span>;</span><br><span class="line">mem_read(block_num, cache[i].data);<span class="comment">//read data from memory</span></span><br><span class="line">set_cache(i, block_offset, wmask, data);<span class="comment">//write data to cache</span></span><br><span class="line">cache[i].tag = tag;</span><br><span class="line">cache[i].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[i].dirty_bit = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cannot find a free line</span></span><br><span class="line"><span class="keyword">if</span>( !flg )&#123;</span><br><span class="line"><span class="keyword">int</span> rand_line = start + rand()%<span class="number">4</span>;<span class="comment">//find a random line</span></span><br><span class="line"><span class="comment">//if dirty, write first</span></span><br><span class="line"><span class="keyword">if</span>( cache[rand_line].dirty_bit )&#123;</span><br><span class="line">paddr = ( cache[rand_line].tag &lt;&lt; <span class="number">6</span> ) | cache_group_num;</span><br><span class="line">mem_write(paddr, cache[rand_line].data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//set cache</span></span><br><span class="line">mem_read(block_num, cache[rand_line].data);</span><br><span class="line">set_cache(rand_line, block_offset, wmask , data);</span><br><span class="line">cache[rand_line].tag = tag;</span><br><span class="line">cache[rand_line].valid_bit = <span class="literal">true</span>;</span><br><span class="line">cache[rand_line].dirty_bit = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="最终结果截图（20分）"><a href="#最终结果截图（20分）" class="headerlink" title="最终结果截图（20分）"></a>最终结果截图（20分）</h2><p><img src="https://s2.loli.net/2022/06/05/TkSoKYvaZm7dDq1.jpg" width="800" height="200" alt="图片名称" align="center" id="206"></p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ul><li><strong>问</strong>：数据对齐和存储层次结构：想一想, 为什么编译器为变量分配存储空间的时候一般都会对齐? 访问一个没有对齐的存储空间会经历怎么样的过程?</li><li><strong>答</strong>：需要字节对齐的根本原因在于CPU访问数据的效率问题。若存储空间未对齐，则可能出现多次访存，然后组合成目标数据，因此带来指令执行效率的降低。</li><li><strong>参考</strong>：<ul><li><a href="https://blog.csdn.net/hunanchenxingyu/article/details/53942407" target="_blank" rel="noopener">为什么需要字节对齐</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计组" scheme="https://dragonliu2022.github.io/categories/计组/"/>
    
    
    <category term="Lab" scheme="https://dragonliu2022.github.io/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>Java中调用Python程序</title>
    <link href="https://dragonliu2022.github.io/2022/05/29/Java%E4%B8%AD%E8%B0%83%E7%94%A8Python%E7%A8%8B%E5%BA%8F/"/>
    <id>https://dragonliu2022.github.io/2022/05/29/Java%E4%B8%AD%E8%B0%83%E7%94%A8Python%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-05-29T14:28:07.000Z</published>
    <updated>2022-05-29T14:28:07.991Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gdb调试</title>
    <link href="https://dragonliu2022.github.io/2022/05/27/gdb%E8%B0%83%E8%AF%95/"/>
    <id>https://dragonliu2022.github.io/2022/05/27/gdb%E8%B0%83%E8%AF%95/</id>
    <published>2022-05-27T05:24:18.000Z</published>
    <updated>2022-07-21T17:10:34.740Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1 前言"></a>1 前言</h1><p>gdb调试是必须要掌握的基本技能。</p><h1 id="2-安装gdb-peda"><a href="#2-安装gdb-peda" class="headerlink" title="2 安装gdb-peda"></a>2 安装gdb-peda</h1><p>gdb-peda是gdb的插件，加强gdb调试能力。</p><p>安装方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att$ git <span class="built_in">clone</span> htgdb-peda$ <span class="built_in">set</span> disassembly-flavor atttps://github.com/longld/peda.git ~/peda</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>安装插件后汇编指令格式改为了intel模式，不太习惯，改变为AT&amp;T格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改为AT&amp;T格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为Intel格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor intel</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/counsellor/article/details/81290335" target="_blank" rel="noopener">gdb-peda安装</a></p><p>此外，GDB dashboard插件也不错：<a href="https://github.com/cyrus-and/gdb-dashboard" target="_blank" rel="noopener">链接</a></p><h1 id="3-文档"><a href="#3-文档" class="headerlink" title="3 文档"></a>3 文档</h1><ul><li><a href="https://wizardforcel.gitbooks.io/100-gdb-tips/content/index.html" target="_blank" rel="noopener">《100个gdb小技巧》</a></li><li><a href="https://sourceware.org/gdb/current/onlinedocs/gdb/" target="_blank" rel="noopener">gdb手册</a></li></ul><h1 id="4-GDB卡片"><a href="#4-GDB卡片" class="headerlink" title="4 GDB卡片"></a>4 GDB卡片</h1><p><img src="https://s2.loli.net/2022/05/27/joJaNUkKdB5Pnew.png" width="1000" height="800" alt="图片名称" align="center" id="204"></p><p><img src="https://s2.loli.net/2022/05/27/yrgOVkfGmJQxjDT.png" width="1000" height="800" alt="图片名称" align="center" id="205"></p><h1 id="5-常见指令"><a href="#5-常见指令" class="headerlink" title="5 常见指令"></a>5 常见指令</h1><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/tianya_lu/article/details/123648314" target="_blank" rel="noopener">gdb基本命令(非常详细)</a></li><li><a href="https://www.cnblogs.com/qq78292959/archive/2012/07/20/2600865.html" target="_blank" rel="noopener">EAX、ECX、EDX、EBX寄存器的作用</a></li><li><a href="https://www.xianwaizhiyin.net/?p=1035" target="_blank" rel="noopener">X86汇编入门-寄存器32位 - 弦外之音</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    
    <category term="gdb" scheme="https://dragonliu2022.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>PA答疑之a4指令码报错</title>
    <link href="https://dragonliu2022.github.io/2022/05/27/PA%E7%AD%94%E7%96%91%E4%B9%8Ba4%E6%8C%87%E4%BB%A4%E7%A0%81%E6%8A%A5%E9%94%99/"/>
    <id>https://dragonliu2022.github.io/2022/05/27/PA%E7%AD%94%E7%96%91%E4%B9%8Ba4%E6%8C%87%E4%BB%A4%E7%A0%81%E6%8A%A5%E9%94%99/</id>
    <published>2022-05-27T05:06:36.000Z</published>
    <updated>2022-07-21T17:02:55.432Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>PA3.1在运行/bin/bmptest时，遇到提示a4这条指令没有实现的情况：</p><p><img src="https://s2.loli.net/2022/05/27/yOt4KiAgJuleBNQ.png" width="500" height="400" alt="图片名称" align="center" id="202"></p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h2 id="2-1-法1"><a href="#2-1-法1" class="headerlink" title="2.1 法1"></a>2.1 法1</h2><p>在 navy-apps/Makefile.compile 修改o2为o0即可，这是关闭了代码优化，避免了⼀些数据未保存。</p><p>在navy-apps里make clean后再重新编译。</p><h2 id="2-2-法2"><a href="#2-2-法2" class="headerlink" title="2.2 法2"></a>2.2 法2</h2><p>实现a4指令：（<code>胡宇轩学弟</code>提供）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">make_EHelper(movsb)&#123;</span><br><span class="line">  vaddr_write(cpu.edi,<span class="number">1</span>,vaddr_read(cpu.esi,<span class="number">1</span>));</span><br><span class="line">  t0 = <span class="number">1</span>;</span><br><span class="line">  rtl_add(&amp;cpu.edi,&amp;cpu.edi,&amp;t0);</span><br><span class="line">  rtl_add(&amp;cpu.esi,&amp;cpu.esi,&amp;t0);</span><br><span class="line">  print_asm(<span class="string">"movbx"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DF等于0是递增，等于1是递减，具体实现见386手册：</p><p><img src="https://s2.loli.net/2022/05/27/AimEsOoM9XalY8c.png" width="600" height="400" alt="图片名称" align="center" id="203"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计组" scheme="https://dragonliu2022.github.io/categories/计组/"/>
    
    
    <category term="PA" scheme="https://dragonliu2022.github.io/tags/PA/"/>
    
  </entry>
  
  <entry>
    <title>64位Ubuntu运行或调试32位程序</title>
    <link href="https://dragonliu2022.github.io/2022/05/26/64%E4%BD%8DUbuntu%E8%BF%90%E8%A1%8C32%E4%BD%8D%E7%A8%8B%E5%BA%8F/"/>
    <id>https://dragonliu2022.github.io/2022/05/26/64%E4%BD%8DUbuntu%E8%BF%90%E8%A1%8C32%E4%BD%8D%E7%A8%8B%E5%BA%8F/</id>
    <published>2022-05-26T05:20:32.000Z</published>
    <updated>2022-07-21T17:10:48.300Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>最近在做lab2，使用64位的Ubuntu发现无法调试和运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  lab ./bomb </span><br><span class="line">zsh: no such file or directory: ./bomb</span><br></pre></td></tr></table></figure><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><p>ubuntu 64位下可以兼容32位程序的运行，但是必须要有32位基础库的支持才行。下面进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386</span><br><span class="line">sudo apt install lib32z1</span><br></pre></td></tr></table></figure><p>安装完成后可以运行和调试了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  lab ./bomb </span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  lab gdb ./bomb</span><br><span class="line">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04.1) 9.2</span><br><span class="line">Copyright (C) 2020 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">"show copying"</span> and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from ./bomb...</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/357653128" target="_blank" rel="noopener">ubuntu 64下运行32位程序</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计组" scheme="https://dragonliu2022.github.io/categories/计组/"/>
    
    
    <category term="Ubuntu" scheme="https://dragonliu2022.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MLP的pytorch实现</title>
    <link href="https://dragonliu2022.github.io/2022/05/16/MLP%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/"/>
    <id>https://dragonliu2022.github.io/2022/05/16/MLP%E7%9A%84pytorch%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-05-16T13:40:45.000Z</published>
    <updated>2022-07-21T17:16:53.655Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>xxx</p><h1 id="2-实现"><a href="#2-实现" class="headerlink" title="2 实现"></a>2 实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_digits</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> Dataset, DataLoader</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> label_binarize</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> roc_curve, auc</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">torch.manual_seed(<span class="number">0</span>)</span><br><span class="line">torch.cuda.manual_seed_all(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"加载数据"</span>)</span><br><span class="line">digits = load_digits()</span><br><span class="line">data, label = digits.data, digits.target</span><br><span class="line"><span class="comment"># print(data.shape, label.shape)</span></span><br><span class="line">train_data, test_data, train_label, test_label = train_test_split(data, label, test_size=<span class="number">.3</span>, random_state=<span class="number">123</span>)</span><br><span class="line">print(<span class="string">'训练数据：'</span>, train_data.shape)</span><br><span class="line">print(<span class="string">'测试数据：'</span>, test_data.shape)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"定义相关参数"</span>)</span><br><span class="line">epochs = <span class="number">30</span></span><br><span class="line">batch_size = train_data.shape[<span class="number">0</span>]</span><br><span class="line">device = torch.device(<span class="string">"cuda:0"</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">"cpu"</span>)</span><br><span class="line">input_dim = data.shape[<span class="number">1</span>]</span><br><span class="line">hidden_dim = <span class="number">256</span></span><br><span class="line">output_dim = len(set(label))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"构建数据集"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DigitsDataset</span><span class="params">(Dataset)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_data, input_label)</span>:</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i,j <span class="keyword">in</span> zip(input_data, input_label):</span><br><span class="line">      data.append((i,j))</span><br><span class="line">    self.data = data</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(self.data)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, index)</span>:</span></span><br><span class="line">    d, l = self.data[index]</span><br><span class="line">    <span class="keyword">return</span> d, l</span><br><span class="line"></span><br><span class="line">trainDataset = DigitsDataset(train_data, train_label)</span><br><span class="line">testDataset = DigitsDataset(test_data, test_label)</span><br><span class="line"><span class="comment"># print(trainDataset[0])</span></span><br><span class="line"><span class="comment"># print(trainDataset[0])</span></span><br><span class="line">trainDataLoader = DataLoader(trainDataset, batch_size=batch_size, shuffle=<span class="literal">True</span>, num_workers=<span class="number">0</span>)  <span class="comment"># 2改为0</span></span><br><span class="line">testDataLoader = DataLoader(testDataset, batch_size=batch_size, shuffle=<span class="literal">False</span>, num_workers=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, input_dim, hidden_dim, output_dim)</span>:</span></span><br><span class="line">    super(Model, self).__init__()</span><br><span class="line">    self.fc1 = nn.Linear(input_dim, hidden_dim)</span><br><span class="line">    self.relu = nn.ReLU()</span><br><span class="line">    self.fc2 = nn.Linear(hidden_dim, output_dim)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">    x = self.fc1(x)</span><br><span class="line">    x = self.relu(x)</span><br><span class="line">    x = self.fc2(x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">model = Model(input_dim, hidden_dim, output_dim)</span><br><span class="line">print(model)</span><br><span class="line">model.to(device)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"定义损失函数、优化器"</span>)</span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br><span class="line">optimizer = torch.optim.SGD(model.parameters(), lr=<span class="number">0.01</span>, momentum=<span class="number">0.9</span>, weight_decay=<span class="number">1e-4</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"初始化相关参数"</span>)</span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> model.parameters():</span><br><span class="line">  nn.init.normal_(param, mean=<span class="number">0</span>, std=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">"开始训练主循环"</span>)</span><br><span class="line">total_step = len(trainDataLoader)</span><br><span class="line"></span><br><span class="line">model.train()</span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> range(epochs):</span><br><span class="line">  tot_loss = <span class="number">0.0</span></span><br><span class="line">  tot_acc = <span class="number">0.0</span></span><br><span class="line">  train_preds = []</span><br><span class="line">  train_trues = []</span><br><span class="line">  <span class="comment"># model.train()</span></span><br><span class="line">  <span class="keyword">for</span> i,(train_data_batch, train_label_batch) <span class="keyword">in</span> enumerate(trainDataLoader):</span><br><span class="line">    train_data_batch = train_data_batch.float().to(device) <span class="comment"># 将double数据转换为float</span></span><br><span class="line">    train_label_batch = train_label_batch.to(device)</span><br><span class="line">    outputs = model(train_data_batch)</span><br><span class="line">    <span class="comment"># _, preds = torch.max(outputs.data, 1)</span></span><br><span class="line">    loss = criterion(outputs, train_label_batch.type(torch.LongTensor))</span><br><span class="line">    <span class="comment"># print(loss)</span></span><br><span class="line">    <span class="comment">#反向传播优化网络参数</span></span><br><span class="line">    loss.backward()</span><br><span class="line">    optimizer.step()</span><br><span class="line">    optimizer.zero_grad()</span><br><span class="line">    <span class="comment">#累加每个step的损失</span></span><br><span class="line">    tot_loss += loss.data</span><br><span class="line">    train_outputs = outputs.argmax(dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    train_preds.extend(train_outputs.detach().cpu().numpy())</span><br><span class="line">    train_trues.extend(train_label_batch.detach().cpu().numpy())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># tot_acc += (outputs.argmax(dim=1) == train_label_batch).sum().item()</span></span><br><span class="line"></span><br><span class="line">  sklearn_accuracy = accuracy_score(train_trues, train_preds)</span><br><span class="line">  sklearn_precision = precision_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_recall = recall_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_f1 = f1_score(train_trues, train_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  print(<span class="string">"[sklearn_metrics] Epoch:&#123;&#125; loss:&#123;:.4f&#125; accuracy:&#123;:.4f&#125; precision:&#123;:.4f&#125; recall:&#123;:.4f&#125; f1:&#123;:.4f&#125;"</span>.format(epoch, tot_loss, sklearn_accuracy, sklearn_precision, sklearn_recall, sklearn_f1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_confusion_matrix</span><span class="params">(trues, preds)</span>:</span></span><br><span class="line">  labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">  conf_matrix = confusion_matrix(trues, preds, labels=labels)</span><br><span class="line">  <span class="keyword">return</span> conf_matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_confusion_matrix</span><span class="params">(conf_matrix)</span>:</span></span><br><span class="line">  plt.imshow(conf_matrix, cmap=plt.cm.Greens)</span><br><span class="line">  indices = range(conf_matrix.shape[<span class="number">0</span>])</span><br><span class="line">  labels = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">  plt.xticks(indices, labels)</span><br><span class="line">  plt.yticks(indices, labels)</span><br><span class="line">  plt.colorbar()</span><br><span class="line">  plt.xlabel(<span class="string">'y_pred'</span>)</span><br><span class="line">  plt.ylabel(<span class="string">'y_true'</span>)</span><br><span class="line">  <span class="comment"># 显示数据</span></span><br><span class="line">  <span class="keyword">for</span> first_index <span class="keyword">in</span> range(conf_matrix.shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> second_index <span class="keyword">in</span> range(conf_matrix.shape[<span class="number">1</span>]):</span><br><span class="line">      plt.text(first_index, second_index, conf_matrix[first_index, second_index])</span><br><span class="line">  plt.savefig(<span class="string">'heatmap_confusion_matrix.jpg'</span>)</span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test_preds = []</span><br><span class="line">test_trues = []</span><br><span class="line">model.eval()</span><br><span class="line"><span class="keyword">with</span> torch.no_grad():</span><br><span class="line">  <span class="keyword">for</span> i,(test_data_batch, test_data_label) <span class="keyword">in</span> enumerate(testDataLoader):</span><br><span class="line">    test_data_batch = test_data_batch.float().to(device) <span class="comment"># 将double数据转换为float</span></span><br><span class="line">    test_data_label = test_data_label.to(device)</span><br><span class="line">    test_outputs = model(test_data_batch)</span><br><span class="line">    test_outputs = test_outputs.argmax(dim=<span class="number">1</span>)</span><br><span class="line">    test_preds.extend(test_outputs.detach().cpu().numpy())</span><br><span class="line">    test_trues.extend(test_data_label.detach().cpu().numpy())</span><br><span class="line"></span><br><span class="line">  sklearn_precision = precision_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_recall = recall_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  sklearn_f1 = f1_score(test_trues, test_preds, average=<span class="string">'micro'</span>)</span><br><span class="line">  print(classification_report(test_trues, test_preds))</span><br><span class="line">  conf_matrix = get_confusion_matrix(test_trues, test_preds)</span><br><span class="line">  print(conf_matrix)</span><br><span class="line">  plot_confusion_matrix(conf_matrix)</span><br><span class="line">  print(<span class="string">"[sklearn_metrics] accuracy:&#123;:.4f&#125; precision:&#123;:.4f&#125; recall:&#123;:.4f&#125; f1:&#123;:.4f&#125;"</span>.format(sklearn_accuracy, sklearn_precision, sklearn_recall, sklearn_f1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Press the green button in the gutter to run the script.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">'train-mlp'</span>)</span><br><span class="line">    end = time.time()</span><br><span class="line">    print((end - start) / <span class="number">60</span>, <span class="string">"min"</span>)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="人工智能" scheme="https://dragonliu2022.github.io/categories/人工智能/"/>
    
    
  </entry>
  
  <entry>
    <title>sklean常见机器学习分类器</title>
    <link href="https://dragonliu2022.github.io/2022/05/16/sklean%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>https://dragonliu2022.github.io/2022/05/16/sklean%E5%B8%B8%E8%A7%81%E5%88%86%E7%B1%BB%E5%99%A8/</id>
    <published>2022-05-16T12:28:16.000Z</published>
    <updated>2022-07-21T17:17:00.759Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>使用python的机器学习库sklearn实现常见的机器学习分类算法，如决策树、随机森林等。</p><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rf_train</span><span class="params">()</span>:</span></span><br><span class="line">    api_train = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>]])</span><br><span class="line">    type_train = np.array([<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line">    api_test = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line">    type_test = np.array([<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">    clf = DecisionTreeClassifier(random_state=<span class="number">0</span>)</span><br><span class="line">    rfc = RandomForestClassifier(random_state=<span class="number">0</span>)</span><br><span class="line">    clf = clf.fit(api_train, type_train)</span><br><span class="line">    rfc = rfc.fit(api_train, type_train)</span><br><span class="line">    score_c = clf.score(api_test, type_test)</span><br><span class="line">    score_r = rfc.score(api_test, type_test)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"Single Tree:&#123;&#125;"</span>.format(score_c), <span class="string">"Random Forest:&#123;&#125;"</span>.format(score_r))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    print(<span class="string">'最终版-随机森林'</span>)</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    print((end - start) / <span class="number">60</span>, <span class="string">"min"</span>)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/weixin_41571493/article/details/83011147" target="_blank" rel="noopener">【机器学习】Sklearn 常用分类器（全）</a></li><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="人工智能" scheme="https://dragonliu2022.github.io/categories/人工智能/"/>
    
    
  </entry>
  
  <entry>
    <title>Lab2实验总结</title>
    <link href="https://dragonliu2022.github.io/2022/05/15/Lab2%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://dragonliu2022.github.io/2022/05/15/Lab2%E5%AE%9E%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2022-05-15T13:58:16.000Z</published>
    <updated>2022-07-21T17:03:04.156Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-准备"><a href="#1-准备" class="headerlink" title="1 准备"></a>1 准备</h1><h2 id="1-1-安装gdb-peda"><a href="#1-1-安装gdb-peda" class="headerlink" title="1.1 安装gdb-peda"></a>1.1 安装gdb-peda</h2><p>gdb-peda是gdb的插件，加强gdb调试能力。</p><p>安装方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att$ git <span class="built_in">clone</span> htgdb-peda$ <span class="built_in">set</span> disassembly-flavor atttps://github.com/longld/peda.git ~/peda</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"source ~/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>安装插件后汇编指令格式改为了intel模式，不太习惯，改变为AT&amp;T格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改为AT&amp;T格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor att</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改为Intel格式</span></span><br><span class="line">gdb-peda$ <span class="built_in">set</span> disassembly-flavor intel</span><br></pre></td></tr></table></figure><p><strong>参考</strong>：<a href="https://blog.csdn.net/counsellor/article/details/81290335" target="_blank" rel="noopener">gdb-peda安装</a></p><h2 id="1-2-gdb-amp-peda使用"><a href="#1-2-gdb-amp-peda使用" class="headerlink" title="1.2 gdb&amp;peda使用"></a>1.2 gdb&amp;peda使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 载入可执行程序</span></span><br><span class="line">gdb &lt;file name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置断点</span></span><br><span class="line">b &lt;地址或函数名等&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># (重新)运行程序，若有断点，会卡在第一个断点</span></span><br><span class="line">r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 继续执行程序至下一个断点</span></span><br><span class="line">c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行一(n)条指令，进入call</span></span><br><span class="line">s &lt;n&gt;</span><br><span class="line"><span class="comment"># 执行一(n)条指令，不进入call</span></span><br><span class="line">n &lt;n&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看断点</span></span><br><span class="line">info b</span><br><span class="line">i b</span><br><span class="line"><span class="comment"># 删除断点 n为断点编号</span></span><br><span class="line">delete &lt;n&gt;</span><br><span class="line">d &lt;n&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反汇编，func为某个函数</span></span><br><span class="line">disassemble &lt;func&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示addr处的内存信息</span></span><br><span class="line">x/nfu &lt;addr&gt;</span><br><span class="line"><span class="comment">#n表示输出单元的个数</span></span><br><span class="line"><span class="comment">#f是输出格式。比如x是以16进制形式输出，o是以8进制形式输出等等。</span></span><br><span class="line"><span class="comment">#u标明一个单元的长度。b是一个byte，h是两个byte（halfword），w是四个byte（word），g是八个byte（giant word）。</span></span><br></pre></td></tr></table></figure><h2 id="1-3-计组知识"><a href="#1-3-计组知识" class="headerlink" title="1.3 计组知识"></a>1.3 计组知识</h2><p> <strong>汇编格式</strong>：</p><ul><li>Intel格式：目的操作数在左，MASM采用</li><li>AT&amp;T格式：目的操作数在右，objdump和gcc默认格式</li></ul><p><strong>栈</strong>：</p><ul><li>先进后出</li><li>从高地址向低地址增长</li><li>ESP指向栈顶</li><li>EBP指向栈底</li></ul><p><strong>大小端模式</strong>：</p><ul><li>大端（Big-Endian）：高字节存低地址，低字节存低高地址</li><li>小端（Little-Endian）：低字节存低地址，高字节存高地址</li></ul><p><strong>常见指令</strong>：</p><ul><li><code>push</code>：R[sp] ← R[sp] - 2 或者  R[esp] ← R[esp] - 4，然后将一个字或双字从指定寄存器送到SP或者ESP指示的单元；</li><li><code>pop</code>：然后将一个字或双字从SP或者ESP指示的单元送到指定寄存器，再执行R[sp] ← R[sp] + 2 或者  R[esp] ← R[esp] + 4</li><li><code>call &lt;func_addr&gt;</code>：先push EIP（当前指令的第一条指令地址），再执行jmp <func_addr></func_addr></li><li><code>ret</code>：pop EIP</li><li><code>leave</code>：先执行mov %ebp %esp，再pop %ebp</li></ul><h2 id="1-4-lab概览"><a href="#1-4-lab概览" class="headerlink" title="1.4 lab概览"></a>1.4 lab概览</h2><p>通过IDA打开bomb文件，找到主函数main，发现需要需要进行六次输入，对应phase_1到phase_6函数，每次输入需要躲开explode_bomb()函数，否则拆炸弹失败。</p><h1 id="2-phase-1"><a href="#2-phase-1" class="headerlink" title="2 phase_1"></a>2 phase_1</h1><h2 id="2-1-解析"><a href="#2-1-解析" class="headerlink" title="2.1 解析"></a>2.1 解析</h2><p>IDA查看phase_1函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">phase_1</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = strings_not_equal(a1, <span class="string">"And they have no disregard for human life."</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_1函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_1</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_1:</span><br><span class="line">=&gt; 0x00401662 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401666 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401667 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401669 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x0040166a &lt;+8&gt;:     sub    esp,0xc</span><br><span class="line">   0x0040166d &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401672 &lt;+16&gt;:    add    ebx,0x38f2</span><br><span class="line">   0x00401678 &lt;+22&gt;:    lea    eax,[ebx-0x1e20]</span><br><span class="line">   0x0040167e &lt;+28&gt;:    push   eax</span><br><span class="line">   0x0040167f &lt;+29&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401682 &lt;+32&gt;:    call   0x401bdf &lt;strings_not_equal&gt;</span><br><span class="line">   0x00401687 &lt;+37&gt;:    add    esp,0x10</span><br><span class="line">   0x0040168a &lt;+40&gt;:    <span class="built_in">test</span>   eax,eax</span><br><span class="line">   0x0040168c &lt;+42&gt;:    jne    0x401693 &lt;phase_1+49&gt;</span><br><span class="line">   0x0040168e &lt;+44&gt;:    mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x00401691 &lt;+47&gt;:    leave</span><br><span class="line">   0x00401692 &lt;+48&gt;:    ret</span><br><span class="line">   0x00401693 &lt;+49&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401698 &lt;+54&gt;:    jmp    0x40168e &lt;phase_1+44&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title="2.2 思路"></a>2.2 思路</h2><p>看伪代码直接得出答案，输入需要与给定字符串一致。</p><hr><p>如果不看伪代码，使用gdb动态调试则：</p><ol><li><p>载入bomb：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ gdb bomb</span><br><span class="line">GNU gdb (Debian 8.2.1-2+b3) 8.2.1</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type <span class="string">"show copying"</span> and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"i686-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line"></span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line"></span><br><span class="line">warning: build/bdist.linux-i686/wheel/peda/peda.py: No such file or directory</span><br><span class="line">Reading symbols from bomb...done.</span><br><span class="line">gdb-peda$</span><br></pre></td></tr></table></figure></li><li><p>在main函数处打断点，并执行到该断点：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b main</span><br><span class="line">Breakpoint 1 at 0x14cd: file bomb.c, line 37.</span><br><span class="line">gdb-peda$ r</span><br></pre></td></tr></table></figure></li><li><p>在phase_1函数处打断点，并执行到该断点：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b phase_1</span><br><span class="line">Breakpoint 2 at 0x401662</span><br><span class="line">gdb-peda$ c</span><br><span class="line">Continuing.</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x401651 &lt;main+388&gt;: call   0x401300 &lt;__printf_chk@plt&gt;</span><br><span class="line">   0x401656 &lt;main+393&gt;: mov    DWORD PTR [esp],0x8</span><br><span class="line">   0x40165d &lt;main+400&gt;: call   0x4012a0 &lt;<span class="built_in">exit</span>@plt&gt;</span><br><span class="line">=&gt; 0x401662 &lt;phase_1&gt;:  endbr32</span><br><span class="line">   0x401666 &lt;phase_1+4&gt;:        push   ebp</span><br><span class="line">   0x401667 &lt;phase_1+5&gt;:        mov    ebp,esp</span><br><span class="line">   0x401669 &lt;phase_1+7&gt;:        push   ebx</span><br><span class="line">   0x40166a &lt;phase_1+8&gt;:        sub    esp,0xc</span><br></pre></td></tr></table></figure></li><li><p>执行8步到<code>0x0040167e &lt;+28&gt;:    push   eax</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ n 8</span><br><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x403144 (<span class="string">"And they have no disregard for human life."</span>)</span><br><span class="line">EBX: 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">ECX: 0x2b (<span class="string">'+'</span>)</span><br><span class="line">EDX: 0x1</span><br><span class="line">ESI: 0xbffff574 --&gt; 0xbffff6bf (<span class="string">"/home/liuzhenlong/lab_debug/bomb_162020203/bomb95/bomb"</span>)</span><br><span class="line">EDI: 0xb7fbc000 --&gt; 0x1d9d6c</span><br><span class="line">EBP: 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">ESP: 0xbffff488 --&gt; 0xb7e13cb9 (&lt;__new_exitfn+9&gt;:       add    ebx,0x1a8347)</span><br><span class="line">EIP: 0x40167e (&lt;phase_1+28&gt;:    push   eax)</span><br><span class="line">EFLAGS: 0x202 (carry parity adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x40166d &lt;phase_1+11&gt;:       call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x401672 &lt;phase_1+16&gt;:       add    ebx,0x38f2</span><br><span class="line">   0x401678 &lt;phase_1+22&gt;:       lea    eax,[ebx-0x1e20]</span><br><span class="line">=&gt; 0x40167e &lt;phase_1+28&gt;:       push   eax</span><br><span class="line">   0x40167f &lt;phase_1+29&gt;:       push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x401682 &lt;phase_1+32&gt;:       call   0x401bdf &lt;strings_not_equal&gt;</span><br><span class="line">   0x401687 &lt;phase_1+37&gt;:       add    esp,0x10</span><br><span class="line">   0x40168a &lt;phase_1+40&gt;:       <span class="built_in">test</span>   eax,eax</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff488 --&gt; 0xb7e13cb9 (&lt;__new_exitfn+9&gt;:      add    ebx,0x1a8347)</span><br><span class="line">0004| 0xbffff48c --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">0008| 0xbffff490 --&gt; 0xbffff574 --&gt; 0xbffff6bf (<span class="string">"/home/liuzhenlong/lab_debug/bomb_162020203/bomb95/bomb"</span>)</span><br><span class="line">0012| 0xbffff494 --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">0016| 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">0020| 0xbffff49c --&gt; 0x40155a (&lt;main+141&gt;:      call   0x40203c &lt;phase_defused&gt;)</span><br><span class="line">0024| 0xbffff4a0 --&gt; 0x405760 (<span class="string">"And they have no disregard for human life."</span>)</span><br><span class="line">0028| 0xbffff4a4 --&gt; 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x0040167e <span class="keyword">in</span> phase_1 ()</span><br></pre></td></tr></table></figure><p>此时可以看到EAX中所指向的字符串，也就是答案。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard <span class="keyword">for</span> human life.</span><br></pre></td></tr></table></figure><h1 id="3-phase-2"><a href="#3-phase-2" class="headerlink" title="3 phase_2"></a>3 phase_2</h1><h2 id="3-1-解析"><a href="#3-1-解析" class="headerlink" title="3.1 解析"></a>3.1 解析</h2><p>IDA查看phase_2函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">read_six_numbers</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  result = __isoc99_sscanf(a1, &amp;unk_33A1, a2, a2 + <span class="number">4</span>, a2 + <span class="number">8</span>);</span><br><span class="line">  <span class="keyword">if</span> ( result &lt;= <span class="number">5</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_2</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3[<span class="number">5</span>]; <span class="comment">// [esp+Ch] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v4; <span class="comment">// [esp+20h] [ebp-20h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+24h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  read_six_numbers(a1, v3);</span><br><span class="line">  <span class="keyword">if</span> ( v3[<span class="number">0</span>] != <span class="number">1</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  v1 = v3;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1[<span class="number">1</span>] != <span class="number">2</span> * *v1 )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    ++v1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v1 != (<span class="keyword">int</span> *)&amp;v4 );</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_2函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_2</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_2:</span><br><span class="line">   0x0040169a &lt;+0&gt;:     endbr32</span><br><span class="line">   0x0040169e &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x0040169f &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x004016a1 &lt;+7&gt;:     push   edi</span><br><span class="line">   0x004016a2 &lt;+8&gt;:     push   esi</span><br><span class="line">   0x004016a3 &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x004016a4 &lt;+10&gt;:    sub    esp,0x34</span><br><span class="line">   0x004016a7 &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x004016ac &lt;+18&gt;:    add    ebx,0x38b8</span><br><span class="line">   0x004016b2 &lt;+24&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x004016b8 &lt;+30&gt;:    mov    DWORD PTR [ebp-0x1c],eax</span><br><span class="line">   0x004016bb &lt;+33&gt;:    xor    eax,eax</span><br><span class="line">   0x004016bd &lt;+35&gt;:    lea    eax,[ebp-0x34]</span><br><span class="line">   0x004016c0 &lt;+38&gt;:    push   eax</span><br><span class="line">   0x004016c1 &lt;+39&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x004016c4 &lt;+42&gt;:    call   0x401eba &lt;read_six_numbers&gt;</span><br><span class="line">   0x004016c9 &lt;+47&gt;:    add    esp,0x10</span><br><span class="line">   0x004016cc &lt;+50&gt;:    cmp    DWORD PTR [ebp-0x34],0x1</span><br><span class="line">   0x004016d0 &lt;+54&gt;:    jne    0x4016da &lt;phase_2+64&gt;</span><br><span class="line">   0x004016d2 &lt;+56&gt;:    lea    esi,[ebp-0x34]</span><br><span class="line">   0x004016d5 &lt;+59&gt;:    lea    edi,[ebp-0x20]</span><br><span class="line">   0x004016d8 &lt;+62&gt;:    jmp    0x4016ed &lt;phase_2+83&gt;</span><br><span class="line">   0x004016da &lt;+64&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004016df &lt;+69&gt;:    jmp    0x4016d2 &lt;phase_2+56&gt;</span><br><span class="line">   0x004016e1 &lt;+71&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004016e6 &lt;+76&gt;:    add    esi,0x4</span><br><span class="line">   0x004016e9 &lt;+79&gt;:    cmp    esi,edi</span><br><span class="line">   0x004016eb &lt;+81&gt;:    je     0x4016f8 &lt;phase_2+94&gt;</span><br><span class="line">   0x004016ed &lt;+83&gt;:    mov    eax,DWORD PTR [esi]</span><br><span class="line">   0x004016ef &lt;+85&gt;:    add    eax,eax</span><br><span class="line">   0x004016f1 &lt;+87&gt;:    cmp    DWORD PTR [esi+0x4],eax</span><br><span class="line">   0x004016f4 &lt;+90&gt;:    je     0x4016e6 &lt;phase_2+76&gt;</span><br><span class="line">   0x004016f6 &lt;+92&gt;:    jmp    0x4016e1 &lt;phase_2+71&gt;</span><br><span class="line">   0x004016f8 &lt;+94&gt;:    mov    eax,DWORD PTR [ebp-0x1c]</span><br><span class="line">   0x004016fb &lt;+97&gt;:    xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x00401702 &lt;+104&gt;:   jne    0x40170c &lt;phase_2+114&gt;</span><br><span class="line">   0x00401704 &lt;+106&gt;:   lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401707 &lt;+109&gt;:   pop    ebx</span><br><span class="line">   0x00401708 &lt;+110&gt;:   pop    esi</span><br><span class="line">   0x00401709 &lt;+111&gt;:   pop    edi</span><br><span class="line">   0x0040170a &lt;+112&gt;:   pop    ebp</span><br><span class="line">   0x0040170b &lt;+113&gt;:   ret</span><br><span class="line">   0x0040170c &lt;+114&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title="3.2 思路"></a>3.2 思路</h2><p>从伪代码看：需要输入6个数字，而且第一个数字为1，后面的数字是前面的两倍。</p><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 2 4 8 16 32</span><br></pre></td></tr></table></figure><h1 id="4-phase-3"><a href="#4-phase-3" class="headerlink" title="4 phase_3"></a>4 phase_3</h1><h2 id="4-1-解析"><a href="#4-1-解析" class="headerlink" title="4.1 解析"></a>4.1 解析</h2><p>IDA查看phase_3函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> __cdecl <span class="title">phase_3</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v1; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v2[<span class="number">3</span>]; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2[<span class="number">1</span>] = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v1, v2) &gt; <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v1 &lt;= <span class="number">7</span> )</span><br><span class="line">      __asm &#123; jmp     edx &#125;</span><br><span class="line">    explode_bomb();</span><br><span class="line">  &#125;</span><br><span class="line">  explode_bomb();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_3函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_3</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_3:</span><br><span class="line">=&gt; 0x00401711 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401715 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401716 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401718 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401719 &lt;+8&gt;:     sub    esp,0x14</span><br><span class="line">   0x0040171c &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401721 &lt;+16&gt;:    add    ebx,0x3843</span><br><span class="line">   0x00401727 &lt;+22&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x0040172d &lt;+28&gt;:    mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x00401730 &lt;+31&gt;:    xor    eax,eax</span><br><span class="line">   0x00401732 &lt;+33&gt;:    lea    eax,[ebp-0x10]</span><br><span class="line">   0x00401735 &lt;+36&gt;:    push   eax</span><br><span class="line">   0x00401736 &lt;+37&gt;:    lea    eax,[ebp-0x14]</span><br><span class="line">   0x00401739 &lt;+40&gt;:    push   eax</span><br><span class="line">   0x0040173a &lt;+41&gt;:    lea    eax,[ebx-0x1bb7]</span><br><span class="line">   0x00401740 &lt;+47&gt;:    push   eax</span><br><span class="line">   0x00401741 &lt;+48&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401744 &lt;+51&gt;:    call   0x4012d0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x00401749 &lt;+56&gt;:    add    esp,0x10</span><br><span class="line">   0x0040174c &lt;+59&gt;:    cmp    eax,0x1</span><br><span class="line">   0x0040174f &lt;+62&gt;:    jle    0x40176a &lt;phase_3+89&gt;</span><br><span class="line">   0x00401751 &lt;+64&gt;:    cmp    DWORD PTR [ebp-0x14],0x7</span><br><span class="line">   0x00401755 &lt;+68&gt;:    ja     0x4017e1 &lt;phase_3+208&gt;</span><br><span class="line">   0x0040175b &lt;+74&gt;:    mov    eax,DWORD PTR [ebp-0x14]</span><br><span class="line">   0x0040175e &lt;+77&gt;:    mov    edx,ebx</span><br><span class="line">   0x00401760 &lt;+79&gt;:    add    edx,DWORD PTR [ebx+eax*4-0x1dc4]</span><br><span class="line">   0x00401767 &lt;+86&gt;:    notrack jmp edx</span><br><span class="line">   0x0040176a &lt;+89&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040176f &lt;+94&gt;:    jmp    0x401751 &lt;phase_3+64&gt;</span><br><span class="line">   0x00401771 &lt;+96&gt;:    mov    eax,0x398</span><br><span class="line">   0x00401776 &lt;+101&gt;:   sub    eax,0xd8</span><br><span class="line">   0x0040177b &lt;+106&gt;:   add    eax,0x1ad</span><br><span class="line">   0x00401780 &lt;+111&gt;:   sub    eax,0x3e</span><br><span class="line">   0x00401783 &lt;+114&gt;:   add    eax,0x3e</span><br><span class="line">   0x00401786 &lt;+117&gt;:   sub    eax,0x3e</span><br><span class="line">   0x00401789 &lt;+120&gt;:   add    eax,0x3e</span><br><span class="line">   0x0040178c &lt;+123&gt;:   sub    eax,0x3e</span><br><span class="line">   0x0040178f &lt;+126&gt;:   cmp    DWORD PTR [ebp-0x14],0x5</span><br><span class="line">   0x00401793 &lt;+130&gt;:   jg     0x40179a &lt;phase_3+137&gt;</span><br><span class="line">   0x00401795 &lt;+132&gt;:   cmp    DWORD PTR [ebp-0x10],eax</span><br><span class="line">   0x00401798 &lt;+135&gt;:   je     0x40179f &lt;phase_3+142&gt;</span><br><span class="line">   0x0040179a &lt;+137&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040179f &lt;+142&gt;:   mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x004017a2 &lt;+145&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x004017a9 &lt;+152&gt;:   jne    0x4017ed &lt;phase_3+220&gt;</span><br><span class="line">   0x004017ab &lt;+154&gt;:   mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x004017ae &lt;+157&gt;:   leave</span><br><span class="line">   0x004017af &lt;+158&gt;:   ret</span><br><span class="line">   0x004017b0 &lt;+159&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017b5 &lt;+164&gt;:   jmp    0x401776 &lt;phase_3+101&gt;</span><br><span class="line">   0x004017b7 &lt;+166&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017bc &lt;+171&gt;:   jmp    0x40177b &lt;phase_3+106&gt;</span><br><span class="line">   0x004017be &lt;+173&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017c3 &lt;+178&gt;:   jmp    0x401780 &lt;phase_3+111&gt;</span><br><span class="line">   0x004017c5 &lt;+180&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017ca &lt;+185&gt;:   jmp    0x401783 &lt;phase_3+114&gt;</span><br><span class="line">   0x004017cc &lt;+187&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017d1 &lt;+192&gt;:   jmp    0x401786 &lt;phase_3+117&gt;</span><br><span class="line">   0x004017d3 &lt;+194&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017d8 &lt;+199&gt;:   jmp    0x401789 &lt;phase_3+120&gt;</span><br><span class="line">   0x004017da &lt;+201&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017df &lt;+206&gt;:   jmp    0x40178c &lt;phase_3+123&gt;</span><br><span class="line">   0x004017e1 &lt;+208&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004017e6 &lt;+213&gt;:   mov    eax,0x0</span><br><span class="line">   0x004017eb &lt;+218&gt;:   jmp    0x40178f &lt;phase_3+126&gt;</span><br><span class="line">   0x004017ed &lt;+220&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title="4.2 思路"></a>4.2 思路</h2><p>从伪代码看，phase_3需要输入两个整数，第一个整数需要小于等于7，然后跳转到EDX，其他信息无法获取，需要gdb调试。</p><p>假设第一个数为0，进行动态调试：</p><ol><li><p>运行到<code>&lt;+79&gt;</code>，此时EDX=0x401771 (<code>&lt;phase_3+96&gt;:    mov    eax,0x398</code>)</p></li><li><p><code>&lt;+86&gt;</code>表示跳转到EDX对应的指令地址，也就是<code>&lt;+96&gt;</code></p></li><li><p><code>&lt;+126&gt;</code>和<code>&lt;+130&gt;</code>表示<strong>第一个数还需要小于等于5</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0040178f &lt;+126&gt;:   cmp    DWORD PTR [ebp-0x14],0x5</span><br><span class="line">0x00401793 &lt;+130&gt;:   jg     0x40179a &lt;phase_3+137&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;+132&gt;</code>表示第二个数需要等于EAX，此时的EAX为0x42f：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p <span class="variable">$eax</span></span><br><span class="line"><span class="variable">$24</span> = 0x42f</span><br><span class="line">gdb-peda$ d <span class="variable">$24</span></span><br><span class="line">No breakpoint number 1071.</span><br></pre></td></tr></table></figure></li><li><p>此时可以得到一组答案<code>0 1071</code>，答案不唯一。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 1071</span><br></pre></td></tr></table></figure><h1 id="5-phase-4"><a href="#5-phase-4" class="headerlink" title="5 phase_4"></a>5 phase_4</h1><h2 id="5-1-解析"><a href="#5-1-解析" class="headerlink" title="5.1 解析"></a>5.1 解析</h2><p>IDA查看phase_4函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">func4</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ebx</span></span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a1 &gt; <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = a2;</span><br><span class="line">    <span class="keyword">if</span> ( a1 != <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v3 = func4(a1 - <span class="number">1</span>, a2) + a2;</span><br><span class="line">      result = v3 + func4(a1 - <span class="number">2</span>, a2);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_4</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// [esp+4h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [esp+8h] [ebp-10h] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v5; <span class="comment">// [esp+Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( __isoc99_sscanf(a1, <span class="string">"%d %d"</span>, &amp;v4, &amp;v3) != <span class="number">2</span> || (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v3 - <span class="number">2</span>) &gt; <span class="number">2</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  v1 = func4(<span class="number">5</span>, v3);</span><br><span class="line">  <span class="keyword">if</span> ( v4 != v1 )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_4函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_4</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_4:</span><br><span class="line">   0x0040183f &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401843 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401844 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401846 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401847 &lt;+8&gt;:     sub    esp,0x14</span><br><span class="line">   0x0040184a &lt;+11&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x0040184f &lt;+16&gt;:    add    ebx,0x3715</span><br><span class="line">   0x00401855 &lt;+22&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x0040185b &lt;+28&gt;:    mov    DWORD PTR [ebp-0xc],eax</span><br><span class="line">   0x0040185e &lt;+31&gt;:    xor    eax,eax</span><br><span class="line">   0x00401860 &lt;+33&gt;:    lea    eax,[ebp-0x14]</span><br><span class="line">   0x00401863 &lt;+36&gt;:    push   eax</span><br><span class="line">   0x00401864 &lt;+37&gt;:    lea    eax,[ebp-0x10]</span><br><span class="line">   0x00401867 &lt;+40&gt;:    push   eax</span><br><span class="line">   0x00401868 &lt;+41&gt;:    lea    eax,[ebx-0x1bb7]</span><br><span class="line">   0x0040186e &lt;+47&gt;:    push   eax</span><br><span class="line">   0x0040186f &lt;+48&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401872 &lt;+51&gt;:    call   0x4012d0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">   0x00401877 &lt;+56&gt;:    add    esp,0x10</span><br><span class="line">   0x0040187a &lt;+59&gt;:    cmp    eax,0x2</span><br><span class="line">   0x0040187d &lt;+62&gt;:    jne    0x40188a &lt;phase_4+75&gt;</span><br><span class="line">   0x0040187f &lt;+64&gt;:    mov    eax,DWORD PTR [ebp-0x14]</span><br><span class="line">   0x00401882 &lt;+67&gt;:    sub    eax,0x2</span><br><span class="line">   0x00401885 &lt;+70&gt;:    cmp    eax,0x2</span><br><span class="line">   0x00401888 &lt;+73&gt;:    jbe    0x40188f &lt;phase_4+80&gt;</span><br><span class="line">   0x0040188a &lt;+75&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040188f &lt;+80&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401892 &lt;+83&gt;:    push   DWORD PTR [ebp-0x14]</span><br><span class="line">   0x00401895 &lt;+86&gt;:    push   0x5</span><br><span class="line">   0x00401897 &lt;+88&gt;:    call   0x4017f2 &lt;func4&gt;</span><br><span class="line">   0x0040189c &lt;+93&gt;:    add    esp,0x10</span><br><span class="line">   0x0040189f &lt;+96&gt;:    cmp    DWORD PTR [ebp-0x10],eax</span><br><span class="line">   0x004018a2 &lt;+99&gt;:    jne    0x4018b5 &lt;phase_4+118&gt;</span><br><span class="line">   0x004018a4 &lt;+101&gt;:   mov    eax,DWORD PTR [ebp-0xc]</span><br><span class="line">   0x004018a7 &lt;+104&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x004018ae &lt;+111&gt;:   jne    0x4018bc &lt;phase_4+125&gt;</span><br><span class="line">   0x004018b0 &lt;+113&gt;:   mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x004018b3 &lt;+116&gt;:   leave</span><br><span class="line">   0x004018b4 &lt;+117&gt;:   ret</span><br><span class="line">   0x004018b5 &lt;+118&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x004018ba &lt;+123&gt;:   jmp    0x4018a4 &lt;phase_4+101&gt;</span><br><span class="line">   0x004018bc &lt;+125&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title="5.2 思路"></a>5.2 思路</h2><p>从伪代码来看，phase_4需要输入两个整数，第二个可能是2、3、4，第一个需要满足一定的条件。</p><ol><li><p>假设第二个为2，进入gdb动态调试；</p></li><li><p>执行到<code>&lt;+96&gt;</code>，第一个值需要等于此时的EAX，查看EAX的值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ p <span class="variable">$eax</span></span><br><span class="line"><span class="variable">$28</span> = 0x18</span><br><span class="line">gdb-peda$ d <span class="variable">$28</span></span><br><span class="line">No breakpoint number 24.</span><br></pre></td></tr></table></figure></li><li><p>所以其中一个答案是<code>24 2</code></p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24 2</span><br></pre></td></tr></table></figure><h1 id="6-phase-5"><a href="#6-phase-5" class="headerlink" title="6 phase_5"></a>6 phase_5</h1><h2 id="6-1-解析"><a href="#6-1-解析" class="headerlink" title="6.1 解析"></a>6.1 解析</h2><p>IDA查看phase_5函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_BYTE *__cdecl <span class="title">phase_5</span><span class="params">(_BYTE *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  _BYTE *result; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v2; <span class="comment">// ecx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( string_length(a1) != <span class="number">6</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  result = a1;</span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    v2 += array_3066[*result++ &amp; <span class="number">0xF</span>];</span><br><span class="line">  <span class="keyword">while</span> ( result != a1 + <span class="number">6</span> );</span><br><span class="line">  <span class="keyword">if</span> ( v2 != <span class="number">44</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_5函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_5</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_5:</span><br><span class="line">=&gt; 0x004018c1 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x004018c5 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x004018c6 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x004018c8 &lt;+7&gt;:     push   edi</span><br><span class="line">   0x004018c9 &lt;+8&gt;:     push   esi</span><br><span class="line">   0x004018ca &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x004018cb &lt;+10&gt;:    sub    esp,0x18</span><br><span class="line">   0x004018ce &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x004018d3 &lt;+18&gt;:    add    ebx,0x3691</span><br><span class="line">   0x004018d9 &lt;+24&gt;:    mov    esi,DWORD PTR [ebp+0x8]</span><br><span class="line">   0x004018dc &lt;+27&gt;:    push   esi</span><br><span class="line">   0x004018dd &lt;+28&gt;:    call   0x401bb9 &lt;string_length&gt;</span><br><span class="line">   0x004018e2 &lt;+33&gt;:    add    esp,0x10</span><br><span class="line">   0x004018e5 &lt;+36&gt;:    cmp    eax,0x6</span><br><span class="line">   0x004018e8 &lt;+39&gt;:    jne    0x401917 &lt;phase_5+86&gt;</span><br><span class="line">   0x004018ea &lt;+41&gt;:    mov    eax,esi</span><br><span class="line">   0x004018ec &lt;+43&gt;:    add    esi,0x6</span><br><span class="line">   0x004018ef &lt;+46&gt;:    mov    ecx,0x0</span><br><span class="line">   0x004018f4 &lt;+51&gt;:    lea    edi,[ebx-0x1da4]</span><br><span class="line">   0x004018fa &lt;+57&gt;:    movzx  edx,BYTE PTR [eax]</span><br><span class="line">   0x004018fd &lt;+60&gt;:    and    edx,0xf</span><br><span class="line">   0x00401900 &lt;+63&gt;:    add    ecx,DWORD PTR [edi+edx*4]</span><br><span class="line">   0x00401903 &lt;+66&gt;:    add    eax,0x1</span><br><span class="line">   0x00401906 &lt;+69&gt;:    cmp    eax,esi</span><br><span class="line">   0x00401908 &lt;+71&gt;:    jne    0x4018fa &lt;phase_5+57&gt;</span><br><span class="line">   0x0040190a &lt;+73&gt;:    cmp    ecx,0x2c</span><br><span class="line">   0x0040190d &lt;+76&gt;:    jne    0x40191e &lt;phase_5+93&gt;</span><br><span class="line">   0x0040190f &lt;+78&gt;:    lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401912 &lt;+81&gt;:    pop    ebx</span><br><span class="line">   0x00401913 &lt;+82&gt;:    pop    esi</span><br><span class="line">   0x00401914 &lt;+83&gt;:    pop    edi</span><br><span class="line">   0x00401915 &lt;+84&gt;:    pop    ebp</span><br><span class="line">   0x00401916 &lt;+85&gt;:    ret</span><br><span class="line">   0x00401917 &lt;+86&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x0040191c &lt;+91&gt;:    jmp    0x4018ea &lt;phase_5+41&gt;</span><br><span class="line">   0x0040191e &lt;+93&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401923 &lt;+98&gt;:    jmp    0x40190f &lt;phase_5+78&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title="6.2 思路"></a>6.2 思路</h2><p>观察伪代码发现，输入是一段长度为6的字符串，而且需要满足一定的条件。</p><p>在IDA中双击<code>array_3066</code>查看该数组的值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array_3066      dd 2, 0Ah, 6, 1, 0Ch, 10h, 9, 3, 4, 7, 0Eh, 5, 0Bh, 8</span><br></pre></td></tr></table></figure><p>或者在gdb中查看，运行至<code>&lt;+51&gt;</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/20x <span class="variable">$ebx</span>-0x1da4</span><br><span class="line">0x4031c0 &lt;array.3066&gt;:  0x00000002      0x0000000a      0x00000006      0x00000001</span><br><span class="line">0x4031d0 &lt;array.3066+16&gt;:       0x0000000c      0x00000010      0x00000009      0x00000003</span><br><span class="line">0x4031e0 &lt;array.3066+32&gt;:       0x00000004      0x00000007      0x0000000e      0x00000005</span><br><span class="line">0x4031f0 &lt;array.3066+48&gt;:       0x0000000b      0x00000008      0x0000000f      0x0000000d</span><br><span class="line">0x403200:       0x79206f53      0x7420756f      0x6b6e6968      0x756f7920</span><br></pre></td></tr></table></figure><p>下标可以这样组合：1 1 1 1 0 0 （也就是10+10+10+10+2+2=44，满足条件）</p><p>对应到字符串是：<code>111100</code> 或 <code>AAAA@@</code>等。</p><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">111100</span><br></pre></td></tr></table></figure><h1 id="7-phase-6"><a href="#7-phase-6" class="headerlink" title="7 phase_6"></a>7 phase_6</h1><h2 id="7-1-解析"><a href="#7-1-解析" class="headerlink" title="7.1 解析"></a>7.1 解析</h2><p>IDA查看phase_6函数伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> __cdecl <span class="title">phase_6</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *v1; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v3; <span class="comment">// ecx</span></span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// eax</span></span><br><span class="line">  _DWORD *v5; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v6; <span class="comment">// esi</span></span><br><span class="line">  <span class="keyword">int</span> v7; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v8; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v9; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v10; <span class="comment">// edx</span></span><br><span class="line">  <span class="keyword">int</span> v11; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v12; <span class="comment">// edi</span></span><br><span class="line">  <span class="keyword">char</span> *v14; <span class="comment">// [esp+Ch] [ebp-64h]</span></span><br><span class="line">  <span class="keyword">int</span> v15; <span class="comment">// [esp+10h] [ebp-60h]</span></span><br><span class="line">  <span class="keyword">int</span> v16; <span class="comment">// [esp+24h] [ebp-4Ch] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v17; <span class="comment">// [esp+28h] [ebp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v18; <span class="comment">// [esp+3Ch] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="keyword">int</span> v19; <span class="comment">// [esp+40h] [ebp-30h]</span></span><br><span class="line">  <span class="keyword">int</span> v20; <span class="comment">// [esp+44h] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">int</span> v21; <span class="comment">// [esp+48h] [ebp-28h]</span></span><br><span class="line">  <span class="keyword">int</span> v22; <span class="comment">// [esp+4Ch] [ebp-24h]</span></span><br><span class="line">  <span class="keyword">int</span> v23; <span class="comment">// [esp+50h] [ebp-20h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v24; <span class="comment">// [esp+54h] [ebp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v24 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  read_six_numbers(a1, (<span class="keyword">int</span>)&amp;v16);</span><br><span class="line">  v14 = &amp;v17;</span><br><span class="line">  v15 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*((_DWORD *)v14 - <span class="number">1</span>) - <span class="number">1</span>) &gt; <span class="number">5</span> )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> ( ++v15 &gt; <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v1 = (<span class="keyword">int</span> *)v14;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *((_DWORD *)v14 - <span class="number">1</span>) == *v1 )</span><br><span class="line">        explode_bomb();</span><br><span class="line">      ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( &amp;v18 != v1 );</span><br><span class="line">    v14 += <span class="number">4</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">6</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = *(&amp;v16 + i);</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line">    v5 = &amp;node1;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">do</span></span><br><span class="line">      &#123;</span><br><span class="line">        v5 = (_DWORD *)v5[<span class="number">2</span>];</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> ( v4 != v3 );</span><br><span class="line">    &#125;</span><br><span class="line">    *(&amp;v18 + i) = (<span class="keyword">int</span>)v5;</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = v18;</span><br><span class="line">  v7 = v19;</span><br><span class="line">  *(_DWORD *)(v18 + <span class="number">8</span>) = v19;</span><br><span class="line">  v8 = v20;</span><br><span class="line">  *(_DWORD *)(v7 + <span class="number">8</span>) = v20;</span><br><span class="line">  v9 = v21;</span><br><span class="line">  *(_DWORD *)(v8 + <span class="number">8</span>) = v21;</span><br><span class="line">  v10 = v22;</span><br><span class="line">  *(_DWORD *)(v9 + <span class="number">8</span>) = v22;</span><br><span class="line">  v11 = v23;</span><br><span class="line">  *(_DWORD *)(v10 + <span class="number">8</span>) = v23;</span><br><span class="line">  *(_DWORD *)(v11 + <span class="number">8</span>) = <span class="number">0</span>;</span><br><span class="line">  v12 = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 &gt; **(_DWORD **)(v6 + <span class="number">8</span>) )</span><br><span class="line">      explode_bomb();</span><br><span class="line">    v6 = *(_DWORD *)(v6 + <span class="number">8</span>);</span><br><span class="line">    --v12;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( v12 );</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v24;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gdb查看phase_6函数汇编代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble phase_6</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> phase_6:</span><br><span class="line">=&gt; 0x00401925 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401929 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x0040192a &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x0040192c &lt;+7&gt;:     push   edi</span><br><span class="line">   0x0040192d &lt;+8&gt;:     push   esi</span><br><span class="line">   0x0040192e &lt;+9&gt;:     push   ebx</span><br><span class="line">   0x0040192f &lt;+10&gt;:    sub    esp,0x64</span><br><span class="line">   0x00401932 &lt;+13&gt;:    call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401937 &lt;+18&gt;:    add    ebx,0x362d</span><br><span class="line">   0x0040193d &lt;+24&gt;:    mov    eax,gs:0x14</span><br><span class="line">   0x00401943 &lt;+30&gt;:    mov    DWORD PTR [ebp-0x1c],eax</span><br><span class="line">   0x00401946 &lt;+33&gt;:    xor    eax,eax</span><br><span class="line">   0x00401948 &lt;+35&gt;:    lea    eax,[ebp-0x4c]</span><br><span class="line">   0x0040194b &lt;+38&gt;:    push   eax</span><br><span class="line">   0x0040194c &lt;+39&gt;:    push   DWORD PTR [ebp+0x8]</span><br><span class="line">   0x0040194f &lt;+42&gt;:    call   0x401eba &lt;read_six_numbers&gt;</span><br><span class="line">   0x00401954 &lt;+47&gt;:    lea    eax,[ebp-0x48]</span><br><span class="line">   0x00401957 &lt;+50&gt;:    mov    DWORD PTR [ebp-0x64],eax</span><br><span class="line">   0x0040195a &lt;+53&gt;:    add    esp,0x10</span><br><span class="line">   0x0040195d &lt;+56&gt;:    mov    DWORD PTR [ebp-0x60],0x0</span><br><span class="line">   0x00401964 &lt;+63&gt;:    lea    eax,[ebp-0x34]</span><br><span class="line">   0x00401967 &lt;+66&gt;:    mov    DWORD PTR [ebp-0x5c],eax</span><br><span class="line">   0x0040196a &lt;+69&gt;:    jmp    0x40198d &lt;phase_6+104&gt;</span><br><span class="line">   0x0040196c &lt;+71&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401971 &lt;+76&gt;:    jmp    0x4019a0 &lt;phase_6+123&gt;</span><br><span class="line">   0x00401973 &lt;+78&gt;:    add    esi,0x4</span><br><span class="line">   0x00401976 &lt;+81&gt;:    cmp    DWORD PTR [ebp-0x5c],esi</span><br><span class="line">   0x00401979 &lt;+84&gt;:    je     0x401989 &lt;phase_6+100&gt;</span><br><span class="line">   0x0040197b &lt;+86&gt;:    mov    eax,DWORD PTR [esi]</span><br><span class="line">   0x0040197d &lt;+88&gt;:    cmp    DWORD PTR [edi-0x4],eax</span><br><span class="line">   0x00401980 &lt;+91&gt;:    jne    0x401973 &lt;phase_6+78&gt;</span><br><span class="line">   0x00401982 &lt;+93&gt;:    call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401987 &lt;+98&gt;:    jmp    0x401973 &lt;phase_6+78&gt;</span><br><span class="line">   0x00401989 &lt;+100&gt;:   add    DWORD PTR [ebp-0x64],0x4</span><br><span class="line">   0x0040198d &lt;+104&gt;:   mov    eax,DWORD PTR [ebp-0x64]</span><br><span class="line">   0x00401990 &lt;+107&gt;:   mov    edi,eax</span><br><span class="line">   0x00401992 &lt;+109&gt;:   mov    eax,DWORD PTR [eax-0x4]</span><br><span class="line">   0x00401995 &lt;+112&gt;:   mov    DWORD PTR [ebp-0x68],eax</span><br><span class="line">   0x00401998 &lt;+115&gt;:   sub    eax,0x1</span><br><span class="line">   0x0040199b &lt;+118&gt;:   cmp    eax,0x5</span><br><span class="line">   0x0040199e &lt;+121&gt;:   ja     0x40196c &lt;phase_6+71&gt;</span><br><span class="line">   0x004019a0 &lt;+123&gt;:   add    DWORD PTR [ebp-0x60],0x1</span><br><span class="line">   0x004019a4 &lt;+127&gt;:   mov    eax,DWORD PTR [ebp-0x60]</span><br><span class="line">   0x004019a7 &lt;+130&gt;:   cmp    eax,0x5</span><br><span class="line">   0x004019aa &lt;+133&gt;:   jg     0x4019b1 &lt;phase_6+140&gt;</span><br><span class="line">   0x004019ac &lt;+135&gt;:   mov    esi,DWORD PTR [ebp-0x64]</span><br><span class="line">   0x004019af &lt;+138&gt;:   jmp    0x40197b &lt;phase_6+86&gt;</span><br><span class="line">   0x004019b1 &lt;+140&gt;:   mov    esi,0x0</span><br><span class="line">   0x004019b6 &lt;+145&gt;:   mov    edi,esi</span><br><span class="line">   0x004019b8 &lt;+147&gt;:   mov    ecx,DWORD PTR [ebp+esi*4-0x4c]</span><br><span class="line">   0x004019bc &lt;+151&gt;:   mov    eax,0x1</span><br><span class="line">   0x004019c1 &lt;+156&gt;:   lea    edx,[ebx+0x594]</span><br><span class="line">   0x004019c7 &lt;+162&gt;:   cmp    ecx,0x1</span><br><span class="line">   0x004019ca &lt;+165&gt;:   jle    0x4019d6 &lt;phase_6+177&gt;</span><br><span class="line">   0x004019cc &lt;+167&gt;:   mov    edx,DWORD PTR [edx+0x8]</span><br><span class="line">   0x004019cf &lt;+170&gt;:   add    eax,0x1</span><br><span class="line">   0x004019d2 &lt;+173&gt;:   cmp    eax,ecx</span><br><span class="line">   0x004019d4 &lt;+175&gt;:   jne    0x4019cc &lt;phase_6+167&gt;</span><br><span class="line">   0x004019d6 &lt;+177&gt;:   mov    DWORD PTR [ebp+edi*4-0x34],edx</span><br><span class="line">   0x004019da &lt;+181&gt;:   add    esi,0x1</span><br><span class="line">   0x004019dd &lt;+184&gt;:   cmp    esi,0x6</span><br><span class="line">   0x004019e0 &lt;+187&gt;:   jne    0x4019b6 &lt;phase_6+145&gt;</span><br><span class="line">   0x004019e2 &lt;+189&gt;:   mov    esi,DWORD PTR [ebp-0x34]</span><br><span class="line">   0x004019e5 &lt;+192&gt;:   mov    eax,DWORD PTR [ebp-0x30]</span><br><span class="line">   0x004019e8 &lt;+195&gt;:   mov    DWORD PTR [esi+0x8],eax</span><br><span class="line">   0x004019eb &lt;+198&gt;:   mov    edx,DWORD PTR [ebp-0x2c]</span><br><span class="line">   0x004019ee &lt;+201&gt;:   mov    DWORD PTR [eax+0x8],edx</span><br><span class="line">   0x004019f1 &lt;+204&gt;:   mov    eax,DWORD PTR [ebp-0x28]</span><br><span class="line">   0x004019f4 &lt;+207&gt;:   mov    DWORD PTR [edx+0x8],eax</span><br><span class="line">   0x004019f7 &lt;+210&gt;:   mov    edx,DWORD PTR [ebp-0x24]</span><br><span class="line">   0x004019fa &lt;+213&gt;:   mov    DWORD PTR [eax+0x8],edx</span><br><span class="line">   0x004019fd &lt;+216&gt;:   mov    eax,DWORD PTR [ebp-0x20]</span><br><span class="line">   0x00401a00 &lt;+219&gt;:   mov    DWORD PTR [edx+0x8],eax</span><br><span class="line">   0x00401a03 &lt;+222&gt;:   mov    DWORD PTR [eax+0x8],0x0</span><br><span class="line">   0x00401a0a &lt;+229&gt;:   mov    edi,0x5</span><br><span class="line">   0x00401a0f &lt;+234&gt;:   jmp    0x401a19 &lt;phase_6+244&gt;</span><br><span class="line">   0x00401a11 &lt;+236&gt;:   mov    esi,DWORD PTR [esi+0x8]</span><br><span class="line">   0x00401a14 &lt;+239&gt;:   sub    edi,0x1</span><br><span class="line">   0x00401a17 &lt;+242&gt;:   je     0x401a29 &lt;phase_6+260&gt;</span><br><span class="line">   0x00401a19 &lt;+244&gt;:   mov    eax,DWORD PTR [esi+0x8]</span><br><span class="line">   0x00401a1c &lt;+247&gt;:   mov    eax,DWORD PTR [eax]</span><br><span class="line">   0x00401a1e &lt;+249&gt;:   cmp    DWORD PTR [esi],eax</span><br><span class="line">   0x00401a20 &lt;+251&gt;:   jle    0x401a11 &lt;phase_6+236&gt;</span><br><span class="line">   0x00401a22 &lt;+253&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401a27 &lt;+258&gt;:   jmp    0x401a11 &lt;phase_6+236&gt;</span><br><span class="line">   0x00401a29 &lt;+260&gt;:   mov    eax,DWORD PTR [ebp-0x1c]</span><br><span class="line">   0x00401a2c &lt;+263&gt;:   xor    eax,DWORD PTR gs:0x14</span><br><span class="line">   0x00401a33 &lt;+270&gt;:   jne    0x401a3d &lt;phase_6+280&gt;</span><br><span class="line">   0x00401a35 &lt;+272&gt;:   lea    esp,[ebp-0xc]</span><br><span class="line">   0x00401a38 &lt;+275&gt;:   pop    ebx</span><br><span class="line">   0x00401a39 &lt;+276&gt;:   pop    esi</span><br><span class="line">   0x00401a3a &lt;+277&gt;:   pop    edi</span><br><span class="line">   0x00401a3b &lt;+278&gt;:   pop    ebp</span><br><span class="line">   0x00401a3c &lt;+279&gt;:   ret</span><br><span class="line">   0x00401a3d &lt;+280&gt;:   call   0x402e00 &lt;__stack_chk_fail_local&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><h2 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title="7.2 思路"></a>7.2 思路</h2><ol><li><p>查看伪代码需要输入六个数字；</p></li><li><p>观察这部分代码块（对应汇编代码<code>&lt;+47&gt;</code>到<code>&lt;+98&gt;</code>）可得，这六个数字必须从<code>1 2 3 4 5 6</code>中选，而且互不相同；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(*((_DWORD *)v14 - <span class="number">1</span>) - <span class="number">1</span>) &gt; <span class="number">5</span> )</span><br><span class="line">        explode_bomb();</span><br><span class="line">    <span class="keyword">if</span> ( ++v15 &gt; <span class="number">5</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    v1 = (<span class="keyword">int</span> *)v14;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ( *((_DWORD *)v14 - <span class="number">1</span>) == *v1 )</span><br><span class="line">            explode_bomb();</span><br><span class="line">        ++v1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> ( &amp;v18 != v1 );</span><br><span class="line">    v14 += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看这部分代码块可得，是根据输入的六个数字对node链表进行排序，node链表最后要升序排列（可以有相等的）；</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i != <span class="number">6</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">    v3 = *(&amp;v16 + i);</span><br><span class="line">    v4 = <span class="number">1</span>;</span><br><span class="line">    v5 = &amp;node1;</span><br><span class="line">    <span class="keyword">if</span> ( v3 &gt; <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            v5 = (_DWORD *)v5[<span class="number">2</span>];</span><br><span class="line">            ++v4;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> ( v4 != v3 );</span><br><span class="line">    &#125;</span><br><span class="line">    *(&amp;v18 + i) = (<span class="keyword">int</span>)v5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( *(_DWORD *)v6 &gt; **(_DWORD **)(v6 + <span class="number">8</span>) )</span><br><span class="line">        explode_bomb();</span><br><span class="line">    v6 = *(_DWORD *)(v6 + <span class="number">8</span>);</span><br><span class="line">    --v12;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> ( v12 );</span><br></pre></td></tr></table></figure></li><li><p>运行至<code>&lt;+156&gt; lea    edx,[ebx+0x594]</code>，查看各个node结点的数值：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[----------------------------------registers-----------------------------------]</span><br><span class="line">EAX: 0x1</span><br><span class="line">EBX: 0x404f64 --&gt; 0x4e6c (<span class="string">'lN'</span>)</span><br><span class="line">ECX: 0x4</span><br><span class="line">EDX: 0x4054f8 --&gt; 0x2a0</span><br><span class="line">ESI: 0x1</span><br><span class="line">EDI: 0x1</span><br><span class="line">EBP: 0xbffff498 --&gt; 0xbffff4c8 --&gt; 0x0</span><br><span class="line">ESP: 0xbffff430 --&gt; 0x3</span><br><span class="line">EIP: 0x4019c7 (&lt;phase_6+162&gt;:   cmp    ecx,0x1)</span><br><span class="line">EFLAGS: 0x293 (CARRY parity ADJUST zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</span><br><span class="line">[-------------------------------------code-------------------------------------]</span><br><span class="line">   0x4019b8 &lt;phase_6+147&gt;:      mov    ecx,DWORD PTR [ebp+esi*4-0x4c]</span><br><span class="line">   0x4019bc &lt;phase_6+151&gt;:      mov    eax,0x1</span><br><span class="line">   0x4019c1 &lt;phase_6+156&gt;:      lea    edx,[ebx+0x594]</span><br><span class="line">=&gt; 0x4019c7 &lt;phase_6+162&gt;:      cmp    ecx,0x1</span><br><span class="line">   0x4019ca &lt;phase_6+165&gt;:      jle    0x4019d6 &lt;phase_6+177&gt;</span><br><span class="line">   0x4019cc &lt;phase_6+167&gt;:      mov    edx,DWORD PTR [edx+0x8]</span><br><span class="line">   0x4019cf &lt;phase_6+170&gt;:      add    eax,0x1</span><br><span class="line">   0x4019d2 &lt;phase_6+173&gt;:      cmp    eax,ecx</span><br><span class="line">[------------------------------------stack-------------------------------------]</span><br><span class="line">0000| 0xbffff430 --&gt; 0x3</span><br><span class="line">0004| 0xbffff434 --&gt; 0xbffff464 --&gt; 0x405528 --&gt; 0x133</span><br><span class="line">0008| 0xbffff438 --&gt; 0x6</span><br><span class="line">0012| 0xbffff43c --&gt; 0xbffff464 --&gt; 0x405528 --&gt; 0x133</span><br><span class="line">0016| 0xbffff440 --&gt; 0x4058f0 (<span class="string">"5 4 2 1 6 3"</span>)</span><br><span class="line">0020| 0xbffff444 --&gt; 0x50 (<span class="string">'P'</span>)</span><br><span class="line">0024| 0xbffff448 --&gt; 0xb7fbc5c0 --&gt; 0xfbad2288</span><br><span class="line">0028| 0xbffff44c --&gt; 0x5</span><br><span class="line">[------------------------------------------------------------------------------]</span><br><span class="line">Legend: code, data, rodata, value</span><br><span class="line">0x004019c7 <span class="keyword">in</span> phase_6 ()</span><br><span class="line">gdb-peda$ x/21x <span class="variable">$ebx</span>+0x594</span><br><span class="line">0x4054f8 &lt;node1&gt;:       0x000002a0      0x00000001      0x00405504      0x0000026d</span><br><span class="line">0x405508 &lt;node2+4&gt;:     0x00000002      0x00405510      0x000001ea      0x00000003</span><br><span class="line">0x405518 &lt;node3+8&gt;:     0x0040551c      0x00000038      0x00000004      0x00405528</span><br><span class="line">0x405528 &lt;node5&gt;:       0x00000133      0x00000005      0x00405080      0x00000000</span><br><span class="line">0x405538:       0x00000000      0x00000000      0x00403417      0x00000000</span><br><span class="line">0x405548 &lt;host_table+8&gt;:        0x00000000</span><br><span class="line">gdb-peda$ x 0x00405080</span><br><span class="line">0x405080 &lt;node6&gt;:       0x000000ca</span><br><span class="line">gdb-peda$ x/3x 0x00405080</span><br><span class="line">0x405080 &lt;node6&gt;:       0x000000ca      0x00000006      0x00000000</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：在IDA中查看注意截断</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.data:000054F8                 public node1</span><br><span class="line">.data:000054F8 node1           db 0A0h                 ; DATA XREF: phase_6+9C↑o</span><br><span class="line">.data:000054F9                 db    2</span><br><span class="line">.data:000054FA                 db    0</span><br><span class="line">.data:000054FB                 db    0</span><br><span class="line">.data:000054FC                 db    1</span><br><span class="line">.data:000054FD                 db    0</span><br><span class="line">.data:000054FE                 db    0</span><br><span class="line">.data:000054FF                 db    0</span><br><span class="line">.data:00005500                 dd offset node2</span><br><span class="line">.data:00005504                 public node2</span><br><span class="line">.data:00005504 node2           db  6Dh ; m             ; DATA XREF: .data:00005500↑o</span><br><span class="line">.data:00005505                 db    2</span><br><span class="line">.data:00005506                 db    0</span><br><span class="line">.data:00005507                 db    0</span><br><span class="line">.data:00005508                 db    2</span><br><span class="line">.data:00005509                 db    0</span><br><span class="line">.data:0000550A                 db    0</span><br><span class="line">.data:0000550B                 db    0</span><br><span class="line">.data:0000550C                 dd offset node3</span><br></pre></td></tr></table></figure><p>可以得出：</p><ul><li><p>node结点的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>node排列：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|node1=0x2a0| -&gt; |node2=0x260| -&gt; |node3=0x1ea| -&gt; |node4=0x038| -&gt; |node5=0x133| -&gt; |node6=0x0ca|</span><br></pre></td></tr></table></figure></li></ul><p>所以应输入从小到大排列序号为：4 6 5 3 2 1</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 6 5 3 2 1</span><br></pre></td></tr></table></figure><h1 id="8-bomblab隐藏关卡"><a href="#8-bomblab隐藏关卡" class="headerlink" title="8 bomblab隐藏关卡"></a>8 bomblab隐藏关卡</h1><h2 id="8-1-解析"><a href="#8-1-解析" class="headerlink" title="8.1 解析"></a>8.1 解析</h2><p>在bomb的伪代码内找到调用 secret_phase 的函数— phase_defused ，研究phase_defused 汇编代码：首先调用 sscanf ，要求输入 %d %d %s ，而且调用strings_not_equal 函数，只有第三个输入是 <code>DrEvil</code> 时触发 secret_phase() 函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">phase_defused</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+10h] [ebp-64h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v2[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-60h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> v3[<span class="number">80</span>]; <span class="comment">// [esp+18h] [ebp-5Ch] BYREF</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+68h] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  send_msg(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> ( num_input_strings == <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( __isoc99_sscanf(&amp;input_strings[<span class="number">240</span>], <span class="string">"%d %d %s"</span>, v1, v2) == <span class="number">3</span> &amp;&amp; !strings_not_equal(v3, <span class="string">"DrEvil"</span>) )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"Curses, you've found the secret phase!"</span>);</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">"But finding it and solving it are quite different..."</span>);</span><br><span class="line">      secret_phase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Congratulations! You've defused the bomb!"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Your instructor has been notified and will verify your solution."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将已经解决的问题答案放到txt文件中，便于操作；找到一个输入是两个整数的阶段，这里选择了phase_4，成功触发隐藏关卡；（第三阶段无法触发，不知为何？  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard for human life.</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">0 1071 </span><br><span class="line">24 2 DrEvil</span><br><span class="line">111100</span><br><span class="line">4 6 5 3 2 1</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./bomb flag.txt</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">That<span class="string">'s number 2.  Keep going!</span></span><br><span class="line"><span class="string">Halfway there!</span></span><br><span class="line"><span class="string">So you got that one.  Try this one.</span></span><br><span class="line"><span class="string">Good work!  On to the next...</span></span><br><span class="line"><span class="string">Curses, you'</span>ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br></pre></td></tr></table></figure><p>secret_phase伪代码 ：  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">secret_phase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="keyword">int</span> v1; <span class="comment">// esi</span></span><br><span class="line"></span><br><span class="line">  v0 = read_line();</span><br><span class="line">  v1 = strtol(v0, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">  <span class="keyword">if</span> ( (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(v1 - <span class="number">1</span>) &gt; <span class="number">0x3E8</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="keyword">if</span> ( fun7(n1, v1) != <span class="number">3</span> )</span><br><span class="line">    explode_bomb();</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"Wow! You've defused the secret stage!"</span>);</span><br><span class="line">  <span class="keyword">return</span> phase_defused();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fun7伪代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">fun7</span><span class="params">(_DWORD *a1, <span class="keyword">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> result; <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( !a1 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 &gt; a2 )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * fun7(a1[<span class="number">1</span>], a2);</span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( *a1 != a2 )</span><br><span class="line">    result = <span class="number">2</span> * fun7(a1[<span class="number">2</span>], a2) + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title="8.2 思路"></a>8.2 思路</h2><ol><li><p>进入 secret_phase：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble secret_phase</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> secret_phase:</span><br><span class="line">   0x00401a98 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401a9c &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401a9d &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401a9f &lt;+7&gt;:     push   esi</span><br><span class="line">   0x00401aa0 &lt;+8&gt;:     push   ebx</span><br><span class="line">   0x00401aa1 &lt;+9&gt;:     call   0x4013d0 &lt;__x86.get_pc_thunk.bx&gt;</span><br><span class="line">   0x00401aa6 &lt;+14&gt;:    add    ebx,0x34be</span><br><span class="line">   0x00401aac &lt;+20&gt;:    call   0x401f09 &lt;read_line&gt;</span><br><span class="line">   0x00401ab1 &lt;+25&gt;:    sub    esp,0x4</span><br><span class="line">   0x00401ab4 &lt;+28&gt;:    push   0xa</span><br><span class="line">   0x00401ab6 &lt;+30&gt;:    push   0x0</span><br><span class="line">   0x00401ab8 &lt;+32&gt;:    push   eax</span><br><span class="line">   0x00401ab9 &lt;+33&gt;:    call   0x401340 &lt;strtol@plt&gt;</span><br><span class="line">   0x00401abe &lt;+38&gt;:    mov    esi,eax</span><br><span class="line">   0x00401ac0 &lt;+40&gt;:    lea    eax,[eax-0x1]</span><br><span class="line">   0x00401ac3 &lt;+43&gt;:    add    esp,0x10</span><br><span class="line">   0x00401ac6 &lt;+46&gt;:    cmp    eax,0x3e8</span><br><span class="line">   0x00401acb &lt;+51&gt;:    ja     0x401b03 &lt;secret_phase+107&gt;</span><br><span class="line">   0x00401acd &lt;+53&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401ad0 &lt;+56&gt;:    push   esi</span><br><span class="line">   0x00401ad1 &lt;+57&gt;:    lea    eax,[ebx+0x540]</span><br><span class="line">   0x00401ad7 &lt;+63&gt;:    push   eax</span><br><span class="line">   0x00401ad8 &lt;+64&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401add &lt;+69&gt;:    add    esp,0x10</span><br><span class="line">   0x00401ae0 &lt;+72&gt;:    cmp    eax,0x3</span><br><span class="line">   0x00401ae3 &lt;+75&gt;:    jne    0x401b0a &lt;secret_phase+114&gt;</span><br><span class="line">   0x00401ae5 &lt;+77&gt;:    sub    esp,0xc</span><br><span class="line">   0x00401ae8 &lt;+80&gt;:    lea    eax,[ebx-0x1df4]</span><br><span class="line">   0x00401aee &lt;+86&gt;:    push   eax</span><br><span class="line">   0x00401aef &lt;+87&gt;:    call   0x401280 &lt;puts@plt&gt;</span><br><span class="line">   0x00401af4 &lt;+92&gt;:    call   0x40203c &lt;phase_defused&gt;</span><br><span class="line">   0x00401af9 &lt;+97&gt;:    add    esp,0x10</span><br><span class="line">   0x00401afc &lt;+100&gt;:   lea    esp,[ebp-0x8]</span><br><span class="line">   0x00401aff &lt;+103&gt;:   pop    ebx</span><br><span class="line">   0x00401b00 &lt;+104&gt;:   pop    esi</span><br><span class="line">   0x00401b01 &lt;+105&gt;:   pop    ebp</span><br><span class="line">   0x00401b02 &lt;+106&gt;:   ret</span><br><span class="line">   0x00401b03 &lt;+107&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401b08 &lt;+112&gt;:   jmp    0x401acd &lt;secret_phase+53&gt;</span><br><span class="line">   0x00401b0a &lt;+114&gt;:   call   0x401e64 &lt;explode_bomb&gt;</span><br><span class="line">   0x00401b0f &lt;+119&gt;:   jmp    0x401ae5 &lt;secret_phase+77&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>可以看到<code>&lt;+20&gt;</code>调用了read_line函数，接着把read_line的返回值赋给了eax，并调用了strtol函数，这个标准库函数的作用是把一个字符串转换成对应的长整型数值。返回值还是存放在eax中，<code>&lt;+38&gt;</code>将eax赋值给了esi，<code>&lt;+40&gt;</code>将eax减1赋给eax，<code>&lt;+46&gt;</code>与1000(0x3e8)进行比较，如果这个值小于等于0x3e8就跳过引爆代码。看到这里可以知道我们需要再加入一行数据，它应该是一个小于等于1001的数值。</p></li><li><p><code>&lt;+53&gt;</code>将 esi 赋给了 M[esp + 4] ，也就是一开始输入的 eax 值。<code>&lt;+57&gt;</code>将ebx+0x540赋给了 M[esp] ，<code>&lt;+64&gt;</code>调用了 fun7 函数。函数返回后令返回值 eax 与 0x3 做了一个比较，如果相等则跳过引爆代码。所以fun7函数需要返回3；</p></li><li><p>查看 fun7 函数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ disassemble fun7</span><br><span class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> fun7:</span><br><span class="line">   0x00401a42 &lt;+0&gt;:     endbr32</span><br><span class="line">   0x00401a46 &lt;+4&gt;:     push   ebp</span><br><span class="line">   0x00401a47 &lt;+5&gt;:     mov    ebp,esp</span><br><span class="line">   0x00401a49 &lt;+7&gt;:     push   ebx</span><br><span class="line">   0x00401a4a &lt;+8&gt;:     sub    esp,0x4</span><br><span class="line">   0x00401a4d &lt;+11&gt;:    mov    edx,DWORD PTR [ebp+0x8]</span><br><span class="line">   0x00401a50 &lt;+14&gt;:    mov    ecx,DWORD PTR [ebp+0xc]</span><br><span class="line">   0x00401a53 &lt;+17&gt;:    <span class="built_in">test</span>   edx,edx</span><br><span class="line">   0x00401a55 &lt;+19&gt;:    je     0x401a91 &lt;fun7+79&gt;</span><br><span class="line">   0x00401a57 &lt;+21&gt;:    mov    ebx,DWORD PTR [edx]</span><br><span class="line">   0x00401a59 &lt;+23&gt;:    cmp    ebx,ecx</span><br><span class="line">   0x00401a5b &lt;+25&gt;:    jg     0x401a69 &lt;fun7+39&gt;</span><br><span class="line">   0x00401a5d &lt;+27&gt;:    mov    eax,0x0</span><br><span class="line">   0x00401a62 &lt;+32&gt;:    jne    0x401a7c &lt;fun7+58&gt;</span><br><span class="line">   0x00401a64 &lt;+34&gt;:    mov    ebx,DWORD PTR [ebp-0x4]</span><br><span class="line">   0x00401a67 &lt;+37&gt;:    leave</span><br><span class="line">   0x00401a68 &lt;+38&gt;:    ret</span><br><span class="line">   0x00401a69 &lt;+39&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401a6c &lt;+42&gt;:    push   ecx</span><br><span class="line">   0x00401a6d &lt;+43&gt;:    push   DWORD PTR [edx+0x4]</span><br><span class="line">   0x00401a70 &lt;+46&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401a75 &lt;+51&gt;:    add    esp,0x10</span><br><span class="line">   0x00401a78 &lt;+54&gt;:    add    eax,eax</span><br><span class="line">   0x00401a7a &lt;+56&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">   0x00401a7c &lt;+58&gt;:    sub    esp,0x8</span><br><span class="line">   0x00401a7f &lt;+61&gt;:    push   ecx</span><br><span class="line">   0x00401a80 &lt;+62&gt;:    push   DWORD PTR [edx+0x8]</span><br><span class="line">   0x00401a83 &lt;+65&gt;:    call   0x401a42 &lt;fun7&gt;</span><br><span class="line">   0x00401a88 &lt;+70&gt;:    add    esp,0x10</span><br><span class="line">   0x00401a8b &lt;+73&gt;:    lea    eax,[eax+eax*1+0x1]</span><br><span class="line">   0x00401a8f &lt;+77&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">   0x00401a91 &lt;+79&gt;:    mov    eax,0xffffffff</span><br><span class="line">   0x00401a96 &lt;+84&gt;:    jmp    0x401a64 &lt;fun7+34&gt;</span><br><span class="line">End of assembler dump.</span><br></pre></td></tr></table></figure><p>查看一下 M[esp] 这个地址里存放的什么数据结构：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ b *0x00401ad8  <span class="comment">#打断点至&lt;+64&gt;</span></span><br><span class="line">gdb-peda$ x/24xw <span class="variable">$eax</span></span><br><span class="line">0x4054a4 &lt;n1&gt;:  0x00000024      0x004054b0      0x004054bc      0x00000008</span><br><span class="line">0x4054b4 &lt;n21+4&gt;:       0x004054e0      0x004054c8      0x00000032      0x004054d4</span><br><span class="line">0x4054c4 &lt;n22+8&gt;:       0x004054ec      0x00000016      0x0040505c      0x00405044</span><br><span class="line">0x4054d4 &lt;n33&gt;: 0x0000002d      0x00405020      0x00405068      0x00000006</span><br><span class="line">0x4054e4 &lt;n31+4&gt;:       0x0040502c      0x00405050      0x0000006b      0x00405038</span><br><span class="line">0x4054f4 &lt;n34+8&gt;:       0x00405074      0x000002a0      0x00000001      0x00000000</span><br></pre></td></tr></table></figure><p>仔细观察可以发现这是一个二叉树的结构，每个节点第1个4字节存放数据，第2个4字节存放左子树地址，第3个4字节存放右子树位置。并且命名也有规律，<code>nab</code>，<code>a</code> 代表层数，<code>b</code> 代表从左至右第b个节点。整理可得： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">0x4054a4 &lt;n1&gt;:  0x00000024      0x004054b0      0x004054bc</span><br><span class="line">0x4054b0 &lt;n21&gt;: 0x00000008      0x004054e0      0x004054c8</span><br><span class="line">0x4054bc &lt;n22&gt;: 0x00000032      0x004054d4      0x004054ec</span><br><span class="line">0x4054e0 &lt;n31&gt;: 0x00000006      0x0040502c      0x00405050</span><br><span class="line">0x4054c8 &lt;n32&gt;: 0x00000016      0x0040505c      0x00405044</span><br><span class="line">0x4054d4 &lt;n33&gt;: 0x0000002d      0x00405020      0x00405068</span><br><span class="line">0x4054ec &lt;n34&gt;: 0x0000006b      0x00405038      0x00405074</span><br><span class="line">0x40502c &lt;n41&gt;: 0x00000001      0x00000000      0x00000000</span><br><span class="line">0x405050 &lt;n42&gt;: 0x00000007      0x00000000      0x00000000</span><br><span class="line">0x40505c &lt;n43&gt;: 0x00000014      0x00000000      0x00000000</span><br><span class="line">0x405044 &lt;n44&gt;: 0x00000023      0x00000000      0x00000000</span><br><span class="line">0x405020 &lt;n45&gt;: 0x00000028      0x00000000      0x00000000</span><br><span class="line">0x405068 &lt;n46&gt;: 0x0000002f      0x00000000      0x00000000</span><br><span class="line">0x405038 &lt;n47&gt;: 0x00000063      0x00000000      0x00000000</span><br><span class="line">0x405074 &lt;n48&gt;: 0x000003e9      0x00000000      0x00000000</span><br></pre></td></tr></table></figure></li></ol>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  0x24 --&gt; 0x08</span><br><span class="line">  0x24 --&gt; 0x32</span><br><span class="line">  0x08 --&gt; 0x06</span><br><span class="line">  0x08 --&gt; 0x16</span><br><span class="line">  0x32 --&gt; 0x2d</span><br><span class="line">  0x32 --&gt; 0x6b</span><br><span class="line">  0x06 --&gt; 0x01</span><br><span class="line">  0x06 --&gt; 0x07</span><br><span class="line">  0x2d --&gt; 0x28</span><br><span class="line">  0x2d --&gt; 0x2f</span><br><span class="line">  0x6b --&gt; 0x63</span><br><span class="line">  0x6b --&gt; 0x3e9</span><br><span class="line">  0x16 --&gt; 0x14</span><br><span class="line">  0x16 --&gt; 0x23</span><br></pre></td></tr></table></figure><p>   <img src="https://s2.loli.net/2022/05/26/3jUNCrcuDWAf5Ms.png" width="600" height="300" alt="图片名称" align="center" id="201"></p><ol><li><p>总结上面的过程： M[esp] 指向树的一个节点，令节点的值与读入的值进行比较。</p><ul><li>如果前者大于后者： M[esp] 移至左子树，返回 2 * eax ；</li><li>如果前者不等于后者： M[esp] 移至右子树，返回 2 * eax + 1 ；</li><li>如果前者等于后者：返回0  </li></ul></li><li><p>那么我们需要返回3，根据递归可得当输入是 0x63（99）时返回3。</p></li></ol><p><strong>答案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">99</span><br></pre></td></tr></table></figure><h1 id="9-最终答案"><a href="#9-最终答案" class="headerlink" title="9 最终答案"></a>9 最终答案</h1><p><code>flag.txt</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">And they have no disregard <span class="keyword">for</span> human life.</span><br><span class="line">1 2 4 8 16 32</span><br><span class="line">0 1071 </span><br><span class="line">24 2 DrEvil</span><br><span class="line">111100</span><br><span class="line">4 6 5 3 2 1</span><br><span class="line">99</span><br></pre></td></tr></table></figure><p>运行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ ./bomb flag.txt</span><br><span class="line">Welcome to my fiendish little bomb. You have 6 phases with</span><br><span class="line"><span class="built_in">which</span> to blow yourself up. Have a nice day!</span><br><span class="line">Phase 1 defused. How about the next one?</span><br><span class="line">That<span class="string">'s number 2.  Keep going!</span></span><br><span class="line"><span class="string">Halfway there!</span></span><br><span class="line"><span class="string">So you got that one.  Try this one.</span></span><br><span class="line"><span class="string">Good work!  On to the next...</span></span><br><span class="line"><span class="string">Curses, you'</span>ve found the secret phase!</span><br><span class="line">But finding it and solving it are quite different...</span><br><span class="line">Wow! You<span class="string">'ve defused the secret stage!</span></span><br><span class="line"><span class="string">Congratulations! You'</span>ve defused the bomb!</span><br><span class="line">Your instructor has been notified and will verify your solution.</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计组" scheme="https://dragonliu2022.github.io/categories/计组/"/>
    
    
    <category term="Lab" scheme="https://dragonliu2022.github.io/tags/Lab/"/>
    
  </entry>
  
  <entry>
    <title>Python-列表-生成列表</title>
    <link href="https://dragonliu2022.github.io/2022/05/12/Python-%E5%88%97%E8%A1%A8-%E7%94%9F%E6%88%90%E5%88%97%E8%A1%A8/"/>
    <id>https://dragonliu2022.github.io/2022/05/12/Python-%E5%88%97%E8%A1%A8-%E7%94%9F%E6%88%90%E5%88%97%E8%A1%A8/</id>
    <published>2022-05-12T14:39:10.000Z</published>
    <updated>2022-07-21T16:45:55.153Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><p>需求：生成1-10的列表；生成10个0的列表</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list方法</span></span><br><span class="line">init_list = list(range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>))  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># []方法</span></span><br><span class="line">init_list = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>)]  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环方法</span></span><br><span class="line">init_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>+<span class="number">1</span>):</span><br><span class="line">    init_list.append(i)</span><br><span class="line">print(init_list)  <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">init_list = [<span class="number">0</span>] * <span class="number">10</span>  <span class="comment"># [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span></span><br></pre></td></tr></table></figure><h1 id="X-参考"><a href="#X-参考" class="headerlink" title="X 参考"></a>X 参考</h1><ul><li><a href="https://blog.csdn.net/QQ18180564/article/details/105839040" target="_blank" rel="noopener">python———用多种方法生成1到100的列表并打印</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://dragonliu2022.github.io/categories/Python/"/>
    
    <category term="基础" scheme="https://dragonliu2022.github.io/categories/Python/基础/"/>
    
    
  </entry>
  
  <entry>
    <title>matplotlib画图出现中文乱码</title>
    <link href="https://dragonliu2022.github.io/2022/05/12/matplotlib%E7%94%BB%E5%9B%BE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    <id>https://dragonliu2022.github.io/2022/05/12/matplotlib%E7%94%BB%E5%9B%BE%E5%87%BA%E7%8E%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</id>
    <published>2022-05-12T14:32:27.000Z</published>
    <updated>2022-07-21T16:43:04.409Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1 问题描述"></a>1 问题描述</h1><p>使用matplotlib画图，其中x和y轴标题中出现中文乱码。</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><p>在代码前面加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line">mpl.rcParams[<span class="string">'font.sans-serif'</span>] = [<span class="string">'SimHei'</span>]</span><br><span class="line">mpl.rcParams[<span class="string">'axes.unicode_minus'</span>] = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h1><ul><li><a href="https://blog.csdn.net/xjh163/article/details/101076551" target="_blank" rel="noopener">python中画图显示中文乱码</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="Python" scheme="https://dragonliu2022.github.io/categories/Python/"/>
    
    <category term="基础" scheme="https://dragonliu2022.github.io/categories/Python/基础/"/>
    
    
    <category term="matplotlib" scheme="https://dragonliu2022.github.io/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>Linux查看系统信息</title>
    <link href="https://dragonliu2022.github.io/2022/05/11/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/"/>
    <id>https://dragonliu2022.github.io/2022/05/11/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E4%BF%A1%E6%81%AF/</id>
    <published>2022-05-10T16:43:44.000Z</published>
    <updated>2022-07-21T17:11:11.524Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-系统版本"><a href="#1-系统版本" class="headerlink" title="1 系统版本"></a>1 系统版本</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ cat /etc/redhat-release</span><br><span class="line">CentOS Linux release 7.6.1810 (Core)</span><br></pre></td></tr></table></figure><p><a href="https://jingyan.baidu.com/article/425e69e6ada3edff14fc167c.html" target="_blank" rel="noopener">Linux怎么查看操作系统版本号</a></p><h1 id="2-显卡"><a href="#2-显卡" class="headerlink" title="2 显卡"></a>2 显卡</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nvidia-smi</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/dcrmg/article/details/78146797" target="_blank" rel="noopener">Linux查看GPU信息和使用情况</a></p><h1 id="3-CPU"><a href="#3-CPU" class="headerlink" title="3 CPU"></a>3 CPU</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat  /proc/cpuinfo</span><br></pre></td></tr></table></figure><p><a href="https://www.yisu.com/zixun/132704.html" target="_blank" rel="noopener">linux查看cpu型号的方法</a></p><h1 id="4-内存"><a href="#4-内存" class="headerlink" title="4 内存"></a>4 内存</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ cat /proc/meminfo</span><br><span class="line">MemTotal:       263591864 kB</span><br><span class="line">MemFree:        191960176 kB</span><br><span class="line">MemAvailable:   246338560 kB</span><br><span class="line">Buffers:          119332 kB</span><br><span class="line">Cached:         53866512 kB</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">(base) [ccyin@localhost ~]$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:         257413       15579      187461          27       54372      240565</span><br><span class="line">Swap:          4095           0        4095</span><br></pre></td></tr></table></figure><p><a href="https://www.programminghunter.com/article/9454887470/" target="_blank" rel="noopener">linux 查看CPU、内存大小</a></p><h1 id="5-硬盘"><a href="#5-硬盘" class="headerlink" title="5 硬盘"></a>5 硬盘</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(base) [ccyin@localhost ~]$ df -h</span><br><span class="line">文件系统                 容量  已用  可用 已用% 挂载点</span><br><span class="line">/dev/mapper/centos-root   50G   16G   35G   31% /</span><br><span class="line">devtmpfs                 126G     0  126G    0% /dev</span><br><span class="line">tmpfs                    126G  8.0K  126G    1% /dev/shm</span><br><span class="line">tmpfs                    126G   12M  126G    1% /run</span><br><span class="line">tmpfs                    126G     0  126G    0% /sys/fs/cgroup</span><br><span class="line">/dev/sda2               1014M  182M  833M   18% /boot</span><br><span class="line">/dev/mapper/centos-home  2.2T  1.5T  724G   67% /home</span><br><span class="line">tmpfs                     26G   12K   26G    1% /run/user/42</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1005</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1003</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1002</span><br><span class="line">tmpfs                     26G     0   26G    0% /run/user/1010</span><br><span class="line">/dev/mapper/data1-lvol0  8.0T  4.1G  7.6T    1% /data1</span><br></pre></td></tr></table></figure><p><a href="https://www.programminghunter.com/article/9454887470/" target="_blank" rel="noopener">linux 查看CPU、内存大小</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    <category term="操作系统" scheme="https://dragonliu2022.github.io/categories/操作系统/"/>
    
    <category term="Linux" scheme="https://dragonliu2022.github.io/categories/操作系统/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>git报错之error: object file .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0 is empty</title>
    <link href="https://dragonliu2022.github.io/2022/05/11/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-object-file-git-objects-31-65329bb680e30595f242b7c4d8406ca63eeab0-is-empty/"/>
    <id>https://dragonliu2022.github.io/2022/05/11/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-object-file-git-objects-31-65329bb680e30595f242b7c4d8406ca63eeab0-is-empty/</id>
    <published>2022-05-10T16:34:25.000Z</published>
    <updated>2022-05-12T14:29:06.771Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题"><a href="#1-问题" class="headerlink" title="1 问题"></a>1 问题</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error: object file .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0 is empty</span><br><span class="line">fatal: loose object 3165329bb680e30595f242b7c4d8406ca63eeab0 (stored <span class="keyword">in</span> .git/objects/31/65329bb680e30595f242b7c4d8406ca63eeab0) is corrupt</span><br></pre></td></tr></table></figure><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h1><ul><li><a href="https://segmentfault.com/a/1190000008734662" target="_blank" rel="noopener">git错误：对象文件为空（object-file-is-empty）解决方案</a></li><li><a href="https://stackoverflow.com/questions/11706215/how-can-i-fix-the-git-error-object-file-is-empty" target="_blank" rel="noopener">How can I fix the Git error “object file … is empty”?</a></li><li><a href="https://localcoder.org/git-status-shows-fatal-bad-object-head" target="_blank" rel="noopener">git status shows fatal: bad object HEAD</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    
    <category term="Git" scheme="https://dragonliu2022.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>git报错之error: refs/heads/pa2 does not point to a valid object</title>
    <link href="https://dragonliu2022.github.io/2022/05/10/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-refs-heads-pa2-does-not-point-to-a-valid-object/"/>
    <id>https://dragonliu2022.github.io/2022/05/10/git%E6%8A%A5%E9%94%99%E4%B9%8Berror-refs-heads-pa2-does-not-point-to-a-valid-object/</id>
    <published>2022-05-10T15:31:38.000Z</published>
    <updated>2022-05-12T14:35:27.373Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a href="#1-问题引入" class="headerlink" title="1 问题引入"></a>1 问题引入</h1><p>目前项目有两个分支：pa1和pa2。pa1分支没有更新到云端，需要更新；pa2分支出现问题。</p><p><strong>目标</strong>：删除pa2分支，将pa1 push到云端。</p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><ol><li><p>切换到pa1分支，<code>git checkout pa1</code></p><p><img src="https://s2.loli.net/2022/05/10/FZmLMNhPlxiUCd1.png" width="550" height="300" alt="图片名称" align="center" id="199"></p></li><li><p>提交本地pa2修改的代码，出现如下报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit</span><br><span class="line">fatal: could not parse HEAD</span><br></pre></td></tr></table></figure></li><li><p>强制切换pa1分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -f pa1</span><br></pre></td></tr></table></figure></li><li><p>将pa1分支push到云端，出现报错：</p><p><img src="https://s2.loli.net/2022/05/10/iNlGDgz2kVKxjoW.png" width="650" height="100" alt="图片名称" align="center" id="200"></p></li><li><p>执行下面的操作再进行push操作，成功执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm .git/refs/heads/pa2</span><br></pre></td></tr></table></figure></li></ol><h1 id="3-参考"><a href="#3-参考" class="headerlink" title="3 参考"></a>3 参考</h1><ul><li><a href="https://stackoverflow.com/questions/20694882/how-do-i-delete-a-local-git-branch-when-it-cant-look-up-commit-object-in-refs" target="_blank" rel="noopener">How do I delete a local git branch when it can’t look up commit object in ‘refs/heads’?</a></li><li><a href="https://zhuanlan.zhihu.com/p/426003354" target="_blank" rel="noopener">解决git报错fatal: could not parse HEAD</a></li><li><a href="https://blog.csdn.net/SMonkeyKing/article/details/89850416" target="_blank" rel="noopener">【git操作】强制切换到本地某个分支</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://dragonliu2022.github.io/categories/环境与工具/"/>
    
    
    <category term="Git" scheme="https://dragonliu2022.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>PA报错之qemu: could not load PC BIOS &#39;bios-256k.bin&#39;</title>
    <link href="https://dragonliu2022.github.io/2022/05/10/PA%E6%8A%A5%E9%94%99%E4%B9%8Bqemu-could-not-load-PC-BIOS-bios-256k-bin/"/>
    <id>https://dragonliu2022.github.io/2022/05/10/PA%E6%8A%A5%E9%94%99%E4%B9%8Bqemu-could-not-load-PC-BIOS-bios-256k-bin/</id>
    <published>2022-05-10T14:24:04.000Z</published>
    <updated>2022-07-21T17:03:13.575Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-报错"><a href="#1-报错" class="headerlink" title="1 报错"></a>1 报错</h1><p>开启diff_test，nemu再make run后报错：</p><p><img src="https://s2.loli.net/2022/05/10/mGoDxkP4RLQbIjd.png" width="600" height="400" alt="图片名称" align="center" id="198"></p><h1 id="2-解决"><a href="#2-解决" class="headerlink" title="2 解决"></a>2 解决</h1><p>下面这些链接与遇到的问题相似，<strong>但是并未解决</strong></p><ul><li><a href="https://blog.csdn.net/zhangyexinaisurui/article/details/81806572" target="_blank" rel="noopener">qemu: could not load PC BIOS ‘bios-256k.bin’</a></li><li><a href="https://mlog.club/article/4454010" target="_blank" rel="noopener">由于缺少BIOS而无法启动KVM VM</a></li><li><a href="https://techglimpse.com/qemu-system-x86-command-error-solution/" target="_blank" rel="noopener">How to Fix Error – qemu: could not load PC BIOS ‘bios.bin’?</a></li></ul><p><strong>下面的方法解决了问题：</strong></p><p>自行编译一个 带i386,x86以及包含相关文件如’bios256k.bin’的qemu版本即可</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/37329713" target="_blank" rel="noopener">QEMU虚拟机编译使用实践</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="计组" scheme="https://dragonliu2022.github.io/categories/计组/"/>
    
    
    <category term="PA" scheme="https://dragonliu2022.github.io/tags/PA/"/>
    
  </entry>
  
  <entry>
    <title>模型的评价指标</title>
    <link href="https://dragonliu2022.github.io/2022/04/26/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/"/>
    <id>https://dragonliu2022.github.io/2022/04/26/%E6%A8%A1%E5%9E%8B%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/</id>
    <published>2022-04-26T06:59:37.000Z</published>
    <updated>2022-07-21T17:16:46.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>评估在测试集上计算</p></blockquote><h1 id="1-基本"><a href="#1-基本" class="headerlink" title="1 基本"></a>1 基本</h1><ul><li><strong>TP</strong>（True positives）：代表软件样本被认为是此类型，实际标签正是此类型；</li><li><strong>TN</strong>（True negatives）代表软件样本被认为不是此类型，实际标签不是此类型；</li><li><strong>FP</strong>（False positives）：代表软件样本被认为是此类型，实际标签不是此类型；</li><li><strong>FN</strong>（False negatives）：代表软件样本被认为不是此类型，实际标签正是此类型。</li></ul><h1 id="2-准确率（Accuracy）"><a href="#2-准确率（Accuracy）" class="headerlink" title="2 准确率（Accuracy）"></a>2 准确率（Accuracy）</h1><p>被预测正确的比例：<strong>Accuracy = (TP+TN) / (TP+TN+FP+FN)</strong></p><p>样本不平均的情况，此时模型评估不能仅仅依靠准确率。因此需要再结合F1值（$F_1-score$）</p><h1 id="3-精确率（Precision）"><a href="#3-精确率（Precision）" class="headerlink" title="3 精确率（Precision）"></a>3 精确率（Precision）</h1><p>“正确被预测为正(TP)”占所有”实际被预测为正的(TP+FP)”的比例（混淆矩阵中除以所在的那一列之和），可信度</p><p><strong>Precision = TP / (TP+FP)</strong></p><h1 id="4-召回率（Recall）"><a href="#4-召回率（Recall）" class="headerlink" title="4 召回率（Recall）"></a>4 召回率（Recall）</h1><p>“正确被预测为正(TP)”占所有”应该被预测为正(TP+FN)”的比例（混淆矩阵中除以所在的那一行之和），查全率</p><p><strong>Recall = TP / (TP+FN)</strong></p><h1 id="5-F1值（F1-score）"><a href="#5-F1值（F1-score）" class="headerlink" title="5 F1值（F1-score）"></a>5 F1值（F1-score）</h1><p>同时考虑了精确率和召回率，precison和recall的调和平均值(?)</p><p><strong>F1 = 2*Recall*Precision / (Recall + Precision)</strong></p><h1 id="6-Macro-F1"><a href="#6-Macro-F1" class="headerlink" title="6 Macro F1"></a>6 Macro F1</h1><p>将n分类的评价拆成n个二分类的评价，计算每个二分类的F1 score，n个F1 score的平均值即为Macro F1。</p><h1 id="7-Micro-F1"><a href="#7-Micro-F1" class="headerlink" title="7 Micro F1"></a>7 Micro F1</h1><p>将n分类的评价拆成n个二分类的评价，将n个二分类评价的TP、FP、TN、FN对应相加，计算评价准确率和召回率，由这2个准确率和召回率计算的F1 score即为Micro F1。<br>(TP + FP) / (TP + TN + FP + FN)，实际上就是accuracy，分母就是输入分类器的预测样本个数，分子就是预测正确的样本个数（无论类别）。</p><p>一般来讲，Macro F1、Micro F1高的分类效果好。Macro F1受样本数量少的类别影响大。<br>宏平均比微平均更合理，但也不是说微平均一无是处，具体使用哪种评测机制，还是要取决于数据集中样本分布。</p><h1 id="8-加权平均F1"><a href="#8-加权平均F1" class="headerlink" title="8 加权平均F1(?)"></a>8 加权平均F1(?)</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="人工智能" scheme="https://dragonliu2022.github.io/categories/人工智能/"/>
    
    
    <category term="深度学习" scheme="https://dragonliu2022.github.io/tags/深度学习/"/>
    
  </entry>
  
</feed>
