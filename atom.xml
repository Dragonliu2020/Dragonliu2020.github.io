<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon Liu</title>
  
  
  <link href="https://dragonliu2018.github.io/atom.xml" rel="self"/>
  
  <link href="https://dragonliu2018.github.io/"/>
  <updated>2022-02-12T08:25:52.706Z</updated>
  <id>https://dragonliu2018.github.io/</id>
  
  <author>
    <name>Dragon Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《神鞭》电影(1986)</title>
    <link href="https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
    <id>https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/</id>
    <published>2022-02-12T07:19:03.000Z</published>
    <updated>2022-02-12T08:25:52.706Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-影片信息"><a class="markdownIt-Anchor" href="#1-影片信息"></a> 1 影片信息</h1><ul><li>片名：神鞭</li><li>又名：The Magic Braid</li><li>导演：张子恩</li><li>编剧：张子恩</li><li>主演：王亚为、徐守莉、陈宝国、张嬿、</li><li>上映：1986</li><li>类型：动作/历史/古装</li><li>片长：95分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li><li>IMDb：tt0397625</li></ul><h1 id="2-剧情简介"><a class="markdownIt-Anchor" href="#2-剧情简介"></a> 2 剧情简介</h1><p>清朝末年，天津城了出现一个恶霸地痞——玻璃花（陈宝国 饰），他无恶不作、欺行霸市。一日，卖豆腐的老实人傻二（王亚为 饰）和玻璃花较上了劲，争执中傻二甩开自己的辫子还击，玻璃花被抽得毫无还手之力，落荒而逃。不日玻璃花纠集了一伙武林高手来找傻二寻仇，憨二照样甩开自己又粗又长的还击，竟然打败了一众高手！从此“神鞭”傻二的名声传扬开来。八国联军入侵时，傻二加入了义和团，“神鞭”歼敌无数，立下了赫赫战功……</p><h1 id="3-台词"><a class="markdownIt-Anchor" href="#3-台词"></a> 3 台词</h1><blockquote><p><font color="blue">玻璃花</font>：哪位没提裤子把你给露出来了。</p></blockquote><hr><blockquote><p><font color="blue">金菊花</font>：辫剪了，神留着</p><p><font color="blue">傻二</font>：对，辫剪了，神留着。祖宗的东西再好，该割的时候就得割。无论怎么变，也难不死咱们。什么新玩意儿都能玩到家，一变还得是绝活儿。</p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p><a href="dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/">博客——《神鞭》书籍</a></p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><center>改革开放练就“神鞭”</center><p>本来不想写，把其他影评看过一篇，怒其差劲委曲了一部好片。什么乡绅金老爷，片里交待的清清楚楚是个穷秀才，全都是这种水平的穷bb还那么多人点有用，难怪过了大几十年还要反思这段愚昧野蛮的历史。</p><p>这是部好片，用狗眼当然看不出来。影片明着刻画了玻璃花古董商这样的臭流氓狗奴才，暗里也勾勒出所有在位者的丑陋嘴脸。当官的虚伪不用说，就说说民团首领曹大师兄吧，有如京剧名角亮相一般端着身架迈着台步出场。且不用赘述他如何唱念做打，仅看他上场前后镜头刻意交待的众多靓妹侍从！再结合后面老少爷们英勇全军覆没却不见曹大师兄师妹踪迹，这是个什么东西就跃然纸上了。当然还少不了输急了背后发镖的武林宗师索老爷。与此相对的是一身草莽气的市井高手，虽然也玩了个一发两弹的技俩，但从头到尾都没阴的，大方认输，也算教训了恶人。其他如古董奸商药铺老板娘官妾之流阳奉阴违欺软怕硬的嘴脸也刻画的活灵活现。</p><p>王国维独爱以血书者，我观此片此书就看到了这样的作者。惟以血者书，才能这样淋漓的表达着对国人“怒其不争，哀其不幸”。片尾的傻二的话直到今天仍然振聋发聩！</p><p>——   <font color="blue">引自 <a href="https://movie.douban.com/review/10056840/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 德尔苏 </a></font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="电影" scheme="https://Dragonliu2018.github.io/tags/电影/"/>
    
  </entry>
  
  <entry>
    <title>《神鞭》书籍</title>
    <link href="https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
    <id>https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E4%B9%A6%E7%B1%8D/</id>
    <published>2022-02-12T07:18:52.000Z</published>
    <updated>2022-02-12T08:35:13.588Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>清朝末年，一个海神娘娘“出巡散福”之日，津门各会热闹非凡。盐务展老爷新娶的小老婆飞来凤这一天大出风头，逢会必截，犒赏丰厚。突然，估衣街上的大混星子玻璃花跳出来横生事端，故意挑衅。众人劝说无效，僵持不下。人群里走出一个带点傻气的汉子，对玻璃花好言相劝。这大混星子不但不听，还张狂地要来揪他头上那根粗黑油亮招人眼目的大辫子。不料，那“傻巴”的辫子竟像皮鞭一样，把玻璃花抽了个鼻青脸肿。玻璃花在估衣街上栽了面子，他发誓一定要找到那“傻巴”一决雌雄。</p><p>经多方打听，方知那人是城西挑担卖炸豆腐的“傻二”。混星子死崔为垄断估衣街，借机除掉玻璃花，便撺掇他去找津门“三大块儿”中能耐最大的戴奎一帮忙“拔撞”。戴打得一手好弹弓，可称天下奇绝。死崔怕戴奎一不答应，顺口瞎编说人称傻二那辫子叫“神鞭”，奎的弹弓子不过是小菜儿，用激将法煽风点火，烧起戴的嫉妒心，使他下决心会一会傻二。不料，傻二用辫子不仅轻轻巧巧就打掉了戴的泥弹丸，还抽掉了他的绝活“双珠争冠”，羞得戴奎一无地自容。从此，“神鞭”的名声便传开了。</p><p>原来，傻二自小跟爹爹学辫子功，不曾与人交手，不知如此神速和厉害！而且使起来，随心所欲，意到辫子到，甚至意未到辫子已到。他爹临终前曾告诫他，这辫子功传子传孙，不传外人。不到万不得已不使出来，否则将招灾惹祸。果然，先是玻璃花，后是戴奎一，戴奎一引来在西市上的砸砖头的王砍天，王砍天又引来鸟市上拉硬弓的柳梆子……全叫他抽跑了。</p><p>四门千总马老爷打发人拿来贴子请他去，想派给他一个小缺，在护城营当什长，教授武功。但他家世代不沾官场，推掉了这个差事。千总爷也不勉强他，只叫他耍耍辫子，当玩意儿看看。他只花里胡梢耍一通，还当场打落了几只蜻蜒。千总爷看呆了，当即把府、县、镇、署、前后左右各营中的几位老爷请来观看，个个开了眼，赏了他许多财物。“神鞭”的绰号也愈叫愈响。</p><p>一天，号称津门武林的祖师爷索天响忽然找上门来，说要教教傻二如何做人，见面先是“盘道”，从“形意”到“少林王拳”到“三层”，侃侃而谈，如数家珍。接着又表演了几招漂漂亮亮的拳腿。看得傻二心服口服。不料，这祖师爷待到与傻二交手时，没交几个回合，竟有些微喘。他见明打不成，便使出暗器，被傻二的辫子抽了个正着。最后灰溜溜地走了。傻二开始信服自己的本领，他愈发感到这辫子真是随心所欲，挥洒自如，刚猛又轻柔，灵巧又恢宏，似有一股扫荡天下、所向无敌之势。</p><p>紫竹林里的东洋武士佐藤秀郎闻说此事，把玻璃花叫去询问了一番“神鞭”的能耐，并拜托他下战表给傻二，要和“神鞭”比试比试。傻二接到战表，正犹豫不决，武林高手鼻子李特意前来给他鼓气，指点迷津，要他一定打败洋人。比武这天，身材挫小的佐藤秀郎事先立了个桩，站在桩上，想居高临下，逮机会捉傻二的鞭子。傻二看破对方招数，想出对策，不让他抓住自己的辫子，拳掌辫并用，直把东洋武士晕头转向地扔到对面的戏台上。傻二鞭打东洋武士，不单威震津门，也落得美名四扬。有人送来两块横匾，一是“张我国威”，一是“神鞭”。许多好武少年求他开山收徒，被他一一拒绝。</p><p>玻璃花见不能取胜，便伙同假洋鬼子收买剃头刮脸的王老六，要他趁给傻二剃头时把“神鞭”割下来。事虽不成，却使傻二吃惊不小。卖字画的金子仙劝导他该视这辫子为国宝，加倍爱惜。</p><p>傻二想既然自己的功夫不能外传，就该赶紧娶妻生子，传衍神功。便托金子仙帮他找个媳妇。金家正好有个老闺女金菊花，就送过门来。金菊花人勤恳诚实，对他的辫子尽心尽力地爱惜。</p><p>光绪二十六年，天下闹起义和拳。直隶省遍地义和拳纷纷竖旗立坛。附近各地团民潮水般地涌进天津卫，与紫竹林的毛子们交上火。傻二爹爹生前的朋友刘四叔受义和团总头领曹福田之命来请他，并告诉了他家辫子功的由来：傻二的老祖宗原先练的是问心拳，传自佛门，都是脑袋上的功夫。但必须仿效和尚剃光头，为了交手时不叫对方抓住头发。清军入关后，男人必须留辫子。这一变革绝了傻二家的武艺。逼得傻二的老祖宗把功夫改用在辫子上，才创出这独异奇绝的辫子功。刘四叔责问他身怀绝技，为何不上阵灭敌，光宗耀祖。傻二听了，这就跟刘四叔走。</p><p>他来到吕祖堂，看了一番义和团刀枪不入的表演，又受了曹福田写的一张咒符，便带一路团民与毛子们交手。开始，近距离的肉搏战使毛子们吃了大亏，他们便退到土岗子后边放枪，团民们纷纷中弹倒下，傻二也被炮弹震昏了过去。待他醒来一看，满地都是死人，刘四叔带的吹歌会已全部捐了性命。再一看辫子，竟叫洋枪子儿打断了，神鞭完了。</p><p>傻二逃回金子仙家，藏了半年多。金子仙四下打听，才打听到估衣街瑞芝堂的冯掌柜有生发的秘方。按方一用，傻二日见细黄的头发渐渐变黑变粗，过年转春，一条光滑乌亮又粗又长的神鞭完全复元了。尽管如此，傻二心里很不是滋味。随着洋货涌进，金子仙的字画生意每况愈下，生活窘困，加之金菊花不能生育，不得已，傻二开馆收徒，靠徒弟的学艺钱和额外的孝顺糊口。</p><p>几年之后，大清朝亡了，外边忽然闹起剪辫子。这时的玻璃花混进了“巡防营”的洋枪队，不但剪了傻二徒弟的辫子，还上门来要和傻二算旧帐。傻二一声不吭，闭门不出，不久就失踪了。一年过后，玻璃花到南门外小铁铺取锁栅门的大链子，正抽着烟，突然不知哪来连发三枪，一枪打灭他的烟头，一枪打断了烟卷，再一枪打飞了他的帽子。接着有一少年来下贴子，说有人要会他。玻璃花一去，见是剃了光头的傻二，如今竟成了双枪神射手，就像他当年的神鞭一样纯熟快捷，神鬼莫测。看得玻璃花真正心服。不久，传说北伐军中有一个神枪手，双手打枪，是个地地道道的天津人，可谁也说不出这人的姓名。只有玻璃花心中有数。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>古古古古古古古，今今今今今今今，<br>古非今兮今非古，今亦古兮古亦今；<br>多向精气神里找，少从口眼鼻上认，<br>书里书外常碰巧，看罢一笑莫细品。</p><p>—— <font color="green">引自  引子</font></p></blockquote><hr><blockquote><p>反正老天爷不会一边倒。这世道就像一杆秤，不会总摆不平；无论身内身外的事，都好比撂在这秤上。一头压下去，另一头就该翘起来。月光照完东窗，渐渐去照西窗；运气和霉气一样，在众人头上蹦来蹦去。日头太毒，便逼来浓云疾雨；雨下得过狂，又招来一阵大风，直把云彩吹得一丝不见。</p><p>—— <font color="green">引自  第二回 跳出一个大傻巴</font></p></blockquote><hr><blockquote><p>别信那套！嘛叫哥儿们爷儿们？不过为了给自己助威。轮到两人分一块肉时，刀尖又专往哥儿们身上要命的地方捅。</p><p>—— <font color="green">引自  第三回 请神容易送神难</font></p></blockquote><hr><blockquote><p>原来大人物，一半靠名，那名是哪来的，只有他妈鬼知道了。</p><hr><p>我可以告明白你，打你没生下来，这世上的每一寸地面上都有名有姓，你想立足，谈何容易。</p><p>—— <font color="green">引自   第六回 祖师爷亮相</font></p></blockquote><hr><blockquote><p>人像蜜蜂，哪儿开花往哪飞。<br>　　您点高时，乱轰轰一大团围住您，没法分清；可是等到您点低的时候，真假远近，可就立刻看得一清二楚。天津卫有句俗话，叫做：倒霉认朋友。</p><p>—— <font color="green">引自   第七回 广来洋货店的掌柜杨殿起</font></p></blockquote><hr><blockquote><p>祖宗的东西再好，该割的时候就得割。我把‘鞭’剪了，‘神’却留着。</p><p>—— <font color="green">引自 第十五回 神枪手</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>从《俗世奇人》过来的。</p><p>相对于《俗世奇人》，《神鞭》是中篇小说，读起来更加过瘾。而且具有很强的时代烙印，具体的可以参考下面的评论。</p><p>也被翻拍成了电影和电视剧。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>老背着祖宗，还怎么往前走</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/698377442?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 [已注销]</a></font></p></blockquote><hr><blockquote><center>改革开放练就“神鞭”</center><p>不管黑猫白猫，抓住老鼠就是好猫。不管辫子手枪，打败敌人才能称神。这《神鞭》创作于1984年，不用说，是为改革开放摇旗呐喊呢。</p><p>在街上卖臭豆腐的傻二身上有一样祖传的功夫——他的辫子是一条神鞭，指哪打哪能左能右，只是“养在深闺人未识”，无人得知。后来，他遇到大混混玻璃花闹事逞凶，出于正义挺身而出，一出手就痛揍了一群混混，这下一战成名。玻璃花为报这一鞭之仇，先后撺掇了玩弹弓的戴奎一、武术大师索天响（感觉这人有点像教条主义的王明）以及东洋武士佐藤来上门挑战，这仨人全被傻二打了个落花流水，傻二更是名声大噪。 后来八国联军入侵北京，傻二加入义和团，攻打紫竹林租界。义和团的师兄弟们有不少都是练家子，一把大刀耍的溜溜转，大家群情振奋、士气高涨。可谁知洋枪竟然这么厉害，任你铁布衫、金钟罩，挨上一枪就毙命，傻二死里逃生，可是辫子挨了一枪被打断了。神鞭的功夫不含糊，其他习武人都赢不了他，可这是在拳脚上，火枪和冷兵器就是一个时代的差距了。</p><p>上一代的旗舰有可能比不上现在的低端，iphone4是当时最先进也最贵的手机，可是它的性能还比不上今天的低端红米。印加文明把结绳记字的科技树给点满发明了奇普， 通过方向、颜色、绳子、大小等极其复杂的专业方式来记录帝国的历史、财政、人口，可是再厉害的结绳记事也比不过最简陋的甲骨文来的方便。阿兹特克人发展出石器时代的顶级武器马夸威特，一种将黑曜石镶嵌在木棒上打造出的可怕冷兵器，并用它来装备最精锐的力量“美洲虎武士”。随着后来西班牙人入侵和阿兹特克帝国的覆灭，骁勇的“美洲虎武士”和“马夸威特”都被带入了历史的尘埃。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177922.webp" alt="img"></p><p>人类结绳记事的顶峰——印加奇普</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177923.webp" alt="img"></p><p>文字的雏形甲骨文</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5177924.webp" alt="img"></p><p>电影《启示录》中手持马夸威特的武士</p><p>傻二被没打没了信心，以前油亮黑壮的大粗辫子成了半截焦黄的辫子耷拉着，祖传的功夫被人破了，一下子没了威风。可傻二不傻，傻二痛定思痛，悟出了功夫再深也敌不过洋枪的道理，毅然剪掉辫子拿起了洋枪，变神鞭为神枪，多年回来后，傻二没了辫子，但是成了神枪手。</p><p>一个打算盘二十年的老账房先生很难放弃算盘学office。山本五十六曾经谋划了空袭珍珠港的惊天大手笔，6艘航母满载441架飞机，经过一个多小时奔袭珍珠港，给予了美国珍珠港海军毁灭性打击。山本五十六预见到了未来海上战争是以空制海，有制空权才能有制海权，此时应该大力发展航空母舰，发展以航母为核心配备驱逐舰、护卫舰的航母战斗群。但此时掌权的人都是日俄战争时期成长起来的大佬，这些陆军部老顽固们认为海军应该是厚装甲、大口径炮的战列舰，甚至有老顽固认为海军只要把士兵运送到位置就可以了，打仗还是要在陆地上打。现在的军舰战术都讲究空中、海上、水下的一体协同作战，不再使用二战时期那么厚的装甲来硬碰硬，战列舰在二战时期发展到了顶点，也走到了终点。</p><p><img src="https://img9.doubanio.com/view/thing_review/l/public/p5241765.webp" alt="img"></p><p>世界史上最大吨位的战列舰大和号梦沉太平洋</p><p>傻二剪掉了头上的辫子，更重要的是剪掉了心里的辫子，而现在很多人却还是留着看不见的辫子，这不能不说是个遗憾了。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/12923808/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 鳄鱼不饿</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><ul><li>电影：<a href="dragonliu.tk/2022/02/12/%E3%80%8A%E7%A5%9E%E9%9E%AD%E3%80%8B%E7%94%B5%E5%BD%B1/">《神鞭》(1986)</a></li><li>电视剧：《神鞭》(2001)</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="书评" scheme="https://Dragonliu2018.github.io/tags/书评/"/>
    
  </entry>
  
  <entry>
    <title>《能人》书籍</title>
    <link href="https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
    <id>https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/</id>
    <published>2022-02-12T05:25:48.000Z</published>
    <updated>2022-02-12T06:37:13.313Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>天津是个码头，码头上的人争强好胜，自然是谁有本事佩服谁。这种心理衍及社会各行各业，都是钦佩能人。所谓能人是真有本事的人，技高一筹的人，身怀绝技的人。</p><p>大回、酒婆、甄一口、管万斤、李铁柱、卓乃丽……这些人中既有显耀上层，更有市井小民，既能空手拿贼，又能平地抠饼，性格又辣又热，又爽又嘎，行事出人意表却又坚持着自己的道义，令人称奇叫绝，钦佩不已。</p><p>冯骥才执笔50年白金纪念版经典小说集《能人》，从清末民初到改革开放，有奇人异事，也有生活纪实，或幽默诙谐，或讽刺批判，或感怀过往，或温馨治愈，全面呈现天津卫近百位奇人异士的生活风貌和传奇人生，被读者誉为一幅“天津卫的清明上河图”。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>人生中有许多问题是永远也解不开的方程式。</p><p>***</p><p>有人说，从一个人身边的书，可以找到通往他心底最绝妙的缝隙。</p><p>***</p><p>在人们的闲话里，大概没有一个完美的人，总是更坏一些，而不是更好一些。弱者会在闲话里畏首畏尾，最后被搞得神经衰弱。</p><p>—— <font color="green">引自 在两个问号之间</font></p></blockquote><hr><blockquote><p>你家院里有棵小树，树干光溜溜，早瞧惯了，可是有一天它忽然变得七扭八弯，愈看愈别扭。但日子一久，你就看顺眼了，仿佛它本来就应该是这样子。如果某一天，它忽然重新变直，你又会觉得说不出多么不舒服。它单调、乏味、简易，像根棍子！其实，它不过恢复最初的模样，你何以又别扭起来？</p><hr><p>人们总是按照自己的思维方式去解释世界，尽力把一切事物都和自己的理解力拉平。</p><hr><p>这时，人们有种奇妙的感觉，觉得那伞下好像有长长一大块空间，空空的，世界上任什么东西也填补不上。</p><p>—— <font color="green">引自 高女人和她的矮丈夫</font></p></blockquote><hr><blockquote><p>这女子在杭州上大学，念中文，喜欢文学的女子都很看重人的心意。而真正的爱慕，往往是从对方身上感触到自己人生理想的准则开始的。还有比关水龙头再小的事吗？但对于这念文科的女子，它就像一束细细的光照亮一个世界。有了这样的来自心灵的因由，胡子就不会是任何障碍了。</p><p>—— <font color="green">引自 胡子</font></p></blockquote><hr><blockquote><p>有时这小天地的佼佼者，也会有君主、国王那样的自我富足感。</p><p>—— <font color="green">引自 金色的眼镜腿儿</font></p></blockquote><hr><blockquote><p>一 个人总会由于自己的某种缺陷或不足而羡慕别人。脸黑的羨慕脸白的；记性差的羡慕记性好的；牙齿糟烂的，羡慕别人的一口好牙；手笨的，羡慕人家心灵手巧；老年人羡慕青年人精力有余。</p><p>活人的悲剧比舞台上的悲剧，更能满足一个人的好奇心。</p><p>—— <font color="green">引自 陌客</font></p></blockquote><hr><blockquote><p>世界上，无论好事坏事、大事小事总得过去。新鲜的玩意儿刚到手如获至宝，看惯了也就习以为常。</p><p>—— <font color="green">引自 匈牙利脚踏车</font></p></blockquote><hr><blockquote><p>每个人都有自己童年和少年时代的朋友，好像朝日曙照、云霞、露珠一样，总是属于那一段时光里同时出现的，互相为伴，汇成片灿烂缤纷的景象，过后就纷纷散失了。</p><hr><p>那时，世道狂乱，人人失去常恋，宁肯无知，宁愿心很，还有许多出奇的妄想，恨不得从身旁发现出希特勒。</p><hr><p>我第一次感受到，一个人把话存在心里，他才是充实的。</p><p>—— <font color="green">引自 在早春的日子里</font></p></blockquote><hr><blockquote><p>我接过油毡时，你并没有客气或感谢地笑一笑。你用你黑黑的眼睛专注地望我一眼，这眼好深。你不是用眼，是用心灵望我。那时谁还会用全部心灵望一个陌生人，像人望大自然那样，无戒备的，感受的。后来我发现你也用这样的目光望一切。可是当你望我时，世界忽然变得一尘不染。</p><hr><p>男人对女人就该有保护意识。女人乐不乐意接受是另一码事。要不怎么证实自己的性别，还称什么男子汉</p><hr><p>你们只想叫我坐稳，把你们碰到的一个个难题提给我。我高兴用我的机智把这些问号打碎，还有些问号你们明知道我也没辙，却喜欢看我拿笑话把它扭得变形，不再像问号，好玩。</p><p>—— <font color="green">引自 船歌</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>从《俗世奇人》过来的。</p><p>书籍前半部分收录《俗世奇人》的文章，后半部分内容是新中国的事，风格也发生了变化，不再是“奇人”、“能人”，更多的是讽刺现实。</p><p>其中《船歌》第一次读直接略过了，后来整理博客、翻阅书评时，才又读了一遍，感觉唯美浪漫。只能说书籍后半部分需要静下心来仔细品味，不能像读《俗世奇人》那般。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>书名能人二字指得是书里的前13个短篇，都是民国年间天津卫的奇闻轶事。码头文化滋养之下，天津人性格有股子英雄主义情结，不畏强权不畏财富，做事讲究个狠字，不论是戏曲、武行、生意或是官场，能耐大过天。不过在沧海横流的世道，生死转瞬间，也应了那句话“能人都死在了能耐之下”。感叹作者笔力了的，急促紧凑地叙事，一把薅住人物特点，再寥寥几笔故事冲突和张力陡然凝聚，读着真过瘾。后半部分就是小人物众生相，《我这个笨蛋》中为换个大房子而走后门时，反复吃暗亏的窝囊小职员，《在两个问号之间》里斥责插队政策是下乡知青与农民不睦婚姻的黑手，背后的精神世界鸿沟无法弥合。还有《金色眼镜腿》《匈牙利脚踏车》《两医生》呈现知识分子在官僚和腐败体系下内心的价值观冲撞，一种愤恨情绪宣发。整体文本是老派的，规矩雅致，没有无聊的炫技。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2656527755?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 大脸</a></font></p></blockquote><hr><blockquote><p>这本书的策划方向错了，或者说故意错，往《俗世奇人》的方向上靠。收录了几篇《奇人》里的故事，但后面的故事跟“奇人”“能人”都没关系了。反倒是婚姻、情感故事居多，往这个方向策划，没准儿更好。《看一眼》《船歌》《在早春的日子》这几篇更喜欢，很浪漫。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2643966284?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 鹿原</a></font></p></blockquote><hr><blockquote><center>读《能人》有感</center><p>318分钟，读完了今年的第一本电子书。事实上，这也是今年第一本兴趣使然读完的书。</p><p>读这本书的前半程，就像初冬时节，在喧嚣的天津码头揣兜儿晃荡，路过酒肆，穿过大集，看那各路能人轮番登场，热闹非凡。泥人张，酒婆，管万金，冯五爷…任你在天津的地界儿忘记时间，比起什么生活的真谛，人生的意义，这浓烈的烟火气就是舒坦。</p><p>后半程的故事一样精彩生动，后劲儿更足，更深刻。读完总要让你回过味儿再想一想，琢磨琢磨。读完《两个问号之间》，连续好几天做饭的时候，我都在纠结要怎么给卓乃丽写封信，看完《今天接着昨天》，觉着又感动，又刺痛。最后一篇《老夫老妻》读的我紧张又着急，又不舍得往后面翻。</p><p>书里的小故事个个儿精彩万分，读这本书的感觉就像有一壶热腾腾的烧酒，却不敢贪杯。茶余饭后看看书，读读故事，兴致盎然，尽是风景。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/14034001/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 小胡同学</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="书评" scheme="https://Dragonliu2018.github.io/tags/书评/"/>
    
  </entry>
  
  <entry>
    <title>Python取整</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E5%8F%96%E6%95%B4/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E5%8F%96%E6%95%B4/</id>
    <published>2022-02-11T08:25:36.000Z</published>
    <updated>2022-02-11T15:59:12.010Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-向下取整int"><a class="markdownIt-Anchor" href="#1-向下取整int"></a> 1 向下取整——int()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(int(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(int(f2))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h1 id="2-向上取整ceil"><a class="markdownIt-Anchor" href="#2-向上取整ceil"></a> 2 向上取整——ceil()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.ceil(f1))  <span class="comment"># 2</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(math.ceil(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="3-四舍五入round"><a class="markdownIt-Anchor" href="#3-四舍五入round"></a> 3 四舍五入——round()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(round(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(round(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="4-分别取整数和小数部分"><a class="markdownIt-Anchor" href="#4-分别取整数和小数部分"></a> 4 分别取整数和小数部分</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.modf(f1))  <span class="comment"># (0.22999999999999998, 1.0)</span></span><br></pre></td></tr></table></figure><p>至于小数部分不准确：涉及<strong>浮点数在计算机中的表示</strong>。在计算机中是无法精确的表示小数的，至少目前的计算机做不到这一点。Python 和 C 一样, 采用 <code>IEEE 754</code> 规范来存储浮点数。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/365406577" target="_blank" rel="noopener">python中取整数的四种方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的类(class)</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E4%B8%AD%E7%9A%84%E7%B1%BB-class/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E4%B8%AD%E7%9A%84%E7%B1%BB-class/</id>
    <published>2022-02-11T06:07:06.000Z</published>
    <updated>2022-02-11T14:16:18.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-模板"><a class="markdownIt-Anchor" href="#1-模板"></a> 1 模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    is_fail = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sid, fid)</span>:</span></span><br><span class="line">        self.id = sid  <span class="comment"># 唯一标志信息</span></span><br><span class="line">        self.fid = fid  <span class="comment"># 父进程唯一标志信息</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.fid</span><br><span class="line"></span><br><span class="line">test_action = Action(sid=sid, fid=fid)</span><br><span class="line">print(test_action.get_id())</span><br><span class="line">print(Action.is_fail)</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程、多进程编程</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2022-02-11T06:05:20.000Z</published>
    <updated>2022-02-11T08:26:19.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在做恶意样本行为可视化，样本数量2w+，执行时间&gt;24h，所以需要多任务处理来提高效率。</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_40317897/article/details/89921083" target="_blank" rel="noopener">Python多进程和多线程（跑满CPU）</a></p></blockquote><p>任务可以理解为进程（process），如打开一个word就是启动一个word进程。在一个word进程之中不只是进行打字输入，还需要拼写检查、打印等子任务，我们可以把进程中的这些子任务称为线程（thread）。</p><p>同时执行多个任务通常各个任务之间并不是没有关联的，而是需要相互通信和协调，有时，任务1必须暂停等待任务2完成后才能继续执行，有时，任务3和任务4又不能同时执行，所以，多进程和多线程的程序的复杂度要远远高于我们前面写的单进程单线程的程序。</p><h1 id="2-多任务实现的3种方式"><a class="markdownIt-Anchor" href="#2-多任务实现的3种方式"></a> 2 多任务实现的3种方式</h1><h2 id="21-多进程模式"><a class="markdownIt-Anchor" href="#21-多进程模式"></a> 2.1 多进程模式</h2><p>启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。<font color="red">多个CPU核心可以一起做多个任务。</font></p><p>进程执行带有参数的任务：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>args</td><td>以元祖的方式给任务传递参数, 顺序要正确</td></tr><tr><td>kwrags</td><td>以字典的方式给执行任务传递参数, key 跟参数名要一致</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(data, <span class="string">'进程PID'</span>, os.getpid())</span><br><span class="line">    print(data, <span class="string">'进程父进程编号'</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_multiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    data_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    core = <span class="number">4</span>  <span class="comment"># 4进程并行</span></span><br><span class="line">    mod = math.ceil(len(data_list) / <span class="number">4</span>)  <span class="comment"># 向上取整</span></span><br><span class="line">    group_data = [data_list[i:i + mod] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data_list), mod)]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> group_data:</span><br><span class="line">        <span class="comment"># process = multiprocessing.Process(target=func, args=(5,))</span></span><br><span class="line">        process = multiprocessing.Process(target=func, kwargs=&#123;<span class="string">'data'</span>: data&#125;)</span><br><span class="line">        process.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_multiprocess()</span><br></pre></td></tr></table></figure><h2 id="22-多线程模式"><a class="markdownIt-Anchor" href="#22-多线程模式"></a> 2.2 多线程模式</h2><p>启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。<font color="red">单个CPU核心可以同时做多个任务。</font></p><p><a href="https://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noopener">菜鸟教程——多线程</a></p><h2 id="23-多进程多线程模式"><a class="markdownIt-Anchor" href="#23-多进程多线程模式"></a> 2.3 多进程+多线程模式</h2><p>启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，当然这种模型更复杂，实际很少采用。</p><h1 id="3-进程线程对比"><a class="markdownIt-Anchor" href="#3-进程线程对比"></a> 3 进程线程对比</h1><h2 id="31-关系对比"><a class="markdownIt-Anchor" href="#31-关系对比"></a> 3.1 关系对比</h2><ol><li>线程是依附在进程里边的, 没有进程就没有线程</li><li>一个进程默认提供一条线程, 进程可以创建多个线程</li></ol><h2 id="32-区别对比"><a class="markdownIt-Anchor" href="#32-区别对比"></a> 3.2 区别对比</h2><ol><li>进程创建的开销要比线程的开销要大</li><li>进程是操作系统资源分配的基本单位, 线程是cpu 调度的基本单位</li><li>线程不能独立执行, 必须依存进程</li></ol><h2 id="33-优缺点对比"><a class="markdownIt-Anchor" href="#33-优缺点对比"></a> 3.3 优缺点对比</h2><ol><li><p>进程优缺点:</p><p>优点：可以用多核</p><p>缺点：资源开销大</p></li><li><p>线程优缺点</p><p>优点: 资源开销小</p><p>缺点：不能使用多核</p></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noopener">在Python中优雅地用多进程</a></li><li><a href="https://blog.csdn.net/qq_43475705/article/details/115518463" target="_blank" rel="noopener">python多进程多线程,多个程序同时运行</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm(IntelliJ系列)的Low Memory问题</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-11T03:22:48.000Z</published>
    <updated>2022-02-11T03:39:29.635Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在跑恶意样本可视化的脚本，Pycharm出现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Low Memory</span><br><span class="line">The IDE is running low on memory and this might affect performance. Please consider increasing available heap.</span><br></pre></td></tr></table></figure><p>原因是IDE内存不足（之前给pycharm设定了2048M，跑大项目会出现上述问题）。</p><p>主要copy于 <a href="https://www.cnblogs.com/baby123/p/15626312.html" target="_blank" rel="noopener">idea 的Low Memory问题</a></p><h1 id="2-解决方法"><a class="markdownIt-Anchor" href="#2-解决方法"></a> 2 解决方法</h1><p>下面的方法适用于IntelliJ系列产品，如Pycharm、idea等。</p><h2 id="21-直接配置"><a class="markdownIt-Anchor" href="#21-直接配置"></a> 2.1 直接配置</h2><img src="https://s2.loli.net/2022/02/11/ulXpqTxoQSt1mRB.png" width="800" height="200" alt="图片名称" align="center" id="68"><p>选择上图里的 Configure，修改堆大小：</p><img src="https://s2.loli.net/2022/02/11/luJ4ba1mBA3G2hE.png" width="300" height="200" alt="图片名称" align="center" id="69"><p>重启IDE生效。</p><h2 id="22-通过help配置修改"><a class="markdownIt-Anchor" href="#22-通过help配置修改"></a> 2.2 通过help配置修改</h2><p>菜单 Help -&gt; 选择 Edit Custom VM Options，会打开 pycharm64.exe.vmoptions文件，修改配置即可。</p><img src="https://s2.loli.net/2022/02/11/EgGpOs8Miow1VSe.png" width="600" height="400" alt="图片名称" align="center" id="70"><p>此时发现<code>Change Memory Settings</code>中已经发生了变化：</p><img src="https://s2.loli.net/2022/02/11/KPSpc5fVvUZR7ON.png" width="600" height="400" alt="图片名称" align="center" id="71"><p>最后重启IDE生效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python集合(set)操作</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/Python%E9%9B%86%E5%90%88-set-%E6%93%8D%E4%BD%9C/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/Python%E9%9B%86%E5%90%88-set-%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-10T09:22:22.000Z</published>
    <updated>2022-02-10T10:24:27.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>集合（set）是一个无序的不重复元素序列。</p><p>主要copy于<a href="https://www.runoob.com/python3/python3-set.html" target="_blank" rel="noopener">菜鸟教程</a></p><h1 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h1><h2 id="21-创建"><a class="markdownIt-Anchor" href="#21-创建"></a> 2.1 创建</h2><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">set2 = &#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line">print(set2)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set3 = set(<span class="string">"apple"</span>)</span><br><span class="line">print(set3)  <span class="comment"># &#123;'l', 'p', 'e', 'a'&#125;</span></span><br><span class="line"></span><br><span class="line">set4 = set(&#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;)</span><br><span class="line">print(set4)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set5 = set((<span class="string">'pear'</span>, <span class="string">'apple'</span>))</span><br><span class="line">print(set5)  <span class="comment"># &#123;'pear', 'apple'&#125;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</font></p><h2 id="22-集合运算"><a class="markdownIt-Anchor" href="#22-集合运算"></a> 2.2 集合运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 下面展示两个集合间的运算.</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  </span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 集合a中包含而集合b中不包含的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 集合a或b中包含的所有元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 集合a和b中都包含了的元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 不同时包含于a和b的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="23-基本操作"><a class="markdownIt-Anchor" href="#23-基本操作"></a> 2.3 基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">test_set = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 添加元素——add(x)</span></span><br><span class="line"><span class="comment">##将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</span></span><br><span class="line">test_set.add(<span class="number">2</span>)  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line">test_set.add(<span class="number">3</span>)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素——update(x)</span></span><br><span class="line"><span class="comment">##参数是列表，元组，字典等，int会报错</span></span><br><span class="line"><span class="comment">##x 可以有多个，用逗号分开。</span></span><br><span class="line">test_set.update(<span class="number">4</span>)  <span class="comment"># TypeError: 'int' object is not iterable</span></span><br><span class="line">test_set.update(&#123;<span class="number">4</span>, <span class="number">5</span>&#125;)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">test_set.update([<span class="number">4</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">6</span>])  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.update((<span class="number">6</span>, <span class="number">7</span>))  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——remove(x)</span></span><br><span class="line"><span class="comment">##将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span></span><br><span class="line">test_set.remove(<span class="number">8</span>)  <span class="comment"># KeyError: 8</span></span><br><span class="line">test_set.remove(<span class="number">7</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——discard(x)</span></span><br><span class="line"><span class="comment">##移除集合中的元素，且如果元素不存在，不会发生错误</span></span><br><span class="line">test_set.discard(<span class="number">7</span>)  <span class="comment"># 不报错 &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.discard(<span class="number">6</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——pop()</span></span><br><span class="line"><span class="comment">##随机删除集合中的一个元素</span></span><br><span class="line"><span class="comment">##对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</span></span><br><span class="line">test_set.pop()  <span class="comment"># &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算元素个数——len</span></span><br><span class="line">len(test_set)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否存在于集合中——in</span></span><br><span class="line">print(<span class="number">2</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> test_set)  <span class="comment"># False</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合——clear</span></span><br><span class="line">test_set.clear()</span><br><span class="line">print(test_set)  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装与使用neo4j</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/</id>
    <published>2022-02-10T03:17:06.000Z</published>
    <updated>2022-02-11T14:06:51.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在实现恶意样本行为可视化，使用 <a href="dragonliu.tk/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">python模块graphviz使用教程</a> 可以达到既定要求；但是图数据库neo4j理论上也是个不错的选择，所以整理下。</p><p>思路：安装Neo4j数据库，python语言使用py2neo库进行使用。</p><h1 id="2-安装neo4j"><a class="markdownIt-Anchor" href="#2-安装neo4j"></a> 2 安装Neo4j</h1><p>主要copy于 <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h2 id="21-安装jdk"><a class="markdownIt-Anchor" href="#21-安装jdk"></a> 2.1 安装JDK</h2><p>Neo4j是基于Java的图形<a href="https://cloud.tencent.com/solution/database?from=10680" target="_blank" rel="noopener">数据库</a>，运行Neo4j需要启动JVM进程，因此必须安装JAVA SE的JDK。从Oracle官方网站下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java SE JDK</a>，当前的版本是JDK8。<font color="red">java版本的高低决定了Neo4j的版本</font></p><h2 id="22-安装neo4j"><a class="markdownIt-Anchor" href="#22-安装neo4j"></a> 2.2 安装Neo4j</h2><p>官网下载最新版本<a href="https://neo4j.com/download/other-releases/" target="_blank" rel="noopener">Neo4j</a></p><p>Neo4j应用程序有如下主要的目录结构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin目录：用于存储Neo4j的可执行程序；</span><br><span class="line">conf目录：用于控制Neo4j启动的配置文件；</span><br><span class="line">data目录：用于存储核心数据库文件；</span><br><span class="line">plugins目录：用于存储Neo4j的插件；</span><br></pre></td></tr></table></figure><h2 id="23-配置环境变量"><a class="markdownIt-Anchor" href="#23-配置环境变量"></a> 2.3 配置环境变量</h2><p>创建主目录环境变量NEO4J_HOME，并把主目录设置为变量值。</p><img src="https://s2.loli.net/2022/02/11/lkopux9h8Zn7PeE.png" width="600" height="200" alt="图片名称" align="center" id="72"><h2 id="24-启动neo4j"><a class="markdownIt-Anchor" href="#24-启动neo4j"></a> 2.4 启动neo4j</h2><h3 id="241-通过控制台启动neo4j程序"><a class="markdownIt-Anchor" href="#241-通过控制台启动neo4j程序"></a> 2.4.1 通过控制台启动Neo4j程序</h3><p>打开cmd，切换到Neo4j主目录下的<code>bin</code>目录，运行下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/11/3d7LJMoKpr2WxNC.png" width="800" height="200" alt="图片名称" align="center" id="73"><img src="https://s2.loli.net/2022/02/11/nFHPDW9Tfxz6LXY.png" width="600" height="300" alt="图片名称" align="center" id="74"><p>用户名和密码默认为<code>neo4j</code>，首次登陆需要修改密码(Neo4j)</p><p><font color="red">java与neo4j版本不对应的报错：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">警告: ERROR! Neo4j cannot be started using java version <span class="number">1.8</span><span class="number">.0</span>_301</span><br><span class="line">警告: * Please use Oracle(R) Java(TM) <span class="number">11</span>, OpenJDK(TM) <span class="number">11</span> to run Neo4j Server.</span><br><span class="line">* Please see https://neo4j.com/docs/ <span class="keyword">for</span> Neo4j installation instructions.</span><br><span class="line">Invoke-Neo4j : This instance of Java <span class="keyword">is</span> <span class="keyword">not</span> supported</span><br><span class="line">所在位置 D:\developer\neo4j\neo4j-community<span class="number">-4.4</span><span class="number">.3</span>\bin\neo4j.ps1:<span class="number">21</span> 字符: <span class="number">7</span></span><br><span class="line">+ Exit (Invoke-Neo4j -Verbose:$Arguments.Verbose -CommandArgs $Argument ...</span><br><span class="line">+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException</span><br><span class="line">    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-Neo4j</span><br></pre></td></tr></table></figure><p>当时我测试的版本(JDK8+Neo4j4.4.4)出现上面的报错，该换JDK8+Neo4j3.5.30后成功运行。</p><h3 id="242-把neo4j安装为服务windows-services"><a class="markdownIt-Anchor" href="#242-把neo4j安装为服务windows-services"></a> 2.4.2 把Neo4j安装为服务（Windows Services）</h3><p>请查阅  <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h1 id="3-python使用"><a class="markdownIt-Anchor" href="#3-python使用"></a> 3 python使用</h1><p>python通过调用<code>py2neo</code> 库实现对数据库的操作。</p><ul><li><p><a href="https://py2neo.org/v4/data.html#node-and-relationship-objects" target="_blank" rel="noopener">py2neo官网</a></p></li><li><p><a href="https://www.jianshu.com/p/a2497a33390f" target="_blank" rel="noopener">py2neo——Neo4j&amp;python的配合使用</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1693445" target="_blank" rel="noopener">用Python中的py2neo库调用neo4j，搭建简单关联图谱</a></p></li></ul><h2 id="31-连接数据库"><a class="markdownIt-Anchor" href="#31-连接数据库"></a> 3.1 连接数据库</h2><p>安装py2neo库：<code>pip install py2neo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(</span><br><span class="line">    <span class="string">"http://localhost:7474"</span>,</span><br><span class="line">    username=<span class="string">"neo4j"</span>,</span><br><span class="line">    password=<span class="string">"Neo4j"</span>  <span class="comment">#修改后的密码</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>测试时出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: The following settings are not supported: &#123;<span class="string">'username'</span>: <span class="string">'neo4j'</span>&#125;</span><br></pre></td></tr></table></figure><p>因为py2neo版本问题，需要做出以下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br></pre></td></tr></table></figure><p>详见 <a href="https://blog.csdn.net/u010785550/article/details/116856031" target="_blank" rel="noopener">关于使用Py2neo连接Neo4j图数据库出现“ValueError: The following settings are not supported”报错的解决方案</a></p><h2 id="32-基本操作"><a class="markdownIt-Anchor" href="#32-基本操作"></a> 3.2 基本操作</h2><p>参考：<a href="https://blog.csdn.net/michaelguangg/article/details/100704303" target="_blank" rel="noopener">py2neo在已有节点上批量创建关系</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph, Node, Relationship, Subgraph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库中以往的图，确保在一个空白的环境中进行操作</span></span><br><span class="line">test_graph.delete_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶点</span></span><br><span class="line">node_list = []</span><br><span class="line">node_list.append(Node(<span class="string">"Teacher"</span>, name=<span class="string">"Alice"</span>))  <span class="comment"># label(type) name(显示值)</span></span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Bob"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Dragon"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Pig"</span>))</span><br><span class="line"><span class="comment">##subgraph加快导入速度</span></span><br><span class="line">nodes = Subgraph(node_list)</span><br><span class="line">test_graph.create(nodes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建边</span></span><br><span class="line">edge_list = []</span><br><span class="line"><span class="comment">##找到对应节点</span></span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Bob"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Dragon"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">edges = Subgraph(relationships=edge_list)</span><br><span class="line">test_graph.create(edges)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><img src="https://s2.loli.net/2022/02/11/4Li9RKwmuN7t6kV.png" width="700" height="400" alt="图片名称" align="center" id="75"><h1 id="4-拓展spade"><a class="markdownIt-Anchor" href="#4-拓展spade"></a> 4 拓展——SPADE</h1><p>当时参加A-ST竞赛时使用过，本次测试没进行。</p><p><a href="https://github.com/ashish-gehani/SPADE" target="_blank" rel="noopener">Github-Spade</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>python list分组</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/python-list%E5%88%86%E7%BB%84/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/python-list%E5%88%86%E7%BB%84/</id>
    <published>2022-02-10T02:20:19.000Z</published>
    <updated>2022-02-10T02:54:04.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在整python多线程，需要对文件列表进行分组，下面整理下有关list分组的内容。</p><h1 id="2-分块"><a class="markdownIt-Anchor" href="#2-分块"></a> 2 分块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">group_data = [data[i:i + num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), num)]</span><br><span class="line">print(group_data)  <span class="comment"># [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]</span></span><br></pre></td></tr></table></figure><h1 id="3-groupby分组"><a class="markdownIt-Anchor" href="#3-groupby分组"></a> 3 groupby分组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">user_list = [</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">1</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">3</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">2</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 多字段排序</span></span><br><span class="line">user_sort = sorted(user_list, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="comment"># 多字段分组</span></span><br><span class="line">user_group = groupby(user_sort, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> user_group:</span><br><span class="line">    print(key, list(group))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">('女', 20) [&#123;'uid': 4, 'sex': '女', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">('女', 31) [&#123;'uid': 4, 'sex': '女', 'age': 31&#125;]</span></span><br><span class="line"><span class="string">('男', 10) [&#123;'uid': 1, 'sex': '男', 'age': 10&#125;, &#123;'uid': 2, 'sex': '男', 'age': 10&#125;]</span></span><br><span class="line"><span class="string">('男', 20) [&#123;'uid': 3, 'sex': '男', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><font color="red">注意分组之前应先使用分组字段排好序。</font></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_21570029/article/details/84062979" target="_blank" rel="noopener">python list按规定的范围分组</a></li><li><a href="https://blog.csdn.net/xiaoc100200/article/details/111402566" target="_blank" rel="noopener">Python list列表groupby分组用法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>判断python dict或list 中是否含有某个元素或key</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/%E5%88%A4%E6%96%ADpython-dict%E6%88%96list-%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/%E5%88%A4%E6%96%ADpython-dict%E6%88%96list-%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/</id>
    <published>2022-02-09T14:49:35.000Z</published>
    <updated>2022-02-09T15:01:12.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-自带函数has_key"><a class="markdownIt-Anchor" href="#1-自带函数has_key"></a> 1 自带函数has_key()</h1><p>在python的字典的属性方法里面有一个<code>has_key()</code>方法，这个方法使用起来非常简单。</p><p>Python 3.x不再支持 <code>has_key()</code> 函数，而被<code>__contains__()</code>所替代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment"># print(d.has_key('name'))</span></span><br><span class="line">print(d.__contains__(<span class="string">'name'</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="2-in-方法"><a class="markdownIt-Anchor" href="#2-in-方法"></a> 2 in 方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典是否含有key</span></span><br><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> d.keys())  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> d.keys())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表是否含有value</span></span><br><span class="line">l = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> l)  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> l)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/linjpg/article/details/82190565" target="_blank" rel="noopener">判断python字典或者列表中是否包含某个元素或者key</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python去除字符串首尾的指定字符</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/</id>
    <published>2022-02-09T14:43:17.000Z</published>
    <updated>2022-02-10T05:52:25.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在用到防止字符串转义函数——<code>repr</code>，但是他生成的字符串首尾会自动加上单引号，详见<a href="dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/">博客</a>，可以使用<code>strip</code>函数进行去除。</p><h1 id="2-实践"><a class="markdownIt-Anchor" href="#2-实践"></a> 2 实践</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip不传参数默认去掉空格</span></span><br><span class="line">test_str = <span class="string">'  string  '</span></span><br><span class="line"><span class="comment"># 去掉首尾空格</span></span><br><span class="line">print(test_str.strip())  <span class="comment"># string</span></span><br><span class="line"><span class="comment"># 去掉首空格</span></span><br><span class="line">print(test_str.lstrip())  <span class="comment"># string  </span></span><br><span class="line"><span class="comment"># 去掉尾空格</span></span><br><span class="line">print(test_str.rstrip())  <span class="comment">#   string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符</span></span><br><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python处理表格</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC/</id>
    <published>2022-02-09T10:45:09.000Z</published>
    <updated>2022-02-09T13:39:03.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>今天实现恶意样本标签提取，用到了表格处理，下面进行整理。</p><p>python操作excel主要用到<code>xlrd</code>和<code>xlwt</code>这两个库，即<code>xlrd</code>是读excel，<code>xlwt</code>是写excel的库。这两个库使用pip进行安装。</p><h1 id="2-python写excelxlwt"><a class="markdownIt-Anchor" href="#2-python写excelxlwt"></a> 2 Python写excel——xlwt</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_excel</span><span class="params">(output_file)</span>:</span></span><br><span class="line">    fields = [<span class="string">'姓名'</span>, <span class="string">'年龄'</span>]  <span class="comment"># 设置自己需要的Excel表头</span></span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 获取excel对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">'人员信息表'</span>)  <span class="comment"># 设置excel的sheet名称</span></span><br><span class="line">    <span class="keyword">for</span> col, field <span class="keyword">in</span> enumerate(fields):  <span class="comment"># 写入excel表头</span></span><br><span class="line">        sheet.write(<span class="number">0</span>, col, field)</span><br><span class="line">    info_list = [[<span class="string">'Dragon'</span>, <span class="number">18</span>], [<span class="string">'Pig'</span>, <span class="number">21</span>], [<span class="string">'Cat'</span>, <span class="number">22</span>]]</span><br><span class="line">    row = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name, age <span class="keyword">in</span> info_list:  <span class="comment"># 根据数据写入excel，col-单元格行标，field-单元格列标</span></span><br><span class="line">        sheet.write(row, <span class="number">0</span>, name)</span><br><span class="line">        sheet.write(row, <span class="number">1</span>, age)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    book.save(output_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    output_file = <span class="string">"output.xls"</span></span><br><span class="line">    export_excel(output_file)</span><br></pre></td></tr></table></figure><p>表格信息如下：</p><img src="https://s2.loli.net/2022/02/09/B8mGXdCqurtDVJ6.png" width="600" height="300" alt="图片名称" align="center" id="64"><h1 id="3-python读excelxlrd"><a class="markdownIt-Anchor" href="#3-python读excelxlrd"></a> 3 Python读excel——xlrd</h1><p>整体思路为，打开文件，选定表格，读取行列内容，读取表格内数据</p><p>详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(input_file)</span>:</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    wb = xlrd.open_workbook(filename=input_file)</span><br><span class="line">    <span class="comment"># 获取所有表格名字</span></span><br><span class="line">    print(wb.sheet_names())  <span class="comment"># ['人员信息表']</span></span><br><span class="line">    <span class="comment"># 通过索引获取表格</span></span><br><span class="line">    sheet1 = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 通过名字获取表格</span></span><br><span class="line">    sheet2 = wb.sheet_by_name(<span class="string">'人员信息表'</span>)</span><br><span class="line">    print(sheet1, sheet2)  <span class="comment"># Sheet  0:&lt;人员信息表&gt; Sheet  0:&lt;人员信息表&gt;</span></span><br><span class="line"></span><br><span class="line">    print(sheet1.name, sheet1.nrows, sheet1.ncols)  <span class="comment"># 人员信息表 4 2</span></span><br><span class="line">    <span class="comment"># 获取第1行内容（编号从0开始）</span></span><br><span class="line">    rows = sheet1.row_values(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取第1列内容（编号从0开始）</span></span><br><span class="line">    cols = sheet1.col_values(<span class="number">1</span>)</span><br><span class="line">    print(rows)  <span class="comment"># ['Dragon', 18.0]</span></span><br><span class="line">    print(cols)  <span class="comment"># ['年龄', 18.0, 21.0, 22.0]</span></span><br><span class="line">    <span class="comment"># 获取表格里的内容，三种方式</span></span><br><span class="line">    print(sheet1.cell(<span class="number">1</span>, <span class="number">0</span>).value)  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.cell_value(<span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.row(<span class="number">1</span>)[<span class="number">0</span>].value)  <span class="comment"># Dragon</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input_file = <span class="string">"output.xls"</span></span><br><span class="line">    read_excel(input_file)</span><br></pre></td></tr></table></figure><h1 id="4-xls和xlsx的异同"><a class="markdownIt-Anchor" href="#4-xls和xlsx的异同"></a> 4 xls和xlsx的异同</h1><ul><li><p>文件核心结构不同：</p><ul><li>xls核心结构是复合文档类型的；</li><li>xlsx 的核心结构是 XML 类型的结构，并且基于XML进行压缩（占用空间更小），所以也可以看做zip文件，将一个“.xlsx”文件的后缀改为ZIP后，用解压软件解压，可以看到里面有一个xml文件和文件的主要内容。</li></ul></li><li><p>版本不同：</p><ul><li>xls是excel2003及以前版本所生成的文件格式</li><li>xlsx是excel2007及以后版本所生成的文件格式</li><li>（excel 2007之后版本可以打开上述两种格式，但是excel2013只能打开xls格式）</li></ul></li></ul><p>进一步的详细解释参见：<a href="https://jingyan.baidu.com/article/1974b289c9aaefb5b0f7746b.html" target="_blank" rel="noopener">excel后缀.xls和.xlsx有什么区别</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.php.cn/python-tutorials-451228.html" target="_blank" rel="noopener">python如何处理表格？</a></li><li><a href="https://blog.csdn.net/weixin_44288604/article/details/120731317" target="_blank" rel="noopener">python实现——处理Excel表格（超详细）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python统计词频</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/</id>
    <published>2022-02-09T10:44:46.000Z</published>
    <updated>2022-02-09T14:28:23.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本的标签信息提取、投票表决方式确定样本的最终最终标签信息，恰好用到了词频统计，或者说查找数组中出现次数最多的元素。</p><h1 id="2-词频统计"><a class="markdownIt-Anchor" href="#2-词频统计"></a> 2 词频统计</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">'''in a job interview or in a situation'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解并提取英文文章的单词</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">',.\n '</span>:</span><br><span class="line">    txt = txt.replace(s, <span class="string">' '</span>)</span><br><span class="line">txt = txt.lower()  <span class="comment"># 将字母变成小写，排除原文大小写差异对词频统计的干扰</span></span><br><span class="line">word_list = txt.split()</span><br><span class="line">print(word_list)  <span class="comment"># ['in', 'a', 'job', 'interview', 'or', 'in', 'a', 'situation']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个单词进行计数</span></span><br><span class="line">count = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word_list:</span><br><span class="line">    count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(count)  <span class="comment"># &#123;'in': 2, 'a': 2, 'job': 1, 'interview': 1, 'or': 1, 'situation': 1&#125;</span></span><br><span class="line"><span class="comment"># 对单词的统计值从高到低进行排序</span></span><br><span class="line">sorted_word = sorted(count.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(sorted_word)  <span class="comment"># [('in', 2), ('a', 2), ('job', 1), ('interview', 1), ('or', 1), ('situation', 1)]</span></span><br></pre></td></tr></table></figure><h1 id="2-查找数组list中出现次数最多的元素"><a class="markdownIt-Anchor" href="#2-查找数组list中出现次数最多的元素"></a> 2 查找数组(list)中出现次数最多的元素</h1><h2 id="21-npargmaxnpbincount"><a class="markdownIt-Anchor" href="#21-npargmaxnpbincount"></a> 2.1 np.argmax(np.bincount())</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(np.bincount(array))  <span class="comment"># [1 1 2 1 3 1 1]</span></span><br><span class="line">print(np.argmax(np.bincount(array)))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p><code>np.argmax</code>：就是返回数组中最大值对应的下标，<br><code>np.bincount</code>：首先找到数组最大值max，然后返回0～max的各个数字出现的次数，<font color="red">只能处理不含负数的集合</font></p><h2 id="22-countermost_common"><a class="markdownIt-Anchor" href="#22-countermost_common"></a> 2.2 Counter().most_common</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'aswd'</span>]</span><br><span class="line">print(Counter(array))  <span class="comment"># Counter(&#123;4: 3, 2: 2, 0: 1, 1: 1, 3: 1, 5: 1, 6: 1, 'aswd': 1&#125;)</span></span><br><span class="line">print(Counter(array).most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>Counter用来对数组中元素出现次数进行统计，然后通过most_common函数找到出现次数最多的元素。这种方法对于数组就没有过多限制，甚至是各种类型元素混合的数组也可以。<font color="red">数组只能是array，不能是ndarray。</font></p><h2 id="23-自己实现"><a class="markdownIt-Anchor" href="#23-自己实现"></a> 2.3 自己实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">appear_times = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">if</span> label <span class="keyword">in</span> appear_times:</span><br><span class="line">        appear_times[label] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        appear_times[label] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">most_common = max(appear_times, key=<span class="keyword">lambda</span> x: appear_times[x])</span><br><span class="line">print(appear_times)  <span class="comment"># &#123;1: 2, 2: 1, 3: 1, 4: 1, 5: 3&#125;</span></span><br><span class="line">print(most_common)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>用max求最大值默认情况返回value值（出现次数）最大的key值（元素），而不是value值。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_43527713/article/details/114482509?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;utm_relevant_index=6" target="_blank" rel="noopener">python之统计文本中出现最多的单词</a></li><li><a href="https://blog.csdn.net/aofavx/article/details/103097217" target="_blank" rel="noopener">python统计数组中出现次数最多的元素</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python解析xml文件</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</id>
    <published>2022-02-09T10:44:20.000Z</published>
    <updated>2022-02-09T11:17:05.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本行为可视化，样本的行为是xml文件形式给出，需要使用python对其解析。本次实验使用了dom进行的解析。</p><blockquote><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage），标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。</p><p>它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。</p><p>常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。</p><p>Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree</p></blockquote><p>主要参考：<a href="https://www.runoob.com/python3/python3-xml-processing.html" target="_blank" rel="noopener">菜鸟教程——Python3 XML 解析</a></p><h1 id="2-sax"><a class="markdownIt-Anchor" href="#2-sax"></a> 2 SAX</h1><p>待补充</p><h1 id="3-dom"><a class="markdownIt-Anchor" href="#3-dom"></a> 3 DOM</h1><p>文件对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p><p>一个 DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把文档中所有元素保存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函数来读取或修改文档的内容和结构，也可以把修改过的内容写入xml文件。</p><p>xml文件 <code>movies.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">shelf</span>=<span class="string">"New Arrivals"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Enemy Behind"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>War, Thriller<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>PG<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>10<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Talk about a US-Japan war<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Transformers"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>Anime, Science Fiction<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>1989<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>R<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>8<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>A schientific fiction<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Python 中用 <code>xml.dom.minidom</code> 来解析 xml 文件，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用minidom解析器打开 XML 文档</span></span><br><span class="line">DOMTree = xml.dom.minidom.parse(<span class="string">"movies.xml"</span>)</span><br><span class="line">collection = DOMTree.documentElement</span><br><span class="line"><span class="keyword">if</span> collection.hasAttribute(<span class="string">"shelf"</span>):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Root element : %s"</span> % collection.getAttribute(<span class="string">"shelf"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集合中获取所有电影</span></span><br><span class="line">movies = collection.getElementsByTagName(<span class="string">"movie"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每部电影的详细信息</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"*****Movie*****"</span>)</span><br><span class="line">   <span class="keyword">if</span> movie.hasAttribute(<span class="string">"title"</span>):</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"Title: %s"</span> % movie.getAttribute(<span class="string">"title"</span>))</span><br><span class="line"></span><br><span class="line">   type = movie.getElementsByTagName(<span class="string">'type'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Type: %s"</span> % type.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   format = movie.getElementsByTagName(<span class="string">'format'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Format: %s"</span> % format.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   rating = movie.getElementsByTagName(<span class="string">'rating'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Rating: %s"</span> % rating.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   description = movie.getElementsByTagName(<span class="string">'description'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Description: %s"</span> % description.childNodes[<span class="number">0</span>].data)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Root element : New Arrivals</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Enemy Behind</span><br><span class="line">Type: War, Thriller</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: PG</span><br><span class="line">Description: Talk about a US-Japan war</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Transformers</span><br><span class="line">Type: Anime, Science Fiction</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: R</span><br><span class="line">Description: A schientific fiction</span><br><span class="line">*****Movie*****</span><br></pre></td></tr></table></figure><p>完整的 DOM API 文档请查阅<a href="http://docs.python.org/library/xml.dom.html" target="_blank" rel="noopener">Python DOM APIs</a>。</p><h1 id="4-elementtree"><a class="markdownIt-Anchor" href="#4-elementtree"></a> 4 ElementTree</h1><p>待补充</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python测量程序运行时间</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</id>
    <published>2022-02-09T08:48:03.000Z</published>
    <updated>2022-02-09T09:33:39.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近做到恶意样本可视化，跑脚本需要测量程序运行时间，下面是几种测量方法：</p><h1 id="2-datetimedatetimenow"><a class="markdownIt-Anchor" href="#2-datetimedatetimenow"></a> 2 datetime.datetime.now()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">endtime = datetime.datetime.now()</span><br><span class="line">print((endtime - starttime).seconds)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>datetime.datetime.now()</code>获取的是当前日期，在程序执行结束之后，这个方式获得的时间值为<strong>程序执行的时间</strong>。</p><h1 id="3-timetime"><a class="markdownIt-Anchor" href="#3-timetime"></a> 3 time.time()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>time.time()</code>获取自纪元以来的当前时间（以秒为单位）。如果系统时钟提供它们，则可能存在秒的分数。所以这个地方返回的是一个浮点型类型。这里获取的也是<strong>程序的执行时间</strong>。</p><h1 id="4-timeclock-或-timeperf_counter"><a class="markdownIt-Anchor" href="#4-timeclock-或-timeperf_counter"></a> 4 time.clock() 或 time.perf_counter()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start = time.clock()</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">1e8</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment"># end = time.clock()</span></span><br><span class="line">end = time.perf_counter()</span><br><span class="line">print(end - start)  <span class="comment">#秒</span></span><br></pre></td></tr></table></figure><p><code>time.clock()</code>返回程序开始或第一次被调用<code>clock()</code>以来的CPU时间。 这具有与系统记录一样多的精度。返回的也是一个浮点类型。这里获得的是<strong>CPU的执行时间</strong>。</p><p>python3.8+ 不支持 clock 了，替换成 <code>time.perf_counter()</code> 就可以了</p><p><font color="red"><strong>注意</strong></font>：程序执行时间=cpu时间 + io时间 + 休眠或者等待时间</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/wangshuang1631/article/details/54286551" target="_blank" rel="noopener">几种Python执行时间的计算方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python遍历文件夹下的所有文件</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</id>
    <published>2022-02-09T08:47:44.000Z</published>
    <updated>2022-02-09T09:19:43.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在实现恶意脚本的可视化，需要实现提取文件夹下的所有文件名，实现脚本自动化。</p><h1 id="2-文件夹下只有文件"><a class="markdownIt-Anchor" href="#2-文件夹下只有文件"></a> 2 文件夹下只有文件</h1><p>当目标文件夹中只有文件时，使用os模块的<code>listdir()</code>方法即可：该方法可以返回目标路径下的文件和文件夹的名字列表，参数就是目标路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt']</span></span><br></pre></td></tr></table></figure><h1 id="3-文件夹下有文件和文件夹"><a class="markdownIt-Anchor" href="#3-文件夹下有文件和文件夹"></a> 3 文件夹下有文件和文件夹</h1><p>当目标文件中既有文件又有文件夹时，我们使用<code>listdir()</code>方法就只能获得第一层子文件或文件夹了，而子文件夹中的内容便获取不到了。</p><p>这时候我们需要用到<code>os.walk()</code>方法：传入目标路径即可。该方法可以递归的找出目标路径下的所有文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt', 'sub-dir']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(filename)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.txt</span></span><br><span class="line"><span class="string">2.txt</span></span><br><span class="line"><span class="string">3.txt</span></span><br><span class="line"><span class="string">4.txt</span></span><br><span class="line"><span class="string">5.txt</span></span><br><span class="line"><span class="string">6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><p><code>os.walk()</code>方法可以生成三元组，也就是我们代码中的<code>filepath</code>，<code>dirnames</code>，<code>filenames</code>。我们将他们分别打印出来可以看到：其中<code>filepath</code>就是目标路径下所有文件的路径，<code>dirnames</code>是我们目标路径的所有目录名称，<code>filenames</code>则是各个路径下的文件名称列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filepath)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">test\sub-dir</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(dirnames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['sub-dir']</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filenames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['1.txt', '2.txt', '3.txt']</span></span><br><span class="line"><span class="string">['4.txt', '5.txt', '6.txt']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="4-拓展获得目标路径下的所有文件的绝对路径"><a class="markdownIt-Anchor" href="#4-拓展获得目标路径下的所有文件的绝对路径"></a> 4 拓展—获得目标路径下的所有文件的绝对路径</h1><p>遍历目标路径下的各个文件，用<code>os.path.join()</code>方法将文件路径和文件名拼接在一起，就是各个文件的绝对路径了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(filepath, filename))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test\1.txt</span></span><br><span class="line"><span class="string">test\2.txt</span></span><br><span class="line"><span class="string">test\3.txt</span></span><br><span class="line"><span class="string">test\sub-dir\4.txt</span></span><br><span class="line"><span class="string">test\sub-dir\5.txt</span></span><br><span class="line"><span class="string">test\sub-dir\6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_39721240/article/details/90704223" target="_blank" rel="noopener">python遍历文件夹下的所有文件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python中防止字符串转义</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/</id>
    <published>2022-02-09T07:31:55.000Z</published>
    <updated>2022-02-10T05:50:31.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做xml解析、可视化时遇到一个问题：将字符串（文件路径）中的转义字符不进行转义<code>123\tabc</code>，正常print会将<code>\t</code>看作转义字符tab，需求是使字符串按原样输出。下面是不同场景下的解决方法：</p><h1 id="2-字符串常量"><a class="markdownIt-Anchor" href="#2-字符串常量"></a> 2 字符串常量</h1><p>如果是字符串常量，则在字符串前加<code>r</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"123\tabc"</span>)</span><br><span class="line"><span class="comment"># 123abc</span></span><br><span class="line">print(<span class="string">r"123\tabc"</span>)  <span class="comment"># test_str = r"123\tabc"</span></span><br><span class="line"><span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><h1 id="3-字符串变量"><a class="markdownIt-Anchor" href="#3-字符串变量"></a> 3 字符串变量</h1><p>如果字符串是变量，使用 <code>repr()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line"></span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意</strong></font>：字符串使用 <code>repr</code> 函数后输出是会在字符串前后自动加上单引号（见print第二行），print第三行是去掉了字符串首尾的单引号。关于<code>strip</code>函数，详见<a href="dragonliu.tk/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/">博客</a>。</p><h1 id="4-文件读取"><a class="markdownIt-Anchor" href="#4-文件读取"></a> 4 文件读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = open(<span class="string">"test.txt"</span>, <span class="string">"r"</span>)  <span class="comment"># 123\tabc</span></span><br><span class="line"></span><br><span class="line">print(file1.read())  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p>文本文件读取测试发现字符串未发生转义。</p><p>拓展阅读：<a href="https://blog.csdn.net/ahalearner/article/details/119777972" target="_blank" rel="noopener">关于python中open函数读取和写入windows记事本的换行问题研究</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/hellofengying/p/10183057.html" target="_blank" rel="noopener">python中防止字符串转义</a></li><li><a href="https://blog.csdn.net/weixin_41813169/article/details/105702294" target="_blank" rel="noopener">python如何实现对变量的禁止转义操作</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python模块graphviz使用教程</title>
    <link href="https://dragonliu2018.github.io/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://dragonliu2018.github.io/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2022-02-03T03:11:14.000Z</published>
    <updated>2022-02-12T05:00:43.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-情景引入"><a class="markdownIt-Anchor" href="#1-情景引入"></a> 1 情景引入</h1><p>前几个月师姐给了个任务——恶意样本行为可视化，输入为xml文件，一个文件代表一个恶意样本。请教学姐学长同学等，加上观看效果图，得出实现思路：python解析xml文件，使用python模块graphviz进行可视化；之后使用图数据库neo4j进行对比。</p><p>之后发现neo4j创建多个图数据库比较麻烦，但是按照行为分类等都比较直观，所以做辅助作用应该不错。</p><img src="https://s2.loli.net/2022/02/10/jnNf9Xrms8CYgxz.png" width="600" height="400" alt="图片名称" align="center" id="65"><p>下面对graphviz进行整理。</p><h1 id="2-graphviz"><a class="markdownIt-Anchor" href="#2-graphviz"></a> 2 Graphviz</h1><p>Graphviz 是一个自动排版的作图软件，可以生成 png pdf 等格式。</p><ul><li><a href="https://graphviz.org/documentation/" target="_blank" rel="noopener">Graphviz官网</a></li><li><a href="https://www.cnblogs.com/shuqin/p/11897207.html" target="_blank" rel="noopener">Graphviz 画图的一些总结</a></li></ul><h1 id="3-python-graphviz"><a class="markdownIt-Anchor" href="#3-python-graphviz"></a> 3 python graphviz</h1><p>python graphviz则是graphviz的python实现。我们可以通过python graphviz实现轻松完成各种流程图的绘制。</p><ul><li><a href="https://graphviz.readthedocs.io/en/stable/manual.html" target="_blank" rel="noopener">python graphviz官方文档</a></li><li><a href="https://blog.csdn.net/LuohenYJ/article/details/106172201" target="_blank" rel="noopener">[python] python模块graphviz使用入门</a></li></ul><h2 id="31-安装"><a class="markdownIt-Anchor" href="#31-安装"></a> 3.1 安装</h2><ol><li><p>安装python graphviz木块（本机使用的是python3.9）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li><li><p>除了python安装外，本机还需要安装Graphviz<a href="https://www.graphviz.org/download/" target="_blank" rel="noopener">(下载页面)</a>，并确保包含dot可执行文件的目录在系统路径上。安装过程中需要添加PATH：</p><img src="https://s2.loli.net/2022/02/10/mJkzIuyaMLCQbAS.png" width="400" height="300" alt="图片名称" align="center" id="35"><p>否则出现下面的报错：(重启Pycharm生效)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graphviz.backend.execute.ExecutableNotFound: failed to execute WindowsPath(<span class="string">'dot'</span>), make sure the Graphviz executables are on your systems<span class="string">' PATH</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lizzy05/article/details/88529030" target="_blank" rel="noopener">graphviz.backend.ExecutableNotFound: failed to execute [‘dot’, ‘-Tpng’, ‘-O’, ‘t est.gv’]问题解决方法</a></p><p>解决报错：添加环境变量</p><img src="https://s2.loli.net/2022/02/10/Nbm9RlSDYFyxtZX.png" width="800" height="400" alt="图片名称" align="center" id="66"></li></ol><h2 id="32-使用"><a class="markdownIt-Anchor" href="#32-使用"></a> 3.2 使用</h2><p>该graphviz模块提供了两个类：Graph和 Digraph。它们分别以DOT语言为无向图和有向图创建图描述。它们具有相同的 API。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> graphviz <span class="keyword">import</span> Digraph</span><br><span class="line"></span><br><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化端点</span></span><br><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'端点A'</span>, color=<span class="string">"#008000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"rectangle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2'</span>, label=<span class="string">'端点B'</span>, color=<span class="string">"#FFD700"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"circle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n3'</span>, label=<span class="string">'端点C'</span>, color=<span class="string">"#0000FF"</span>, fontcolor=<span class="string">"#FFFFFF"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"oval"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布局 L-左 R-右 T-上 B-下</span></span><br><span class="line">dot.attr(rankdir=<span class="string">'LR'</span>)  <span class="comment"># 自左向右</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='RL')</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='TB')  # 默认</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='BT')</span></span><br><span class="line"><span class="comment"># 初始化边</span></span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2'</span>, label=<span class="string">"边1"</span>, color=<span class="string">"#000000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">""</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n3'</span>, label=<span class="string">"边2"</span>, color=<span class="string">"#FF0000"</span>, fontcolor=<span class="string">"#FF0000"</span>, style=<span class="string">"dashed"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件，view=False时将不自动打开文件</span></span><br><span class="line"><span class="comment"># dot.render("test_graphviz.gv", format='jpg', view=True)</span></span><br><span class="line"><span class="comment"># 不保存文件，仅仅自动打开</span></span><br><span class="line">u = dot.unflatten(stagger=<span class="number">1</span>)</span><br><span class="line">u.view()</span><br></pre></td></tr></table></figure><p>显示如下：</p><img src="https://s2.loli.net/2022/02/10/hID7tuFsmfijoQv.png" width="400" height="300" alt="图片名称" align="center" id="67"><h2 id="33-中文乱码"><a class="markdownIt-Anchor" href="#33-中文乱码"></a> 3.3 中文乱码</h2><p>如果出现中文乱码，多半是因为没有设置fontname为支持中文显示的字体，只需要在node或者edge中添加<code>fontname=&quot;Microsoft YaHei&quot;</code>，即可正常显示。</p><ul><li><a href="https://blog.csdn.net/MAILLIBIN/article/details/100581857" target="_blank" rel="noopener">参考</a></li></ul><h2 id="34-端点-边-字体颜色"><a class="markdownIt-Anchor" href="#34-端点-边-字体颜色"></a> 3.4 端点、边、字体颜色</h2><p>在node或者edge中添加<code>color=&quot;#000000&quot;, fontcolor=&quot;#000000&quot;</code>即可，具体颜色可以参考：</p><ul><li><a href="https://graphviz.gitlab.io/doc/info/colors.html" target="_blank" rel="noopener">官网颜色</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2" target="_blank" rel="noopener">维基百科——X11名称编码</a></li></ul><h2 id="35-端点的形状"><a class="markdownIt-Anchor" href="#35-端点的形状"></a> 3.5 端点的形状</h2><p>在node中添加<code>shape=&quot;xxx&quot;</code>即可，具体需要什么形状可以在<a href="https://graphviz.gitlab.io/doc/info/shapes.html" target="_blank" rel="noopener">官网</a>中查找。</p><h2 id="36-rank"><a class="markdownIt-Anchor" href="#36-rank"></a> 3.6 Rank</h2><p><a href="https://blog.csdn.net/youwen21/article/details/98397954" target="_blank" rel="noopener">GraphViz DOT有向图 (四)node节点布局控制之rank,group,subgraph</a></p><h2 id="37-排版"><a class="markdownIt-Anchor" href="#37-排版"></a> 3.7 排版</h2><p>如上面的示例，使用<code>dot.attr(rankdir='xx')</code>来确定排版，作用范围为使用该行代码之后，下一个<code>dot.attr(rankdir='xx')</code>代码之前。</p><h2 id="38-name参数中不能有英文冒号"><a class="markdownIt-Anchor" href="#38-name参数中不能有英文冒号"></a> 3.8 name参数中不能有英文冒号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'n1'</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2:3'</span>, label=<span class="string">'n2:3'</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2:3'</span>)</span><br></pre></td></tr></table></figure><p><code>dot.node(name=&quot;xxx&quot;)</code> 如果name参数含有英文逗号，则会报错，导致画图错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: node n2, port 3 unrecognized</span><br></pre></td></tr></table></figure><p>常见的思路是使用python将name参数改成中文冒号，label参数是原来的英文冒号，达到正确显示的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"http://gsstudio.info/panel"</span></span><br><span class="line">label = repr(string)</span><br><span class="line">name = repr(string.replace(<span class="string">":"</span>, <span class="string">"："</span>))</span><br></pre></td></tr></table></figure><p><code>repr</code>函数是防止字符串转义的，详细见<a href="dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/">博客——python中防止字符串转义</a>。</p><h2 id="39-报错graphvizbackendexecutecalledprocesserror"><a class="markdownIt-Anchor" href="#39-报错graphvizbackendexecutecalledprocesserror"></a> 3.9 报错：graphviz.backend.execute.CalledProcessError</h2><p><strong>报错信息：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprocess.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477.</span><br><span class="line">...</span><br><span class="line">graphviz.backend.execute.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477. [stderr: b<span class="string">'dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.876568 to fit\r\n'</span>]</span><br></pre></td></tr></table></figure><p><strong>现象：</strong></p><p><code>.gv</code>文件可以正常生成，图片文件<code>.jpg</code>无法生成。</p><p>定位报错语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'jpg'</span>)</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>生成的graph太大，dot无法导出，换成<code>pdf</code>或<code>svg</code>就可以了，<code>png</code>和<code>jpg</code>都不行。</p><p>最后选择pdf格式，因为导出的文件小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'pdf'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'pdf'</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/12/59CK8EwoYSsyNiJ.png" width="900" height="200" alt="图片名称" align="center" id="76"><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VMWare虚拟机Ubuntu20.04 LTS磁盘空间不足的解决方法整理</title>
    <link href="https://dragonliu2018.github.io/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://dragonliu2018.github.io/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2022-02-02T09:38:02.000Z</published>
    <updated>2022-02-02T10:50:40.204Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>之前设置磁盘大小为40G，现在搭建cuckoo环境，磁盘空间不足。</p><p>在Ubuntu虚拟机的命令行输入 <code>df -l</code> 查看磁盘使用情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  99% /</span><br></pre></td></tr></table></figure><p>可以看到 <code>/dev/sda5</code> 对应的根目录 <code>/</code> 已经满载了。</p><p>下面是一些解决方法：</p><h1 id="2-删除回收站所有文件"><a class="markdownIt-Anchor" href="#2-删除回收站所有文件"></a> 2 删除回收站所有文件</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.<span class="built_in">local</span>/share/Trash/</span><br></pre></td></tr></table></figure><h1 id="3-删除日志文件"><a class="markdownIt-Anchor" href="#3-删除日志文件"></a> 3 删除日志文件</h1><p>删除所有日志文件：（可能存在权限不够，无法删除的情况）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /dev/null &gt; /var/<span class="built_in">log</span>/**.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>下面这个可以推荐使用：（删除30天之前的旧文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /var/<span class="built_in">log</span>/ -<span class="built_in">type</span> f -mtime +30 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><h1 id="4-删除快照对磁盘空间大小无影响"><a class="markdownIt-Anchor" href="#4-删除快照对磁盘空间大小无影响"></a> 4 删除快照（对磁盘空间大小无影响）</h1><p>但是对于Ubuntu虚拟机整体目录大小有关。</p><h1 id="5-删除无关用户"><a class="markdownIt-Anchor" href="#5-删除无关用户"></a> 5 删除无关用户</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r &lt;newuser&gt;</span><br></pre></td></tr></table></figure><h1 id="6-挂载新磁盘"><a class="markdownIt-Anchor" href="#6-挂载新磁盘"></a> 6 挂载新磁盘</h1><p>拓展磁盘空间：<a href="https://blog.csdn.net/weixin_40641735/article/details/88932720" target="_blank" rel="noopener">链接</a></p><p>设置挂载的文件夹访问权限：<code>sudo chmod 777 ×××</code> （每个人都有读和写以及执行的权限）</p><h1 id="7-拓展磁盘空间不改变原有磁盘内容推荐"><a class="markdownIt-Anchor" href="#7-拓展磁盘空间不改变原有磁盘内容推荐"></a> 7  拓展磁盘空间（不改变原有磁盘内容，推荐）</h1><p><a href="https://blog.csdn.net/weixin_39510813/article/details/78387334?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default" target="_blank" rel="noopener">跳转</a></p><h1 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8 总结</h1><p>扩展磁盘空间完成，df再看一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  48% /</span><br></pre></td></tr></table></figure><p>现在已经完成任务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
</feed>
