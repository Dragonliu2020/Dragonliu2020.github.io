<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon Liu</title>
  
  
  <link href="https://dragonliu2018.github.io/atom.xml" rel="self"/>
  
  <link href="https://dragonliu2018.github.io/"/>
  <updated>2022-02-12T06:37:13.313Z</updated>
  <id>https://dragonliu2018.github.io/</id>
  
  <author>
    <name>Dragon Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《能人》书籍</title>
    <link href="https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
    <id>https://dragonliu2018.github.io/2022/02/12/%E3%80%8A%E8%83%BD%E4%BA%BA%E3%80%8B%E4%B9%A6%E7%B1%8D/</id>
    <published>2022-02-12T05:25:48.000Z</published>
    <updated>2022-02-12T06:37:13.313Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a class="markdownIt-Anchor" href="#1-简介"></a> 1 简介</h1><p>天津是个码头，码头上的人争强好胜，自然是谁有本事佩服谁。这种心理衍及社会各行各业，都是钦佩能人。所谓能人是真有本事的人，技高一筹的人，身怀绝技的人。</p><p>大回、酒婆、甄一口、管万斤、李铁柱、卓乃丽……这些人中既有显耀上层，更有市井小民，既能空手拿贼，又能平地抠饼，性格又辣又热，又爽又嘎，行事出人意表却又坚持着自己的道义，令人称奇叫绝，钦佩不已。</p><p>冯骥才执笔50年白金纪念版经典小说集《能人》，从清末民初到改革开放，有奇人异事，也有生活纪实，或幽默诙谐，或讽刺批判，或感怀过往，或温馨治愈，全面呈现天津卫近百位奇人异士的生活风貌和传奇人生，被读者誉为一幅“天津卫的清明上河图”。</p><h1 id="2-作者"><a class="markdownIt-Anchor" href="#2-作者"></a> 2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a class="markdownIt-Anchor" href="#3-摘抄"></a> 3 摘抄</h1><blockquote><p>人生中有许多问题是永远也解不开的方程式。</p><p>***</p><p>有人说，从一个人身边的书，可以找到通往他心底最绝妙的缝隙。</p><p>***</p><p>在人们的闲话里，大概没有一个完美的人，总是更坏一些，而不是更好一些。弱者会在闲话里畏首畏尾，最后被搞得神经衰弱。</p><p>—— <font color="green">引自 在两个问号之间</font></p></blockquote><hr><blockquote><p>你家院里有棵小树，树干光溜溜，早瞧惯了，可是有一天它忽然变得七扭八弯，愈看愈别扭。但日子一久，你就看顺眼了，仿佛它本来就应该是这样子。如果某一天，它忽然重新变直，你又会觉得说不出多么不舒服。它单调、乏味、简易，像根棍子！其实，它不过恢复最初的模样，你何以又别扭起来？</p><hr><p>人们总是按照自己的思维方式去解释世界，尽力把一切事物都和自己的理解力拉平。</p><hr><p>这时，人们有种奇妙的感觉，觉得那伞下好像有长长一大块空间，空空的，世界上任什么东西也填补不上。</p><p>—— <font color="green">引自 高女人和她的矮丈夫</font></p></blockquote><hr><blockquote><p>这女子在杭州上大学，念中文，喜欢文学的女子都很看重人的心意。而真正的爱慕，往往是从对方身上感触到自己人生理想的准则开始的。还有比关水龙头再小的事吗？但对于这念文科的女子，它就像一束细细的光照亮一个世界。有了这样的来自心灵的因由，胡子就不会是任何障碍了。</p><p>—— <font color="green">引自 胡子</font></p></blockquote><hr><blockquote><p>有时这小天地的佼佼者，也会有君主、国王那样的自我富足感。</p><p>—— <font color="green">引自 金色的眼镜腿儿</font></p></blockquote><hr><blockquote><p>一 个人总会由于自己的某种缺陷或不足而羡慕别人。脸黑的羨慕脸白的；记性差的羡慕记性好的；牙齿糟烂的，羡慕别人的一口好牙；手笨的，羡慕人家心灵手巧；老年人羡慕青年人精力有余。</p><p>活人的悲剧比舞台上的悲剧，更能满足一个人的好奇心。</p><p>—— <font color="green">引自 陌客</font></p></blockquote><hr><blockquote><p>世界上，无论好事坏事、大事小事总得过去。新鲜的玩意儿刚到手如获至宝，看惯了也就习以为常。</p><p>—— <font color="green">引自 匈牙利脚踏车</font></p></blockquote><hr><blockquote><p>每个人都有自己童年和少年时代的朋友，好像朝日曙照、云霞、露珠一样，总是属于那一段时光里同时出现的，互相为伴，汇成片灿烂缤纷的景象，过后就纷纷散失了。</p><hr><p>那时，世道狂乱，人人失去常恋，宁肯无知，宁愿心很，还有许多出奇的妄想，恨不得从身旁发现出希特勒。</p><hr><p>我第一次感受到，一个人把话存在心里，他才是充实的。</p><p>—— <font color="green">引自 在早春的日子里</font></p></blockquote><hr><blockquote><p>我接过油毡时，你并没有客气或感谢地笑一笑。你用你黑黑的眼睛专注地望我一眼，这眼好深。你不是用眼，是用心灵望我。那时谁还会用全部心灵望一个陌生人，像人望大自然那样，无戒备的，感受的。后来我发现你也用这样的目光望一切。可是当你望我时，世界忽然变得一尘不染。</p><hr><p>男人对女人就该有保护意识。女人乐不乐意接受是另一码事。要不怎么证实自己的性别，还称什么男子汉</p><hr><p>你们只想叫我坐稳，把你们碰到的一个个难题提给我。我高兴用我的机智把这些问号打碎，还有些问号你们明知道我也没辙，却喜欢看我拿笑话把它扭得变形，不再像问号，好玩。</p><p>—— <font color="green">引自 船歌</font></p></blockquote><h1 id="4-自评"><a class="markdownIt-Anchor" href="#4-自评"></a> 4 自评</h1><p>从《俗世奇人》过来的。</p><p>书籍前半部分收录《俗世奇人》的文章，后半部分内容是新中国的事，风格也发生了变化，不再是“奇人”、“能人”，更多的是讽刺现实。</p><p>其中《船歌》第一次读直接略过了，后来整理博客、翻阅书评时，才又读了一遍，感觉唯美浪漫。只能说书籍后半部分需要静下心来仔细品味，不能像读《俗世奇人》那般。</p><h1 id="5-他评"><a class="markdownIt-Anchor" href="#5-他评"></a> 5 他评</h1><blockquote><p>书名能人二字指得是书里的前13个短篇，都是民国年间天津卫的奇闻轶事。码头文化滋养之下，天津人性格有股子英雄主义情结，不畏强权不畏财富，做事讲究个狠字，不论是戏曲、武行、生意或是官场，能耐大过天。不过在沧海横流的世道，生死转瞬间，也应了那句话“能人都死在了能耐之下”。感叹作者笔力了的，急促紧凑地叙事，一把薅住人物特点，再寥寥几笔故事冲突和张力陡然凝聚，读着真过瘾。后半部分就是小人物众生相，《我这个笨蛋》中为换个大房子而走后门时，反复吃暗亏的窝囊小职员，《在两个问号之间》里斥责插队政策是下乡知青与农民不睦婚姻的黑手，背后的精神世界鸿沟无法弥合。还有《金色眼镜腿》《匈牙利脚踏车》《两医生》呈现知识分子在官僚和腐败体系下内心的价值观冲撞，一种愤恨情绪宣发。整体文本是老派的，规矩雅致，没有无聊的炫技。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2656527755?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 大脸</a></font></p></blockquote><hr><blockquote><p>这本书的策划方向错了，或者说故意错，往《俗世奇人》的方向上靠。收录了几篇《奇人》里的故事，但后面的故事跟“奇人”“能人”都没关系了。反倒是婚姻、情感故事居多，往这个方向策划，没准儿更好。《看一眼》《船歌》《在早春的日子》这几篇更喜欢，很浪漫。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2643966284?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 鹿原</a></font></p></blockquote><hr><blockquote><center>读《能人》有感</center><p>318分钟，读完了今年的第一本电子书。事实上，这也是今年第一本兴趣使然读完的书。</p><p>读这本书的前半程，就像初冬时节，在喧嚣的天津码头揣兜儿晃荡，路过酒肆，穿过大集，看那各路能人轮番登场，热闹非凡。泥人张，酒婆，管万金，冯五爷…任你在天津的地界儿忘记时间，比起什么生活的真谛，人生的意义，这浓烈的烟火气就是舒坦。</p><p>后半程的故事一样精彩生动，后劲儿更足，更深刻。读完总要让你回过味儿再想一想，琢磨琢磨。读完《两个问号之间》，连续好几天做饭的时候，我都在纠结要怎么给卓乃丽写封信，看完《今天接着昨天》，觉着又感动，又刺痛。最后一篇《老夫老妻》读的我紧张又着急，又不舍得往后面翻。</p><p>书里的小故事个个儿精彩万分，读这本书的感觉就像有一壶热腾腾的烧酒，却不敢贪杯。茶余饭后看看书，读读故事，兴致盎然，尽是风景。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/14034001/?dt_dapp=1&amp;dt_platform=com.douban.activity.qq_session" target="_blank" rel="noopener">豆瓣 小胡同学</a></font></p></blockquote><h1 id="6-拓展"><a class="markdownIt-Anchor" href="#6-拓展"></a> 6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="阅读" scheme="https://Dragonliu2018.github.io/categories/阅读/"/>
    
    
    <category term="书评" scheme="https://Dragonliu2018.github.io/tags/书评/"/>
    
  </entry>
  
  <entry>
    <title>Python取整</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E5%8F%96%E6%95%B4/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E5%8F%96%E6%95%B4/</id>
    <published>2022-02-11T08:25:36.000Z</published>
    <updated>2022-02-11T15:59:12.010Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-向下取整int"><a class="markdownIt-Anchor" href="#1-向下取整int"></a> 1 向下取整——int()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(int(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(int(f2))  <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h1 id="2-向上取整ceil"><a class="markdownIt-Anchor" href="#2-向上取整ceil"></a> 2 向上取整——ceil()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.ceil(f1))  <span class="comment"># 2</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(math.ceil(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="3-四舍五入round"><a class="markdownIt-Anchor" href="#3-四舍五入round"></a> 3 四舍五入——round()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(round(f1))  <span class="comment"># 1</span></span><br><span class="line">f2 = <span class="number">1.73</span></span><br><span class="line">print(round(f2))  <span class="comment"># 2</span></span><br></pre></td></tr></table></figure><h1 id="4-分别取整数和小数部分"><a class="markdownIt-Anchor" href="#4-分别取整数和小数部分"></a> 4 分别取整数和小数部分</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1 = <span class="number">1.23</span></span><br><span class="line">print(math.modf(f1))  <span class="comment"># (0.22999999999999998, 1.0)</span></span><br></pre></td></tr></table></figure><p>至于小数部分不准确：涉及<strong>浮点数在计算机中的表示</strong>。在计算机中是无法精确的表示小数的，至少目前的计算机做不到这一点。Python 和 C 一样, 采用 <code>IEEE 754</code> 规范来存储浮点数。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/365406577" target="_blank" rel="noopener">python中取整数的四种方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的类(class)</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E4%B8%AD%E7%9A%84%E7%B1%BB-class/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E4%B8%AD%E7%9A%84%E7%B1%BB-class/</id>
    <published>2022-02-11T06:07:06.000Z</published>
    <updated>2022-02-11T14:16:18.654Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-模板"><a class="markdownIt-Anchor" href="#1-模板"></a> 1 模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Action</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    is_fail = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, sid, fid)</span>:</span></span><br><span class="line">        self.id = sid  <span class="comment"># 唯一标志信息</span></span><br><span class="line">        self.fid = fid  <span class="comment"># 父进程唯一标志信息</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_id</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.id</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.fid</span><br><span class="line"></span><br><span class="line">test_action = Action(sid=sid, fid=fid)</span><br><span class="line">print(test_action.get_id())</span><br><span class="line">print(Action.is_fail)</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://www.runoob.com/python3/python3-class.html" target="_blank" rel="noopener">菜鸟教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python多线程、多进程编程</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2022-02-11T06:05:20.000Z</published>
    <updated>2022-02-11T08:26:19.112Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在做恶意样本行为可视化，样本数量2w+，执行时间&gt;24h，所以需要多任务处理来提高效率。</p><blockquote><p>参考：<a href="https://blog.csdn.net/qq_40317897/article/details/89921083" target="_blank" rel="noopener">Python多进程和多线程（跑满CPU）</a></p></blockquote><p>任务可以理解为进程（process），如打开一个word就是启动一个word进程。在一个word进程之中不只是进行打字输入，还需要拼写检查、打印等子任务，我们可以把进程中的这些子任务称为线程（thread）。</p><p>同时执行多个任务通常各个任务之间并不是没有关联的，而是需要相互通信和协调，有时，任务1必须暂停等待任务2完成后才能继续执行，有时，任务3和任务4又不能同时执行，所以，多进程和多线程的程序的复杂度要远远高于我们前面写的单进程单线程的程序。</p><h1 id="2-多任务实现的3种方式"><a class="markdownIt-Anchor" href="#2-多任务实现的3种方式"></a> 2 多任务实现的3种方式</h1><h2 id="21-多进程模式"><a class="markdownIt-Anchor" href="#21-多进程模式"></a> 2.1 多进程模式</h2><p>启动多个进程，每个进程虽然只有一个线程，但多个进程可以一块执行多个任务。<font color="red">多个CPU核心可以一起做多个任务。</font></p><p>进程执行带有参数的任务：</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>args</td><td>以元祖的方式给任务传递参数, 顺序要正确</td></tr><tr><td>kwrags</td><td>以字典的方式给执行任务传递参数, key 跟参数名要一致</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data)</span>:</span></span><br><span class="line">    print(data, <span class="string">'进程PID'</span>, os.getpid())</span><br><span class="line">    print(data, <span class="string">'进程父进程编号'</span>, os.getppid())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_multiprocess</span><span class="params">()</span>:</span></span><br><span class="line">    data_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">    core = <span class="number">4</span>  <span class="comment"># 4进程并行</span></span><br><span class="line">    mod = math.ceil(len(data_list) / <span class="number">4</span>)  <span class="comment"># 向上取整</span></span><br><span class="line">    group_data = [data_list[i:i + mod] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data_list), mod)]</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> group_data:</span><br><span class="line">        <span class="comment"># process = multiprocessing.Process(target=func, args=(5,))</span></span><br><span class="line">        process = multiprocessing.Process(target=func, kwargs=&#123;<span class="string">'data'</span>: data&#125;)</span><br><span class="line">        process.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_multiprocess()</span><br></pre></td></tr></table></figure><h2 id="22-多线程模式"><a class="markdownIt-Anchor" href="#22-多线程模式"></a> 2.2 多线程模式</h2><p>启动一个进程，在一个进程内启动多个线程，这样，多个线程也可以一块执行多个任务。<font color="red">单个CPU核心可以同时做多个任务。</font></p><p><a href="https://www.runoob.com/python/python-multithreading.html" target="_blank" rel="noopener">菜鸟教程——多线程</a></p><h2 id="23-多进程多线程模式"><a class="markdownIt-Anchor" href="#23-多进程多线程模式"></a> 2.3 多进程+多线程模式</h2><p>启动多个进程，每个进程再启动多个线程，这样同时执行的任务就更多了，当然这种模型更复杂，实际很少采用。</p><h1 id="3-进程线程对比"><a class="markdownIt-Anchor" href="#3-进程线程对比"></a> 3 进程线程对比</h1><h2 id="31-关系对比"><a class="markdownIt-Anchor" href="#31-关系对比"></a> 3.1 关系对比</h2><ol><li>线程是依附在进程里边的, 没有进程就没有线程</li><li>一个进程默认提供一条线程, 进程可以创建多个线程</li></ol><h2 id="32-区别对比"><a class="markdownIt-Anchor" href="#32-区别对比"></a> 3.2 区别对比</h2><ol><li>进程创建的开销要比线程的开销要大</li><li>进程是操作系统资源分配的基本单位, 线程是cpu 调度的基本单位</li><li>线程不能独立执行, 必须依存进程</li></ol><h2 id="33-优缺点对比"><a class="markdownIt-Anchor" href="#33-优缺点对比"></a> 3.3 优缺点对比</h2><ol><li><p>进程优缺点:</p><p>优点：可以用多核</p><p>缺点：资源开销大</p></li><li><p>线程优缺点</p><p>优点: 资源开销小</p><p>缺点：不能使用多核</p></li></ol><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/340657122" target="_blank" rel="noopener">在Python中优雅地用多进程</a></li><li><a href="https://blog.csdn.net/qq_43475705/article/details/115518463" target="_blank" rel="noopener">python多进程多线程,多个程序同时运行</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm(IntelliJ系列)的Low Memory问题</title>
    <link href="https://dragonliu2018.github.io/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/"/>
    <id>https://dragonliu2018.github.io/2022/02/11/Pycharm-IntelliJ-%E7%9A%84Low-Memory%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-11T03:22:48.000Z</published>
    <updated>2022-02-11T03:39:29.635Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在跑恶意样本可视化的脚本，Pycharm出现：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Low Memory</span><br><span class="line">The IDE is running low on memory and this might affect performance. Please consider increasing available heap.</span><br></pre></td></tr></table></figure><p>原因是IDE内存不足（之前给pycharm设定了2048M，跑大项目会出现上述问题）。</p><p>主要copy于 <a href="https://www.cnblogs.com/baby123/p/15626312.html" target="_blank" rel="noopener">idea 的Low Memory问题</a></p><h1 id="2-解决方法"><a class="markdownIt-Anchor" href="#2-解决方法"></a> 2 解决方法</h1><p>下面的方法适用于IntelliJ系列产品，如Pycharm、idea等。</p><h2 id="21-直接配置"><a class="markdownIt-Anchor" href="#21-直接配置"></a> 2.1 直接配置</h2><img src="https://s2.loli.net/2022/02/11/ulXpqTxoQSt1mRB.png" width="800" height="200" alt="图片名称" align="center" id="68"><p>选择上图里的 Configure，修改堆大小：</p><img src="https://s2.loli.net/2022/02/11/luJ4ba1mBA3G2hE.png" width="300" height="200" alt="图片名称" align="center" id="69"><p>重启IDE生效。</p><h2 id="22-通过help配置修改"><a class="markdownIt-Anchor" href="#22-通过help配置修改"></a> 2.2 通过help配置修改</h2><p>菜单 Help -&gt; 选择 Edit Custom VM Options，会打开 pycharm64.exe.vmoptions文件，修改配置即可。</p><img src="https://s2.loli.net/2022/02/11/EgGpOs8Miow1VSe.png" width="600" height="400" alt="图片名称" align="center" id="70"><p>此时发现<code>Change Memory Settings</code>中已经发生了变化：</p><img src="https://s2.loli.net/2022/02/11/KPSpc5fVvUZR7ON.png" width="600" height="400" alt="图片名称" align="center" id="71"><p>最后重启IDE生效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python集合(set)操作</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/Python%E9%9B%86%E5%90%88-set-%E6%93%8D%E4%BD%9C/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/Python%E9%9B%86%E5%90%88-set-%E6%93%8D%E4%BD%9C/</id>
    <published>2022-02-10T09:22:22.000Z</published>
    <updated>2022-02-10T10:24:27.248Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>集合（set）是一个无序的不重复元素序列。</p><p>主要copy于<a href="https://www.runoob.com/python3/python3-set.html" target="_blank" rel="noopener">菜鸟教程</a></p><h1 id="2-使用"><a class="markdownIt-Anchor" href="#2-使用"></a> 2 使用</h1><h2 id="21-创建"><a class="markdownIt-Anchor" href="#21-创建"></a> 2.1 创建</h2><p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line">print(set1)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line">set2 = &#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;</span><br><span class="line">print(set2)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set3 = set(<span class="string">"apple"</span>)</span><br><span class="line">print(set3)  <span class="comment"># &#123;'l', 'p', 'e', 'a'&#125;</span></span><br><span class="line"></span><br><span class="line">set4 = set(&#123;<span class="string">'pear'</span>, <span class="string">'apple'</span>&#125;)</span><br><span class="line">print(set4)  <span class="comment"># &#123;'apple', 'pear'&#125;</span></span><br><span class="line"></span><br><span class="line">set5 = set((<span class="string">'pear'</span>, <span class="string">'apple'</span>))</span><br><span class="line">print(set5)  <span class="comment"># &#123;'pear', 'apple'&#125;</span></span><br></pre></td></tr></table></figure><p><font color="red">注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</font></p><h2 id="22-集合运算"><a class="markdownIt-Anchor" href="#22-集合运算"></a> 2.2 集合运算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 下面展示两个集合间的运算.</span></span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = set(<span class="string">'abracadabra'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = set(<span class="string">'alacazam'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  </span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 集合a中包含而集合b中不包含的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 集合a或b中包含的所有元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 集合a和b中都包含了的元素</span></span><br><span class="line">&#123;<span class="string">'a'</span>, <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 不同时包含于a和b的元素</span></span><br><span class="line">&#123;<span class="string">'r'</span>, <span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'z'</span>, <span class="string">'l'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="23-基本操作"><a class="markdownIt-Anchor" href="#23-基本操作"></a> 2.3 基本操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">test_set = &#123;<span class="number">1</span>, <span class="number">2</span>&#125;</span><br><span class="line"><span class="comment"># 添加元素——add(x)</span></span><br><span class="line"><span class="comment">##将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。</span></span><br><span class="line">test_set.add(<span class="number">2</span>)  <span class="comment"># &#123;1, 2&#125;</span></span><br><span class="line">test_set.add(<span class="number">3</span>)  <span class="comment"># &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加元素——update(x)</span></span><br><span class="line"><span class="comment">##参数是列表，元组，字典等，int会报错</span></span><br><span class="line"><span class="comment">##x 可以有多个，用逗号分开。</span></span><br><span class="line">test_set.update(<span class="number">4</span>)  <span class="comment"># TypeError: 'int' object is not iterable</span></span><br><span class="line">test_set.update(&#123;<span class="number">4</span>, <span class="number">5</span>&#125;)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">test_set.update([<span class="number">4</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">6</span>])  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.update((<span class="number">6</span>, <span class="number">7</span>))  <span class="comment"># &#123;1, 2, 3, 4, 5, 6, 7&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——remove(x)</span></span><br><span class="line"><span class="comment">##将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span></span><br><span class="line">test_set.remove(<span class="number">8</span>)  <span class="comment"># KeyError: 8</span></span><br><span class="line">test_set.remove(<span class="number">7</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——discard(x)</span></span><br><span class="line"><span class="comment">##移除集合中的元素，且如果元素不存在，不会发生错误</span></span><br><span class="line">test_set.discard(<span class="number">7</span>)  <span class="comment"># 不报错 &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line">test_set.discard(<span class="number">6</span>)  <span class="comment"># &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除元素——pop()</span></span><br><span class="line"><span class="comment">##随机删除集合中的一个元素</span></span><br><span class="line"><span class="comment">##对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。</span></span><br><span class="line">test_set.pop()  <span class="comment"># &#123;2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算元素个数——len</span></span><br><span class="line">len(test_set)  <span class="comment"># 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断元素是否存在于集合中——in</span></span><br><span class="line">print(<span class="number">2</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> test_set)  <span class="comment"># False</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> test_set)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空集合——clear</span></span><br><span class="line">test_set.clear()</span><br><span class="line">print(test_set)  <span class="comment"># set()</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Windows下安装与使用neo4j</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/Windows%E4%B8%8B%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8neo4j/</id>
    <published>2022-02-10T03:17:06.000Z</published>
    <updated>2022-02-11T14:06:51.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引言"><a class="markdownIt-Anchor" href="#1-引言"></a> 1 引言</h1><p>最近在实现恶意样本行为可视化，使用 <a href="dragonliu.tk/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/">python模块graphviz使用教程</a> 可以达到既定要求；但是图数据库neo4j理论上也是个不错的选择，所以整理下。</p><p>思路：安装Neo4j数据库，python语言使用py2neo库进行使用。</p><h1 id="2-安装neo4j"><a class="markdownIt-Anchor" href="#2-安装neo4j"></a> 2 安装Neo4j</h1><p>主要copy于 <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h2 id="21-安装jdk"><a class="markdownIt-Anchor" href="#21-安装jdk"></a> 2.1 安装JDK</h2><p>Neo4j是基于Java的图形<a href="https://cloud.tencent.com/solution/database?from=10680" target="_blank" rel="noopener">数据库</a>，运行Neo4j需要启动JVM进程，因此必须安装JAVA SE的JDK。从Oracle官方网站下载 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">Java SE JDK</a>，当前的版本是JDK8。<font color="red">java版本的高低决定了Neo4j的版本</font></p><h2 id="22-安装neo4j"><a class="markdownIt-Anchor" href="#22-安装neo4j"></a> 2.2 安装Neo4j</h2><p>官网下载最新版本<a href="https://neo4j.com/download/other-releases/" target="_blank" rel="noopener">Neo4j</a></p><p>Neo4j应用程序有如下主要的目录结构：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bin目录：用于存储Neo4j的可执行程序；</span><br><span class="line">conf目录：用于控制Neo4j启动的配置文件；</span><br><span class="line">data目录：用于存储核心数据库文件；</span><br><span class="line">plugins目录：用于存储Neo4j的插件；</span><br></pre></td></tr></table></figure><h2 id="23-配置环境变量"><a class="markdownIt-Anchor" href="#23-配置环境变量"></a> 2.3 配置环境变量</h2><p>创建主目录环境变量NEO4J_HOME，并把主目录设置为变量值。</p><img src="https://s2.loli.net/2022/02/11/lkopux9h8Zn7PeE.png" width="600" height="200" alt="图片名称" align="center" id="72"><h2 id="24-启动neo4j"><a class="markdownIt-Anchor" href="#24-启动neo4j"></a> 2.4 启动neo4j</h2><h3 id="241-通过控制台启动neo4j程序"><a class="markdownIt-Anchor" href="#241-通过控制台启动neo4j程序"></a> 2.4.1 通过控制台启动Neo4j程序</h3><p>打开cmd，切换到Neo4j主目录下的<code>bin</code>目录，运行下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neo4j.bat console</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/11/3d7LJMoKpr2WxNC.png" width="800" height="200" alt="图片名称" align="center" id="73"><img src="https://s2.loli.net/2022/02/11/nFHPDW9Tfxz6LXY.png" width="600" height="300" alt="图片名称" align="center" id="74"><p>用户名和密码默认为<code>neo4j</code>，首次登陆需要修改密码(Neo4j)</p><p><font color="red">java与neo4j版本不对应的报错：</font></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">警告: ERROR! Neo4j cannot be started using java version <span class="number">1.8</span><span class="number">.0</span>_301</span><br><span class="line">警告: * Please use Oracle(R) Java(TM) <span class="number">11</span>, OpenJDK(TM) <span class="number">11</span> to run Neo4j Server.</span><br><span class="line">* Please see https://neo4j.com/docs/ <span class="keyword">for</span> Neo4j installation instructions.</span><br><span class="line">Invoke-Neo4j : This instance of Java <span class="keyword">is</span> <span class="keyword">not</span> supported</span><br><span class="line">所在位置 D:\developer\neo4j\neo4j-community<span class="number">-4.4</span><span class="number">.3</span>\bin\neo4j.ps1:<span class="number">21</span> 字符: <span class="number">7</span></span><br><span class="line">+ Exit (Invoke-Neo4j -Verbose:$Arguments.Verbose -CommandArgs $Argument ...</span><br><span class="line">+       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException</span><br><span class="line">    + FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-Neo4j</span><br></pre></td></tr></table></figure><p>当时我测试的版本(JDK8+Neo4j4.4.4)出现上面的报错，该换JDK8+Neo4j3.5.30后成功运行。</p><h3 id="242-把neo4j安装为服务windows-services"><a class="markdownIt-Anchor" href="#242-把neo4j安装为服务windows-services"></a> 2.4.2 把Neo4j安装为服务（Windows Services）</h3><p>请查阅  <a href="https://cloud.tencent.com/developer/article/1387732" target="_blank" rel="noopener">图数据库neo4j的安装与基本使用(一)</a></p><h1 id="3-python使用"><a class="markdownIt-Anchor" href="#3-python使用"></a> 3 python使用</h1><p>python通过调用<code>py2neo</code> 库实现对数据库的操作。</p><ul><li><p><a href="https://py2neo.org/v4/data.html#node-and-relationship-objects" target="_blank" rel="noopener">py2neo官网</a></p></li><li><p><a href="https://www.jianshu.com/p/a2497a33390f" target="_blank" rel="noopener">py2neo——Neo4j&amp;python的配合使用</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1693445" target="_blank" rel="noopener">用Python中的py2neo库调用neo4j，搭建简单关联图谱</a></p></li></ul><h2 id="31-连接数据库"><a class="markdownIt-Anchor" href="#31-连接数据库"></a> 3.1 连接数据库</h2><p>安装py2neo库：<code>pip install py2neo</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(</span><br><span class="line">    <span class="string">"http://localhost:7474"</span>,</span><br><span class="line">    username=<span class="string">"neo4j"</span>,</span><br><span class="line">    password=<span class="string">"Neo4j"</span>  <span class="comment">#修改后的密码</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>测试时出现报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ValueError: The following settings are not supported: &#123;<span class="string">'username'</span>: <span class="string">'neo4j'</span>&#125;</span><br></pre></td></tr></table></figure><p>因为py2neo版本问题，需要做出以下修改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br></pre></td></tr></table></figure><p>详见 <a href="https://blog.csdn.net/u010785550/article/details/116856031" target="_blank" rel="noopener">关于使用Py2neo连接Neo4j图数据库出现“ValueError: The following settings are not supported”报错的解决方案</a></p><h2 id="32-基本操作"><a class="markdownIt-Anchor" href="#32-基本操作"></a> 3.2 基本操作</h2><p>参考：<a href="https://blog.csdn.net/michaelguangg/article/details/100704303" target="_blank" rel="noopener">py2neo在已有节点上批量创建关系</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> py2neo <span class="keyword">import</span> Graph, Node, Relationship, Subgraph</span><br><span class="line"></span><br><span class="line">test_graph = Graph(<span class="string">"http://localhost:7474"</span>, auth=(<span class="string">"neo4j"</span>, <span class="string">"Neo4j"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数据库中以往的图，确保在一个空白的环境中进行操作</span></span><br><span class="line">test_graph.delete_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建顶点</span></span><br><span class="line">node_list = []</span><br><span class="line">node_list.append(Node(<span class="string">"Teacher"</span>, name=<span class="string">"Alice"</span>))  <span class="comment"># label(type) name(显示值)</span></span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Bob"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Dragon"</span>))</span><br><span class="line">node_list.append(Node(<span class="string">"Student"</span>, name=<span class="string">"Pig"</span>))</span><br><span class="line"><span class="comment">##subgraph加快导入速度</span></span><br><span class="line">nodes = Subgraph(node_list)</span><br><span class="line">test_graph.create(nodes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建边</span></span><br><span class="line">edge_list = []</span><br><span class="line"><span class="comment">##找到对应节点</span></span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Bob"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">node1 = test_graph.nodes.match(name=<span class="string">"Alice"</span>).first()</span><br><span class="line">node2 = test_graph.nodes.match(name=<span class="string">"Dragon"</span>).first()</span><br><span class="line">edge_list.append(Relationship(node1, <span class="string">"teach"</span>, node2))</span><br><span class="line">edges = Subgraph(relationships=edge_list)</span><br><span class="line">test_graph.create(edges)</span><br></pre></td></tr></table></figure><p>效果图如下：</p><img src="https://s2.loli.net/2022/02/11/4Li9RKwmuN7t6kV.png" width="700" height="400" alt="图片名称" align="center" id="75"><h1 id="4-拓展spade"><a class="markdownIt-Anchor" href="#4-拓展spade"></a> 4 拓展——SPADE</h1><p>当时参加A-ST竞赛时使用过，本次测试没进行。</p><p><a href="https://github.com/ashish-gehani/SPADE" target="_blank" rel="noopener">Github-Spade</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>python list分组</title>
    <link href="https://dragonliu2018.github.io/2022/02/10/python-list%E5%88%86%E7%BB%84/"/>
    <id>https://dragonliu2018.github.io/2022/02/10/python-list%E5%88%86%E7%BB%84/</id>
    <published>2022-02-10T02:20:19.000Z</published>
    <updated>2022-02-10T02:54:04.495Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在整python多线程，需要对文件列表进行分组，下面整理下有关list分组的内容。</p><h1 id="2-分块"><a class="markdownIt-Anchor" href="#2-分块"></a> 2 分块</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">3</span></span><br><span class="line">data = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line">group_data = [data[i:i + num] <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(data), num)]</span><br><span class="line">print(group_data)  <span class="comment"># [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]</span></span><br></pre></td></tr></table></figure><h1 id="3-groupby分组"><a class="markdownIt-Anchor" href="#3-groupby分组"></a> 3 groupby分组</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> groupby</span><br><span class="line"></span><br><span class="line">user_list = [</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">1</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">3</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">20</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">4</span>, <span class="string">"sex"</span>: <span class="string">"女"</span>, <span class="string">"age"</span>: <span class="number">31</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"uid"</span>: <span class="number">2</span>, <span class="string">"sex"</span>: <span class="string">"男"</span>, <span class="string">"age"</span>: <span class="number">10</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 多字段排序</span></span><br><span class="line">user_sort = sorted(user_list, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="comment"># 多字段分组</span></span><br><span class="line">user_group = groupby(user_sort, key=<span class="keyword">lambda</span> x: (x[<span class="string">"sex"</span>], x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="keyword">for</span> key, group <span class="keyword">in</span> user_group:</span><br><span class="line">    print(key, list(group))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">('女', 20) [&#123;'uid': 4, 'sex': '女', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">('女', 31) [&#123;'uid': 4, 'sex': '女', 'age': 31&#125;]</span></span><br><span class="line"><span class="string">('男', 10) [&#123;'uid': 1, 'sex': '男', 'age': 10&#125;, &#123;'uid': 2, 'sex': '男', 'age': 10&#125;]</span></span><br><span class="line"><span class="string">('男', 20) [&#123;'uid': 3, 'sex': '男', 'age': 20&#125;]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><p><font color="red">注意分组之前应先使用分组字段排好序。</font></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_21570029/article/details/84062979" target="_blank" rel="noopener">python list按规定的范围分组</a></li><li><a href="https://blog.csdn.net/xiaoc100200/article/details/111402566" target="_blank" rel="noopener">Python list列表groupby分组用法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>判断python dict或list 中是否含有某个元素或key</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/%E5%88%A4%E6%96%ADpython-dict%E6%88%96list-%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/%E5%88%A4%E6%96%ADpython-dict%E6%88%96list-%E4%B8%AD%E6%98%AF%E5%90%A6%E5%90%AB%E6%9C%89%E6%9F%90%E4%B8%AA%E5%85%83%E7%B4%A0%E6%88%96key/</id>
    <published>2022-02-09T14:49:35.000Z</published>
    <updated>2022-02-09T15:01:12.322Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-自带函数has_key"><a class="markdownIt-Anchor" href="#1-自带函数has_key"></a> 1 自带函数has_key()</h1><p>在python的字典的属性方法里面有一个<code>has_key()</code>方法，这个方法使用起来非常简单。</p><p>Python 3.x不再支持 <code>has_key()</code> 函数，而被<code>__contains__()</code>所替代。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line"><span class="comment"># print(d.has_key('name'))</span></span><br><span class="line">print(d.__contains__(<span class="string">'name'</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h1 id="2-in-方法"><a class="markdownIt-Anchor" href="#2-in-方法"></a> 2 in 方法</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字典是否含有key</span></span><br><span class="line">d = &#123;<span class="string">'name'</span>: &#123;&#125;, <span class="string">'age'</span>: &#123;&#125;, <span class="string">'sex'</span>: &#123;&#125;&#125;</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> d.keys())  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> d.keys())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表是否含有value</span></span><br><span class="line">l = [<span class="string">'name'</span>, <span class="string">'age'</span>, <span class="string">'sex'</span>]</span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">in</span> l)  <span class="comment"># True</span></span><br><span class="line">print(<span class="string">"name"</span> <span class="keyword">not</span> <span class="keyword">in</span> l)  <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/linjpg/article/details/82190565" target="_blank" rel="noopener">判断python字典或者列表中是否包含某个元素或者key</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python去除字符串首尾的指定字符</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/</id>
    <published>2022-02-09T14:43:17.000Z</published>
    <updated>2022-02-10T05:52:25.304Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1 前言</h1><p>最近在用到防止字符串转义函数——<code>repr</code>，但是他生成的字符串首尾会自动加上单引号，详见<a href="dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/">博客</a>，可以使用<code>strip</code>函数进行去除。</p><h1 id="2-实践"><a class="markdownIt-Anchor" href="#2-实践"></a> 2 实践</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># strip不传参数默认去掉空格</span></span><br><span class="line">test_str = <span class="string">'  string  '</span></span><br><span class="line"><span class="comment"># 去掉首尾空格</span></span><br><span class="line">print(test_str.strip())  <span class="comment"># string</span></span><br><span class="line"><span class="comment"># 去掉首空格</span></span><br><span class="line">print(test_str.lstrip())  <span class="comment"># string  </span></span><br><span class="line"><span class="comment"># 去掉尾空格</span></span><br><span class="line">print(test_str.rstrip())  <span class="comment">#   string</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定字符</span></span><br><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python处理表格</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E5%A4%84%E7%90%86%E8%A1%A8%E6%A0%BC/</id>
    <published>2022-02-09T10:45:09.000Z</published>
    <updated>2022-02-09T13:39:03.805Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>今天实现恶意样本标签提取，用到了表格处理，下面进行整理。</p><p>python操作excel主要用到<code>xlrd</code>和<code>xlwt</code>这两个库，即<code>xlrd</code>是读excel，<code>xlwt</code>是写excel的库。这两个库使用pip进行安装。</p><h1 id="2-python写excelxlwt"><a class="markdownIt-Anchor" href="#2-python写excelxlwt"></a> 2 Python写excel——xlwt</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_excel</span><span class="params">(output_file)</span>:</span></span><br><span class="line">    fields = [<span class="string">'姓名'</span>, <span class="string">'年龄'</span>]  <span class="comment"># 设置自己需要的Excel表头</span></span><br><span class="line">    book = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)  <span class="comment"># 获取excel对象</span></span><br><span class="line">    sheet = book.add_sheet(<span class="string">'人员信息表'</span>)  <span class="comment"># 设置excel的sheet名称</span></span><br><span class="line">    <span class="keyword">for</span> col, field <span class="keyword">in</span> enumerate(fields):  <span class="comment"># 写入excel表头</span></span><br><span class="line">        sheet.write(<span class="number">0</span>, col, field)</span><br><span class="line">    info_list = [[<span class="string">'Dragon'</span>, <span class="number">18</span>], [<span class="string">'Pig'</span>, <span class="number">21</span>], [<span class="string">'Cat'</span>, <span class="number">22</span>]]</span><br><span class="line">    row = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> name, age <span class="keyword">in</span> info_list:  <span class="comment"># 根据数据写入excel，col-单元格行标，field-单元格列标</span></span><br><span class="line">        sheet.write(row, <span class="number">0</span>, name)</span><br><span class="line">        sheet.write(row, <span class="number">1</span>, age)</span><br><span class="line">        row += <span class="number">1</span></span><br><span class="line">    book.save(output_file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    output_file = <span class="string">"output.xls"</span></span><br><span class="line">    export_excel(output_file)</span><br></pre></td></tr></table></figure><p>表格信息如下：</p><img src="https://s2.loli.net/2022/02/09/B8mGXdCqurtDVJ6.png" width="600" height="300" alt="图片名称" align="center" id="64"><h1 id="3-python读excelxlrd"><a class="markdownIt-Anchor" href="#3-python读excelxlrd"></a> 3 Python读excel——xlrd</h1><p>整体思路为，打开文件，选定表格，读取行列内容，读取表格内数据</p><p>详细代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入表格</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_excel</span><span class="params">(input_file)</span>:</span></span><br><span class="line">    <span class="comment"># 打开文件</span></span><br><span class="line">    wb = xlrd.open_workbook(filename=input_file)</span><br><span class="line">    <span class="comment"># 获取所有表格名字</span></span><br><span class="line">    print(wb.sheet_names())  <span class="comment"># ['人员信息表']</span></span><br><span class="line">    <span class="comment"># 通过索引获取表格</span></span><br><span class="line">    sheet1 = wb.sheet_by_index(<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 通过名字获取表格</span></span><br><span class="line">    sheet2 = wb.sheet_by_name(<span class="string">'人员信息表'</span>)</span><br><span class="line">    print(sheet1, sheet2)  <span class="comment"># Sheet  0:&lt;人员信息表&gt; Sheet  0:&lt;人员信息表&gt;</span></span><br><span class="line"></span><br><span class="line">    print(sheet1.name, sheet1.nrows, sheet1.ncols)  <span class="comment"># 人员信息表 4 2</span></span><br><span class="line">    <span class="comment"># 获取第1行内容（编号从0开始）</span></span><br><span class="line">    rows = sheet1.row_values(<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 获取第1列内容（编号从0开始）</span></span><br><span class="line">    cols = sheet1.col_values(<span class="number">1</span>)</span><br><span class="line">    print(rows)  <span class="comment"># ['Dragon', 18.0]</span></span><br><span class="line">    print(cols)  <span class="comment"># ['年龄', 18.0, 21.0, 22.0]</span></span><br><span class="line">    <span class="comment"># 获取表格里的内容，三种方式</span></span><br><span class="line">    print(sheet1.cell(<span class="number">1</span>, <span class="number">0</span>).value)  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.cell_value(<span class="number">1</span>, <span class="number">0</span>))  <span class="comment"># Dragon</span></span><br><span class="line">    print(sheet1.row(<span class="number">1</span>)[<span class="number">0</span>].value)  <span class="comment"># Dragon</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    input_file = <span class="string">"output.xls"</span></span><br><span class="line">    read_excel(input_file)</span><br></pre></td></tr></table></figure><h1 id="4-xls和xlsx的异同"><a class="markdownIt-Anchor" href="#4-xls和xlsx的异同"></a> 4 xls和xlsx的异同</h1><ul><li><p>文件核心结构不同：</p><ul><li>xls核心结构是复合文档类型的；</li><li>xlsx 的核心结构是 XML 类型的结构，并且基于XML进行压缩（占用空间更小），所以也可以看做zip文件，将一个“.xlsx”文件的后缀改为ZIP后，用解压软件解压，可以看到里面有一个xml文件和文件的主要内容。</li></ul></li><li><p>版本不同：</p><ul><li>xls是excel2003及以前版本所生成的文件格式</li><li>xlsx是excel2007及以后版本所生成的文件格式</li><li>（excel 2007之后版本可以打开上述两种格式，但是excel2013只能打开xls格式）</li></ul></li></ul><p>进一步的详细解释参见：<a href="https://jingyan.baidu.com/article/1974b289c9aaefb5b0f7746b.html" target="_blank" rel="noopener">excel后缀.xls和.xlsx有什么区别</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.php.cn/python-tutorials-451228.html" target="_blank" rel="noopener">python如何处理表格？</a></li><li><a href="https://blog.csdn.net/weixin_44288604/article/details/120731317" target="_blank" rel="noopener">python实现——处理Excel表格（超详细）</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python统计词频</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E7%BB%9F%E8%AE%A1%E8%AF%8D%E9%A2%91/</id>
    <published>2022-02-09T10:44:46.000Z</published>
    <updated>2022-02-09T14:28:23.191Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本的标签信息提取、投票表决方式确定样本的最终最终标签信息，恰好用到了词频统计，或者说查找数组中出现次数最多的元素。</p><h1 id="2-词频统计"><a class="markdownIt-Anchor" href="#2-词频统计"></a> 2 词频统计</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">txt = <span class="string">'''in a job interview or in a situation'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分解并提取英文文章的单词</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> <span class="string">',.\n '</span>:</span><br><span class="line">    txt = txt.replace(s, <span class="string">' '</span>)</span><br><span class="line">txt = txt.lower()  <span class="comment"># 将字母变成小写，排除原文大小写差异对词频统计的干扰</span></span><br><span class="line">word_list = txt.split()</span><br><span class="line">print(word_list)  <span class="comment"># ['in', 'a', 'job', 'interview', 'or', 'in', 'a', 'situation']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个单词进行计数</span></span><br><span class="line">count = dict()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> word_list:</span><br><span class="line">    count[i] = count.get(i, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">print(count)  <span class="comment"># &#123;'in': 2, 'a': 2, 'job': 1, 'interview': 1, 'or': 1, 'situation': 1&#125;</span></span><br><span class="line"><span class="comment"># 对单词的统计值从高到低进行排序</span></span><br><span class="line">sorted_word = sorted(count.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">print(sorted_word)  <span class="comment"># [('in', 2), ('a', 2), ('job', 1), ('interview', 1), ('or', 1), ('situation', 1)]</span></span><br></pre></td></tr></table></figure><h1 id="2-查找数组list中出现次数最多的元素"><a class="markdownIt-Anchor" href="#2-查找数组list中出现次数最多的元素"></a> 2 查找数组(list)中出现次数最多的元素</h1><h2 id="21-npargmaxnpbincount"><a class="markdownIt-Anchor" href="#21-npargmaxnpbincount"></a> 2.1 np.argmax(np.bincount())</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">print(np.bincount(array))  <span class="comment"># [1 1 2 1 3 1 1]</span></span><br><span class="line">print(np.argmax(np.bincount(array)))  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p><code>np.argmax</code>：就是返回数组中最大值对应的下标，<br><code>np.bincount</code>：首先找到数组最大值max，然后返回0～max的各个数字出现的次数，<font color="red">只能处理不含负数的集合</font></p><h2 id="22-countermost_common"><a class="markdownIt-Anchor" href="#22-countermost_common"></a> 2.2 Counter().most_common</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line">array = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="string">'aswd'</span>]</span><br><span class="line">print(Counter(array))  <span class="comment"># Counter(&#123;4: 3, 2: 2, 0: 1, 1: 1, 3: 1, 5: 1, 6: 1, 'aswd': 1&#125;)</span></span><br><span class="line">print(Counter(array).most_common(<span class="number">1</span>)[<span class="number">0</span>][<span class="number">0</span>])  <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><p>Counter用来对数组中元素出现次数进行统计，然后通过most_common函数找到出现次数最多的元素。这种方法对于数组就没有过多限制，甚至是各种类型元素混合的数组也可以。<font color="red">数组只能是array，不能是ndarray。</font></p><h2 id="23-自己实现"><a class="markdownIt-Anchor" href="#23-自己实现"></a> 2.3 自己实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">appear_times = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> label <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]:</span><br><span class="line">    <span class="keyword">if</span> label <span class="keyword">in</span> appear_times:</span><br><span class="line">        appear_times[label] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        appear_times[label] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">most_common = max(appear_times, key=<span class="keyword">lambda</span> x: appear_times[x])</span><br><span class="line">print(appear_times)  <span class="comment"># &#123;1: 2, 2: 1, 3: 1, 4: 1, 5: 3&#125;</span></span><br><span class="line">print(most_common)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure><p>用max求最大值默认情况返回value值（出现次数）最大的key值（元素），而不是value值。</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_43527713/article/details/114482509?spm=1001.2101.3001.6650.3&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-3.pc_relevant_default&amp;utm_relevant_index=6" target="_blank" rel="noopener">python之统计文本中出现最多的单词</a></li><li><a href="https://blog.csdn.net/aofavx/article/details/103097217" target="_blank" rel="noopener">python统计数组中出现次数最多的元素</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python解析xml文件</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</id>
    <published>2022-02-09T10:44:20.000Z</published>
    <updated>2022-02-09T11:17:05.862Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做恶意样本行为可视化，样本的行为是xml文件形式给出，需要使用python对其解析。本次实验使用了dom进行的解析。</p><blockquote><p>XML 指可扩展标记语言（e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage），标准通用标记语言的子集，是一种用于标记电子文件使其具有结构性的标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 是一套定义语义标记的规则，这些标记将文档分成许多部件并对这些部件加以标识。</p><p>它也是元标记语言，即定义了用于定义其他与特定领域有关的、语义的、结构化的标记语言的句法语言。</p><p>常见的 XML 编程接口有 DOM 和 SAX，这两种接口处理 XML 文件的方式不同，当然使用场合也不同。</p><p>Python 有三种方法解析 XML，SAX，DOM，以及 ElementTree</p></blockquote><p>主要参考：<a href="https://www.runoob.com/python3/python3-xml-processing.html" target="_blank" rel="noopener">菜鸟教程——Python3 XML 解析</a></p><h1 id="2-sax"><a class="markdownIt-Anchor" href="#2-sax"></a> 2 SAX</h1><p>待补充</p><h1 id="3-dom"><a class="markdownIt-Anchor" href="#3-dom"></a> 3 DOM</h1><p>文件对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展置标语言的标准编程接口。</p><p>一个 DOM 的解析器在解析一个 XML 文档时，一次性读取整个文档，把文档中所有元素保存在内存中的一个树结构里，之后你可以利用DOM 提供的不同的函数来读取或修改文档的内容和结构，也可以把修改过的内容写入xml文件。</p><p>xml文件 <code>movies.xml</code> 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">shelf</span>=<span class="string">"New Arrivals"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Enemy Behind"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>War, Thriller<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>PG<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>10<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>Talk about a US-Japan war<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">movie</span> <span class="attr">title</span>=<span class="string">"Transformers"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">type</span>&gt;</span>Anime, Science Fiction<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">format</span>&gt;</span>DVD<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">year</span>&gt;</span>1989<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">rating</span>&gt;</span>R<span class="tag">&lt;/<span class="name">rating</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">stars</span>&gt;</span>8<span class="tag">&lt;/<span class="name">stars</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">description</span>&gt;</span>A schientific fiction<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">movie</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Python 中用 <code>xml.dom.minidom</code> 来解析 xml 文件，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用minidom解析器打开 XML 文档</span></span><br><span class="line">DOMTree = xml.dom.minidom.parse(<span class="string">"movies.xml"</span>)</span><br><span class="line">collection = DOMTree.documentElement</span><br><span class="line"><span class="keyword">if</span> collection.hasAttribute(<span class="string">"shelf"</span>):</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Root element : %s"</span> % collection.getAttribute(<span class="string">"shelf"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在集合中获取所有电影</span></span><br><span class="line">movies = collection.getElementsByTagName(<span class="string">"movie"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每部电影的详细信息</span></span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"*****Movie*****"</span>)</span><br><span class="line">   <span class="keyword">if</span> movie.hasAttribute(<span class="string">"title"</span>):</span><br><span class="line">      <span class="keyword">print</span> (<span class="string">"Title: %s"</span> % movie.getAttribute(<span class="string">"title"</span>))</span><br><span class="line"></span><br><span class="line">   type = movie.getElementsByTagName(<span class="string">'type'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Type: %s"</span> % type.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   format = movie.getElementsByTagName(<span class="string">'format'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Format: %s"</span> % format.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   rating = movie.getElementsByTagName(<span class="string">'rating'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Rating: %s"</span> % rating.childNodes[<span class="number">0</span>].data)</span><br><span class="line">   description = movie.getElementsByTagName(<span class="string">'description'</span>)[<span class="number">0</span>]</span><br><span class="line">   <span class="keyword">print</span> (<span class="string">"Description: %s"</span> % description.childNodes[<span class="number">0</span>].data)</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Root element : New Arrivals</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Enemy Behind</span><br><span class="line">Type: War, Thriller</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: PG</span><br><span class="line">Description: Talk about a US-Japan war</span><br><span class="line">*****Movie*****</span><br><span class="line">Title: Transformers</span><br><span class="line">Type: Anime, Science Fiction</span><br><span class="line">Format: DVD</span><br><span class="line">Rating: R</span><br><span class="line">Description: A schientific fiction</span><br><span class="line">*****Movie*****</span><br></pre></td></tr></table></figure><p>完整的 DOM API 文档请查阅<a href="http://docs.python.org/library/xml.dom.html" target="_blank" rel="noopener">Python DOM APIs</a>。</p><h1 id="4-elementtree"><a class="markdownIt-Anchor" href="#4-elementtree"></a> 4 ElementTree</h1><p>待补充</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python测量程序运行时间</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E6%B5%8B%E9%87%8F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4/</id>
    <published>2022-02-09T08:48:03.000Z</published>
    <updated>2022-02-09T09:33:39.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近做到恶意样本可视化，跑脚本需要测量程序运行时间，下面是几种测量方法：</p><h1 id="2-datetimedatetimenow"><a class="markdownIt-Anchor" href="#2-datetimedatetimenow"></a> 2 datetime.datetime.now()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">starttime = datetime.datetime.now()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">endtime = datetime.datetime.now()</span><br><span class="line">print((endtime - starttime).seconds)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>datetime.datetime.now()</code>获取的是当前日期，在程序执行结束之后，这个方式获得的时间值为<strong>程序执行的时间</strong>。</p><h1 id="3-timetime"><a class="markdownIt-Anchor" href="#3-timetime"></a> 3 time.time()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start = time.time()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">end = time.time()</span><br><span class="line">print(end - start)  <span class="comment"># 秒</span></span><br></pre></td></tr></table></figure><p><code>time.time()</code>获取自纪元以来的当前时间（以秒为单位）。如果系统时钟提供它们，则可能存在秒的分数。所以这个地方返回的是一个浮点型类型。这里获取的也是<strong>程序的执行时间</strong>。</p><h1 id="4-timeclock-或-timeperf_counter"><a class="markdownIt-Anchor" href="#4-timeclock-或-timeperf_counter"></a> 4 time.clock() 或 time.perf_counter()</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># start = time.clock()</span></span><br><span class="line">start = time.perf_counter()</span><br><span class="line"><span class="comment">#long running</span></span><br><span class="line"><span class="comment">#do something other</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="number">1e8</span>:</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"><span class="comment"># end = time.clock()</span></span><br><span class="line">end = time.perf_counter()</span><br><span class="line">print(end - start)  <span class="comment">#秒</span></span><br></pre></td></tr></table></figure><p><code>time.clock()</code>返回程序开始或第一次被调用<code>clock()</code>以来的CPU时间。 这具有与系统记录一样多的精度。返回的也是一个浮点类型。这里获得的是<strong>CPU的执行时间</strong>。</p><p>python3.8+ 不支持 clock 了，替换成 <code>time.perf_counter()</code> 就可以了</p><p><font color="red"><strong>注意</strong></font>：程序执行时间=cpu时间 + io时间 + 休眠或者等待时间</p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/wangshuang1631/article/details/54286551" target="_blank" rel="noopener">几种Python执行时间的计算方法</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python遍历文件夹下的所有文件</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6/</id>
    <published>2022-02-09T08:47:44.000Z</published>
    <updated>2022-02-09T09:19:43.597Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在实现恶意脚本的可视化，需要实现提取文件夹下的所有文件名，实现脚本自动化。</p><h1 id="2-文件夹下只有文件"><a class="markdownIt-Anchor" href="#2-文件夹下只有文件"></a> 2 文件夹下只有文件</h1><p>当目标文件夹中只有文件时，使用os模块的<code>listdir()</code>方法即可：该方法可以返回目标路径下的文件和文件夹的名字列表，参数就是目标路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt']</span></span><br></pre></td></tr></table></figure><h1 id="3-文件夹下有文件和文件夹"><a class="markdownIt-Anchor" href="#3-文件夹下有文件和文件夹"></a> 3 文件夹下有文件和文件夹</h1><p>当目标文件中既有文件又有文件夹时，我们使用<code>listdir()</code>方法就只能获得第一层子文件或文件夹了，而子文件夹中的内容便获取不到了。</p><p>这时候我们需要用到<code>os.walk()</code>方法：传入目标路径即可。该方法可以递归的找出目标路径下的所有文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">file_names = os.listdir(<span class="string">r'test'</span>)</span><br><span class="line">print(file_names)  <span class="comment"># ['1.txt', '2.txt', '3.txt', 'sub-dir']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(filename)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">1.txt</span></span><br><span class="line"><span class="string">2.txt</span></span><br><span class="line"><span class="string">3.txt</span></span><br><span class="line"><span class="string">4.txt</span></span><br><span class="line"><span class="string">5.txt</span></span><br><span class="line"><span class="string">6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><hr><p><code>os.walk()</code>方法可以生成三元组，也就是我们代码中的<code>filepath</code>，<code>dirnames</code>，<code>filenames</code>。我们将他们分别打印出来可以看到：其中<code>filepath</code>就是目标路径下所有文件的路径，<code>dirnames</code>是我们目标路径的所有目录名称，<code>filenames</code>则是各个路径下的文件名称列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filepath)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test</span></span><br><span class="line"><span class="string">test\sub-dir</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(dirnames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['sub-dir']</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    print(filenames)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['1.txt', '2.txt', '3.txt']</span></span><br><span class="line"><span class="string">['4.txt', '5.txt', '6.txt']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="4-拓展获得目标路径下的所有文件的绝对路径"><a class="markdownIt-Anchor" href="#4-拓展获得目标路径下的所有文件的绝对路径"></a> 4 拓展—获得目标路径下的所有文件的绝对路径</h1><p>遍历目标路径下的各个文件，用<code>os.path.join()</code>方法将文件路径和文件名拼接在一起，就是各个文件的绝对路径了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> filepath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'test'</span>):</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        print(os.path.join(filepath, filename))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">test\1.txt</span></span><br><span class="line"><span class="string">test\2.txt</span></span><br><span class="line"><span class="string">test\3.txt</span></span><br><span class="line"><span class="string">test\sub-dir\4.txt</span></span><br><span class="line"><span class="string">test\sub-dir\5.txt</span></span><br><span class="line"><span class="string">test\sub-dir\6.txt</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://blog.csdn.net/qq_39721240/article/details/90704223" target="_blank" rel="noopener">python遍历文件夹下的所有文件</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python中防止字符串转义</title>
    <link href="https://dragonliu2018.github.io/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/"/>
    <id>https://dragonliu2018.github.io/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/</id>
    <published>2022-02-09T07:31:55.000Z</published>
    <updated>2022-02-10T05:50:31.471Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-问题引入"><a class="markdownIt-Anchor" href="#1-问题引入"></a> 1 问题引入</h1><p>最近在做xml解析、可视化时遇到一个问题：将字符串（文件路径）中的转义字符不进行转义<code>123\tabc</code>，正常print会将<code>\t</code>看作转义字符tab，需求是使字符串按原样输出。下面是不同场景下的解决方法：</p><h1 id="2-字符串常量"><a class="markdownIt-Anchor" href="#2-字符串常量"></a> 2 字符串常量</h1><p>如果是字符串常量，则在字符串前加<code>r</code> 即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"123\tabc"</span>)</span><br><span class="line"><span class="comment"># 123abc</span></span><br><span class="line">print(<span class="string">r"123\tabc"</span>)  <span class="comment"># test_str = r"123\tabc"</span></span><br><span class="line"><span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><h1 id="3-字符串变量"><a class="markdownIt-Anchor" href="#3-字符串变量"></a> 3 字符串变量</h1><p>如果字符串是变量，使用 <code>repr()</code> 方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">"123\tabc"</span></span><br><span class="line">str2 = repr(str1)</span><br><span class="line"></span><br><span class="line">print(str1)  <span class="comment"># 123abc</span></span><br><span class="line">print(str2)  <span class="comment"># '123\tabc'</span></span><br><span class="line">print(str2.strip(<span class="string">"\'"</span>))  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p><font color="red"><strong>注意</strong></font>：字符串使用 <code>repr</code> 函数后输出是会在字符串前后自动加上单引号（见print第二行），print第三行是去掉了字符串首尾的单引号。关于<code>strip</code>函数，详见<a href="dragonliu.tk/2022/02/09/python%E5%8E%BB%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%A6%96%E5%B0%BE%E7%9A%84%E7%A9%BA%E6%A0%BC/">博客</a>。</p><h1 id="4-文件读取"><a class="markdownIt-Anchor" href="#4-文件读取"></a> 4 文件读取</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file1 = open(<span class="string">"test.txt"</span>, <span class="string">"r"</span>)  <span class="comment"># 123\tabc</span></span><br><span class="line"></span><br><span class="line">print(file1.read())  <span class="comment"># 123\tabc</span></span><br></pre></td></tr></table></figure><p>文本文件读取测试发现字符串未发生转义。</p><p>拓展阅读：<a href="https://blog.csdn.net/ahalearner/article/details/119777972" target="_blank" rel="noopener">关于python中open函数读取和写入windows记事本的换行问题研究</a></p><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li><a href="https://www.cnblogs.com/hellofengying/p/10183057.html" target="_blank" rel="noopener">python中防止字符串转义</a></li><li><a href="https://blog.csdn.net/weixin_41813169/article/details/105702294" target="_blank" rel="noopener">python如何实现对变量的禁止转义操作</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python模块graphviz使用教程</title>
    <link href="https://dragonliu2018.github.io/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://dragonliu2018.github.io/2022/02/03/python%E6%A8%A1%E5%9D%97graphviz%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2022-02-03T03:11:14.000Z</published>
    <updated>2022-02-12T05:00:43.685Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-情景引入"><a class="markdownIt-Anchor" href="#1-情景引入"></a> 1 情景引入</h1><p>前几个月师姐给了个任务——恶意样本行为可视化，输入为xml文件，一个文件代表一个恶意样本。请教学姐学长同学等，加上观看效果图，得出实现思路：python解析xml文件，使用python模块graphviz进行可视化；之后使用图数据库neo4j进行对比。</p><p>之后发现neo4j创建多个图数据库比较麻烦，但是按照行为分类等都比较直观，所以做辅助作用应该不错。</p><img src="https://s2.loli.net/2022/02/10/jnNf9Xrms8CYgxz.png" width="600" height="400" alt="图片名称" align="center" id="65"><p>下面对graphviz进行整理。</p><h1 id="2-graphviz"><a class="markdownIt-Anchor" href="#2-graphviz"></a> 2 Graphviz</h1><p>Graphviz 是一个自动排版的作图软件，可以生成 png pdf 等格式。</p><ul><li><a href="https://graphviz.org/documentation/" target="_blank" rel="noopener">Graphviz官网</a></li><li><a href="https://www.cnblogs.com/shuqin/p/11897207.html" target="_blank" rel="noopener">Graphviz 画图的一些总结</a></li></ul><h1 id="3-python-graphviz"><a class="markdownIt-Anchor" href="#3-python-graphviz"></a> 3 python graphviz</h1><p>python graphviz则是graphviz的python实现。我们可以通过python graphviz实现轻松完成各种流程图的绘制。</p><ul><li><a href="https://graphviz.readthedocs.io/en/stable/manual.html" target="_blank" rel="noopener">python graphviz官方文档</a></li><li><a href="https://blog.csdn.net/LuohenYJ/article/details/106172201" target="_blank" rel="noopener">[python] python模块graphviz使用入门</a></li></ul><h2 id="31-安装"><a class="markdownIt-Anchor" href="#31-安装"></a> 3.1 安装</h2><ol><li><p>安装python graphviz木块（本机使用的是python3.9）:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install graphviz</span><br></pre></td></tr></table></figure></li><li><p>除了python安装外，本机还需要安装Graphviz<a href="https://www.graphviz.org/download/" target="_blank" rel="noopener">(下载页面)</a>，并确保包含dot可执行文件的目录在系统路径上。安装过程中需要添加PATH：</p><img src="https://s2.loli.net/2022/02/10/mJkzIuyaMLCQbAS.png" width="400" height="300" alt="图片名称" align="center" id="35"><p>否则出现下面的报错：(重启Pycharm生效)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graphviz.backend.execute.ExecutableNotFound: failed to execute WindowsPath(<span class="string">'dot'</span>), make sure the Graphviz executables are on your systems<span class="string">' PATH</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lizzy05/article/details/88529030" target="_blank" rel="noopener">graphviz.backend.ExecutableNotFound: failed to execute [‘dot’, ‘-Tpng’, ‘-O’, ‘t est.gv’]问题解决方法</a></p><p>解决报错：添加环境变量</p><img src="https://s2.loli.net/2022/02/10/Nbm9RlSDYFyxtZX.png" width="800" height="400" alt="图片名称" align="center" id="66"></li></ol><h2 id="32-使用"><a class="markdownIt-Anchor" href="#32-使用"></a> 3.2 使用</h2><p>该graphviz模块提供了两个类：Graph和 Digraph。它们分别以DOT语言为无向图和有向图创建图描述。它们具有相同的 API。示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> graphviz <span class="keyword">import</span> Digraph</span><br><span class="line"></span><br><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化端点</span></span><br><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'端点A'</span>, color=<span class="string">"#008000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"rectangle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2'</span>, label=<span class="string">'端点B'</span>, color=<span class="string">"#FFD700"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"circle"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.node(name=<span class="string">'n3'</span>, label=<span class="string">'端点C'</span>, color=<span class="string">"#0000FF"</span>, fontcolor=<span class="string">"#FFFFFF"</span>, style=<span class="string">"filled"</span>, shape=<span class="string">"oval"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 布局 L-左 R-右 T-上 B-下</span></span><br><span class="line">dot.attr(rankdir=<span class="string">'LR'</span>)  <span class="comment"># 自左向右</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='RL')</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='TB')  # 默认</span></span><br><span class="line"><span class="comment"># dot.attr(rankdir='BT')</span></span><br><span class="line"><span class="comment"># 初始化边</span></span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2'</span>, label=<span class="string">"边1"</span>, color=<span class="string">"#000000"</span>, fontcolor=<span class="string">"#000000"</span>, style=<span class="string">""</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n3'</span>, label=<span class="string">"边2"</span>, color=<span class="string">"#FF0000"</span>, fontcolor=<span class="string">"#FF0000"</span>, style=<span class="string">"dashed"</span>, fontname=<span class="string">"Microsoft YaHei"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存文件，view=False时将不自动打开文件</span></span><br><span class="line"><span class="comment"># dot.render("test_graphviz.gv", format='jpg', view=True)</span></span><br><span class="line"><span class="comment"># 不保存文件，仅仅自动打开</span></span><br><span class="line">u = dot.unflatten(stagger=<span class="number">1</span>)</span><br><span class="line">u.view()</span><br></pre></td></tr></table></figure><p>显示如下：</p><img src="https://s2.loli.net/2022/02/10/hID7tuFsmfijoQv.png" width="400" height="300" alt="图片名称" align="center" id="67"><h2 id="33-中文乱码"><a class="markdownIt-Anchor" href="#33-中文乱码"></a> 3.3 中文乱码</h2><p>如果出现中文乱码，多半是因为没有设置fontname为支持中文显示的字体，只需要在node或者edge中添加<code>fontname=&quot;Microsoft YaHei&quot;</code>，即可正常显示。</p><ul><li><a href="https://blog.csdn.net/MAILLIBIN/article/details/100581857" target="_blank" rel="noopener">参考</a></li></ul><h2 id="34-端点-边-字体颜色"><a class="markdownIt-Anchor" href="#34-端点-边-字体颜色"></a> 3.4 端点、边、字体颜色</h2><p>在node或者edge中添加<code>color=&quot;#000000&quot;, fontcolor=&quot;#000000&quot;</code>即可，具体颜色可以参考：</p><ul><li><a href="https://graphviz.gitlab.io/doc/info/colors.html" target="_blank" rel="noopener">官网颜色</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E9%A1%B5%E9%A2%9C%E8%89%B2" target="_blank" rel="noopener">维基百科——X11名称编码</a></li></ul><h2 id="35-端点的形状"><a class="markdownIt-Anchor" href="#35-端点的形状"></a> 3.5 端点的形状</h2><p>在node中添加<code>shape=&quot;xxx&quot;</code>即可，具体需要什么形状可以在<a href="https://graphviz.gitlab.io/doc/info/shapes.html" target="_blank" rel="noopener">官网</a>中查找。</p><h2 id="36-rank"><a class="markdownIt-Anchor" href="#36-rank"></a> 3.6 Rank</h2><p><a href="https://blog.csdn.net/youwen21/article/details/98397954" target="_blank" rel="noopener">GraphViz DOT有向图 (四)node节点布局控制之rank,group,subgraph</a></p><h2 id="37-排版"><a class="markdownIt-Anchor" href="#37-排版"></a> 3.7 排版</h2><p>如上面的示例，使用<code>dot.attr(rankdir='xx')</code>来确定排版，作用范围为使用该行代码之后，下一个<code>dot.attr(rankdir='xx')</code>代码之前。</p><h2 id="38-name参数中不能有英文冒号"><a class="markdownIt-Anchor" href="#38-name参数中不能有英文冒号"></a> 3.8 name参数中不能有英文冒号</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot.node(name=<span class="string">'n1'</span>, label=<span class="string">'n1'</span>)</span><br><span class="line">dot.node(name=<span class="string">'n2:3'</span>, label=<span class="string">'n2:3'</span>)</span><br><span class="line">dot.edge(<span class="string">'n1'</span>, <span class="string">'n2:3'</span>)</span><br></pre></td></tr></table></figure><p><code>dot.node(name=&quot;xxx&quot;)</code> 如果name参数含有英文逗号，则会报错，导致画图错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: node n2, port 3 unrecognized</span><br></pre></td></tr></table></figure><p>常见的思路是使用python将name参数改成中文冒号，label参数是原来的英文冒号，达到正确显示的目的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"http://gsstudio.info/panel"</span></span><br><span class="line">label = repr(string)</span><br><span class="line">name = repr(string.replace(<span class="string">":"</span>, <span class="string">"："</span>))</span><br></pre></td></tr></table></figure><p><code>repr</code>函数是防止字符串转义的，详细见<a href="dragonliu.tk/2022/02/09/python%E4%B8%AD%E9%98%B2%E6%AD%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89/">博客——python中防止字符串转义</a>。</p><h2 id="39-报错graphvizbackendexecutecalledprocesserror"><a class="markdownIt-Anchor" href="#39-报错graphvizbackendexecutecalledprocesserror"></a> 3.9 报错：graphviz.backend.execute.CalledProcessError</h2><p><strong>报错信息：</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subprocess.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477.</span><br><span class="line">...</span><br><span class="line">graphviz.backend.execute.CalledProcessError: Command <span class="string">'[WindowsPath('</span>dot<span class="string">'), '</span>-Kdot<span class="string">', '</span>-Tjpg<span class="string">', '</span>-O<span class="string">', '</span>57630-0.xml.gv<span class="string">']'</span> returned non-zero <span class="built_in">exit</span> status 3221225477. [stderr: b<span class="string">'dot: graph is too large for cairo-renderer bitmaps. Scaling by 0.876568 to fit\r\n'</span>]</span><br></pre></td></tr></table></figure><p><strong>现象：</strong></p><p><code>.gv</code>文件可以正常生成，图片文件<code>.jpg</code>无法生成。</p><p>定位报错语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'jpg'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'jpg'</span>)</span><br></pre></td></tr></table></figure><p><strong>原因：</strong></p><p>生成的graph太大，dot无法导出，换成<code>pdf</code>或<code>svg</code>就可以了，<code>png</code>和<code>jpg</code>都不行。</p><p>最后选择pdf格式，因为导出的文件小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dot = Digraph(comment=<span class="string">'恶意样本行为可视化'</span>, format=<span class="string">'pdf'</span>)</span><br><span class="line">...</span><br><span class="line">dot.render(output_dir + <span class="string">"\\"</span> + file_name + <span class="string">".gv"</span>, format=<span class="string">'pdf'</span>)</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/12/59CK8EwoYSsyNiJ.png" width="900" height="200" alt="图片名称" align="center" id="76"><h1 id="x-参考"><a class="markdownIt-Anchor" href="#x-参考"></a> X 参考</h1><ul><li></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="开发" scheme="https://Dragonliu2018.github.io/categories/开发/"/>
    
    
    <category term="python" scheme="https://Dragonliu2018.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VMWare虚拟机Ubuntu20.04 LTS磁盘空间不足的解决方法整理</title>
    <link href="https://dragonliu2018.github.io/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://dragonliu2018.github.io/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</id>
    <published>2022-02-02T09:38:02.000Z</published>
    <updated>2022-02-02T10:50:40.204Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a class="markdownIt-Anchor" href="#1-引入"></a> 1 引入</h1><p>之前设置磁盘大小为40G，现在搭建cuckoo环境，磁盘空间不足。</p><p>在Ubuntu虚拟机的命令行输入 <code>df -l</code> 查看磁盘使用情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  99% /</span><br></pre></td></tr></table></figure><p>可以看到 <code>/dev/sda5</code> 对应的根目录 <code>/</code> 已经满载了。</p><p>下面是一些解决方法：</p><h1 id="2-删除回收站所有文件"><a class="markdownIt-Anchor" href="#2-删除回收站所有文件"></a> 2 删除回收站所有文件</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.<span class="built_in">local</span>/share/Trash/</span><br></pre></td></tr></table></figure><h1 id="3-删除日志文件"><a class="markdownIt-Anchor" href="#3-删除日志文件"></a> 3 删除日志文件</h1><p>删除所有日志文件：（可能存在权限不够，无法删除的情况）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /dev/null &gt; /var/<span class="built_in">log</span>/**.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>下面这个可以推荐使用：（删除30天之前的旧文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /var/<span class="built_in">log</span>/ -<span class="built_in">type</span> f -mtime +30 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><h1 id="4-删除快照对磁盘空间大小无影响"><a class="markdownIt-Anchor" href="#4-删除快照对磁盘空间大小无影响"></a> 4 删除快照（对磁盘空间大小无影响）</h1><p>但是对于Ubuntu虚拟机整体目录大小有关。</p><h1 id="5-删除无关用户"><a class="markdownIt-Anchor" href="#5-删除无关用户"></a> 5 删除无关用户</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r &lt;newuser&gt;</span><br></pre></td></tr></table></figure><h1 id="6-挂载新磁盘"><a class="markdownIt-Anchor" href="#6-挂载新磁盘"></a> 6 挂载新磁盘</h1><p>拓展磁盘空间：<a href="https://blog.csdn.net/weixin_40641735/article/details/88932720" target="_blank" rel="noopener">链接</a></p><p>设置挂载的文件夹访问权限：<code>sudo chmod 777 ×××</code> （每个人都有读和写以及执行的权限）</p><h1 id="7-拓展磁盘空间不改变原有磁盘内容推荐"><a class="markdownIt-Anchor" href="#7-拓展磁盘空间不改变原有磁盘内容推荐"></a> 7  拓展磁盘空间（不改变原有磁盘内容，推荐）</h1><p><a href="https://blog.csdn.net/weixin_39510813/article/details/78387334?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default" target="_blank" rel="noopener">跳转</a></p><h1 id="8-总结"><a class="markdownIt-Anchor" href="#8-总结"></a> 8 总结</h1><p>扩展磁盘空间完成，df再看一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  48% /</span><br></pre></td></tr></table></figure><p>现在已经完成任务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    
  </entry>
  
  <entry>
    <title>Cuckoo Sandbox 安装教程</title>
    <link href="https://dragonliu2018.github.io/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <id>https://dragonliu2018.github.io/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</id>
    <published>2022-01-30T13:56:31.000Z</published>
    <updated>2022-02-02T13:05:07.104Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-简介"><a class="markdownIt-Anchor" href="#0-简介"></a> 0 简介</h1><p>Cuckoo Sandbox 是一个开源的自动分析可疑文件的软件。它通过在独立环境内使用自定义组件来监控恶意进程的行为。</p><p>它可以分析出以下几种类型的结果:</p><blockquote><ul><li>跟踪恶意软件产生函数调用.</li><li>恶意软件执行期间的文件操作，包括新建，删除以及文件下载.</li><li>恶意软件的内存转储.</li><li>PCAP格式的网络流量捕获.</li><li>恶意软件运行时的截屏.</li><li>虚拟机的完整内存转储文件.</li></ul></blockquote><p>Cuckoo 由一个宿主机（管理组件）加上多个沙箱（物理机或者虚拟机）组成。 宿主机上的管理组件负责了一个样本分析的全部过程，样本的执行过程都是在沙箱中进行。</p><img src="https://s2.loli.net/2022/01/30/laJ2s3Nh5oUg8IM.png" width="500" height="300" alt="图片名称" align="center" id="37"><ul><li><a href="https://cuckoosandbox.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://cuckoo.sh/docs/" target="_blank" rel="noopener">官方文档-英文</a></li><li><a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">官方文档-中文</a></li></ul><h1 id="1-环境准备"><a class="markdownIt-Anchor" href="#1-环境准备"></a> 1 环境准备</h1><p>本次搭建Cuckoo环境，主要参考<a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">教程</a>，使用一个宿主机+一个沙箱(guest)的模式，具体如下：</p><table><thead><tr><th style="text-align:center">软件</th><th style="text-align:center">host</th><th style="text-align:center">guest1</th><th style="text-align:center">guest2</th></tr></thead><tbody><tr><td style="text-align:center">VMware 16 Pro</td><td style="text-align:center">Ubuntu20.04 LTS(推荐GNU/Linux)</td><td style="text-align:center">VM window7-64bit(推荐64位Win7或WinXP)</td><td style="text-align:center">VM Ubuntu虚拟机 virtualbox win7</td></tr></tbody></table><p>其中Win7需要关闭UAC(User Access Control)。</p><p>guest打算使用VMWare下直接虚拟机——win7，但是失败了；</p><p>成功实现的guest是Ubuntu下的virtualbox下的win7。</p><h1 id="2-host安装"><a class="markdownIt-Anchor" href="#2-host安装"></a> 2 host安装</h1><h2 id="21-创建-ubuntu2004-lts-虚拟机"><a class="markdownIt-Anchor" href="#21-创建-ubuntu2004-lts-虚拟机"></a> 2.1 创建 Ubuntu20.04 LTS 虚拟机</h2><p>网上好多参考教程</p><p><font color="red">注意:</font></p><ul><li>Ubuntu20.04虚拟机需要至少4GB的RAM和60–80GB的硬盘，因为你将在里面运行一个windows7虚拟机</li><li>请确保不要将您的用户名称为“cuckoo”，否则这可能会与以后的安装冲突。</li><li>确保您的虚拟机已启用VT-x功能</li></ul><p>Vmware中虚拟机启用VT-x功能后，再打开Ubuntu虚拟机出现报错<code>此平台不支持虚拟化的 AMD-V/RVI。</code></p><p>解决：关闭 <code>Windows 功能</code> 里的 <code>虚拟机平台</code>，重启后即可。</p><h2 id="22-依赖"><a class="markdownIt-Anchor" href="#22-依赖"></a> 2.2 依赖</h2><h3 id="221-安装-python-库-ubuntudebian-based"><a class="markdownIt-Anchor" href="#221-安装-python-库-ubuntudebian-based"></a> 2.2.1 安装 Python 库 (Ubuntu/Debian-based)</h3><p>Cuckoo的管理组件完全由Python脚本编写，所以就需要适合的Python版本。 当前，我们完全兼容的Python版本是 <strong>2.7</strong>。</p><p>老版本的Python和Python 3（未来可能会支持） 目前都是不支持的。</p><hr><p><strong>依赖库：</strong><font color="red">(注意：Ubuntu20中已将python2移除)</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step1 安装python2</span></span><br><span class="line">sudo apt install python2</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 安装pip2，Ubuntu 20已经无法通过apt来安装python2的pip2了</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">sudo python2 get-pip.py</span><br><span class="line"><span class="comment"># 使用：python2 -m pip install numpy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 安装Virtualenv</span></span><br><span class="line">sudo apt-get install virtualenv</span><br><span class="line"><span class="comment"># 使用： virtualenv --python=python2 env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step4 安装其他的</span></span><br><span class="line">sudo apt install python-dev libffi-dev libssl-dev</span><br><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev swig</span><br><span class="line">sudo apt install python-setuptools</span><br></pre></td></tr></table></figure><hr><p>如果要使用我们基于Django开发的Web界面, 则MongoDB是必须要安装的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><hr><p>如果要使用PostgreSQL数据库(推荐), PostgreSQL也必须安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql libpq-dev</span><br></pre></td></tr></table></figure><hr><p>如果使用KVM的话，则需要安装KVM相关依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-kvm</span><br><span class="line">sudo apt-get install libvirt-dev libvirt-daemon libvirt-clients</span><br><span class="line"><span class="comment"># 未完成</span></span><br><span class="line">libvirt-bin ubuntu-vm-builder bridge-utils python-libvirt</span><br></pre></td></tr></table></figure><p>安装Yara：（可选）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install yara-python==3.6.3</span><br></pre></td></tr></table></figure><p>安装ssdeep：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ssdeep</span><br></pre></td></tr></table></figure><p>安装pydeep：(可选，未完成)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U pip setuptools</span><br></pre></td></tr></table></figure><p>安装openpyxl：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install openpyxl</span><br></pre></td></tr></table></figure><p>安装ujson:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install ujson</span><br></pre></td></tr></table></figure><p>现在安装jupyter：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install jupyter</span><br></pre></td></tr></table></figure><h3 id="222-虚拟化软件"><a class="markdownIt-Anchor" href="#222-虚拟化软件"></a> 2.2.2 虚拟化软件</h3><p>Cuckoo沙箱支持大部分的虚拟化软件，可以很方便的添加和使用各种虚拟化支持。</p><p>本文档以VirtualBox为例，选择哪种虚拟机软件并不影响后续的分析。</p><p>安装VirtualBox：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure><h3 id="223-安装-tcpdump"><a class="markdownIt-Anchor" href="#223-安装-tcpdump"></a> 2.2.3 安装 tcpdump</h3><p>Tcpdump用于抓取恶意软件运行过程中产生的所有流量。</p><p>安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tcpdump apparmor-utils</span><br><span class="line">sudo aa-disable /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p><code>AppArmor</code> 只有当PCAP文件生成没有权限的时候才需要，可以参考 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/faq/index.html#tcpdump-permission-denied" target="_blank" rel="noopener">Permission denied for tcpdump</a></p><p>Tcpdump需要root权限，如果不想运行在root用户下，需要做以下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>可以用以下命令验证是否配置正确：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">getcap</span> /usr/sbin/tcpdump</span><br><span class="line">/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>如果没有<code>setcap</code>命令， 则需要安装下面的包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcap2-bin</span></span><br></pre></td></tr></table></figure><p>或者 (<strong>不推荐</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +s /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>需要注意的是 setcap 命令不安全，有可能造成提权漏洞，我们建议将Cuckoo安装在专有的环境里。</p><h3 id="224-安装-volatility"><a class="markdownIt-Anchor" href="#224-安装-volatility"></a> 2.2.4 安装 Volatility</h3><p>Volatility 用于分析内存转储文件的可选工具. Cuckoo与Volatility配合，可以更深度和全面的分析，可以防止恶意软件利用rookit技术逃逸沙箱的监控。</p><p>为了能够工作正常，Cuckoo要求Volatility版本不低于 2.3， 推荐最新版本2.5。 可以从官网下载 <a href="https://github.com/volatilityfoundation" target="_blank" rel="noopener">official repository</a>.</p><p>可以查阅Volatility官方文档的安装说明.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/volatilityfoundation/volatility.git </span><br><span class="line"><span class="built_in">cd</span> volatility</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>安装Distorm3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install distorm3==3.4.4</span><br></pre></td></tr></table></figure><h3 id="225-安装-m2crypto"><a class="markdownIt-Anchor" href="#225-安装-m2crypto"></a> 2.2.5 安装 M2Crypto</h3><p>当前 <code>M2Crypto</code> 库需要 <a href="http://www.swig.org/" target="_blank" rel="noopener">SWIG</a> 支持. Ubuntu/Debian-like 系统下可以通过以下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install swig</span><br></pre></td></tr></table></figure><p><code>SWIG</code> 安装好之后，通过以下命令安装 <code>M2Crypto</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python2 -m pip install m2crypto</span><br></pre></td></tr></table></figure><h3 id="226-安装-guacd未完成"><a class="markdownIt-Anchor" href="#226-安装-guacd未完成"></a> 2.2.6 安装 guacd(未完成)</h3><p><code>guacd</code> 是RDP，SSH，VNC等远程控制的代理层， 是Cuckoo的Web界面的远程终端中使用，可选。</p><p>没有它，远程控制功能就无法使用，版本要求0.9.9及以上。我们推荐安装最新版本 使用如下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libguac-client-rdp0 libguac-client-vnc0 libguac-client-ssh0 guacd</span><br></pre></td></tr></table></figure><h2 id="23-cuckoo-安装"><a class="markdownIt-Anchor" href="#23-cuckoo-安装"></a> 2.3 Cuckoo 安装</h2><h3 id="231-创建用户没使用使用dragon用户下"><a class="markdownIt-Anchor" href="#231-创建用户没使用使用dragon用户下"></a> 2.3.1 创建用户（没使用，使用dragon用户下）</h3><p>Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。 但是要保证虚拟机和Cuckoo运行在相同的用户下。（让一个单独的用户来运行沙盒是一种很好的安全习惯。）</p><p>创建新用户：（密码为root，其他回车即可）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo</span><br></pre></td></tr></table></figure><p>若使用virtualBox则创建一个cuckoo用户，将其添加到vboxusers组里（VirtualBox安装后创建）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G vboxusers cuckoo</span><br></pre></td></tr></table></figure><p>将该用户添加到sudo组。输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo sudo</span><br></pre></td></tr></table></figure><p>如果使用KVM，要将用户加入到Libvirtd用户组:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G libvirtd cuckoo</span><br></pre></td></tr></table></figure><h3 id="232-安装-cuckoo"><a class="markdownIt-Anchor" href="#232-安装-cuckoo"></a> 2.3.2 安装 Cuckoo</h3><p>全局安装Cuckoo是没有问题的，但是 <strong>强力推荐</strong> 用 <code>virtualenv</code> 来安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --python=python2 venv</span><br><span class="line">$ . venv/bin/activate</span><br><span class="line">(venv)$ pip install -U pip setuptools</span><br><span class="line">(venv)$ pip install -U cuckoo</span><br></pre></td></tr></table></figure><p><font color="green">提醒：cuckoo下载较慢，30min左右</font></p><p>为什么推荐使用 <code>virtualenv</code> 呢:</p><ul><li>Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突.</li><li>系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题.</li><li>使用virtualenv，可以让非root用户也可以安装相关软件.</li><li>简单来说virtualenv是最佳实践.</li></ul><h2 id="24-cuckoo-工作目录"><a class="markdownIt-Anchor" href="#24-cuckoo-工作目录"></a> 2.4 Cuckoo 工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户cuckoo</span></span><br><span class="line">su cuckoo</span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">. ./venv/bin/activate</span><br><span class="line"><span class="comment"># 首次运行</span></span><br><span class="line">cuckoo -d</span><br></pre></td></tr></table></figure><p>出现以下界面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line"></span><br><span class="line">    sSSs   .S       S.     sSSs   .S    S.     sSSs_sSSs      sSSs_sSSs</span><br><span class="line">   d%%SP  .SS       SS.   d%%SP  .SS    SS.   d%%SP~YS%%b    d%%SP~YS%%b</span><br><span class="line">  d%S<span class="string">'    S%S       S%S  d%S'</span>    S%S    S&amp;S  d%S<span class="string">'     `S%b  d%S'</span>     `S%b</span><br><span class="line">  S%S     S%S       S%S  S%S     S%S    d*S  S%S       S%S  S%S       S%S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S   .S*S  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S_sdSSS   S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S~YSSY%b  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S    `S%  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S*b     S*b       d*S  S*b     S*S     S%  S*b       d*S  S*b       d*S</span><br><span class="line">  S*S.    S*S.     .S*S  S*S.    S*S     S&amp;  S*S.     .S*S  S*S.     .S*S</span><br><span class="line">   SSSbs   SSSbs_sdSSS    SSSbs  S*S     S&amp;   SSSbs_sdSSS    SSSbs_sdSSS</span><br><span class="line">    YSSP    YSSP~YSSY      YSSP  S*S     SS    YSSP~YSSY      YSSP~YSSY</span><br><span class="line">                                 SP</span><br><span class="line">                                 Y</span><br><span class="line"></span><br><span class="line"> Cuckoo Sandbox 2.0.7</span><br><span class="line"> www.cuckoosandbox.org</span><br><span class="line"> Copyright (c) 2010-2018</span><br><span class="line"></span><br><span class="line">=======================================================================</span><br><span class="line">    Welcome to Cuckoo Sandbox, this appears to be your first run!</span><br><span class="line">    We will now <span class="built_in">set</span> you up with our default configuration.</span><br><span class="line">    You will be able to see and modify the Cuckoo configuration,</span><br><span class="line">    Yara rules, Cuckoo Signatures, and much more to your likings</span><br><span class="line">    by exploring the /home/cuckoo/.cuckoo directory.</span><br><span class="line"></span><br><span class="line">    Among other configurable items of most interest is the</span><br><span class="line">    new location <span class="keyword">for</span> your Cuckoo configuration:</span><br><span class="line">              /home/cuckoo/.cuckoo/conf</span><br><span class="line">=======================================================================</span><br><span class="line"></span><br><span class="line">Cuckoo has finished setting up the default configuration.</span><br><span class="line">Please modify the default settings <span class="built_in">where</span> required and</span><br><span class="line">start Cuckoo again (by running `cuckoo` or `cuckoo -d`).</span><br></pre></td></tr></table></figure><h1 id="3-guest安装在ubuntu2004中的virtualbox中"><a class="markdownIt-Anchor" href="#3-guest安装在ubuntu2004中的virtualbox中"></a> 3 guest安装(在Ubuntu20.04中的VirtualBox中)</h1><h2 id="31-设置virtualbox环境"><a class="markdownIt-Anchor" href="#31-设置virtualbox环境"></a> 3.1 设置virtualbox环境</h2><p>安装网络工具：<code>sudo apt install -y net-tools</code>，现在键入<code>ifconfig</code>以查找虚拟机的IP地址信息。</p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"><p>创建一个只支持主机的网络适配器：<code>vboxmanage hostonlyif create</code></p><p>为虚拟接口设置IP地址：<code>vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</code></p><p>再次运行<code>ifconfig</code>，将看到刚刚设置的接口和IP地址：</p><img src="https://s2.loli.net/2022/01/31/2uWvZkIcfxSatzw.png" width="600" height="300" alt="图片名称" align="center" id="41"><p>我们要使这些更改在重新启动后仍然有效，并在系统启动期间自动设置。所以我们需要建立一个新的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/systemd/</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/systemd/vboxhostonly</span><br></pre></td></tr></table></figure><p>并将以下代码复制到文件中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">hostonlyif create</span><br><span class="line">vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</span><br></pre></td></tr></table></figure><p>现在我们需要使文件可执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/systemd/</span><br><span class="line">sudo chmod a+x vboxhostonly</span><br></pre></td></tr></table></figure><p>现在我们需要创建一个服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>编辑文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description=Setup VirtualBox Hostonly Adapter</span><br><span class="line">After=vboxdrv.service</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/opt/systemd/vboxhostonly</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>现在安装服务并确保它在引导时加载:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>网络部分完成。</p><h2 id="32-创建win7-x64虚拟机"><a class="markdownIt-Anchor" href="#32-创建win7-x64虚拟机"></a> 3.2 创建Win7-x64虚拟机</h2><p>选择镜像 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">win7-x64-sp1</a></p><p>启动Oracle VirtualBox Manager</p><p>单击New图标创建一个新的虚拟机<code>guest1</code>，选择合适的操作系统：</p><img src="https://s2.loli.net/2022/01/31/VLlkqKRCxXSA6ng.png" width="550" height="300" alt="图片名称" align="center" id="42"><p>现在单击下一步。选择要分配的RAM大小。理想情况下，最小值为4GB。我将设置为4096MB（4GB）:</p><img src="https://s2.loli.net/2022/01/31/jqlO5M3kPba9XQI.png" width="550" height="300" alt="图片名称" align="center" id="43"><p>单击下一步。通过单击“创建”创建虚拟硬盘：</p><img src="https://s2.loli.net/2022/01/31/5L1zeiETygwM62b.png" width="550" height="300" alt="图片名称" align="center" id="44"><p>选择VDI并单击Next，选择“动态分配”，然后单击“下一步”。</p><p>选择你的硬盘大小。我已设置为32GB，现在单击“创建”。</p><p>现在你需要把Windows7ISO文件装载到你的Ubuntu虚拟机上。</p><p>单击“确定”。这将把Windows7.iso安装到虚拟机中。现在单击VirtualBox中的设置，然后转到存储。现在单击CD（空）。在右侧或光盘驱动器上，单击CD旁边的向下箭头，然后选择主机驱动器作为CD选项。</p><img src="https://s2.loli.net/2022/01/31/gQFULNs62cT57HO.png" width="550" height="300" alt="图片名称" align="center" id="45"><p>单击“确定”关闭，然后开始启动虚拟机。按照正常的Windows7安装。我把我的Windows7虚拟机叫做guest1。</p><p>现在您的Windows7虚拟机已构建，请登录。（卡顿的原因可能是Ubuntu虚拟机磁盘空间不足，<a href="http://dragonliu.tk/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/" target="_blank" rel="noopener">解决方法</a>）</p><h2 id="33-进行配置"><a class="markdownIt-Anchor" href="#33-进行配置"></a> 3.3 进行配置</h2><p>我们将进行一些更改，以使虚拟机故意易受攻击。转到“开始”并键入组。您应该看到“编辑组策略”选项。</p><img src="https://s2.loli.net/2022/02/01/1iFaKsx5WJmSNjy.png" width="550" height="300" alt="图片名称" align="center" id="46"><p>展开“计算机配置”&gt;“Windows设置”&gt;“安全设置”&gt;“本地策略”&gt;“安全选项”。向下滚动到用户帐户控制选项。</p><img src="https://s2.loli.net/2022/02/01/N6IvV85oZwDY2c7.png" width="550" height="300" alt="图片名称" align="center" id="47"><p>右键单击“用户帐户控制：管理员批准模式中管理员的提升权限提示的行为”，然后选择“属性”。使用下拉菜单选择“不提示，直接提升”，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/FVwSXrlKARNyiUx.png" width="550" height="300" alt="图片名称" align="center" id="48"><p>右键单击“用户帐户控制：检测应用程序安装并提示提升”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/9ytdwx5N42ojqbs.png" width="550" height="300" alt="图片名称" align="center" id="49"><p>右键单击“用户帐户控制：以管理员批准模式运行所有管理员”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/gvr4TaikESyMt3j.png" width="550" height="300" alt="图片名称" align="center" id="50"><p>现在我们关闭windows防火墙和自动更新，原因为他们可能影响恶意软件的行为。</p><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="51"><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="52"><p>接下来我们需要禁用Windows Defender，将“自动扫描”和“实时保护”关闭：</p><img src="https://s2.loli.net/2022/02/01/pZKmeODJ7wCASx2.png" width="550" height="300" alt="图片名称" align="center" id="53"><h2 id="34-安装软件"><a class="markdownIt-Anchor" href="#34-安装软件"></a> 3.4 安装软件</h2><p>单击VirtualBox窗口中的设备并选择InstallVirtualBox Guest Additions完成安装；</p><p>添加一个共享文件夹，使用<code>Downloads</code>文件夹：</p><img src="https://s2.loli.net/2022/02/01/ToqhEst3VQnkKmb.png" width="550" height="300" alt="图片名称" align="center" id="54"><p>转到Windows中的文件资源管理器并键入<code>\\vboxsvr\*Downloads</code> 即可访问Ubuntu中的文件夹。</p><p>物理机下载<a href="https://www.python.org/ftp/python/2.7.8/python-2.7.8.amd64.msi" target="_blank" rel="noopener">python2.7</a>，将此安装包放入共享文件夹并从Windows7虚拟机运行，安装的时侯选择 add python to path；</p><p>下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">Python Pillow</a>，将安装包放入共享文件夹并从Windows 7虚拟机运行。</p><p>（未完成）现在安装Adobe Reader、Flash、Java和Microsoft Office（可选）以及您认为可能需要的任何其他应用程序。</p><p>（未完成）打开Internet Explorer和Adobe Reader以及任何其他可能有可能干扰cuckoo客户端操作的闪屏的应用程序。</p><h2 id="35-安装客户端"><a class="markdownIt-Anchor" href="#35-安装客户端"></a> 3.5 安装客户端</h2><p>上传<code>agent.py</code>文件至win7虚拟机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/agent</span><br><span class="line">cp agent.py ~/Downloads</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/02/01/vDYqUjB2SOiP5r6.png" width="550" height="300" alt="图片名称" align="center" id="55"><p>自启动：复制agent.py文件并将其放置在<code>C:\Users\*USERNAME*\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><br><a href="http://xn--agent-r96ha042aba127eunoe5t2fjune271mg05a.py" target="_blank" rel="noopener">这将在启动虚拟机时启动agent.py</a>。在Windows7虚拟机上，需要显示隐藏的文件和文件夹才能看到AppData文件夹。<br>您可以通过进入“文件资源管理器”，然后进入“组织”&gt;“文件夹选项”来完成此操作。</p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="56"><img src="https://s2.loli.net/2022/02/01/54dthCes9iuBKDy.png" width="500" height="300" alt="图片名称" align="center" id="57"><p>一旦您对安装了所有必需的软件感到满意，请重新启动Windows7虚拟机并登录。你应该得到一个空白的命令窗口出现。如果出现网络弹出窗口，请单击“允许”。</p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="58"><img src="https://s2.loli.net/2022/02/01/LkHXv6ydEUP7btW.png" width="400" height="300" alt="图片名称" align="center" id="59"><p>现在可以最小化虚拟机。</p><h2 id="36-创建沙盒环境"><a class="markdownIt-Anchor" href="#36-创建沙盒环境"></a> 3.6 创建沙盒环境</h2><p>现在我们已经创建了Windows7虚拟机，我们需要设置网络来创建沙盒环境。单击VirtualBox管理器，然后单击Windows 7虚拟机的设置。选择网络，然后更改附加到：仅主机适配器，然后在名称中选择vboxnet0。单击“确定”。</p><img src="https://s2.loli.net/2022/02/01/a1xFih5vb9jWVew.png" width="600" height="300" alt="图片名称" align="center" id="59"><p>现在你需要让这个持久化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y iptables-persistent</span><br></pre></td></tr></table></figure><p>现在我们需要配置IP转发，以便将internet连接从主机路由到来宾虚拟机。我们将使用iptables设置这些网络转发规则：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A FORWARD -o eth0 -i vboxnet0 -s 192.168.56.0/24 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>您可以通过运行<code>sudo iptables-L</code>来检查您的规则</p><p>现在在内核中启用IP转发，以便将这些设置设置为活动（WWW Internet访问需要）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 | sudo tee -a /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>现在我们需要确保IP转发在重新启动后启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>把#从<code>net.ipv4.ip_forward=1</code>项移除，保存退出。<br>现在运行<code>sudo su -</code>然后<code>iptables-save &gt; /etc/iptables/rules.v4</code></p><p>现在我们需要配置Windows7虚拟机的IP地址信息。在中打开网络适配器并设置以下信息：</p><img src="https://s2.loli.net/2022/02/01/hcsV7YUqwFgCrv1.png" width="400" height="300" alt="图片名称" align="center" id="60"><p>单击“确定”和“确定”之后，您应该再次获得internet连接。</p><p>我们现在要拍摄虚拟机的快照，所以单击Machine&gt;takesnapshot。将其命名为Snapshot 1，然后单击ok。</p><h2 id="37-配置cuckoo服务"><a class="markdownIt-Anchor" href="#37-配置cuckoo服务"></a> 3.7 配置cuckoo服务</h2><p>我们现在需要在ubuntu20上完成cuckoo服务的配置。所有cuckoo配置文件都位于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>或您的主目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .cuckoo/</span><br></pre></td></tr></table></figure><p>切换到config目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim cuckoo.conf</span><br></pre></td></tr></table></figure><p>编辑buckoo.conf文件确保设置了以下内容：<code>machine=virtualbox</code><br>和<code>memory_dump=yes</code><br>和<code>resultserver ip=192.168.56.1</code>，<br>保存退出即可</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim auxiliary.conf</span><br></pre></td></tr></table></figure><p>编辑auxiliary.conf文件确保启用了<br><code>sniffer=yes</code></p><p>保存退出</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim virtualbox.conf</span><br></pre></td></tr></table></figure><p>编辑virtualbox.conf文件，并确保<br>virtualbox mode=gui<br>和machines=cuckoo1<br>（如果需要，将名称更改为您的Windows 7虚拟机名称，label=cuckoo1和platform=Windows和ip=192.168.56.101和snapshot=snapshot 1），<br>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim processing.conf</span><br></pre></td></tr></table></figure><p>编辑processing.conf文件，<br>确保<code>memory enabled=yes</code>，</p><p>保存退出</p><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim memory.conf</span><br></pre></td></tr></table></figure><p>编辑memory.conf文件，<br>确保<code>basic guest_profile=Win7SP1x64</code>，</p><p>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim reporting.conf</span><br></pre></td></tr></table></figure><p>编辑reporting.conf文件，确保singlefile启用<br><code>report.html enabled=yes</code>和<code>mongodb enabled=yes</code>的创建，</p><p>保存退出</p><h2 id="38-启动cuckoo"><a class="markdownIt-Anchor" href="#38-启动cuckoo"></a> 3.8 启动cuckoo</h2><p>现在关闭Windows7虚拟机，然后重新启动Ubuntu虚拟机。以<font color="red"><strong>同一用户身份</strong></font>重新登录（不要以cuckoo用户身份登录）</p><p><strong>dragon</strong>用户下激活虚拟环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  graduation . ./venv/bin/activate</span><br><span class="line">(venv) ➜  graduation</span><br></pre></td></tr></table></figure><p>现在要使用cuckoo你首先需要更新cuckoo的签名，所以打开一个终端并键入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  graduation cuckoo community                 </span><br><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line">2022-02-02 20:54:28,277 [cuckoo.apps.apps] INFO: Downloading.. https://github.com/cuckoosandbox/community/archive/master.tar.gz</span><br><span class="line">2022-02-02 20:54:33,956 [cuckoo] INFO: Finished fetching &amp; extracting the community files!</span><br></pre></td></tr></table></figure><p>现在在终端窗口1中键入<code>cuckoo</code>并按回车键。你将得到启动cuckoo，它将坐在等待分析任务。</p><p>在第二个终端窗口中键入 <code>cuckoo web runserver 0.0.0.0:8000</code></p><img src="https://s2.loli.net/2022/02/02/IOe5Xy8GCtPLVjK.png" width="800" height="400" alt="图片名称" align="center" id="61"><p>现在您可以通过<code>127.0.0.1:8000</code>访问cuckoo网络服务器，或者通过浏览器访问本地网络上的虚拟机IP地址。</p><img src="https://s2.loli.net/2022/02/02/6FYTpnrKShyx1li.png" width="800" height="400" alt="图片名称" align="center" id="62"><p>然后提交分析即可，生成报告如下：</p><img src="https://s2.loli.net/2022/02/02/OxT9wCd6FBkUehX.png" width="800" height="400" alt="图片名称" align="center" id="63"><h1 id="4-guest安装在vmware中与ubuntu并列未完成失败"><a class="markdownIt-Anchor" href="#4-guest安装在vmware中与ubuntu并列未完成失败"></a> 4 guest安装(在Vmware中，与Ubuntu并列，未完成，失败)</h1><h2 id="41-创建win7-x64虚拟机"><a class="markdownIt-Anchor" href="#41-创建win7-x64虚拟机"></a> 4.1 创建win7-x64虚拟机</h2><ul><li><p>镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> （需要Service Pack 1，否则vmtools安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win7企业版安装vmtool提示无法进行，需要更新到SP1</span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/01/31/vRTVYMeOB6nWCXi.png" width="600" height="300" alt="图片名称" align="center" id="38"><p>此<a href="https://blog.csdn.net/kinnisoy/article/details/105299515" target="_blank" rel="noopener">教程</a>无效</p></li><li><p>按照步骤安装即可</p></li><li><p>安装VMware Tools（如果安装失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows 无法验证此驱动程序软件的发布者</span><br></pre></td></tr></table></figure><p>使用此<a href="http://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.0/14665864/windows/packages/tools-windows.tar" target="_blank" rel="noopener">ISO映像文件</a>安装即可，教程的<a href="https://blog.csdn.net/DCTANT/article/details/117886423" target="_blank" rel="noopener">评论</a>中提及的</p></li></ul><h2 id="42-依赖"><a class="markdownIt-Anchor" href="#42-依赖"></a> 4.2 依赖</h2><h3 id="421-安装python"><a class="markdownIt-Anchor" href="#421-安装python"></a> 4.2.1 安装python</h3><p>Python 是 Cuckoo 客户端（分析器） 正常工作的必须软件。</p><ol><li>官网下载安装 Python2.7 版本；</li><li>如果安装的时侯选择 add python to path,则会自动完成环境变量配置；否则需要手动添加</li></ol><p>Cuckoo 客户端组件依赖于部分额外的Python 库， 包括: <a href="https://python-pillow.org/" target="_blank" rel="noopener">Python Pillow</a>: 截图组件需要用到。下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">安装包</a>后双击运行即可。</p><p>这些组件不是必须要安装的， 但是不安装的话，分析组件的部分功能就无法正常使用。</p><h3 id="422-其他软件"><a class="markdownIt-Anchor" href="#422-其他软件"></a> 4.2.2 其他软件</h3><p>至此，Cuckoo 正常工作所需的软件的已经安装完成了。</p><p>不过根据你需要分析的文件类型， 也同时需要安装相应的软件， 例如(谷歌)浏览器，PDF阅读器，Office软件等。 记得要关闭这些软件的检查更新和自动更新。</p><p>这些额外的软件是否需要安装，完全取决于你是否所需。 可以阅读 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/introduction/sandboxing.html" target="_blank" rel="noopener">沙箱</a> 章节了解更多的信息.</p><h2 id="43-网络配置"><a class="markdownIt-Anchor" href="#43-网络配置"></a> 4.3 网络配置</h2><h3 id="431-windows-设置"><a class="markdownIt-Anchor" href="#431-windows-设置"></a> 4.3.1 Windows 设置</h3><p>在配置底层网络之前，可能需要调整一些windows虚拟机的内部配置。</p><p>最重要的事情是关闭控制面板中的 <em>Windows 防火墙</em> 和 <em>自动更新</em>。 这些都会影响恶意软件的行为，进而影响Cuckoo对这些行为的分析。</p><h3 id="432-虚拟网络"><a class="markdownIt-Anchor" href="#432-虚拟网络"></a> 4.3.2 虚拟网络</h3><p>现在可以决定虚拟机如何访问互联网或者本地局域网。</p><p>以前老的版本中， Cuckoo 虚拟机和宿主机之间的数据是通过共享文件夹进行交互。 从0.4版本起，则通过XMLRPC 协议来交互。</p><p>所以，需要配置给虚拟机配置静态IP，配置完成后，通过PING来测试虚拟机与宿主机之间 的通信是否正常。不要使用DHCP， 每次IP都不同的情况下，无法正常通信。</p><p>这些配置都要依赖于你的需求和所选的虚拟机软件的特性。</p><blockquote><p>警告：虚拟网络报错! 虚拟网络配置是非常重要的部分。大部分Cuckoo遇到的问题都与网络配置有关系。 在你配置完成之后， 尽量用PING和TELNET工具测试是否正常。</p></blockquote><p>推荐使用 <em>Host-Only</em> 模式的虚拟网络。</p><hr><p><strong>win7虚拟机使用nat模式配置静态IP上网：（未完成）</strong> <a href="https://blog.csdn.net/qq_40657585/article/details/108268552" target="_blank" rel="noopener">链接</a></p><p>查看ubuntu20.04 LTS的ip地址，配置window7客户机的ipv4地址的默认网关和DNS地址为ubuntu的ip地址，如下：</p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"><hr><p>使用NAT模式DHCP：</p><ul><li>Ubuntu：192.168.10.128</li><li>Win7：192.168.10.134</li></ul><hr><h2 id="43-安装客户端"><a class="markdownIt-Anchor" href="#43-安装客户端"></a> 4.3 安装客户端</h2><p>从0.4版本起， Cuckoo设计了以跨平台的交互客户端，可以在Windows， Android， Linux 和Mac OSX 系统上运行。</p><p>只有安装和启动了Cuckoo 客户端， 分析才能工作正常。</p><p>客户端的安装和启动是十分简单的。</p><p>在 <code>$CWD/agent/</code> 目录中，可以找到 <code>agent.py</code> 文件。 把文件拷贝到虚拟机中， 然后将脚本启动起来。 客户端会启动一个小型的API服务，用于与宿主机通信。</p><p>在Windows系统中， 只要将脚本名称 从 <code>agent.py</code> 改为 <strong>agent.pyw</strong> ， 可以在运行的时候不显示终端的窗口。</p><p>将脚本拷贝到 启动 目录， 即可实现脚本开机自启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d &lt;USERNAME&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d &lt;PASSWORD&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d guest2 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d root /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a class="markdownIt-Anchor" href="#5-参考"></a> 5 参考</h1><ul><li><a href="https://fl4g.cn/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/" target="_blank" rel="noopener">Cuckoo-Sandbox学习-安装篇</a></li><li><a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">Ubuntu20.04系统Cuckoo sandbox所需环境搭建及安装(超详细图文)</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="环境与工具" scheme="https://Dragonliu2018.github.io/categories/环境与工具/"/>
    
    <category term="安全" scheme="https://Dragonliu2018.github.io/categories/安全/"/>
    
    
  </entry>
  
  <entry>
    <title>示例-《xxx》纪录片</title>
    <link href="https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/"/>
    <id>https://dragonliu2018.github.io/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/</id>
    <published>2022-01-21T15:12:43.000Z</published>
    <updated>2022-01-21T15:13:01.996Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="影视" scheme="https://Dragonliu2018.github.io/categories/影视/"/>
    
    
    <category term="示例" scheme="https://Dragonliu2018.github.io/tags/示例/"/>
    
    <category term="纪录片" scheme="https://Dragonliu2018.github.io/tags/纪录片/"/>
    
  </entry>
  
</feed>
