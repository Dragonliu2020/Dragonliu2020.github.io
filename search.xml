<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>VMWare虚拟机Ubuntu20.04 LTS磁盘空间不足的解决方法整理</title>
      <link href="/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/"/>
      <url>/2022/02/02/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BAUbuntu20-04-LTS%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4%E4%B8%8D%E8%B6%B3%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h1><p>之前设置磁盘大小为40G，现在搭建cuckoo环境，磁盘空间不足。</p><p>在Ubuntu虚拟机的命令行输入 <code>df -l</code> 查看磁盘使用情况：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  99% /</span><br></pre></td></tr></table></figure><p>可以看到 <code>/dev/sda5</code> 对应的根目录 <code>/</code> 已经满载了。</p><p>下面是一些解决方法：</p><h1 id="2-删除回收站所有文件"><a href="#2-删除回收站所有文件" class="headerlink" title="2 删除回收站所有文件"></a>2 删除回收站所有文件</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf ~/.<span class="built_in">local</span>/share/Trash/</span><br></pre></td></tr></table></figure><h1 id="3-删除日志文件"><a href="#3-删除日志文件" class="headerlink" title="3 删除日志文件"></a>3 删除日志文件</h1><p>删除所有日志文件：（可能存在权限不够，无法删除的情况）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /dev/null &gt; /var/<span class="built_in">log</span>/**.<span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>下面这个可以推荐使用：（删除30天之前的旧文件）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find /var/<span class="built_in">log</span>/ -<span class="built_in">type</span> f -mtime +30 -<span class="built_in">exec</span> rm -f &#123;&#125; \;</span><br></pre></td></tr></table></figure><h1 id="4-删除快照（对磁盘空间大小无影响）"><a href="#4-删除快照（对磁盘空间大小无影响）" class="headerlink" title="4 删除快照（对磁盘空间大小无影响）"></a>4 删除快照（对磁盘空间大小无影响）</h1><p>但是对于Ubuntu虚拟机整体目录大小有关。</p><h1 id="5-删除无关用户"><a href="#5-删除无关用户" class="headerlink" title="5 删除无关用户"></a>5 删除无关用户</h1><p>使用下面命令即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo userdel -r &lt;newuser&gt;</span><br></pre></td></tr></table></figure><h1 id="6-挂载新磁盘"><a href="#6-挂载新磁盘" class="headerlink" title="6 挂载新磁盘"></a>6 挂载新磁盘</h1><p>拓展磁盘空间：<a href="https://blog.csdn.net/weixin_40641735/article/details/88932720" target="_blank" rel="noopener">链接</a></p><p>设置挂载的文件夹访问权限：<code>sudo chmod 777 ×××</code> （每个人都有读和写以及执行的权限）</p><h1 id="7-拓展磁盘空间（不改变原有磁盘内容，推荐）"><a href="#7-拓展磁盘空间（不改变原有磁盘内容，推荐）" class="headerlink" title="7  拓展磁盘空间（不改变原有磁盘内容，推荐）"></a>7  拓展磁盘空间（不改变原有磁盘内容，推荐）</h1><p><a href="https://blog.csdn.net/weixin_39510813/article/details/78387334?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2.pc_relevant_default" target="_blank" rel="noopener">跳转</a></p><h1 id="8-总结"><a href="#8-总结" class="headerlink" title="8 总结"></a>8 总结</h1><p>扩展磁盘空间完成，df再看一下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  Desktop df -l</span><br><span class="line">Filesystem     1K-blocks     Used Available Use% Mounted on</span><br><span class="line">udev             4019184        0   4019184   0% /dev</span><br><span class="line">tmpfs             810936     2032    808904   1% /run</span><br><span class="line">/dev/sda5      102431704 46674596  51153504  48% /</span><br></pre></td></tr></table></figure><p>现在已经完成任务。</p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cuckoo Sandbox 安装教程</title>
      <link href="/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
      <url>/2022/01/30/Cuckoo-Sandbox-%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-简介"><a href="#0-简介" class="headerlink" title="0 简介"></a>0 简介</h1><p>Cuckoo Sandbox 是一个开源的自动分析可疑文件的软件。它通过在独立环境内使用自定义组件来监控恶意进程的行为。</p><p>它可以分析出以下几种类型的结果:</p><blockquote><ul><li>跟踪恶意软件产生函数调用.</li><li>恶意软件执行期间的文件操作，包括新建，删除以及文件下载.</li><li>恶意软件的内存转储.</li><li>PCAP格式的网络流量捕获.</li><li>恶意软件运行时的截屏.</li><li>虚拟机的完整内存转储文件.</li></ul></blockquote><p>Cuckoo 由一个宿主机（管理组件）加上多个沙箱（物理机或者虚拟机）组成。 宿主机上的管理组件负责了一个样本分析的全部过程，样本的执行过程都是在沙箱中进行。</p><p><img src="https://s2.loli.net/2022/01/30/laJ2s3Nh5oUg8IM.png" width="500" height="300" alt="图片名称" align="center" id="37"></p><ul><li><a href="https://cuckoosandbox.org/" target="_blank" rel="noopener">官网</a></li><li><a href="https://cuckoo.sh/docs/" target="_blank" rel="noopener">官方文档-英文</a></li><li><a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">官方文档-中文</a></li></ul><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h1><p>本次搭建Cuckoo环境，主要参考<a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">教程</a>，使用一个宿主机+一个沙箱(guest)的模式，具体如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">软件</th><th style="text-align:center">host</th><th style="text-align:center">guest1</th><th style="text-align:center">guest2</th></tr></thead><tbody><tr><td style="text-align:center">VMware 16 Pro</td><td style="text-align:center">Ubuntu20.04 LTS(推荐GNU/Linux)</td><td style="text-align:center">VM window7-64bit(推荐64位Win7或WinXP)</td><td style="text-align:center">VM Ubuntu虚拟机 virtualbox win7</td></tr></tbody></table></div><p>其中Win7需要关闭UAC(User Access Control)。</p><p>guest打算使用VMWare下直接虚拟机——win7，但是失败了；</p><p>成功实现的guest是Ubuntu下的virtualbox下的win7。</p><h1 id="2-host安装"><a href="#2-host安装" class="headerlink" title="2 host安装"></a>2 host安装</h1><h2 id="2-1-创建-Ubuntu20-04-LTS-虚拟机"><a href="#2-1-创建-Ubuntu20-04-LTS-虚拟机" class="headerlink" title="2.1 创建 Ubuntu20.04 LTS 虚拟机"></a>2.1 创建 Ubuntu20.04 LTS 虚拟机</h2><p>网上好多参考教程</p><font color="red">注意:</font><ul><li>Ubuntu20.04虚拟机需要至少4GB的RAM和60–80GB的硬盘，因为你将在里面运行一个windows7虚拟机</li><li>请确保不要将您的用户名称为“cuckoo”，否则这可能会与以后的安装冲突。</li><li>确保您的虚拟机已启用VT-x功能</li></ul><p>Vmware中虚拟机启用VT-x功能后，再打开Ubuntu虚拟机出现报错<code>此平台不支持虚拟化的 AMD-V/RVI。</code></p><p>解决：关闭 <code>Windows 功能</code> 里的 <code>虚拟机平台</code>，重启后即可。</p><h2 id="2-2-依赖"><a href="#2-2-依赖" class="headerlink" title="2.2 依赖"></a>2.2 依赖</h2><h3 id="2-2-1-安装-Python-库-Ubuntu-Debian-based"><a href="#2-2-1-安装-Python-库-Ubuntu-Debian-based" class="headerlink" title="2.2.1 安装 Python 库 (Ubuntu/Debian-based)"></a>2.2.1 安装 Python 库 (Ubuntu/Debian-based)</h3><p>Cuckoo的管理组件完全由Python脚本编写，所以就需要适合的Python版本。 当前，我们完全兼容的Python版本是 <strong>2.7</strong>。</p><p>老版本的Python和Python 3（未来可能会支持） 目前都是不支持的。</p><hr><p><strong>依赖库：</strong><font color="red">(注意：Ubuntu20中已将python2移除)</font></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step1 安装python2</span></span><br><span class="line">sudo apt install python2</span><br><span class="line"></span><br><span class="line"><span class="comment"># step2 安装pip2，Ubuntu 20已经无法通过apt来安装python2的pip2了</span></span><br><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">sudo python2 get-pip.py</span><br><span class="line"><span class="comment"># 使用：python2 -m pip install numpy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step3 安装Virtualenv</span></span><br><span class="line">sudo apt-get install virtualenv</span><br><span class="line"><span class="comment"># 使用： virtualenv --python=python2 env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># step4 安装其他的</span></span><br><span class="line">sudo apt install python-dev libffi-dev libssl-dev</span><br><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev swig</span><br><span class="line">sudo apt install python-setuptools</span><br></pre></td></tr></table></figure><hr><p>如果要使用我们基于Django开发的Web界面, 则MongoDB是必须要安装的：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mongodb</span><br></pre></td></tr></table></figure><hr><p>如果要使用PostgreSQL数据库(推荐), PostgreSQL也必须安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install postgresql libpq-dev</span><br></pre></td></tr></table></figure><hr><p>如果使用KVM的话，则需要安装KVM相关依赖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu-kvm</span><br><span class="line">sudo apt-get install libvirt-dev libvirt-daemon libvirt-clients</span><br><span class="line"><span class="comment"># 未完成</span></span><br><span class="line">libvirt-bin ubuntu-vm-builder bridge-utils python-libvirt</span><br></pre></td></tr></table></figure><p>安装Yara：（可选）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install yara-python==3.6.3</span><br></pre></td></tr></table></figure><p>安装ssdeep：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y ssdeep</span><br></pre></td></tr></table></figure><p>安装pydeep：(可选，未完成)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install -U pip setuptools</span><br></pre></td></tr></table></figure><p>安装openpyxl：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install openpyxl</span><br></pre></td></tr></table></figure><p>安装ujson:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install ujson</span><br></pre></td></tr></table></figure><p>现在安装jupyter：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install jupyter</span><br></pre></td></tr></table></figure><h3 id="2-2-2-虚拟化软件"><a href="#2-2-2-虚拟化软件" class="headerlink" title="2.2.2 虚拟化软件"></a>2.2.2 虚拟化软件</h3><p>Cuckoo沙箱支持大部分的虚拟化软件，可以很方便的添加和使用各种虚拟化支持。</p><p>本文档以VirtualBox为例，选择哪种虚拟机软件并不影响后续的分析。</p><p>安装VirtualBox：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualbox</span><br></pre></td></tr></table></figure><h3 id="2-2-3-安装-tcpdump"><a href="#2-2-3-安装-tcpdump" class="headerlink" title="2.2.3 安装 tcpdump"></a>2.2.3 安装 tcpdump</h3><p>Tcpdump用于抓取恶意软件运行过程中产生的所有流量。</p><p>安装命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tcpdump apparmor-utils</span><br><span class="line">sudo aa-disable /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p><code>AppArmor</code> 只有当PCAP文件生成没有权限的时候才需要，可以参考 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/faq/index.html#tcpdump-permission-denied" target="_blank" rel="noopener">Permission denied for tcpdump</a></p><p>Tcpdump需要root权限，如果不想运行在root用户下，需要做以下设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">setcap</span> cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>可以用以下命令验证是否配置正确：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">getcap</span> /usr/sbin/tcpdump</span><br><span class="line">/usr/sbin/tcpdump = cap_net_admin,cap_net_raw+eip</span><br></pre></td></tr></table></figure><p>如果没有<code>setcap</code>命令， 则需要安装下面的包:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcap2-bin</span></span><br></pre></td></tr></table></figure><p>或者 (<strong>不推荐</strong>)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chmod +s /usr/sbin/tcpdump</span><br></pre></td></tr></table></figure><p>需要注意的是 setcap 命令不安全，有可能造成提权漏洞，我们建议将Cuckoo安装在专有的环境里。</p><h3 id="2-2-4-安装-Volatility"><a href="#2-2-4-安装-Volatility" class="headerlink" title="2.2.4 安装 Volatility"></a>2.2.4 安装 Volatility</h3><p>Volatility 用于分析内存转储文件的可选工具. Cuckoo与Volatility配合，可以更深度和全面的分析，可以防止恶意软件利用rookit技术逃逸沙箱的监控。</p><p>为了能够工作正常，Cuckoo要求Volatility版本不低于 2.3， 推荐最新版本2.5。 可以从官网下载 <a href="https://github.com/volatilityfoundation" target="_blank" rel="noopener">official repository</a>.</p><p>可以查阅Volatility官方文档的安装说明.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/volatilityfoundation/volatility.git </span><br><span class="line"><span class="built_in">cd</span> volatility</span><br><span class="line">sudo python setup.py build</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>安装Distorm3：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -H pip install distorm3==3.4.4</span><br></pre></td></tr></table></figure><h3 id="2-2-5-安装-M2Crypto"><a href="#2-2-5-安装-M2Crypto" class="headerlink" title="2.2.5 安装 M2Crypto"></a>2.2.5 安装 M2Crypto</h3><p>当前 <code>M2Crypto</code> 库需要 <a href="http://www.swig.org/" target="_blank" rel="noopener">SWIG</a> 支持. Ubuntu/Debian-like 系统下可以通过以下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install swig</span><br></pre></td></tr></table></figure><p><code>SWIG</code> 安装好之后，通过以下命令安装 <code>M2Crypto</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python2 -m pip install m2crypto</span><br></pre></td></tr></table></figure><h3 id="2-2-6-安装-guacd-未完成"><a href="#2-2-6-安装-guacd-未完成" class="headerlink" title="2.2.6 安装 guacd(未完成)"></a>2.2.6 安装 guacd(未完成)</h3><p><code>guacd</code> 是RDP，SSH，VNC等远程控制的代理层， 是Cuckoo的Web界面的远程终端中使用，可选。</p><p>没有它，远程控制功能就无法使用，版本要求0.9.9及以上。我们推荐安装最新版本 使用如下命令安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install libguac-client-rdp0 libguac-client-vnc0 libguac-client-ssh0 guacd</span><br></pre></td></tr></table></figure><h2 id="2-3-Cuckoo-安装"><a href="#2-3-Cuckoo-安装" class="headerlink" title="2.3 Cuckoo 安装"></a>2.3 Cuckoo 安装</h2><h3 id="2-3-1-创建用户（没使用，使用dragon用户下）"><a href="#2-3-1-创建用户（没使用，使用dragon用户下）" class="headerlink" title="2.3.1 创建用户（没使用，使用dragon用户下）"></a>2.3.1 创建用户（没使用，使用dragon用户下）</h3><p>Cuckoo可以运行在已有用户下面，也可以新建一个用户来跑Cuckoo。 但是要保证虚拟机和Cuckoo运行在相同的用户下。（让一个单独的用户来运行沙盒是一种很好的安全习惯。）</p><p>创建新用户：（密码为root，其他回车即可）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo</span><br></pre></td></tr></table></figure><p>若使用virtualBox则创建一个cuckoo用户，将其添加到vboxusers组里（VirtualBox安装后创建）。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G vboxusers cuckoo</span><br></pre></td></tr></table></figure><p>将该用户添加到sudo组。输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser cuckoo sudo</span><br></pre></td></tr></table></figure><p>如果使用KVM，要将用户加入到Libvirtd用户组:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -a -G libvirtd cuckoo</span><br></pre></td></tr></table></figure><h3 id="2-3-2-安装-Cuckoo"><a href="#2-3-2-安装-Cuckoo" class="headerlink" title="2.3.2 安装 Cuckoo"></a>2.3.2 安装 Cuckoo</h3><p>全局安装Cuckoo是没有问题的，但是 <strong>强力推荐</strong> 用 <code>virtualenv</code> 来安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ virtualenv --python=python2 venv</span><br><span class="line">$ . venv/bin/activate</span><br><span class="line">(venv)$ pip install -U pip setuptools</span><br><span class="line">(venv)$ pip install -U cuckoo</span><br></pre></td></tr></table></figure><font color="green">提醒：cuckoo下载较慢，30min左右</font><p>为什么推荐使用 <code>virtualenv</code> 呢:</p><ul><li>Cuckoo的依赖并不是用的最新版本，可能会与系统已有的版本冲突.</li><li>系统中其他软件的安装，可能会导致Cuckoo的依赖产生问题.</li><li>使用virtualenv，可以让非root用户也可以安装相关软件.</li><li>简单来说virtualenv是最佳实践.</li></ul><h2 id="2-4-Cuckoo-工作目录"><a href="#2-4-Cuckoo-工作目录" class="headerlink" title="2.4 Cuckoo 工作目录"></a>2.4 Cuckoo 工作目录</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换用户cuckoo</span></span><br><span class="line">su cuckoo</span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">. ./venv/bin/activate</span><br><span class="line"><span class="comment"># 首次运行</span></span><br><span class="line">cuckoo -d</span><br></pre></td></tr></table></figure><p>出现以下界面：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line"></span><br><span class="line">    sSSs   .S       S.     sSSs   .S    S.     sSSs_sSSs      sSSs_sSSs</span><br><span class="line">   d%%SP  .SS       SS.   d%%SP  .SS    SS.   d%%SP~YS%%b    d%%SP~YS%%b</span><br><span class="line">  d%S<span class="string">'    S%S       S%S  d%S'</span>    S%S    S&amp;S  d%S<span class="string">'     `S%b  d%S'</span>     `S%b</span><br><span class="line">  S%S     S%S       S%S  S%S     S%S    d*S  S%S       S%S  S%S       S%S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S   .S*S  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S_sdSSS   S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S~YSSY%b  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S&amp;S     S&amp;S       S&amp;S  S&amp;S     S&amp;S    `S%  S&amp;S       S&amp;S  S&amp;S       S&amp;S</span><br><span class="line">  S*b     S*b       d*S  S*b     S*S     S%  S*b       d*S  S*b       d*S</span><br><span class="line">  S*S.    S*S.     .S*S  S*S.    S*S     S&amp;  S*S.     .S*S  S*S.     .S*S</span><br><span class="line">   SSSbs   SSSbs_sdSSS    SSSbs  S*S     S&amp;   SSSbs_sdSSS    SSSbs_sdSSS</span><br><span class="line">    YSSP    YSSP~YSSY      YSSP  S*S     SS    YSSP~YSSY      YSSP~YSSY</span><br><span class="line">                                 SP</span><br><span class="line">                                 Y</span><br><span class="line"></span><br><span class="line"> Cuckoo Sandbox 2.0.7</span><br><span class="line"> www.cuckoosandbox.org</span><br><span class="line"> Copyright (c) 2010-2018</span><br><span class="line"></span><br><span class="line">=======================================================================</span><br><span class="line">    Welcome to Cuckoo Sandbox, this appears to be your first run!</span><br><span class="line">    We will now <span class="built_in">set</span> you up with our default configuration.</span><br><span class="line">    You will be able to see and modify the Cuckoo configuration,</span><br><span class="line">    Yara rules, Cuckoo Signatures, and much more to your likings</span><br><span class="line">    by exploring the /home/cuckoo/.cuckoo directory.</span><br><span class="line"></span><br><span class="line">    Among other configurable items of most interest is the</span><br><span class="line">    new location <span class="keyword">for</span> your Cuckoo configuration:</span><br><span class="line">              /home/cuckoo/.cuckoo/conf</span><br><span class="line">=======================================================================</span><br><span class="line"></span><br><span class="line">Cuckoo has finished setting up the default configuration.</span><br><span class="line">Please modify the default settings <span class="built_in">where</span> required and</span><br><span class="line">start Cuckoo again (by running `cuckoo` or `cuckoo -d`).</span><br></pre></td></tr></table></figure><h1 id="3-guest安装-在Ubuntu20-04中的VirtualBox中"><a href="#3-guest安装-在Ubuntu20-04中的VirtualBox中" class="headerlink" title="3 guest安装(在Ubuntu20.04中的VirtualBox中)"></a>3 guest安装(在Ubuntu20.04中的VirtualBox中)</h1><h2 id="3-1-设置virtualbox环境"><a href="#3-1-设置virtualbox环境" class="headerlink" title="3.1 设置virtualbox环境"></a>3.1 设置virtualbox环境</h2><p>安装网络工具：<code>sudo apt install -y net-tools</code>，现在键入<code>ifconfig</code>以查找虚拟机的IP地址信息。</p><p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"></p><p>创建一个只支持主机的网络适配器：<code>vboxmanage hostonlyif create</code></p><p>为虚拟接口设置IP地址：<code>vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</code></p><p>再次运行<code>ifconfig</code>，将看到刚刚设置的接口和IP地址：</p><p><img src="https://s2.loli.net/2022/01/31/2uWvZkIcfxSatzw.png" width="600" height="300" alt="图片名称" align="center" id="41"></p><p>我们要使这些更改在重新启动后仍然有效，并在系统启动期间自动设置。所以我们需要建立一个新的目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/systemd/</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/systemd/vboxhostonly</span><br></pre></td></tr></table></figure><p>并将以下代码复制到文件中：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line">hostonlyif create</span><br><span class="line">vboxmanage hostonlyif ipconfig vboxnet0 --ip 192.168.56.1</span><br></pre></td></tr></table></figure><p>现在我们需要使文件可执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/systemd/</span><br><span class="line">sudo chmod a+x vboxhostonly</span><br></pre></td></tr></table></figure><p>现在我们需要创建一个服务：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>编辑文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>然后：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Description=Setup VirtualBox Hostonly Adapter</span><br><span class="line">After=vboxdrv.service</span><br><span class="line">[Service]</span><br><span class="line">Type=oneshot</span><br><span class="line">ExecStart=/opt/systemd/vboxhostonly</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>现在安装服务并确保它在引导时加载:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> vboxhostonlynic.service</span><br></pre></td></tr></table></figure><p>网络部分完成。</p><h2 id="3-2-创建Win7-x64虚拟机"><a href="#3-2-创建Win7-x64虚拟机" class="headerlink" title="3.2 创建Win7-x64虚拟机"></a>3.2 创建Win7-x64虚拟机</h2><p>选择镜像 <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">win7-x64-sp1</a> </p><p>启动Oracle VirtualBox Manager</p><p>单击New图标创建一个新的虚拟机<code>guest1</code>，选择合适的操作系统：</p><p><img src="https://s2.loli.net/2022/01/31/VLlkqKRCxXSA6ng.png" width="550" height="300" alt="图片名称" align="center" id="42"></p><p>现在单击下一步。选择要分配的RAM大小。理想情况下，最小值为4GB。我将设置为4096MB（4GB）:</p><p><img src="https://s2.loli.net/2022/01/31/jqlO5M3kPba9XQI.png" width="550" height="300" alt="图片名称" align="center" id="43"></p><p>单击下一步。通过单击“创建”创建虚拟硬盘：</p><p><img src="https://s2.loli.net/2022/01/31/5L1zeiETygwM62b.png" width="550" height="300" alt="图片名称" align="center" id="44"></p><p>选择VDI并单击Next，选择“动态分配”，然后单击“下一步”。</p><p>选择你的硬盘大小。我已设置为32GB，现在单击“创建”。</p><p>现在你需要把Windows7ISO文件装载到你的Ubuntu虚拟机上。</p><p>单击“确定”。这将把Windows7.iso安装到虚拟机中。现在单击VirtualBox中的设置，然后转到存储。现在单击CD（空）。在右侧或光盘驱动器上，单击CD旁边的向下箭头，然后选择主机驱动器作为CD选项。</p><p><img src="https://s2.loli.net/2022/01/31/gQFULNs62cT57HO.png" width="550" height="300" alt="图片名称" align="center" id="45"></p><p>单击“确定”关闭，然后开始启动虚拟机。按照正常的Windows7安装。我把我的Windows7虚拟机叫做guest1。</p><p>现在您的Windows7虚拟机已构建，请登录。（卡顿的原因可能是Ubuntu虚拟机磁盘空间不足，<a href="http://dragonliu.tk/2022/02/02/VMWare虚拟机Ubuntu20-04-LTS磁盘空间不足的解决方法整理/" target="_blank" rel="noopener">解决方法</a>）</p><h2 id="3-3-进行配置"><a href="#3-3-进行配置" class="headerlink" title="3.3 进行配置"></a>3.3 进行配置</h2><p>我们将进行一些更改，以使虚拟机故意易受攻击。转到“开始”并键入组。您应该看到“编辑组策略”选项。</p><p><img src="https://s2.loli.net/2022/02/01/1iFaKsx5WJmSNjy.png" width="550" height="300" alt="图片名称" align="center" id="46"></p><p>展开“计算机配置”&gt;“Windows设置”&gt;“安全设置”&gt;“本地策略”&gt;“安全选项”。向下滚动到用户帐户控制选项。</p><p><img src="https://s2.loli.net/2022/02/01/N6IvV85oZwDY2c7.png" width="550" height="300" alt="图片名称" align="center" id="47"></p><p>右键单击“用户帐户控制：管理员批准模式中管理员的提升权限提示的行为”，然后选择“属性”。使用下拉菜单选择“不提示，直接提升”，然后单击“确定”。</p><p><img src="https://s2.loli.net/2022/02/01/FVwSXrlKARNyiUx.png" width="550" height="300" alt="图片名称" align="center" id="48"></p><p>右键单击“用户帐户控制：检测应用程序安装并提示提升”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><p><img src="https://s2.loli.net/2022/02/01/9ytdwx5N42ojqbs.png" width="550" height="300" alt="图片名称" align="center" id="49"></p><p>右键单击“用户帐户控制：以管理员批准模式运行所有管理员”，然后选择属性。选中“禁用”选项，然后单击“确定”。</p><p><img src="https://s2.loli.net/2022/02/01/gvr4TaikESyMt3j.png" width="550" height="300" alt="图片名称" align="center" id="50"></p><p>现在我们关闭windows防火墙和自动更新，原因为他们可能影响恶意软件的行为。</p><p><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="51"></p><p><img src="https://s2.loli.net/2022/02/01/spFXaOW65ntdRCG.png" width="550" height="300" alt="图片名称" align="center" id="52"></p><p>接下来我们需要禁用Windows Defender，将“自动扫描”和“实时保护”关闭：</p><p><img src="https://s2.loli.net/2022/02/01/pZKmeODJ7wCASx2.png" width="550" height="300" alt="图片名称" align="center" id="53"></p><h2 id="3-4-安装软件"><a href="#3-4-安装软件" class="headerlink" title="3.4 安装软件"></a>3.4 安装软件</h2><p>单击VirtualBox窗口中的设备并选择InstallVirtualBox Guest Additions完成安装；</p><p>添加一个共享文件夹，使用<code>Downloads</code>文件夹：</p><p><img src="https://s2.loli.net/2022/02/01/ToqhEst3VQnkKmb.png" width="550" height="300" alt="图片名称" align="center" id="54"></p><p>转到Windows中的文件资源管理器并键入<code>\\vboxsvr\*Downloads</code> 即可访问Ubuntu中的文件夹。</p><p>物理机下载<a href="https://www.python.org/ftp/python/2.7.8/python-2.7.8.amd64.msi" target="_blank" rel="noopener">python2.7</a>，将此安装包放入共享文件夹并从Windows7虚拟机运行，安装的时侯选择 add python to path；</p><p>下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">Python Pillow</a>，将安装包放入共享文件夹并从Windows 7虚拟机运行。</p><p>（未完成）现在安装Adobe Reader、Flash、Java和Microsoft Office（可选）以及您认为可能需要的任何其他应用程序。</p><p>（未完成）打开Internet Explorer和Adobe Reader以及任何其他可能有可能干扰cuckoo客户端操作的闪屏的应用程序。</p><h2 id="3-5-安装客户端"><a href="#3-5-安装客户端" class="headerlink" title="3.5 安装客户端"></a>3.5 安装客户端</h2><p>上传<code>agent.py</code>文件至win7虚拟机：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/agent</span><br><span class="line">cp agent.py ~/Downloads</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/01/vDYqUjB2SOiP5r6.png" width="550" height="300" alt="图片名称" align="center" id="55"></p><p>自启动：复制agent.py文件并将其放置在<code>C:\Users\*USERNAME*\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup</code><br>这将在启动虚拟机时启动agent.py。在Windows7虚拟机上，需要显示隐藏的文件和文件夹才能看到AppData文件夹。<br>您可以通过进入“文件资源管理器”，然后进入“组织”&gt;“文件夹选项”来完成此操作。</p><p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="56"></p><p><img src="https://s2.loli.net/2022/02/01/54dthCes9iuBKDy.png" width="500" height="300" alt="图片名称" align="center" id="57"></p><p>一旦您对安装了所有必需的软件感到满意，请重新启动Windows7虚拟机并登录。你应该得到一个空白的命令窗口出现。如果出现网络弹出窗口，请单击“允许”。</p><p><img src="https://s2.loli.net/2022/02/01/k39m7tVqcN2YoTC.png" width="400" height="300" alt="图片名称" align="center" id="58"></p><p><img src="https://s2.loli.net/2022/02/01/LkHXv6ydEUP7btW.png" width="400" height="300" alt="图片名称" align="center" id="59"></p><p>现在可以最小化虚拟机。</p><h2 id="3-6-创建沙盒环境"><a href="#3-6-创建沙盒环境" class="headerlink" title="3.6 创建沙盒环境"></a>3.6 创建沙盒环境</h2><p>现在我们已经创建了Windows7虚拟机，我们需要设置网络来创建沙盒环境。单击VirtualBox管理器，然后单击Windows 7虚拟机的设置。选择网络，然后更改附加到：仅主机适配器，然后在名称中选择vboxnet0。单击“确定”。</p><p><img src="https://s2.loli.net/2022/02/01/a1xFih5vb9jWVew.png" width="600" height="300" alt="图片名称" align="center" id="59"></p><p>现在你需要让这个持久化。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y iptables-persistent</span><br></pre></td></tr></table></figure><p>现在我们需要配置IP转发，以便将internet连接从主机路由到来宾虚拟机。我们将使用iptables设置这些网络转发规则：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo iptables -A FORWARD -o eth0 -i vboxnet0 -s 192.168.56.0/24 -m conntrack --ctstate NEW -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>您可以通过运行<code>sudo iptables-L</code>来检查您的规则</p><p>现在在内核中启用IP转发，以便将这些设置设置为活动（WWW Internet访问需要）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 1 | sudo tee -a /proc/sys/net/ipv4/ip_forward</span><br><span class="line">sudo sysctl -w net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure><p>现在我们需要确保IP转发在重新启动后启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>把#从<code>net.ipv4.ip_forward=1</code>项移除，保存退出。<br>现在运行<code>sudo su -</code>然后<code>iptables-save &gt; /etc/iptables/rules.v4</code></p><p>现在我们需要配置Windows7虚拟机的IP地址信息。在中打开网络适配器并设置以下信息：</p><p><img src="https://s2.loli.net/2022/02/01/hcsV7YUqwFgCrv1.png" width="400" height="300" alt="图片名称" align="center" id="60"></p><p>单击“确定”和“确定”之后，您应该再次获得internet连接。</p><p>我们现在要拍摄虚拟机的快照，所以单击Machine&gt;takesnapshot。将其命名为Snapshot 1，然后单击ok。</p><h2 id="3-7-配置cuckoo服务"><a href="#3-7-配置cuckoo服务" class="headerlink" title="3.7 配置cuckoo服务"></a>3.7 配置cuckoo服务</h2><p>我们现在需要在ubuntu20上完成cuckoo服务的配置。所有cuckoo配置文件都位于</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>或您的主目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> .cuckoo/</span><br></pre></td></tr></table></figure><p>切换到config目录：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/cuckoo/.cuckoo/conf</span><br></pre></td></tr></table></figure><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim cuckoo.conf</span><br></pre></td></tr></table></figure><p>编辑buckoo.conf文件确保设置了以下内容：<code>machine=virtualbox</code><br>和<code>memory_dump=yes</code><br>和<code>resultserver ip=192.168.56.1</code>，<br>保存退出即可</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim auxiliary.conf</span><br></pre></td></tr></table></figure><p>编辑auxiliary.conf文件确保启用了<br><code>sniffer=yes</code></p><p>保存退出</p><p>通过</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim virtualbox.conf</span><br></pre></td></tr></table></figure><p>编辑virtualbox.conf文件，并确保<br>virtualbox mode=gui<br>和machines=cuckoo1<br>（如果需要，将名称更改为您的Windows 7虚拟机名称，label=cuckoo1和platform=Windows和ip=192.168.56.101和snapshot=snapshot 1），<br>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim processing.conf</span><br></pre></td></tr></table></figure><p>编辑processing.conf文件，<br>确保<code>memory enabled=yes</code>，</p><p>保存退出</p><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim memory.conf</span><br></pre></td></tr></table></figure><p>编辑memory.conf文件，<br>确保<code>basic guest_profile=Win7SP1x64</code>，</p><p>保存退出</p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim reporting.conf</span><br></pre></td></tr></table></figure><p>编辑reporting.conf文件，确保singlefile启用<br><code>report.html enabled=yes</code>和<code>mongodb enabled=yes</code>的创建，</p><p>保存退出</p><h2 id="3-8-启动cuckoo"><a href="#3-8-启动cuckoo" class="headerlink" title="3.8 启动cuckoo"></a>3.8 启动cuckoo</h2><p>现在关闭Windows7虚拟机，然后重新启动Ubuntu虚拟机。以<font color="red"><strong>同一用户身份</strong></font>重新登录（不要以cuckoo用户身份登录）</p><p><strong>dragon</strong>用户下激活虚拟环境：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  graduation . ./venv/bin/activate</span><br><span class="line">(venv) ➜  graduation</span><br></pre></td></tr></table></figure><p>现在要使用cuckoo你首先需要更新cuckoo的签名，所以打开一个终端并键入</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(venv) ➜  graduation cuckoo community                 </span><br><span class="line">/home/dragon/graduation/venv/lib/python2.7/site-packages/sflock/decode/office.py:12: CryptographyDeprecationWarning: Python 2 is no longer supported by the Python core team. Support <span class="keyword">for</span> it is now deprecated <span class="keyword">in</span> cryptography, and will be removed <span class="keyword">in</span> the next release.</span><br><span class="line">  from cryptography.hazmat.backends import default_backend</span><br><span class="line">2022-02-02 20:54:28,277 [cuckoo.apps.apps] INFO: Downloading.. https://github.com/cuckoosandbox/community/archive/master.tar.gz</span><br><span class="line">2022-02-02 20:54:33,956 [cuckoo] INFO: Finished fetching &amp; extracting the community files!</span><br></pre></td></tr></table></figure><p>现在在终端窗口1中键入<code>cuckoo</code>并按回车键。你将得到启动cuckoo，它将坐在等待分析任务。</p><p>在第二个终端窗口中键入 <code>cuckoo web runserver 0.0.0.0:8000</code></p><p><img src="https://s2.loli.net/2022/02/02/IOe5Xy8GCtPLVjK.png" width="800" height="400" alt="图片名称" align="center" id="61"></p><p>现在您可以通过<code>127.0.0.1:8000</code>访问cuckoo网络服务器，或者通过浏览器访问本地网络上的虚拟机IP地址。</p><p><img src="https://s2.loli.net/2022/02/02/6FYTpnrKShyx1li.png" width="800" height="400" alt="图片名称" align="center" id="62"></p><p>然后提交分析即可，生成报告如下：</p><p><img src="https://s2.loli.net/2022/02/02/OxT9wCd6FBkUehX.png" width="800" height="400" alt="图片名称" align="center" id="63"></p><h1 id="4-guest安装-在Vmware中，与Ubuntu并列，未完成，失败"><a href="#4-guest安装-在Vmware中，与Ubuntu并列，未完成，失败" class="headerlink" title="4 guest安装(在Vmware中，与Ubuntu并列，未完成，失败)"></a>4 guest安装(在Vmware中，与Ubuntu并列，未完成，失败)</h1><h2 id="4-1-创建win7-x64虚拟机"><a href="#4-1-创建win7-x64虚拟机" class="headerlink" title="4.1 创建win7-x64虚拟机"></a>4.1 创建win7-x64虚拟机</h2><ul><li><p>镜像下载：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">MSDN</a> （需要Service Pack 1，否则vmtools安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win7企业版安装vmtool提示无法进行，需要更新到SP1</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/01/31/vRTVYMeOB6nWCXi.png" width="600" height="300" alt="图片名称" align="center" id="38"></p><p>此<a href="https://blog.csdn.net/kinnisoy/article/details/105299515" target="_blank" rel="noopener">教程</a>无效    </p></li><li><p>按照步骤安装即可</p></li><li><p>安装VMware Tools（如果安装失败：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Windows 无法验证此驱动程序软件的发布者</span><br></pre></td></tr></table></figure><p>使用此<a href="http://softwareupdate.vmware.com/cds/vmw-desktop/ws/15.5.0/14665864/windows/packages/tools-windows.tar" target="_blank" rel="noopener">ISO映像文件</a>安装即可，教程的<a href="https://blog.csdn.net/DCTANT/article/details/117886423" target="_blank" rel="noopener">评论</a>中提及的</p></li></ul><h2 id="4-2-依赖"><a href="#4-2-依赖" class="headerlink" title="4.2 依赖"></a>4.2 依赖</h2><h3 id="4-2-1-安装python"><a href="#4-2-1-安装python" class="headerlink" title="4.2.1 安装python"></a>4.2.1 安装python</h3><p>Python 是 Cuckoo 客户端（分析器） 正常工作的必须软件。</p><ol><li>官网下载安装 Python2.7 版本；</li><li>如果安装的时侯选择 add python to path,则会自动完成环境变量配置；否则需要手动添加</li></ol><p>Cuckoo 客户端组件依赖于部分额外的Python 库， 包括: <a href="https://python-pillow.org/" target="_blank" rel="noopener">Python Pillow</a>: 截图组件需要用到。下载<a href="https://pypi.python.org/packages/2.7/P/Pillow/Pillow-2.5.3.win-amd64-py2.7.exe#md5=33c3a581ff1538b4f79b4651084090c8" target="_blank" rel="noopener">安装包</a>后双击运行即可。</p><p>这些组件不是必须要安装的， 但是不安装的话，分析组件的部分功能就无法正常使用。</p><h3 id="4-2-2-其他软件"><a href="#4-2-2-其他软件" class="headerlink" title="4.2.2 其他软件"></a>4.2.2 其他软件</h3><p>至此，Cuckoo 正常工作所需的软件的已经安装完成了。</p><p>不过根据你需要分析的文件类型， 也同时需要安装相应的软件， 例如(谷歌)浏览器，PDF阅读器，Office软件等。 记得要关闭这些软件的检查更新和自动更新。</p><p>这些额外的软件是否需要安装，完全取决于你是否所需。 可以阅读 <a href="https://cuckoo-sandbox.readthedocs.io/zh_CN/latest/introduction/sandboxing.html" target="_blank" rel="noopener">沙箱</a> 章节了解更多的信息.</p><h2 id="4-3-网络配置"><a href="#4-3-网络配置" class="headerlink" title="4.3 网络配置"></a>4.3 网络配置</h2><h3 id="4-3-1-Windows-设置"><a href="#4-3-1-Windows-设置" class="headerlink" title="4.3.1 Windows 设置"></a>4.3.1 Windows 设置</h3><p>在配置底层网络之前，可能需要调整一些windows虚拟机的内部配置。</p><p>最重要的事情是关闭控制面板中的 <em>Windows 防火墙</em> 和 <em>自动更新</em>。 这些都会影响恶意软件的行为，进而影响Cuckoo对这些行为的分析。</p><h3 id="4-3-2-虚拟网络"><a href="#4-3-2-虚拟网络" class="headerlink" title="4.3.2 虚拟网络"></a>4.3.2 虚拟网络</h3><p>现在可以决定虚拟机如何访问互联网或者本地局域网。</p><p>以前老的版本中， Cuckoo 虚拟机和宿主机之间的数据是通过共享文件夹进行交互。 从0.4版本起，则通过XMLRPC 协议来交互。</p><p>所以，需要配置给虚拟机配置静态IP，配置完成后，通过PING来测试虚拟机与宿主机之间 的通信是否正常。不要使用DHCP， 每次IP都不同的情况下，无法正常通信。</p><p>这些配置都要依赖于你的需求和所选的虚拟机软件的特性。</p><blockquote><p>警告：虚拟网络报错! 虚拟网络配置是非常重要的部分。大部分Cuckoo遇到的问题都与网络配置有关系。 在你配置完成之后， 尽量用PING和TELNET工具测试是否正常。</p></blockquote><p>推荐使用 <em>Host-Only</em> 模式的虚拟网络。</p><hr><p><strong>win7虚拟机使用nat模式配置静态IP上网：（未完成）</strong> <a href="https://blog.csdn.net/qq_40657585/article/details/108268552" target="_blank" rel="noopener">链接</a></p><p>查看ubuntu20.04 LTS的ip地址，配置window7客户机的ipv4地址的默认网关和DNS地址为ubuntu的ip地址，如下：</p><p><img src="https://s2.loli.net/2022/01/31/zCv8PyLSDpwJUKO.png" width="600" height="300" alt="图片名称" align="center" id="39"></p><hr><p>使用NAT模式DHCP：</p><ul><li>Ubuntu：192.168.10.128</li><li>Win7：192.168.10.134</li></ul><hr><h2 id="4-3-安装客户端"><a href="#4-3-安装客户端" class="headerlink" title="4.3 安装客户端"></a>4.3 安装客户端</h2><p>从0.4版本起， Cuckoo设计了以跨平台的交互客户端，可以在Windows， Android， Linux 和Mac OSX 系统上运行。</p><p>只有安装和启动了Cuckoo 客户端， 分析才能工作正常。</p><p>客户端的安装和启动是十分简单的。</p><p>在 <code>$CWD/agent/</code> 目录中，可以找到 <code>agent.py</code> 文件。 把文件拷贝到虚拟机中， 然后将脚本启动起来。 客户端会启动一个小型的API服务，用于与宿主机通信。</p><p>在Windows系统中， 只要将脚本名称 从 <code>agent.py</code> 改为 <strong>agent.pyw</strong> ， 可以在运行的时候不显示终端的窗口。</p><p>将脚本拷贝到 启动 目录， 即可实现脚本开机自启动。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d &lt;USERNAME&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d &lt;PASSWORD&gt; /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultUserName /d guest2 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v DefaultPassword /d root /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\software\Microsoft\Windows NT\CurrentVersion\WinLogon"</span> /v AutoAdminLogon /d 1 /t REG_SZ /f</span><br><span class="line">reg add <span class="string">"hklm\system\CurrentControlSet\Control\TerminalServer"</span> /v AllowRemoteRPC /d 0x01 /t REG_DWORD /f</span><br><span class="line">reg add <span class="string">"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"</span> /v LocalAccountTokenFilterPolicy /d 0x01 /t REG_DWORD /f</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h1><ul><li><a href="https://fl4g.cn/2018/06/06/Cuckoo-Sandbox%E5%AD%A6%E4%B9%A0-%E5%AE%89%E8%A3%85%E7%AF%87/" target="_blank" rel="noopener">Cuckoo-Sandbox学习-安装篇</a></li><li><a href="https://blog.csdn.net/ElsonHY/article/details/115607255" target="_blank" rel="noopener">Ubuntu20.04系统Cuckoo sandbox所需环境搭建及安装(超详细图文)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>示例-《xxx》纪录片</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8Axxx%E3%80%8B%E7%BA%AA%E5%BD%95%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> 纪录片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《乡村爱情系列》电视剧</title>
      <link href="/2022/01/21/%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/"/>
      <url>/2022/01/21/%E3%80%8A%E4%B9%A1%E6%9D%91%E7%88%B1%E6%83%85%E7%B3%BB%E5%88%97%E3%80%8B%E7%94%B5%E8%A7%86%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p><h1 id="1-乡村爱情（2006）"><a href="#1-乡村爱情（2006）" class="headerlink" title="1 乡村爱情（2006）"></a>1 乡村爱情（2006）</h1><h2 id="1-1-影片信息"><a href="#1-1-影片信息" class="headerlink" title="1.1 影片信息"></a>1.1 影片信息</h2><ul><li>片名：乡村爱情</li><li>又名：Rural Love Story</li><li>导演：张惠中</li><li>编剧：张继</li><li>主演：赵本山/范伟/王亚彬/于月仙/唐鉴军/王小利/贺树峰</li><li>播出：CCTV1</li><li>首播：2006-09-30（中国大陆）</li><li>类型：喜剧/剧情/爱情</li><li>集数：30</li><li>每集：45分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="1-2-剧情简介"><a href="#1-2-剧情简介" class="headerlink" title="1.2 剧情简介"></a>1.2 剧情简介</h2><p>乡村青年谢永强（贺树峰 饰）是个林业大学毕业生，回乡待业期间和同村女孩王小蒙（王亚彬 饰）谈起恋爱，但遭到父亲谢广坤（唐鉴军 饰）强烈反对，引起一直希望儿子出人头地，而王小蒙父亲王老七（蔡维利 饰）听闻此事倍感自尊受伤，也表态不许女儿嫁给谢永强。两个年轻人爱情遭遇阻挠，尚有村长女儿香秀（王君平 饰）适时表达对谢永强的爱慕，为了未来工作，谢永强在家人干涉下阴差阳错与香秀定了亲，那边厢王小蒙也受到村养殖场场长刘一水（闫光明 饰）和邻居赵玉田（吴云飞 饰）的追求。怎料工作分配结果下来，谢永强最终没有分到城里，一心想通过他当上城里人的香秀很失望，就此疏远了他，王小蒙和他重新拾起了感情，二人开始脚踏实地开发山里林果基地，怎料县里的录取通知书又突然到来……</p><h1 id="2-乡村爱情Ⅱ（2008）"><a href="#2-乡村爱情Ⅱ（2008）" class="headerlink" title="2 乡村爱情Ⅱ（2008）"></a>2 乡村爱情Ⅱ（2008）</h1><h2 id="2-1-影片信息"><a href="#2-1-影片信息" class="headerlink" title="2.1 影片信息"></a>2.1 影片信息</h2><ul><li>片名：乡村爱情Ⅱ</li><li>又名：乡村爱情2</li><li>导演：赵本山</li><li>编剧：张继</li><li>主演：赵本山/贺树峰/王亚彬/于月仙/小沈阳/王小宝/王小利/唐鉴军/蒋依杉/吴云飞/王君平/蔡维利/刘小光</li><li>首播：2008-02-10（中国大陆）</li><li>类型：喜剧</li><li>集数：41</li><li>每集：42分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="2-2-剧情简介"><a href="#2-2-剧情简介" class="headerlink" title="2.2 剧情简介"></a>2.2 剧情简介</h2><p>在第二部里，象牙山村中的年轻人们找到了各自事业的方向，不过他们的爱情却有一波三折。</p><p>王小蒙（王亚彬 饰）的豆腐厂上线，每天忙里忙外，不得清闲。谢永强（贺树峰 饰）则专注自己的果园，和小蒙几天都见不上一面。两个孩子忙事业始终推迟婚期，急坏永强的父亲谢广坤（唐鉴军 饰）；赵玉田（吴云飞 饰）和刘英（蒋依杉 饰）结婚后，开始忙于花圃的经营。来村中实习的女大学生陈艳南吸引了赵玉田的注意，刘英大吃其醋，无事忙刘能（王小利 饰）对女婿的做法也颇为不满；香秀（王君平 饰）迎来了新同事王天来（小沈阳 饰），李大国（王小虎 饰）担心嫉妒，从中作梗。王天来单恋陈艳南，又和赵玉田矛盾不断；长贵（王小宝 饰）一方面想吸引王大拿（赵本山 饰）来村里投资，一方面又怕谢大脚（于月仙 饰）被大拿抢走，他和大脚之间若即若离，忽冷忽热，闹出不少笑话。</p><p>矛盾归矛盾，误会归误会，所幸有情人终成眷属，象牙山的青年男女最终得到属于自己的幸福……</p><h1 id="3-乡村爱情故事（2010）"><a href="#3-乡村爱情故事（2010）" class="headerlink" title="3 乡村爱情故事（2010）"></a>3 乡村爱情故事（2010）</h1><h2 id="3-1-影片信息"><a href="#3-1-影片信息" class="headerlink" title="3.1 影片信息"></a>3.1 影片信息</h2><ul><li>片名：乡村爱情故事</li><li>又名：乡村爱情3/乡村爱情Ⅲ/乡村爱情Ⅲ前传</li><li>导演：赵本山/徐正超</li><li>编剧：张继</li><li>主演：于月仙/小沈阳/王小利/刘小光/赵本山/刘流/贺树峰/王小宝/毕畅</li><li>播出：CCTV1</li><li>首播：2010-02-16（中国大陆）</li><li>类型：喜剧</li><li>集数：36</li><li>每集：41分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="3-2-剧情介绍"><a href="#3-2-剧情介绍" class="headerlink" title="3.2 剧情介绍"></a>3.2 剧情介绍</h2><p>自从象牙山的有情人们终成眷属之后，这个小小的山村发生了巨大的变化：王大拿（赵本山 饰）的王氏集团决定在此投资，谢永强（贺树峰 饰）担任投资工程的副总，却和刘大脑袋（刘流 饰）发生不和；王小蒙（毕畅 饰）的豆腐厂越做越大，开始考虑和上海的大企业合作；刘能（王小利 饰）撺掇老四（刘小光 饰）上镇上告长贵（王小宝 饰）的状，惹出了一堆笑话；赵玉田（吴云飞 饰）收心敛性开始好好过日子，而刘英则凭借怀孕的优势在赵家的地位陡然提升；谢广坤（唐鉴军 饰）陪儿媳妇去了一趟上海，不仅学得一口蹩脚的上海话，还迷上了对方公司的主管；刘一水专心自己的畜牧场，而老婆却希望他出任象牙山村的村主任……</p><p>新的一年，新的故事，在这个我们熟悉的山村继续上演……</p><h1 id="4-乡村爱情交响曲（2011）"><a href="#4-乡村爱情交响曲（2011）" class="headerlink" title="4 乡村爱情交响曲（2011）"></a>4 乡村爱情交响曲（2011）</h1><h2 id="4-1-影片信息"><a href="#4-1-影片信息" class="headerlink" title="4.1 影片信息"></a>4.1 影片信息</h2><ul><li>片名：乡村爱情交响曲</li><li>又名：乡村爱情第四部/乡村爱情4</li><li>导演：徐正超</li><li>编剧：张继</li><li>主演：赵本山/贺树峰/毕畅/小沈阳/吴云飞/于月仙/王小宝/闫光明/王小利/唐鉴军/蔡维利/蒋依杉/王小虎/关婷娜/刘流</li><li>首播：2011-05-05（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：37</li><li>每集：45分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="4-2-剧情介绍"><a href="#4-2-剧情介绍" class="headerlink" title="4.2 剧情介绍"></a>4.2 剧情介绍</h2><p>象牙山村的故事继续上演：谢兰和皮长生喜得贵子，美坏了外公谢广坤（唐鉴军 饰），整天抱着孩子招摇过市，这便急煞了刘能（王小利 饰）和赵四（刘小光 饰）。为早日实现传宗接代的大业，赵四将玉田（吴云飞 饰）和刘英（蒋依杉 饰）关在屋里，一门心思造人；广坤得意的同时，又给永强（贺树峰 饰）和小蒙（毕畅 饰）施加压力，逼他们早日要孩子，结果是纷争连连，也让相爱的两人心生离析；长贵（王小宝 饰）事业一帆风顺，升任水利站站长，由此变得有些飘飘然，开始想尽一切办法大拍齐镇长马屁，反而弄巧成拙。</p><p>此外，王天来（小沈阳 饰）、王大拿（赵本山 饰）、刘大脑袋（刘流 饰）、刘一水……各自有着各自的故事，有着各自的喜怒哀乐…… </p><h1 id="5-乡村爱情小夜曲（2012）"><a href="#5-乡村爱情小夜曲（2012）" class="headerlink" title="5 乡村爱情小夜曲（2012）"></a>5 乡村爱情小夜曲（2012）</h1><h2 id="5-1-影片信息"><a href="#5-1-影片信息" class="headerlink" title="5.1 影片信息"></a>5.1 影片信息</h2><ul><li>片名：乡村爱情小夜曲</li><li>又名：乡村爱情5</li><li>导演：赵本山/徐正超</li><li>编剧：张继</li><li>主演：赵本山/毕畅/贺树峰/王小利/于月仙/唐鉴军/王小宝/刘小光//蔡维利/刘流/蒋依杉/吴云飞/王小虎/王君平/小沈阳</li><li>播出：山东卫视</li><li>首播：2012-01-27（中国大陆）</li><li>类型：喜剧</li><li>集数：44</li><li>每集：44分钟</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="5-2-剧情介绍"><a href="#5-2-剧情介绍" class="headerlink" title="5.2 剧情介绍"></a>5.2 剧情介绍</h2><p>新的一年来到，我们熟悉的象牙山村发生了许许多多令人耳目一新的变化。家家户户用上了电脑，与外界的联系更为紧密；服装和潮流紧跟时代的步伐，村民们更潮了；大脚超市规模扩大，俨然正“做大做强”。就在红火生活的另一边，人们的烦恼又徒然增多。谢大脚（于月仙 饰）和长贵（王小宝 饰）因苏玉红的存在矛盾不断，婚姻走向破裂；谢广坤（唐鉴军 饰）看着刘能即将抱上外孙心急火燎，于是试图拆散小蒙（毕畅 饰）和永强（贺树峰 饰）的婚姻；王大拿（赵本山 饰）本好心帮大脚夫妇结尾，谁曾想惹来杨小燕猜忌；刘能则和赵四为了外孙展开连番较量。</p><p>新的喜悦，新的烦恼，穿插在象牙山村可爱的村民之间……</p><h1 id="6-乡村爱情变奏曲（2013）"><a href="#6-乡村爱情变奏曲（2013）" class="headerlink" title="6 乡村爱情变奏曲（2013）"></a>6 乡村爱情变奏曲（2013）</h1><h2 id="6-1-影片信息"><a href="#6-1-影片信息" class="headerlink" title="6.1 影片信息"></a>6.1 影片信息</h2><ul><li>片名：乡村爱情变奏曲</li><li>又名：乡村爱情6</li><li>导演：刘流/周英男</li><li>编剧：张继</li><li>主演：赵本山/刘小光/唐鉴军 / 贺树峰/毕畅/ 于月仙/刘流/ 王小利/ 蒋依杉/吴云飞/ 王小宝/葛珊珊/闫光明/杜肖雄 / 蔡维利/ 王小虎 / 王君平 /孟令宇/ 李琳/ 王晓曦/ 金玫玫/ 吴一迪/金鸿鸣/关婷娜/ 王卓/ 董三毛/付小兰/赵海燕/王小华 / 孙立荣/ 筱素清/ 张小飞 /高贺迪</li><li>首播：2013-02-12（中国大陆）</li><li>类型：剧情</li><li>集数：50</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="6-2-剧情介绍"><a href="#6-2-剧情介绍" class="headerlink" title="6.2 剧情介绍"></a>6.2 剧情介绍</h2><p>新的一年，象牙村百姓们平凡而有趣的故事如期上演。饱受家庭、事业危机困扰的长贵（王小宝 饰）否极泰来，因见义勇为重新获得了村民的尊敬和领导的信任，一时间有点飘飘然；山庄上，刘大脑袋（刘流 饰）欲擒故纵，成功从王大拿（赵本山 饰）手中得权，并好好整治了好高骛远的王天来（小沈阳 饰）；不小心流产的王小蒙（毕畅 饰），得到蒙在鼓里的谢广坤（唐鉴军 饰）无微不至的照顾，心中充满不安的她与永强的关系似乎也悄悄发生变化；徐会计扶正支书职务，赵玉田（吴云飞 饰）也勉为其难担任村主任，胸怀大志的一群人外出考察，却将骗子带回象牙村。</p><p>除此之外，还有我们熟悉的刘能、老四、香秀等等，各自上演引人入胜的小故事……</p><h1 id="7-乡村爱情圆舞曲（2014）"><a href="#7-乡村爱情圆舞曲（2014）" class="headerlink" title="7 乡村爱情圆舞曲（2014）"></a>7 乡村爱情圆舞曲（2014）</h1><h2 id="7-1-影片信息"><a href="#7-1-影片信息" class="headerlink" title="7.1 影片信息"></a>7.1 影片信息</h2><ul><li>片名：乡村爱情圆舞曲</li><li>又名：乡村爱情7</li><li>导演：刘流/周英男</li><li>编剧：张继</li><li>主演：王小利/赵本山/毕畅/小沈阳</li><li>播出：山东/江苏/天津/辽宁/黑龙江卫视</li><li>首播：2014-02-03（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：66</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="7-2-剧情介绍"><a href="#7-2-剧情介绍" class="headerlink" title="7.2 剧情介绍"></a>7.2 剧情介绍</h2><p>新的一年，象牙山村悲欢离合的故事继续上演。长贵（王小虎 饰）为救小梁溺水身亡，愧疚满怀的小梁执意要认大脚当干妈。大脚悲伤挠头之余，还不得不一次次张罗给青莲介绍对象的事。谢广坤（唐鉴军 饰）一直为孙子大业发愁，眼瞅着小蒙生育无望，他想出抱养的点子。抱了外孙女的刘能（王小利 饰）趾高气昂，时不时调侃老四（刘小光 饰）和广坤，还为竞选理事会长大费周章。山庄那里也不闲着，保安队长晓峰自信心膨胀，令刘大脑袋（刘流 饰）和王大拿（赵本山 饰）焦头烂额，而久未露面的王木生（田娃 饰）突然回归，又使得山庄的权力斗争和家族内务波谲云诡……</p><p>所有人的命运都发生着变化，他们的生活将呈现怎样的格局？</p><h1 id="8-乡村爱情浪漫曲（2015）"><a href="#8-乡村爱情浪漫曲（2015）" class="headerlink" title="8 乡村爱情浪漫曲（2015）"></a>8 乡村爱情浪漫曲（2015）</h1><h2 id="8-1-影片信息"><a href="#8-1-影片信息" class="headerlink" title="8.1 影片信息"></a>8.1 影片信息</h2><ul><li>片名：乡村爱情浪漫曲</li><li>又名：乡村爱情8/Country Love Romance</li><li>导演：孟令宇</li><li>编剧：张继</li><li>主演：赵本山/毕畅/吴云飞/王小利/刘小光</li><li>播出：腾讯视频</li><li>首播：2015-12-11（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：65</li><li>每集：40</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="8-2-剧情介绍"><a href="#8-2-剧情介绍" class="headerlink" title="8.2 剧情介绍"></a>8.2 剧情介绍</h2><p>风光秀美的象牙山又迎来了极其闹腾的一年。嘚嘚瑟瑟的谢广坤（唐鉴军 饰）祖坟冒了青烟，王小蒙（毕畅 饰）居然给他生了龙凤胎孙伙计，这可把广坤时刻想要显摆的心美坏了，他大张旗鼓要搞庆祝，这期间却忽略了腾飞的感受。广坤的死对头刘能（王小利 饰）看在眼里，气在心头，一门心思地要干帮超，将希望全都寄托在闺女刘英的肚皮上。亲家赵四（刘晓光 饰）的生意越做越红火，眼瞅着就不把刘能放在眼里了，新的矛盾由此产生。香秀即将迎来新生命，但她和李大国的婚姻却走向破裂边缘。新的政策出台，让山庄的效益直线下降，王大拿（赵本山 饰）发愁之际，后院似乎也见到了火苗子。</p><p>大大小小的人物，继续装点着他们各自的人生…… </p><h1 id="9-乡村爱情进行曲（2017）"><a href="#9-乡村爱情进行曲（2017）" class="headerlink" title="9 乡村爱情进行曲（2017）"></a>9 乡村爱情进行曲（2017）</h1><h2 id="9-1-影片信息"><a href="#9-1-影片信息" class="headerlink" title="9.1 影片信息"></a>9.1 影片信息</h2><ul><li>片名：乡村爱情进行曲</li><li>又名：乡村爱情9</li><li>导演：孟令宇/付滃</li><li>编剧：张继</li><li>主演：赵本山/ 贺树峰/ 毕畅/ 唐鉴军/ 金玫玫/ 周弋楠/小沈阳 /王小利/ 刘小光/于月仙/ 蔡维利/王小虎</li><li>播出：腾讯视频</li><li>首播：2017-02-01（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="9-2-剧情介绍"><a href="#9-2-剧情介绍" class="headerlink" title="9.2 剧情介绍"></a>9.2 剧情介绍</h2><p>象牙山村的成绩不太理想，徐支书很头疼。村民得知香秀和马忠经常吵架以为马忠欺负香秀了，受过长贵恩惠的徐支书听闻此事，带着村民找马忠评理。镇里觉得徐支书做法过激，撤掉他职务并委派一位“第一书记”主持村里工作。第一书记到来，做了三件事——</p><p>重新选村主任，扶植小蒙豆腐厂为村办企业标杆以及带领村民网上销售农副产品。而大脚遇到了长得和长贵一样的外村大夫王福根并展开了追求，在村民的帮助下，福根终于同意在象牙山村生活，并带来了长得俊俏一儿一女，引起了村民的骚动。晓燕怀孕了，大拿在木生的唆使下，对孩子的身世产生怀疑，晓燕伤心不已。在村民共同努力下，宋晓峰当上了村主任并让象牙山村重回优秀村的行列；刘能和玉田的电商生意如火如荼；永强在大家的帮助下站了起来；大拿和晓燕重归于好；象牙山在一片欣欣向荣的景象中迎接新年。</p><h1 id="10-乡村爱情协奏曲（2018）"><a href="#10-乡村爱情协奏曲（2018）" class="headerlink" title="10 乡村爱情协奏曲（2018）"></a>10 乡村爱情协奏曲（2018）</h1><h2 id="10-1-影片信息"><a href="#10-1-影片信息" class="headerlink" title="10.1 影片信息"></a>10.1 影片信息</h2><ul><li>片名：乡村爱情协奏曲</li><li>又名：乡村爱情10</li><li>导演：付滃/孟令宇</li><li>编剧：张继</li><li>主演：毕畅/ 贺树峰/ 唐鉴军/ 王小利/ 刘小光 / 蔡维利/ 于月仙/赵本山/ 关婷娜/刘流/王小宝/王小虎/宋晓峰/田娃/闫光明/ 蒋依杉/吴云飞 / 王君平/ 金玫玫/ 周弋楠/ 付滃/ 赵海燕/毛毛/ 曹桐睿</li><li>播出：腾讯视频</li><li>首播：2018-02-05（中国大陆）</li><li>类型：剧情/喜剧</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="10-2-剧情介绍"><a href="#10-2-剧情介绍" class="headerlink" title="10.2 剧情介绍"></a>10.2 剧情介绍</h2><p>该剧本季主要围绕象牙山年轻人的婚恋故事展开，刘能、谢广坤携手成立“大龄青年婚姻理事会”，为解决大龄青年单身问题出谋划策，却闹出一系列嘀笑皆非的故事。</p><h1 id="11-乡村爱情11（2019）"><a href="#11-乡村爱情11（2019）" class="headerlink" title="11 乡村爱情11（2019）"></a>11 乡村爱情11（2019）</h1><h2 id="11-1-影片信息"><a href="#11-1-影片信息" class="headerlink" title="11.1 影片信息"></a>11.1 影片信息</h2><ul><li>片名：乡村爱情11</li><li>又名：乡村爱情11狂欢曲</li><li>导演：付滃/孟令宇</li><li>编剧：李海兵/杨景标</li><li>主演：赵本山/ 狄龙/ 毕畅/ 贺树峰/ 王小利/ 刘小光/唐鉴军/ 宋晓峰/蔡维利/ 于月仙/ 马心怡/闫光明/ 唐娜</li><li>播出：优酷</li><li>首播：2019-01-26（中国大陆）</li><li>类型：剧情/喜剧/爱情</li><li>集数：60</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="11-2-剧情介绍"><a href="#11-2-剧情介绍" class="headerlink" title="11.2 剧情介绍"></a>11.2 剧情介绍</h2><p>《乡村爱情11》于2019年1月26日优酷全网独播，每周一至周六早上10:00更新。本剧讲述了以刘能、广坤、赵四为首的象牙山村民在新时代背景下，就“精准扶贫”“招商引资”等国家惠农政策的误解，与新到任大学生村官杜小双以及到象牙山投资的神秘富豪，发生的一系列依旧搞笑无解的故事。</p><h1 id="12-乡村爱情12（2020）"><a href="#12-乡村爱情12（2020）" class="headerlink" title="12 乡村爱情12（2020）"></a>12 乡村爱情12（2020）</h1><h2 id="12-1-影片信息"><a href="#12-1-影片信息" class="headerlink" title="12.1 影片信息"></a>12.1 影片信息</h2><ul><li>片名：乡村爱情12</li><li>又名：乡村爱情第十二部</li><li>导演：付滃/孙博</li><li>编剧：何庆魁/李海兵</li><li>主演：赵本山/ 毕畅/ 贺树峰/ 王小利/ 刘小光/唐鉴军/曹桐睿/ 宋晓峰/蔡维利/ 于月仙/ 马心怡/闫光明/ 唐娜</li><li>播出：优酷</li><li>首播：2020-01-25（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：60</li><li>每集：42</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="12-2-剧情介绍"><a href="#12-2-剧情介绍" class="headerlink" title="12.2 剧情介绍"></a>12.2 剧情介绍</h2><p>镇里新派来的女村官杜小双和刘一水承担起了建设生态新农庄的重任，二人一路磕磕碰碰，即将修成正果之时刘一水却意外查到得了慢性胰腺炎，最终拒绝杜小双追求独自进了手术室，一水的手术是否顺利，他和杜小双的结局究竟如何。富二代李成继承公司后续情感线又将走向何处。被挖墙角的大拿狗场又将面临怎样的局面。象牙山F4，刘能、赵四、谢广坤、王老七又将上演什么样的相爱相杀。</p><h1 id="13-乡村爱情13（2021）"><a href="#13-乡村爱情13（2021）" class="headerlink" title="13 乡村爱情13（2021）"></a>13 乡村爱情13（2021）</h1><h2 id="13-1-影片信息"><a href="#13-1-影片信息" class="headerlink" title="13.1 影片信息"></a>13.1 影片信息</h2><ul><li>片名：乡村爱情13</li><li>导演：付滃/孟令宇</li><li>主演：赵本山/ 倪大红/ 唐鉴军/刘小光/ 田娃/ 毕畅/贺树峰/于月仙/蒋依杉/吴云飞/曹桐睿/马心怡/赵海燕/孙立荣/赵明远/刘流/高赫迪/张小伟 / 董三毛/金鸿鸣/ 付滃/ 蔡维利/魏欣宇/筱素清/王小宝 /张小飞/关婷娜/王小华 / 葛珊珊/ 王悦/陈爽/ 王小虎/王君平/闫光明/ 金玫玫/ 燕飞/张可/ 曹兴/ 霍云龙</li><li>播出：优酷</li><li>首播：2021-02-16（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：40</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="13-2-剧情介绍"><a href="#13-2-剧情介绍" class="headerlink" title="13.2 剧情介绍"></a>13.2 剧情介绍</h2><p>为搭乘“线上经济”的快车，象牙山又刮起强劲的“网络风”。谁能想到王大拿与杨晓燕的婚烟会隔着手机屏拉警报？而F4组合谢广坤、刘能、赵四和王老七趁机也起幺蛾子，王小蒙和刘英难免又入坑。宋富贵和宋晓峰互使连环套，哪是翁婿？分明是冤家。小山村里锅边炕沿的故事又会带给我们怎样的欢乐？</p><h1 id="14-乡村爱情14（2022）"><a href="#14-乡村爱情14（2022）" class="headerlink" title="14 乡村爱情14（2022）"></a>14 乡村爱情14（2022）</h1><h2 id="14-1-影片信息"><a href="#14-1-影片信息" class="headerlink" title="14.1 影片信息"></a>14.1 影片信息</h2><ul><li>片名：乡村爱情14</li><li>导演：付滃/孟令宇</li><li>编剧：李海兵</li><li>主演：唐鉴军/王小利/ 刘小光 / 宋晓峰/ 倪大红 / 蔡维利/ 毕畅/ 贺树峰/田娃/ 关婷娜/ 曹桐睿/蒋依杉/吴云飞/赵海燕/ 孙立荣 /马心怡/刘流/张小伟/董三毛 / 付翁/ 王小宝/ 张小飞/闫光明/孟令宇</li><li>播出：优酷</li><li>首播：2022-01-24（中国大陆）</li><li>类型：喜剧/爱情</li><li>集数：40</li><li>每集：45</li><li>地区：中国大陆</li><li>语言：汉语普通话</li></ul><h2 id="14-2-剧情介绍"><a href="#14-2-剧情介绍" class="headerlink" title="14.2 剧情介绍"></a>14.2 剧情介绍</h2><p>淘宝直播基地的建成，无疑为已踏入小康的象牙山，又翻开了新的篇章。过了色彩斑斓的深秋，就会迎来白雪皑皑的冬季，市里提出了“打造乡村冬季生态游”的号召，大学生村官杜小双积极响应，决定举办“舌尖上的象牙山”。为充分调动大家参与的积极性，并在对外宣传上造势，宣布“冠军”奖金十万。</p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电视剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-《城南旧事》电影</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E5%9F%8E%E5%8D%97%E6%97%A7%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
      
      
      <categories>
          
          <category> 影视 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> 电影 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-旅行</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%85%E8%A1%8C/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%97%85%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Life is painting a picture, not doing a sum. </p>]]></content>
      
      
      <categories>
          
          <category> 旅行 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-《你是人间的四月天》歌曲</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E3%80%8A%E4%BD%A0%E6%98%AF%E4%BA%BA%E9%97%B4%E7%9A%84%E5%9B%9B%E6%9C%88%E5%A4%A9%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>「——你是爱，是暖，<br>是希望，你是人间的四月天！」</p><p>草长莺飞的四月，李宇春受大型诗词音乐文化节目《经典咏流传》邀请，将于央视一套演绎林徽因经典名作《你是人间的四月天》。通过诗歌和音乐，遥望并呼应85年前林徽因笔下的春深光景，用温柔嗓音传递恒久的美与爱。</p><p>在歌曲创作阶段，李宇春用一个多月的时间浏览相关书籍和影像，对创作者背景和时代风貌进行了详细调研，从众多经典诗词中选择《你是人间的四月天》进行演绎，并邀请音乐人彭青为这首诗词谱曲。两位女性音乐人以敏锐而温柔的视角，还原并呈现了诗歌的韵律与意象，将春日的轻灵喜悦和诗歌的东方之美进行了生动表达。</p><p>歌曲将丰盛藏于淡泊，乍听水波不兴，细节却暗藏波澜。虽然是经典的中文诗歌，编曲上却并未过多使用中国乐器元素，仅用五声调式钢琴和弦乐突显诗歌韵脚，酝酿出清丽的氛围。李宇春则用轻如呢喃的演唱方式，将「雪化后那片鹅黄」 「新鲜初放芽的绿」等春天意象，唱得格外柔软。</p><p>作为一名具有先锋态度的音乐人，同时也是一位不断探索音乐、艺术、时尚等领域多元文化价值的当代女性，李宇春与终其一生传递美的价值的林徽因一样，在自我内化和丰富的同时，凭借旺盛的生命力和开阔的视野，在各领域中勇敢地创新美的表达，延展美的样态，自由地传递一种生动而有力量的美感。</p><h1 id="2-歌手"><a href="#2-歌手" class="headerlink" title="2 歌手"></a>2 歌手</h1><p><strong>李宇春</strong>（英语：Chris Li Yu-chun，1984年3月10日－），出生于<a href="https://zh.wikipedia.org/wiki/中國" target="_blank" rel="noopener">中国</a><a href="https://zh.wikipedia.org/wiki/四川" target="_blank" rel="noopener">四川</a>成都，为<a href="https://zh.wikipedia.org/wiki/中國大陸" target="_blank" rel="noopener">中国大陆</a>女歌手、词曲创作人、电影演员、演唱会导演。</p><ul><li><a href="https://baike.baidu.com/item/%E6%9D%8E%E5%AE%87%E6%98%A5/80102" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/zh-hans/%E6%9D%8E%E5%AE%87%E6%98%A5" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-歌词"><a href="#3-歌词" class="headerlink" title="3 歌词"></a>3 歌词</h1><center>你是人间的四月天 (Live) - 李宇春词：林徽因曲：彭青编曲：郑楠演唱：李宇春音乐总监：刘卓乐团：V Band弦乐：靳海音®弦乐团混音：周天澈 混音团队我说你是人间的四月天笑响点亮了四面风轻灵在春的光艳中交舞着变你是四月早天里的云烟黄昏吹着风的软星子在无意中闪细雨点洒在花前那轻 那娉婷 你是鲜妍百花的冠冕 你戴着你是天真是庄严你是夜夜的月圆雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲你是四月早天里的云烟黄昏吹着风的软星子在无意中闪细雨点洒在花前那轻 那娉婷 你是鲜妍百花的冠冕 你戴着你是天真是庄严你是夜夜的月圆雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲雪化后那片鹅黄 你像新鲜初放芽的绿 你是柔嫩喜悦水光浮动着你梦浮动着你梦期待中白莲你是一树一树的花开是燕在梁间呢喃你是爱 是暖 是希望你是人间的四月天</center><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p>xxx</p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><blockquote><p>四月春风，余味隽永。女中音把林徽因的词演绎得柔美而鲜活，听者微醺。以情带声是本事，她的声线是上天赐予的礼物。</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/music/comment/1748566488?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 espionage</a></font></p></blockquote><hr><blockquote><p>人间四月芳菲尽，山寺桃花始盛开。人生悲欢有各自缘法，不要喟叹于眼前的春光消逝，心怀旷达，自然会在别处看见更旖旎的风光和更广阔的天地。</p><p>—— 引自 QQ音乐 陌离 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>示例-摘抄</title>
      <link href="/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/"/>
      <url>/2022/01/21/%E7%A4%BA%E4%BE%8B-%E6%91%98%E6%8A%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Life is painting a picture, not doing a sum. </p><p>—— <font color="blue">引自 网络</font></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> 摘抄 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《俗世奇人全本》书籍</title>
      <link href="/2022/01/21/%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E5%85%A8%E6%9C%AC%E3%80%8B%E4%B9%A6%E7%B1%8D/"/>
      <url>/2022/01/21/%E3%80%8A%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%E5%85%A8%E6%9C%AC%E3%80%8B%E4%B9%A6%E7%B1%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>　　天津卫本是水陆码头，居民五方杂处，性格迥然相异。然燕赵故地，血气刚烈；水咸土碱，风习强悍。近百余年来，举凡中华大灾大难，无不首当其冲，因生出各种怪异人物，既在显耀上层，更在市井民间。故而随想随记，始作于今；每人一篇，各不相关，冠之总名《俗世奇人》耳。</p><p>　　2019年，冯骥才先生又创作了18篇“俗世奇人”新作，现集成《俗世奇人全本》,呈现给读者完整的54篇“俗世奇人”系列，并收录冯骥才先生亲自手绘的58幅生动插图。</p><p>　　自上世纪九十年代至今，冯骥才先生先后创作了五十四篇“俗世奇人”系列短篇小说。其风格统一、传奇色彩浓郁、充满生活气息、人物形象活灵活现，书写了清末民初天津卫的地域风貌、风土人情、生活风尚，也展现出我国民间文化的精巧技艺与其中蕴藏的智慧。</p><h1 id="2-作者"><a href="#2-作者" class="headerlink" title="2 作者"></a>2 作者</h1><p>冯骥才，浙江宁波慈溪人，1942年2月9日生于天津，作家、画家。 早年在天津从事绘画工作，后专职文学创作和民间文化研究。</p><ul><li><a href="https://baike.baidu.com/item/%E5%86%AF%E9%AA%A5%E6%89%8D/630264?fr=aladdin" target="_blank" rel="noopener">百度百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%86%AF%E9%AA%A5%E6%89%8D" target="_blank" rel="noopener">维基百科</a></li></ul><h1 id="3-摘抄"><a href="#3-摘抄" class="headerlink" title="3 摘抄"></a>3 摘抄</h1><blockquote><p>　　　　酒的诀窍，还是在酒缸里。老板人奸，往酒里掺水。酒鬼们对眼睛里的世界一片模糊，对肚子里的酒却一清二楚，但谁也不肯把这层纸捅破，喝美了也就算了。老板缺德，必得报应，人近六十，没儿没女，八成要绝后。可一日，老板娘爱酸爱辣，居然有喜了老板给佛爷叩头时，动了良心，发誓今后老实做人，诚实卖酒，再不往酒里掺水掺假了。</p><p>　　　　就是这日，酒婆来到这家小酒馆，进门照例还是掏出包儿来，层层打开，花钱买酒，举手扬脖，把改假为真的“炮打灯”倒进肚里……真货就有真货色。这次酒婆还没出屋，人就转悠起来了。而且今儿她一路上摇晃得分外好看，上身左摇，下身右摇，愈转愈疾，初时赛风中的大鹏鸟，后来竟赛一个黑黑的大漩涡首善街的人看得惊奇，也看得纳闷，不等多想，酒婆已到路口，竟然没有酒醒，破天荒头一遭转悠到大马路上，下边的惨事就甭提了……</p><p>　　　　自此，酒婆在这条街上绝了迹。小酒馆里的人们却不时念叨起她来。说她才算真正够格的酒鬼。她喝酒不就菜，照例一饮而尽，不贪解馋，只求酒劲。在酒馆既不多事，也无闲话，交钱喝酒，喝完就走，从来没赊过账。真正的酒鬼，都是自得其乐，不搅和别人。</p><p>　　　　老板听着，忽然想到，酒婆出事那日，不正是自己不往酒里掺假的那天吗？原来祸根竟在自己身上他便别扭开了，心想这人间的道理真是说不清道不明了。到底骗人不对，还是诚实不对？不然为嘛几十年拿假酒骗人，却相安无事，都喝得挺美，可一旦认真起来反倒毁了？</p><p>　　—— <font color="green">引自 酒婆</font></p></blockquote><hr><blockquote><p>“你以为人家的名气全是虚的？那你是在骗自己。好好学本事吧！”</p><p>—— <font color="green">引自 刷子李</font></p></blockquote><hr><blockquote><p>杨巴的脑筋飞快地一转两转三转，主意来了！只见他脑袋撞地，“咚咚咚”叩得山响，一边叫道：“中堂大人息怒！小人不知道中堂大人不爱吃压碎的芝麻粒，惹恼了大人。大人不记小人过，饶了小人这次，今后一定痛改前非！”说完又是一阵响头。</p><hr><p>自此，杨巴在天津城威名大震。那“杨家茶汤”也被人们改称作“杨巴茶汤”了。杨七反倒渐渐埋没，无人知晓。杨巴对此毫不内疚，因为自己成名靠的是自己一张好嘴，李中堂并没有喝茶汤呀</p><p>—— <font color="green">引自 好嘴杨巴</font></p></blockquote><hr><blockquote><p>再看信封，照片竟卡在里边，他捏住照片抻出来一瞧，有点别扭，不大对劲，他再细瞧，竟傻了。那老美倒是站在他那字的前边照了相，可是字儿却挂倒了，全朝下了！</p><p>—— <font color="green">引自 青云楼主</font></p></blockquote><hr><blockquote><p>能人全都死在能耐上。</p><p>—— <font color="green">引自 大回</font></p></blockquote><hr><blockquote><p>他等着院里的人一个个走出来，却一直没等到她出来。他有点心急。</p><p>直到院静人空。一个守门的老人出来关大门时，木头上去问，刚刚那个演白娘子的人呢，怎么没见她出来。</p><p>守门人说：“最后出来的一个就是呀。”</p><p>木头很诧异，说：“那是个瘦高结实的汉子，穿青布袄。”</p><p>守门人说：“正是。”</p><p>木头更诧异，说：“怎么是个男的？我说的是白娘子——女的！”</p><p>守门人一听一怔，随后笑道：“我们高跷会从来不准女人入会。演女的，全是男扮女装。”</p><p>—— <font color="green">引自 跟会</font></p></blockquote><hr><blockquote><p>那你这就不明白了，人的腻歪都是不愁日子不愁钱——闲出来的。穷了犯愁，富了才会腻歪。</p><p>—— <font color="green">引自 腻歪</font></p></blockquote><h1 id="4-自评"><a href="#4-自评" class="headerlink" title="4 自评"></a>4 自评</h1><p>这本书第一次读还是在高中，转眼间，现在大四了。</p><p>本文文字精简利落，半文半百，读起来并不晦涩。冯骥才将津味融入字里行间，如句子中带“嘛”，或者将“胜过”说成“赛”；其次作者的语言中带有天津特有的幽默，读起来有如在听相声。</p><p>在俗世俗人俗事间向读者传递一些人生道理：如酒婆之死、刷子李中的<code>“你以为人家的名气全是虚的？那你是在骗自己。好好学本事吧！”</code>、大回中的<code>能人全都死在能耐上。</code>等等。</p><p>《刷子李》、《好嘴杨巴》、《泥人张》被选入义务教育课程标准实验教材语文书。目前还没有影视作品的拓展，感觉拍成情景式短剧可能不错，人人都是主角。下面评论中提到了做成卡牌类手游，想法新颖。</p><h1 id="5-他评"><a href="#5-他评" class="headerlink" title="5 他评"></a>5 他评</h1><blockquote><p>笔记体的天津的市井风俗与奇人群像。不知道为何会想到可以做一款卡牌类手游，就叫《大天津》</p><p>—— <font color="blue">引自 <a href="https://m.douban.com/book/comment/2185351037?dt_platform=com.douban.activity.qq_session&amp;dt_dapp=1" target="_blank" rel="noopener">豆瓣 RO</a></font></p></blockquote><hr><blockquote><center>《俗世奇人》| 人间烟火处见大雅</center><p>说书人于台上鲜活热闹，角儿们一个个穿着长袍马褂，举着酒盏、嬉笑着眉眼摇身登场，刹那间便驻足了一个时代。</p><p>《俗世奇人》一书以清末民初天津卫为背景，讲述了一十九个绝技与风骨并存的码头人物生平。卷轴缓缓展开，张大力丢下石锁大笑离去，北地豪气快哉纸上；苏七块挥起袖子接筋续骨，规矩不动然医道不改；刷子李、风筝魏、泥人张凭借精到手艺博得满堂彩，站在大街中央吃荤、亮堂；好嘴杨巴叩头佯罪，巧妙化解不识芝麻粒的李中堂的尴尬……想来世事洞明皆学问，人情练达即文章。</p><p>文如其人，文载其道；欲评其文，须先知其人。  </p><p>冯骥才有此二身份：一乃民间艺术工作者，曾专职民间文化研究；二乃“文革”后崛起的“伤痕文学运动”代表作家，以“文化反思小说”影响文坛。    </p><p> 这两重身份带来了两种视角，两种视角深刻地渗透在了《俗世奇人》的文学内容与语言艺术之中。     </p><p>大隐隐于市，大雅始于俗。此俗，乃民俗的俗。诗经首篇便是收录民歌的《国风》，俗世生活是一种别样的美，它蕴藏着原生态的力量与智慧。才子佳人素来为文人所道，读多了却尝到了种“为雅而雅”的拘谨刻意，于文学角度略显单薄。津门传说中的小人物则不同，无论是活出殡的刘道元，卖家产的蔡二少爷，还是干鸡鸣狗盗之事的小达子，看似上不得台面，却都因豁达质朴的性子与洋溢在灵魂中的坦诚智慧而鲜活灵动起来。“这些人空前绝后，却都是俗世里的俗人；这些事匪夷所思，却都是真人真事”，他们饱含着对生活的热爱和追求，嬉笑怒骂间定格为天津民俗画中一景，谱写了时代的大雅之章。     </p><p>诚觉世人尽可爱，也觉世事尽可戏。世态炎凉在冯骥才笔下无伤春悲秋之造作，反而展现出原生态的赤裸裸的生命热情。众人皆知底层小人物生活辛酸艰难，他偏独辟蹊径，以善意、豁达的笔笑世间形形色色——这世道不公却不公得有趣，奇闻轶事显妙趣横生，皮囊下的灵魂们热闹繁华，每个人都未曾受到奚落。当今文学基调多悲观，彷若于严肃中才能看到生命的厚重，殊不知我们正是需要一种洒脱可爱、人生如戏的智慧；也唯有在这轻快智慧的基调上，我们才能寻觅到追求本我的勇气与力量。     </p><p>窃以为经历文革动荡且怀有良知的作家可分两类，一类以沉重笔调记录黑色，一类跳脱出了时代，俯视中将昏暗看成了彩色。二者皆有思考与感悟，不论高下。于个人而言，我偏爱于后者——如王小波，如冯骥才。对时代与命运，他们是消极的，但他们选择了在消极的基调上热情快乐地活着，一如赤子。     </p><p>《俗世奇人》中有一篇写酒婆：酒婆举手仰脖，将山芋干造的假酒一饮而尽，出门走路时赛在地上画天书，然从未出事；一天酒老板良心发现，做了真酒，酒婆出门便被撞死了。关于这个故事，冯骥才站在酒老板的角度，于结尾写道：“到底骗人不对，还是诚实不对？”我却更愿站在酒婆的角度看，这样一来，冯和酒婆便有了共通之处：     </p><p>酒婆佯醉只求一时欢乐，辨不清骗人还是骗己；冯骥才以澄明轻快的心境回执过往不堪经历，又不知是否为“一晌贪欢”之举？快乐与痛苦本就分不清，既如此，那唯求它鲜活真实。       </p><p>民国小影，旧时一瞥。书籍以白描入笔，半文半白，三言两拍。语言结实、神气、不拘泥，形象俏皮，颇具古典传奇色彩，风土人情味儿浓厚。对民俗语言的精准驾驭体现出冯骥才的深厚功力，这与他对民间文化的热爱与研究紧密相关。     </p><p>后记里言：“倘若再写，算我无能。说不尽津门的爽利。”   </p><p>《俗世奇人》通篇不过百页，故事性与文学性兼具，单个拎出便是说书人口中的一段风月，具有极高的文学艺术价值。其如下酒小菜，初见惊艳，吃罢，回味悠长。</p><p>—— <font color="blue">引自 <a href="https://book.douban.com/review/8506941/?dt_dapp=1&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">豆瓣 ciel丫丫</a></font></p></blockquote><h1 id="6-拓展"><a href="#6-拓展" class="headerlink" title="6 拓展"></a>6 拓展</h1><p>是否被拍成影视作品？（无）</p>]]></content>
      
      
      <categories>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupyter使用</title>
      <link href="/2022/01/17/jupyter%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/01/17/jupyter%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-安装"><a href="#1-安装" class="headerlink" title="1 安装"></a>1 安装</h1><p>打开cmd，使用pip进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jupyterlab</span><br></pre></td></tr></table></figure><h1 id="2-使用"><a href="#2-使用" class="headerlink" title="2 使用"></a>2 使用</h1><p>cmd输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jupyter-lab</span><br></pre></td></tr></table></figure><p>在浏览器输入：<a href="http://localhost:8888/" target="_blank" rel="noopener">http://localhost:8888/</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib使用</title>
      <link href="/2022/01/17/matplotlib/"/>
      <url>/2022/01/17/matplotlib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1 基础知识"></a>1 基础知识</h1><p><a href="https://matplotlib.org/stable/api/_as_gen/matplotlib.lines.Line2D.html" target="_blank" rel="noopener">官方文档</a></p><ul><li>画板figure，画纸Sublpot画质，可多图绘画</li><li>画纸上最上方是标题title，用来给图形起名字</li><li>坐标轴Axis，横轴叫x坐标轴label，纵轴叫y坐标轴ylabel</li><li>图例Legend 代表图形里的内容</li><li>网格Grid，图形中的虚线，True显示网格</li><li>点 Markers：表示点的形状。</li></ul><h1 id="2-绘图步骤"><a href="#2-绘图步骤" class="headerlink" title="2 绘图步骤"></a>2 绘图步骤</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入matplotlib的pyplot模块</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#1 基础绘图</span></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点   x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#2 定义绘图属性</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">color：线条颜色，值r表示红色（red）</span></span><br><span class="line"><span class="string">marker：点的形状，值o表示点为圆圈标记（circle marker）</span></span><br><span class="line"><span class="string">linestyle：线条的形状，值dashed表示用虚线连接各点</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">'r'</span>,marker=<span class="string">'o'</span>,linestyle=<span class="string">'dashed'</span>)</span><br><span class="line"><span class="comment">#plt.plot(x, y, 'ro')</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">axis：坐标轴范围</span></span><br><span class="line"><span class="string">语法为axis[xmin, xmax, ymin, ymax]，</span></span><br><span class="line"><span class="string">也就是axis[x轴最小值, x轴最大值, y轴最小值, y轴最大值]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.axis([<span class="number">0</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">20</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3 给图片提阿甲注释和标题等</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第1步：定义x和y坐标轴上的点  x坐标轴上点的数值</span></span><br><span class="line">x=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="comment">#y坐标轴上点的数值</span></span><br><span class="line">y=[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第2步：使用plot绘制线条 第1个参数是x的坐标值，第2个参数是y的坐标值</span></span><br><span class="line">plt.plot(x,y)</span><br><span class="line"><span class="comment">#添加文本 #x轴文本</span></span><br><span class="line">plt.xlabel(<span class="string">'x坐标轴'</span>)</span><br><span class="line"><span class="comment">#y轴文本</span></span><br><span class="line">plt.ylabel(<span class="string">'y坐标轴'</span>)</span><br><span class="line"><span class="comment">#标题</span></span><br><span class="line">plt.title(<span class="string">'标题'</span>)</span><br><span class="line"><span class="comment">#添加注释 参数名xy：箭头注释中箭头所在位置，参数名xytext：注释文本所在位置，</span></span><br><span class="line"><span class="comment">#arrowprops在xy和xytext之间绘制箭头, shrink表示注释点与注释文本之间的图标距离</span></span><br><span class="line"></span><br><span class="line">plt.annotate(<span class="string">'我是注释'</span>, xy=(<span class="number">2</span>,<span class="number">5</span>), xytext=(<span class="number">2</span>, <span class="number">10</span>),</span><br><span class="line">            arrowprops=dict(facecolor=<span class="string">'black'</span>, shrink=<span class="number">0.01</span>),</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"><span class="comment">#第3步：显示图形</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h1 id="3-多图绘制"><a href="#3-多图绘制" class="headerlink" title="3 多图绘制"></a>3 多图绘制</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 柱形图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">12</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_title(<span class="string">'HeatLoadLight'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_title(<span class="string">'HeatLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">0</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_title(<span class="string">'CoolLoadLight'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">0</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_title(<span class="string">'CoolLoadHeavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_xlabel(<span class="string">'DateTime'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].set_ylabel(<span class="string">'LoadValue'</span>)</span><br><span class="line">axs[<span class="number">1</span>][<span class="number">1</span>].bar(range(<span class="number">12</span>), list, fc=<span class="string">'g'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 折线图</span></span><br><span class="line">fig, axs = plt.subplots(nrows=<span class="number">1</span>, ncols=<span class="number">2</span>, figsize=(<span class="number">20</span>, <span class="number">6</span>), dpi=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">0</span>].set_title(<span class="string">'xxx'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">0</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">0</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">0</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">axs[<span class="number">1</span>].set_title(<span class="string">"xxx"</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_xlabel(<span class="string">'Hour'</span>)</span><br><span class="line">axs[<span class="number">1</span>].set_ylabel(<span class="string">'Value'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_light, c=<span class="string">'red'</span>, label=<span class="string">'Light'</span>)</span><br><span class="line">axs[<span class="number">1</span>].plot(range(<span class="number">168</span>), Q_trans_heavy, c=<span class="string">'blue'</span>, label=<span class="string">'Heavy'</span>)</span><br><span class="line">axs[<span class="number">1</span>].legend(loc=<span class="string">'best'</span>)</span><br><span class="line"></span><br><span class="line">fig.autofmt_xdate()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python读取文件整理</title>
      <link href="/2022/01/17/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
      <url>/2022/01/17/%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-按行读取文本文件"><a href="#1-按行读取文本文件" class="headerlink" title="1 按行读取文本文件"></a>1 按行读取文本文件</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">'xxx'</span></span><br><span class="line"><span class="keyword">with</span> open(file_path) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win10安装Ubuntu子系统</title>
      <link href="/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2021/10/27/Win10%E5%AE%89%E8%A3%85Ubuntu%E5%AD%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><ol><li>在Windows10 Home版操作系统下安装Linux子系统(WSL2)，用于轻量需求，方便快捷。</li><li>在微软商店内安装Linux子系统会默认安装到C盘，根据官方文档指示可以安装到其他盘（未成功）。</li><li>自定义Linux子系统，安装到非C盘。</li></ol><h1 id="1-安装WSL2（未成功）"><a href="#1-安装WSL2（未成功）" class="headerlink" title="1 安装WSL2（未成功）"></a>1 安装WSL2（未成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual#downloading-distros" target="_blank" rel="noopener">微软WSL官方安装文档（英文）</a></li></ul></blockquote><h2 id="1-1-启用Windows子系统功能"><a href="#1-1-启用Windows子系统功能" class="headerlink" title="1.1 启用Windows子系统功能"></a>1.1 启用<code>Windows子系统</code>功能</h2><p>在安装子系统之前，启用<code>Windows子系统</code>功能，在Windows10的Powershell中输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Windows</span><span class="literal">-Subsystem</span><span class="literal">-Linux</span> /all /norestart</span><br></pre></td></tr></table></figure><h2 id="1-2-检查WSL2依赖是否满足"><a href="#1-2-检查WSL2依赖是否满足" class="headerlink" title="1.2 检查WSL2依赖是否满足"></a>1.2 检查WSL2依赖是否满足</h2><ul><li>For x64 systems: <strong>Version 1903</strong> or higher, with <strong>Build 18362</strong> or higher.</li><li>For ARM64 systems: <strong>Version 2004</strong> or higher, with <strong>Build 19041</strong> or higher.</li><li>Builds lower than 18362 do not support WSL 2. Use the <a href="https://www.microsoft.com/software-download/windows10" target="_blank" rel="noopener">Windows Update Assistant</a> to update your version of Windows.</li></ul><p>检查Windows版本：<code>win+R</code>，输入<code>winver</code></p><h2 id="1-3-启用虚拟机功能"><a href="#1-3-启用虚拟机功能" class="headerlink" title="1.3 启用虚拟机功能"></a>1.3 启用<code>虚拟机</code>功能</h2><p>管理员模式打开Powershell：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /<span class="built_in">enable-feature</span> /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><h2 id="1-4-下载Linux内核更新包"><a href="#1-4-下载Linux内核更新包" class="headerlink" title="1.4 下载Linux内核更新包"></a>1.4 下载Linux内核更新包</h2><ol><li>下载最新安装包：<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" target="_blank" rel="noopener">跳转</a></li><li>点击安装上述的安装包</li></ol><h2 id="1-5-将-WSL-2-设置为默认版本"><a href="#1-5-将-WSL-2-设置为默认版本" class="headerlink" title="1.5 将 WSL 2 设置为默认版本"></a>1.5 将 WSL 2 设置为默认版本</h2><p>在Powershell中运行：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl -<span class="literal">-set</span><span class="literal">-default</span><span class="literal">-version</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="1-6-安装Linux发行版"><a href="#1-6-安装Linux发行版" class="headerlink" title="1.6 安装Linux发行版"></a>1.6 安装Linux发行版</h2><h3 id="1-6-1-微软商店安装（只能安装在C盘）"><a href="#1-6-1-微软商店安装（只能安装在C盘）" class="headerlink" title="1.6.1 微软商店安装（只能安装在C盘）"></a>1.6.1 微软商店安装（只能安装在C盘）</h3><h3 id="1-6-2-命令行安装（可以安装在其他盘）"><a href="#1-6-2-命令行安装（可以安装在其他盘）" class="headerlink" title="1.6.2 命令行安装（可以安装在其他盘）"></a>1.6.2 命令行安装（可以安装在其他盘）</h3><ol><li><p>cmd下，在自定义目录中下载：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl.exe -L -o ubuntu-1604.appx https://aka.ms/wsl-ubuntu-2004</span><br></pre></td></tr></table></figure></li><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Add-AppxPackage .\app_name.appx</span><br></pre></td></tr></table></figure><font color="red">但是出错：</font><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PS D:\virtual_machine\WSL\Ubuntu&gt; Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">Add-AppxPackage : 部署失败，原因是 HRESULT: 0x80073CF3, 包无法进行更新、相关性或冲突验证。</span><br><span class="line">从  (Ubuntu2004.appx)  使用程序包 CanonicalGroupLimited.Ubuntu20.04onWindows_2004.2020.424.0_x64__79rhkp1fndgsc 中的目</span><br><span class="line">标卷 C: 执行的部署 Add 操作失败，错误为 0x80073CF3。有关诊断应用部署问题的帮助，请参阅 http://go.microsoft.com/fwlink/?</span><br><span class="line">LinkId=235160。</span><br><span class="line">注意: 有关其他信息，请在事件日志中查找 [ActivityId] a0925605-afc5-0005-a072-92a0c5afd701，或使用命令行 Get-AppPackageLo</span><br><span class="line">g -ActivityID a0925605-afc5-0005-a072-92a0c5afd701</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ Add-AppxPackage .\Ubuntu2004.appx</span><br><span class="line">+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span><br><span class="line">    + CategoryInfo          : WriteError: (D:\virtual_mach...Ubuntu2004.appx:String) [Add-AppxPackage], IOException</span><br><span class="line">    + FullyQualifiedErrorId : DeploymentError,Microsoft.Windows.Appx.PackageManager.Commands.AddAppxPackageCommand</span><br></pre></td></tr></table></figure><p><a href="https://answers.microsoft.com/zh-hans/windows/forum/all/add-appxpackage-0x80073cfd/1303974b-3ea0-4436-8cb5-20675b1338c3" target="_blank" rel="noopener">问题解决</a>，应该是home版的windows有关，暂时没有解决。</p></li></ol><hr><h1 id="2-安装自定义系统（成功）"><a href="#2-安装自定义系统（成功）" class="headerlink" title="2 安装自定义系统（成功）"></a>2 安装自定义系统（成功）</h1><blockquote><ul><li><a href="https://docs.microsoft.com/zh-cn/windows/wsl/use-custom-distro" target="_blank" rel="noopener">微软WSL官方安装文档（中文）</a></li></ul><p>安装后的问题：</p><ol><li><code>ping baidu.com</code>反应慢，<code>ping 8.8.8.8</code>还可以</li><li></li></ol></blockquote><h2 id="2-1-从容器中导出-tar"><a href="#2-1-从容器中导出-tar" class="headerlink" title="2.1 从容器中导出 tar"></a>2.1 从容器中导出 tar</h2><p>在Ubuntu虚拟机中进行操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line"><span class="comment"># https://www.runoob.com/docker/ubuntu-docker-install.html</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="comment"># 启动 Docker 服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="comment"># 下载指定系统镜像</span></span><br><span class="line">sudo docker pull registry.cn-hangzhou.aliyuncs.com/pwndocker/pwndocker-nocbtm:1.0</span><br><span class="line"><span class="comment"># 查看系统镜像</span></span><br><span class="line">sudo docker images</span><br><span class="line"><span class="comment"># 使用 ubuntu 镜像启动一个容器，参数为以命令行模式进入该容器</span></span><br><span class="line">sudo docker run -it ImageID /bin/bash</span><br><span class="line"><span class="comment"># 启动容器</span></span><br><span class="line">sudo docker start ContainerID</span><br><span class="line"><span class="comment"># 查看容器</span></span><br><span class="line">sudo docker ps -a</span><br><span class="line"><span class="comment"># 进入容器</span></span><br><span class="line">sudo docker attach ContainerID</span><br><span class="line"><span class="comment"># 使用 grep 和 awk 获取 CentOS 容器 ID</span></span><br><span class="line">dockerContainerID=$(sudo docker container ls -a | grep -i &#123;容器名称&#125; | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line"><span class="comment"># 根据容器 ID 导出 tar 文件：</span></span><br><span class="line">sudo docker <span class="built_in">export</span> <span class="variable">$dockerContainerID</span> &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><h2 id="2-2-将-tar-文件导入-WSL"><a href="#2-2-将-tar-文件导入-WSL" class="headerlink" title="2.2 将 tar 文件导入 WSL"></a>2.2 将 tar 文件导入 WSL</h2><p>在Windows的powershell中操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在选定目录下导入 tar 文件： wsl --import &lt;DistroName&gt; &lt;InstallLocation&gt; &lt;InstallTarFile&gt;</span></span><br><span class="line">wsl --import Ubuntu .\Ubuntu .\ubuntu.tar</span><br><span class="line"><span class="comment"># 检查已安装的子系统实例</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment"># 启动Ubuntu子系统</span></span><br><span class="line">wsl -d Ubuntu</span><br><span class="line"><span class="comment"># 停止Ubuntu子系统</span></span><br><span class="line">wsl --terminate Ubuntu <span class="comment">#停止</span></span><br><span class="line"><span class="comment"># 卸载Ubuntu子系统</span></span><br><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure><h1 id="3-安装Terminus终端"><a href="#3-安装Terminus终端" class="headerlink" title="3 安装Terminus终端"></a>3 安装Terminus终端</h1><ol><li><p><strong>Terminus</strong>下载安装，点击<code>设置</code>，修改<code>Profiles</code>，使得默认标签页打开wsl（Ubuntu）</p><p><img src="https://i.loli.net/2021/09/26/FewNKTpMnikjZ8b.png" width="700" height="400" alt="图片名称" align="center" id="33"></p></li><li><p>将Tabby(<strong>Terminus</strong>)添加到右键打开：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> ICON=D:\software\terminus\soft\Tabby\Tabby.exe <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> LABEL=Open terminal here</span><br><span class="line"><span class="built_in">set</span> COMMAND=D:\software\terminus\soft\Tabby\Tabby.exe \"%%V\" <span class="comment">#改成自己的</span></span><br><span class="line"><span class="built_in">set</span> SLUG=Terminal</span><br><span class="line"></span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f</span><br><span class="line">reg delete <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f</span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Directory\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\Drive\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /ve /t REG_SZ /d <span class="string">"%LABEL%"</span></span><br><span class="line"></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%"</span> /f /v <span class="string">"Icon"</span> /t REG_SZ /d <span class="string">"%ICON%"</span></span><br><span class="line">reg add <span class="string">"HKCU\Software\Classes\LibraryFolder\Background\shell\%SLUG%\command"</span> /f /ve /t REG_SZ /d <span class="string">"%COMMAND%"</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="4-配置oh-my-zsh"><a href="#4-配置oh-my-zsh" class="headerlink" title="4 配置oh-my-zsh"></a>4 配置oh-my-zsh</h1><p>zsh是一个Linux下强大的shell, 由于大多数Linux产品安装以及默认使用bash shell, 但是丝毫不影响极客们对zsh的热衷, 几乎每一款Linux产品都包含有zsh，通常可以用apt-get、urpmi或yum等包管理器进行安装。</p><p>zsh是bash的增强版，其实zsh和bash是两个不同的概念，zsh更加强大。</p><p>通常zsh配置起来非常麻烦，且相当的复杂，所以oh-my-zsh是为了简化zsh的配置而开发的，因此oh-my-zsh算是zsh的配置。</p><h2 id="4-1-安装zsh"><a href="#4-1-安装zsh" class="headerlink" title="4.1 安装zsh"></a>4.1 安装zsh</h2><ol><li><p>安装zsh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install zsh -y</span><br></pre></td></tr></table></figure></li><li><p>检查安装是否成功：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/bin/rbash</span><br><span class="line">/bin/dash</span><br><span class="line">/usr/bin/tmux</span><br><span class="line">/bin/zsh</span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure></li><li><p>zsh设为默认shell，新开标签页生效</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-oh-my-zsh安装与配置"><a href="#4-2-oh-my-zsh安装与配置" class="headerlink" title="4.2 oh-my-zsh安装与配置"></a>4.2 oh-my-zsh安装与配置</h2><blockquote><ul><li><a href="https://www.jianshu.com/p/ba782b57ae96" target="_blank" rel="noopener">Ubuntu | 安装oh-my-zsh</a></li></ul></blockquote><ol><li><p>安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>出现安装报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure><p><strong>解决</strong>：</p><ul><li><p>如果科学上网应该不会出现此情况；</p></li><li><p>如果不能科学上网可以这样做：</p><ul><li><p>打开网站: <code>https://www.ipaddress.com/</code>， 查询一下 <code>raw.githubusercontent.com</code>对应的IP 地址</p></li><li><p>在hosts文件中添加：<code>sudo vim /etc/hosts</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">199.232.28.133 raw.githubusercontent.com</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>主题使用robbyrussell，<code>vim ~/.zshrc</code></p><p><img src="https://i.loli.net/2021/09/26/CyOAqiXPmTRYFvz.png" width="700" height="300" alt="图片名称" align="center" id="34"></p></li><li><p>安装插件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改配置文件 </span></span><br><span class="line">vim ~/.zshrc</span><br><span class="line"><span class="comment">## 添加内容</span></span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting autojump extract)</span><br><span class="line"><span class="comment"># 解压插件，解压一个命令x全搞定</span></span><br><span class="line">extract <span class="comment"># 不用安装</span></span><br><span class="line"><span class="comment"># 安装autojump自动跳转插件</span></span><br><span class="line">apt install autojump</span><br><span class="line"><span class="comment"># 安装zsh-autosuggestions语法历史记录插件</span></span><br><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line"><span class="comment"># 安装zsh-syntax-highlighting语法高亮插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"><span class="comment"># 配置文件生效</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>物理机安装Ubuntu+Win10双系统</title>
      <link href="/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/"/>
      <url>/2021/10/27/%E5%AE%89%E8%A3%85Ubuntu%E7%89%A9%E7%90%86%E6%9C%BA(Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><ol><li>宿舍中闲置一台华硕电脑，为充分利用资源，装上Ubuntu系统(20.04)；</li><li>搭建开发环境，练习远程开发；</li><li>目前在局域网中即可满足需求，后续可能配置内网穿透。</li></ol><h1 id="1-制作启动U盘"><a href="#1-制作启动U盘" class="headerlink" title="1 制作启动U盘"></a>1 制作启动U盘</h1><h2 id="1-1-准备工具"><a href="#1-1-准备工具" class="headerlink" title="1.1 准备工具"></a>1.1 准备工具</h2><ul><li>4G以上的U盘</li><li>启动U盘制作工具：Ubuntu官方推荐的<a href="https://rufus.ie/zh/" target="_blank" rel="noopener">Rufus</a></li><li>Ubuntu系统镜像：<a href="https://ubuntu.com/" target="_blank" rel="noopener">官网</a>；（清华源下载速度快）</li></ul><h2 id="1-2-制作U盘"><a href="#1-2-制作U盘" class="headerlink" title="1.2 制作U盘"></a>1.2 制作U盘</h2><p>运行Rufus，一般情况下，选择插入的U盘<code>设备</code>，和刚下载的Ubuntu<code>镜像</code>，其它保持默认即可开始U盘制作，等待制作完成即可。</p><p><img src="https://i.loli.net/2021/10/16/X7ljH8y4WbkhcUG.png" width="500" height="600" alt="图片名称" align="center" id="20"></p><h1 id="2-磁盘分区"><a href="#2-磁盘分区" class="headerlink" title="2 磁盘分区"></a>2 磁盘分区</h1><ol><li>打开<code>控制面板</code>，找到<code>磁盘管理</code>；</li><li>如果整个卷都用于磁盘分区，则<code>删除卷</code>，否则需要<code>压缩卷</code>，出现下面的<code>未分配</code>即可使用：</li></ol><blockquote><ul><li>删除卷的话并不是抹除这部分空间，只是这部分空间会被系统保留出来，没有任何文件格式，对于这部分空间系统不会进行任何操作。它相当于一个无人区。</li><li>压缩卷就是把一个盘里面的空间抽出一部分变成一个没有任何文件格式和名称的盘，你接下来要对压缩出来的盘进行格式化操作，这样压缩出来的卷才可以用。</li></ul></blockquote><p><img src="https://i.loli.net/2021/10/16/Y21WZODa7ynNouL.png" width="900" height="300" alt="图片名称" align="center" id="21"></p><h1 id="3-安装Ubuntu"><a href="#3-安装Ubuntu" class="headerlink" title="3 安装Ubuntu"></a>3 安装Ubuntu</h1><h2 id="3-1-U盘启动"><a href="#3-1-U盘启动" class="headerlink" title="3.1 U盘启动"></a>3.1 U盘启动</h2><ol><li>将制作好的启动U盘插入到闲置电脑，重启(开机)按<code>F2</code>键进入BIOS界面；（进入BIOS需要按的键每个品牌的电脑不同）</li><li>在<code>Boot Priority</code>栏，将<code>UEFI:***</code>选项拖到开始，使其开机启动进入U盘；</li><li>保存修改退出即可，一会儿自动重启。</li></ol><h2 id="3-2-安装系统"><a href="#3-2-安装系统" class="headerlink" title="3.2 安装系统"></a>3.2 安装系统</h2><ol><li><p>从U盘启动后，在启动引导页选择<code>安装Ubuntu</code>进入Ubuntu；</p></li><li><p>一路默认选项，直到<code>Installation type</code>选择<code>Something else</code>，进入分区配置页面，找到<code>free space</code>，也就是在Windows系统中整好的磁盘分区；</p><p>|      分区      | 分区类型 | 分区位置 |     用于     | 挂载点 |      大小      |<br>| :——————: | :———: | :———: | :—————: | :——: | :——————: |<br>| boot(启动分区) |  主分区  |   起始   | ext4文件系统 | /boot  |     1G-2G      |<br>| swap(交换空间) | 逻辑分区 |   起始   |   交换分区   |   无   | 与物理内存一致 |<br>|       /        |  主分区  |   起始   | ext4文件系统 |   /    |   剩余的空间   |</p><blockquote><p>只有<code>/</code>是必须分区的，其它如果没有必要都不建议建议独立分区，按默认挂在root下就行。</p></blockquote></li><li><p>点击下一步完成后续安装即可正确安装Ubuntu。</p></li><li>拔出U盘，重启即可使用双系统。</li></ol><h1 id="4-配置Ubuntu"><a href="#4-配置Ubuntu" class="headerlink" title="4 配置Ubuntu"></a>4 配置Ubuntu</h1><h2 id="4-1-apt换源并安装必要软件"><a href="#4-1-apt换源并安装必要软件" class="headerlink" title="4.1 apt换源并安装必要软件"></a>4.1 apt换源并安装必要软件</h2><ol><li><p>点击<code>Settings</code> -&gt; <code>About</code> -&gt; <code>Software Updates</code>，选择合适的镜像；</p></li><li><p>安装必要软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vim</span><br><span class="line">sudo apt install net-tools</span><br><span class="line">sudo apt install make</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-科学上网"><a href="#4-2-科学上网" class="headerlink" title="* 4.2 科学上网"></a>* 4.2 科学上网</h2><h2 id="4-3-配置oh-my-zsh"><a href="#4-3-配置oh-my-zsh" class="headerlink" title="4.3 配置oh-my-zsh"></a>4.3 配置oh-my-zsh</h2><p>参考<code>Win10安装Ubuntu子系统</code></p><h2 id="4-4-xshell连接"><a href="#4-4-xshell连接" class="headerlink" title="4.4 xshell连接"></a>4.4 xshell连接</h2><ol><li><p>使用xshell连接，被拒绝<code>(port 22): Connection failed</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看服务器22端口是否启动</span></span><br><span class="line">lsof -i:22</span><br><span class="line"><span class="comment"># 若没启动</span></span><br><span class="line">sudo apt-get install openssh-server openssh-client </span><br><span class="line"><span class="comment"># 开启ssh</span></span><br><span class="line">service ssh start</span><br><span class="line">ssh localhost</span><br><span class="line"><span class="comment"># 此时检查22是否启动</span></span><br><span class="line">lsof -i:22</span><br></pre></td></tr></table></figure></li><li><p>笔记本设置合盖不休眠：修改Login Manager配置文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/logind.conf</span><br><span class="line"><span class="comment">### 修改 ###</span></span><br><span class="line"><span class="comment"># 找到其中一行：</span></span><br><span class="line"><span class="comment">#HandleLidSwitch=suspend</span></span><br><span class="line"><span class="comment"># 将其改为：</span></span><br><span class="line">HandleLidSwitch=ignore</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启服务：重启计算机即可</span></span><br><span class="line">sudo restart systemd-logind  </span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">service systemd-logind restart</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">sudo shutdown -r now</span><br></pre></td></tr></table></figure></li></ol><h1 id="4-5-查看硬件配置"><a href="#4-5-查看硬件配置" class="headerlink" title="4.5 查看硬件配置"></a>4.5 查看硬件配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统内核</span></span><br><span class="line">uname -a</span><br><span class="line"><span class="comment"># 查看CPU</span></span><br><span class="line">cat /proc/cpuinfo | grep model\ name</span><br><span class="line"><span class="comment"># 查看内存</span></span><br><span class="line">cat /proc/meminfo | grep MemTotal</span><br><span class="line"><span class="comment"># 查看显卡</span></span><br><span class="line">lspci | grep <span class="string">'VGA'</span></span><br><span class="line"><span class="comment"># 查看声卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Audio'</span></span><br><span class="line"><span class="comment"># 查看网卡</span></span><br><span class="line">lspci | grep -i <span class="string">'Network'</span></span><br><span class="line"><span class="comment"># 查看硬盘</span></span><br><span class="line">df -lh</span><br></pre></td></tr></table></figure><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/101307629" target="_blank" rel="noopener">装了5次Ubuntu，告诉你win10+Ubuntu双系统的正确打开方式</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++单元测试</title>
      <link href="/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2021/09/27/C++%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>在实习时，用到了C++中的单元测试，整理一下。分别在Windows和子系统（Ubuntu）中安装配置。</p><h1 id="1-安装googletest"><a href="#1-安装googletest" class="headerlink" title="1 安装googletest"></a>1 安装googletest</h1><h2 id="1-1-环境配置"><a href="#1-1-环境配置" class="headerlink" title="1.1 环境配置"></a>1.1 环境配置</h2><ol><li><p>下载gtest：<code>git clone https://github.com/google/googletest.git</code></p></li><li><p>安装cmake：</p><blockquote><p>CMake 是一个开源的跨平台的自动化构建系统，主要用于 C++ 的工程构建、测试以及打包等自动化操作。它能根据开发者编写的 CMakeLists.txt 规则文件，在不同的平台输出所需要的工程文件，然后开发者可以按照常见的构建方式使用生成的工程文件编译最终的程序。</p><p>CMake 是 Cross platform Make 的缩写，虽然名字中含有“make”，但是 CMake 和 Linux 上常见的 make 系统有所区别，是更上一层的构建系统。</p></blockquote><ul><li><strong>Windows</strong>：首先打开 CMake 官方网站，在<a href="https://cmake.org/download/" target="_blank" rel="noopener">下载页面</a>选择 Windows win64-x64 Installer 下载并安装</li><li><strong>Ubuntu</strong>：<code>apt-get install cmake</code></li></ul></li><li><p>windows配置clion编译环境：<a href="https://www.jianshu.com/p/1aa989808e15" target="_blank" rel="noopener">Window10上CLion极简配置教程</a></p></li></ol><h2 id="1-2-编译gtest库"><a href="#1-2-编译gtest库" class="headerlink" title="1.2 编译gtest库"></a>1.2 编译gtest库</h2><ol><li><p>使用clion打开<code>googletest</code>代码目录，选择<code>gtest</code>项目编译生成：</p><p><img src="https://i.loli.net/2021/10/06/quPZfVpBdWGCriI.png" width="800" height="300" alt="图片名称" align="center" id="29"></p></li><li><p>显示下面的信息表明编译成功（显示<code>Error running</code>，不用管他），生成的<code>libgtestd.a</code>即为gtest的库文件，项目中引用这个库文件就能使用gtest了。</p><p><img src="https://i.loli.net/2021/10/06/c2JyQ41X3nImkTK.png" width="900" height="200" alt="图片名称" align="center" id="30"></p></li></ol><h1 id="2-使用googletest"><a href="#2-使用googletest" class="headerlink" title="2 使用googletest"></a>2 使用googletest</h1><h2 id="2-1-引入库"><a href="#2-1-引入库" class="headerlink" title="2.1 引入库"></a>2.1 引入库</h2><p>新建测试项目<code>cliontest</code>，将libgtestd.a文件拷贝到该代码根路径的lib路径下，在CMakeList.txt中加上以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加上库文件的路径，注意相对路径</span></span><br><span class="line"><span class="keyword">link_directories</span>(lib/)</span><br><span class="line"><span class="comment"># 添加可执行文件</span></span><br><span class="line"><span class="keyword">add_executable</span>(cliontest main.cpp)</span><br><span class="line"><span class="comment"># 链接gtest库文件</span></span><br><span class="line"><span class="keyword">target_link_libraries</span>(cliontest libgtestd.a)</span><br></pre></td></tr></table></figure><h2 id="2-2-引入头文件"><a href="#2-2-引入头文件" class="headerlink" title="2.2 引入头文件"></a>2.2 引入头文件</h2><p>拷贝<code>googletest/include</code>下的<code>gtest</code>目录到项目下的<code>include</code>目录下，然后在CMakeList.txt中添加上对应的调用：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">include_directories</span>(</span><br><span class="line">    <span class="keyword">include</span>/</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>然后在代码中添加头文件gtest/gtest.h就可以使用了。</p><h2 id="2-3-测试"><a href="#2-3-测试" class="headerlink" title="2.3 测试"></a>2.3 测试</h2><p>修改<code>main.cpp</code>并运行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gtest/gtest.h"</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, zero) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">0</span>, add(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, positive_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">3</span>, add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">TEST(add, negative_number) &#123;</span><br><span class="line">    EXPECT_EQ(<span class="number">-3</span>, add(<span class="number">-1</span>, <span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ::testing::InitGoogleTest();</span><br><span class="line">    <span class="keyword">return</span> RUN_ALL_TESTS();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-gtest的使用教程"><a href="#3-gtest的使用教程" class="headerlink" title="3 gtest的使用教程"></a>3 gtest的使用教程</h1><p>参考文档：<a href="https://github.com/google/googletest/blob/master/googletest/docs/primer.md" target="_blank" rel="noopener">Googletest Primer</a>，google官方出品。</p><p><a href="https://www.dyxmq.cn/program/usage-of-googletest.html" target="_blank" rel="noopener">https://www.dyxmq.cn/program/usage-of-googletest.html</a></p><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://meishizaolunzi.com/cmake-an-zhuang-zhi-nan/" target="_blank" rel="noopener">CMake 安装指南</a></li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++项目的全量覆盖率和增量覆盖率</title>
      <link href="/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/"/>
      <url>/2021/09/27/C++%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87%E5%92%8C%E5%A2%9E%E9%87%8F%E8%A6%86%E7%9B%96%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>2021.09.26华为实习任务复现，要求实现多次SR合并后的增量覆盖率。</p><h1 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###强制回滚到某版本</span></span><br><span class="line">git reset --hard 36409abd22dcc9f9252152b34fa9e929f7c883ec</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###解决：https://stackoverflow.com/questions/3411048/unexpected-operator-in-shell-programming/3411061</span></span><br><span class="line">./srCover.sh: 17: [: h: unexpected operator </span><br><span class="line">./srCover.sh: 21: [: h: unexpected operator</span><br></pre></td></tr></table></figure><h1 id="1-思路"><a href="#1-思路" class="headerlink" title="1 思路"></a>1 思路</h1><p>强行cherry-pick，可能存在冲突的情况：</p><ol><li>不冲突，是准确的</li><li>冲突，使用指定版本的代码解决冲突，是不准确的</li></ol><h1 id="2-cherry-pick"><a href="#2-cherry-pick" class="headerlink" title="2 cherry-pick"></a>2 cherry-pick</h1><h1 id="3-生成增量覆盖率报告"><a href="#3-生成增量覆盖率报告" class="headerlink" title="3 生成增量覆盖率报告"></a>3 生成增量覆盖率报告</h1><h2 id="3-1-生成差异文件"><a href="#3-1-生成差异文件" class="headerlink" title="3.1 生成差异文件"></a>3.1 生成差异文件</h2><p>v1版本：dir1目录，</p><p>v2版本：dir2目录，</p><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># diff -r  -N -x ".git" -x "*.gcov" -u &lt;old_src_path&gt; &lt;new_src_path&gt; &gt; diff.txt</span></span><br><span class="line">diff -r  -N -x <span class="string">".git"</span> -x <span class="string">"*.gc*"</span> -x <span class="string">"result"</span> -x <span class="string">"hello"</span> -x <span class="string">"hello.info"</span> -u dir1 dir2 &gt; diff.txt</span><br></pre></td></tr></table></figure><h2 id="3-2-生成v2版本的全量覆盖率报告"><a href="#3-2-生成v2版本的全量覆盖率报告" class="headerlink" title="3.2 生成v2版本的全量覆盖率报告"></a>3.2 生成v2版本的全量覆盖率报告</h2><blockquote><ul><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/6943512.html" target="_blank" rel="noopener">代码覆盖工具(gcov、lcov)的使用</a></li></ul><p>gcov是Linux下GCC自带的一个C/C++代码覆盖率分析工具,因此只要安装了gcc，就不需要再次安装了。</p><p>gcov能够生成代码覆盖信息，但是不够直观，因此需要借助lcov直观展示覆盖率，主要特点有：</p><ul><li>基于Html输出，并生成一棵完整的HTML树</li><li>输出包括概述、覆盖率百分比、图表，能快速浏览覆盖率数据</li><li>支持大项目，提供三个级别的视图：目录视图、文件视图、源码视图</li></ul></blockquote><ol><li><p>安装<a href="http://ltp.sourceforge.net/coverage/lcov.php" target="_blank" rel="noopener">lcov</a>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/linux-test-project/lcov.git</span><br><span class="line"><span class="comment"># 进入项目目录</span></span><br><span class="line"><span class="built_in">cd</span> lcov</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>以hello.c为例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is zero\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is one\n"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"num is NAN\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译时候加两个参数：-fprofile-arcs -ftest-coverage, 此时会生成：hello.gcno</span></span><br><span class="line">gcc -fprofile-arcs -ftest-coverage hello.c -o hello</span><br><span class="line"><span class="comment"># 此时会生成： hello.gcda, hello.gcno和hello.gcda是gcov引用的关键文件)</span></span><br><span class="line">./hello</span><br><span class="line"><span class="comment"># gcov根据上面的文件生成了：hello.c.gcov,就是代码覆盖信息，但看起来并不直观</span></span><br><span class="line">gcov hello.c</span><br><span class="line"><span class="comment">### 内容如下：</span></span><br><span class="line">➜  dir2 cat hello.c.gcov </span><br><span class="line">        -:    0:Source:hello.c</span><br><span class="line">        -:    0:Graph:hello.gcno</span><br><span class="line">        -:    0:Data:hello.gcda</span><br><span class="line">        -:    0:Runs:1</span><br><span class="line">        -:    0:Programs:1</span><br><span class="line">        -:    1:<span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line">        -:    2:</span><br><span class="line">        1:    3:int main()</span><br><span class="line">        -:    4:&#123;</span><br><span class="line">        1:    5:        int num = 1;</span><br><span class="line">        1:    6:        <span class="keyword">if</span> (num == 0) &#123;</span><br><span class="line">    <span class="comment">#####:    7:                printf("num is zero\n");</span></span><br><span class="line">        1:    8:        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (num == 1) &#123;</span><br><span class="line">        1:    9:                <span class="built_in">printf</span>(<span class="string">"num is one\n"</span>);</span><br><span class="line">        -:   10:        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">#####:   11:                printf("num is NAN\n");</span></span><br><span class="line">        -:   12:        &#125;</span><br><span class="line">        1:   13:        <span class="built_in">printf</span>(<span class="string">"hello world\n"</span>);</span><br><span class="line">        1:   14:        <span class="built_in">return</span> 0;</span><br><span class="line">        -:   15:&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 借助lcov对hello.c.gcov进行改造，可以看见生成了hello.info</span></span><br><span class="line">lcov -d . -t <span class="string">'Hello test'</span> -o <span class="string">'hello.info'</span> -b . -c</span><br><span class="line"><span class="comment"># 生成了result文件夹，借助web服务器，我们就可以很直观的看到结果了</span></span><br><span class="line">genhtml -o result hello.info</span><br></pre></td></tr></table></figure></li><li><p>查看生成的全量覆盖率报告，用浏览器打开result文件夹内的index.html：</p><p><img src="https://i.loli.net/2021/09/26/aAG4BMTl2mjrIUZ.png" width="1000" height="250" alt="图片名称" align="center" id="31"></p></li></ol><h2 id="3-3-使用addlcov生成增量代码覆盖率文件"><a href="#3-3-使用addlcov生成增量代码覆盖率文件" class="headerlink" title="3.3 使用addlcov生成增量代码覆盖率文件"></a>3.3 使用addlcov生成增量代码覆盖率文件</h2><p><code>addlcov --diff &lt;full_cov_file&gt; diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt;</code></p><ul><li><full_cov_file>为之前统计的v2版本上的全量覆盖率；</full_cov_file></li><li><add_cov_file>为输出的增量覆盖率info文件；</add_cov_file></li><li><depth>是要截取的代码深度；</depth></li><li><new_src_path>是v2版本源码</new_src_path></li></ul><p>执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addlcov --diff  diff.txt -o &lt;add_cov_file&gt; --strip &lt;depth&gt; --path &lt;new_src_path&gt;</span><br></pre></td></tr></table></figure><p>报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  Test1 ./addlcov --diff hello.info diff.txt -o addhello.info  --strip 5 --path ./dir2</span><br><span class="line">Reading tracefile hello.info</span><br><span class="line">Reading diff diff.txt</span><br><span class="line">Removing /mnt/e/Code/cpp/Test1/dir1/hello.c</span><br><span class="line">1 entry converted, 0 entries left unchanged.</span><br><span class="line">Writing data to addhello.info</span><br><span class="line">Summary coverage rate:</span><br><span class="line">  lines......: no data found</span><br><span class="line">  <span class="built_in">functions</span>..: no data found</span><br><span class="line">  branches...: no data found</span><br><span class="line">  </span><br><span class="line"><span class="comment">### bug addlcov脚本无法匹配</span></span><br><span class="line"><span class="comment"># Try to match diff filename with filename</span></span><br><span class="line"><span class="comment"># if ($filename =~ /^\Q$diff_path$sep$_\E$/) 修改为下面语句，</span></span><br><span class="line"><span class="keyword">if</span> (1 == 1)</span><br><span class="line"><span class="comment">### 单文件出现上述问题，多文件无问题</span></span><br></pre></td></tr></table></figure><p>python中执行shell命令：<a href="https://blog.51cto.com/zhou123/1284377" target="_blank" rel="noopener">https://blog.51cto.com/zhou123/1284377</a></p>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo迁移到新电脑</title>
      <link href="/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/"/>
      <url>/2021/09/21/Hexo%E8%BF%81%E7%A7%BB%E5%88%B0%E6%96%B0%E7%94%B5%E8%84%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="0-情景导入"><a href="#0-情景导入" class="headerlink" title="0 情景导入"></a>0 情景导入</h1><p>换了一台电脑，将旧电脑的hexo博客写作环境迁移到新电脑上。</p><h1 id="1-Git下载及配置"><a href="#1-Git下载及配置" class="headerlink" title="1 Git下载及配置"></a>1 Git下载及配置</h1><ol><li>从官网Git下载git并安装，下面设置无密push+pull；</li><li>打开git bash，在用户主目录(其他目录也可)下运行：<code>ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code> 把其中的邮件地址换成自己的邮件地址，然后一路回车；</li><li>最后完成后，会在用户主目录下生成.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH key密钥对，id_rsa是私钥，千万不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人；</li><li>登陆GitHub，打开「Settings」-&gt;「SSH and GPG keys」，然后点击「new SSH key」，填上任意Title，在Key文本框里粘贴公钥id_rsa.pub文件的内容（千万不要粘贴成私钥了！），最后点击「Add SSH Key」，你就应该看到已经添加的Key。 </li><li>注意：不要在git版本库中运行ssh，然后又将它提交，这样就把密码泄露出去了</li></ol><h1 id="2-安装Node-js"><a href="#2-安装Node-js" class="headerlink" title="2 安装Node.js"></a>2 安装Node.js</h1><ol><li>Hexo基于Node.js，Node.js下载地址：<a href="https://link.zhihu.com/?target=https%3A//nodejs.org/en/download/" target="_blank" rel="noopener">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 <code>node -v</code>；</li><li>检测npm是否安装成功，在命令行中输入<code>npm -v</code></li></ol><h1 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3 安装Hexo"></a>3 安装Hexo</h1><p>新建文件夹，在此文件夹内使用npm命令全局安装Hexo，输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>输入<code>hexo -v</code>检查是否安装成功。</p><blockquote><p>npm加速：</p><ol><li><p>装cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><ol><li><p>使用cnpm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;    cnpm install xxx</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>&gt;</p><blockquote><p>参考：<a href="https://cloud.tencent.com/developer/article/1372949" target="_blank" rel="noopener">npm使用国内镜像加速的几种方法</a></p></blockquote><h1 id="4-复制原电脑上的数据"><a href="#4-复制原电脑上的数据" class="headerlink" title="4 复制原电脑上的数据"></a>4 复制原电脑上的数据</h1><h2 id="4-1-需要复制的"><a href="#4-1-需要复制的" class="headerlink" title="4.1 需要复制的"></a>4.1 需要复制的</h2><ul><li>_config.yml：站点配置</li><li>package.json：说明使用那些包</li><li>scaffolds：文章的模板</li><li>source：自己写的博客文件</li><li>themes：主题</li><li>.gitignore：限定在提交的时候哪些文件可以忽略</li></ul><h2 id="4-2-需要删除的"><a href="#4-2-需要删除的" class="headerlink" title="4.2 需要删除的"></a>4.2 需要删除的</h2><ul><li>.git：无论是在站点根目录下，还是主题目录下的.git文件，都可以删掉。</li><li>node_modules：在用<code>npm install</code>会重新生成</li><li>public：<code>hexo g</code>会重新生成</li><li>.deploy_git：在使用hexo d时也会重新生成</li><li>db.json文件</li></ul><p>其实上面这些文件也就是.gitignore文件里面记载的可以忽略的内容。</p><h1 id="5-npm-install"><a href="#5-npm-install" class="headerlink" title="5 npm install"></a>5 npm install</h1><p>在git bash中切换目录到新拷贝的文件夹里，使用<code>npm install</code> 命令，进行模块安装。很明显我们这里<font color="red">没用hexo init初始化</font>，因为有的文件我们已经拷贝生成过来了，所以不必用hexo init去整体初始化，如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重，不要用hexo init。</p><h1 id="6-安装其他必要组件"><a href="#6-安装其他必要组件" class="headerlink" title="6 安装其他必要组件"></a>6 安装其他必要组件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save <span class="comment"># 为了使用hexo d来部署到git上 </span></span><br><span class="line">npm install hexo-generator-feed --save <span class="comment"># 为了建立RSS订阅</span></span><br><span class="line">npm install hexo-generator-sitemap --save <span class="comment"># 为了建立站点地图</span></span><br></pre></td></tr></table></figure><p>插件安装后，有的需要对配置文件_config.yml进行配置，具体怎么配置，可以参考上面插件在github主页上的具体说明</p><h1 id="7-验证"><a href="#7-验证" class="headerlink" title="7 验证"></a>7 验证</h1><p>首先本地执行，在博客根目录下执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，查看是否转移成功。</p><p>接下来验证部署，执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>在线访问出错，无法访问。开始排查：</p><ol><li><p>.deploy_git文件夹内的文件大小均为0kb，也就是生成了一些空文件；</p></li><li><font color="pink">public文件夹内的文件大小均为0kb，但是本地可以正常访问，不知道为啥</font></li><li><p>其实在执行<code>hexo s</code>时，后台存在报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(Use `node --trace-warnings ...` to show <span class="built_in">where</span> the warning was created)</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'lineno'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'column'</span> of module exports inside circular dependency</span><br><span class="line">(node:23336) Warning: Accessing non-existent property <span class="string">'filename'</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>解决方法：Node版本太高，切换一个低版本Node可以（我这里是14.17.6切换成12.5.0就没有这个问题了）</p></li><li><p>问题已解决，可以在线访问博客了。</p></li></ol><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">GitHub+Hexo 搭建个人网站详细教程</a></li><li><a href="https://www.zhihu.com/question/21193762" target="_blank" rel="noopener">使用hexo，如果换了电脑怎么更新博客？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python中的全局变量——list</title>
      <link href="/2021/06/27/list%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
      <url>/2021/06/27/list%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-List"><a href="#1-List" class="headerlink" title="1 List"></a>1 List</h1><p><strong>python中list作为全局变量无需global声明的原因</strong>：</p><blockquote><p><a href="https://www.cnblogs.com/yym2013/p/5915980.html" target="_blank" rel="noopener">https://www.cnblogs.com/yym2013/p/5915980.html</a></p></blockquote><p>python中list变量作为全局变量时，在函数中可以直接修改。</p><p>而普通变量则需要先在函数中global声明，否则会报错。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　<span class="keyword">global</span> a</span><br><span class="line">　　a = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">　　b[<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>在函数中直接修改list则是可以的。</p><p>原因是：</p><p>普通变量如果在函数中赋值</p><p><code>a = 2</code></p><p>会有歧义。因为它既可以是表示引用全局变量a，也可以是创建一个新的局部变量，所以在python中，默认它的行为是创建局部变量，除非显式声明global。</p><p>而对列表list变量进行赋值</p><p><code>b[0] = 2</code></p><p>则不会有歧义。它是“明确的”，因为如果把b当作是局部变量的话，它会报KeyError，所以它只能是引用全局的b,故不需要多此一举显式声明global。</p>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAC地址泛洪与欺骗</title>
      <link href="/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/"/>
      <url>/2021/03/04/MAC%E5%9C%B0%E5%9D%80%E6%AC%BA%E9%AA%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p>　　MAC地址欺骗是数据链路层攻击，它是利用<strong>交换机端口学习的漏洞</strong>，通过客户端向交换机发送欺骗报文、攻击交换机的CAM表的方式，使交换机CAM表的记录与真实的主机对应MAC地址不一致，从而使交换机将报文错误转发给攻击者。</p><p>　　MAC地址泛洪攻击，每台交换机的CAM表都有最大记录条数，当交换机端口学习得到的记录大于交换机CAM表条数上限时，交换机收到一个网络帧，只要其目标主机的MAC地址不存在于该交换机CAM表中，那么该帧会以广播的方式发向交换机的每一个端口，此时的交换机就相当于一个集线器HUB，我们就可以监听网络中的所有通讯报文。</p><p>　　与ARP攻击不同：MAC地址欺骗改变的是端口/MAC地址映射关系，ARP攻击改变的是IP/MAC地址映射关系。</p><p>　　MAC地址泛洪攻击针对路由器不行，原因是路由器仅仅转发特定地址的数据包，不传送不支持路由协议的数据包传送和未知目标网络数据包的传送，从而可以防止广播风暴。参考：<a href="https://www.cnblogs.com/Lynn-Zhang/articles/5754336.html" target="_blank" rel="noopener">交换机和路由器的区别在哪里 一针见血通俗解答</a></p><p>　　实验网络拓扑如下：</p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-03-05_11-19-37.jpg" width="700" height="400" alt="图片名称" align="center" id="32"></p><h2 id="1-2-知识储备"><a href="#1-2-知识储备" class="headerlink" title="1.2 知识储备"></a>1.2 知识储备</h2><ul><li><strong>MAC地址</strong>：它是一个用来确认网络设备位置的位址。在<a href="https://baike.baidu.com/item/OSI模型" target="_blank" rel="noopener">OSI模型</a>中，第三层网络层负责<a href="https://baike.baidu.com/item/IP地址" target="_blank" rel="noopener">IP地址</a>，第二层数据链路层则负责MAC位址。MAC地址用于在网络中唯一标示一个<a href="https://baike.baidu.com/item/网卡" target="_blank" rel="noopener">网卡</a>，一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。由网络设备制造商生产时烧录在网卡(Network lnterface Card)的<a href="https://baike.baidu.com/item/EPROM/1690813" target="_blank" rel="noopener">EPROM</a>(一种闪存芯片，通常可以通过程序擦写)。<a href="https://baike.baidu.com/item/IP地址/150859" target="_blank" rel="noopener">IP地址</a>与MAC地址在计算机里都是以<a href="https://baike.baidu.com/item/二进制/361457" target="_blank" rel="noopener">二进制</a>表示的，IP地址是32位的，而MAC地址则是48位的，通常表示为12个16进制数，如：00-16-EA-AE-3C-40就是一个MAC地址。</li><li><strong>交换机</strong>：主要功能是在局域网内的主机之间转发数据帧，工作核心是<strong>端口/MAC地址映射表</strong>，这张表里记录了交换机每个端口同与之相连的主机MAC地址之间的对应关系。交换机接收从主机上传来的比特流之后，要先将其缓存成数据帧，然后通过分析帧头中的MAC地址，交换机就可以判断出数据的发送方和接收方，在映射表里查找与数据帧的目的MAC地址相对应的端口。若找到则发给目的主机；若找不到则以广播的方式将这个数据帧向除了源端口以外的其它所有端口转发，从而将数据发送给了目的主机，并记录端口与MAC地址的对应关系。</li></ul><h1 id="2-实战"><a href="#2-实战" class="headerlink" title="2 实战"></a>2 实战</h1><h2 id="2-1-MAC地址欺骗"><a href="#2-1-MAC地址欺骗" class="headerlink" title="2.1 MAC地址欺骗"></a>2.1 MAC地址欺骗</h2><ol><li><strong>准备</strong>：没有交换机物理设备，vmware中桥接模式中有虚拟交换机(但是无法登陆后台)，所以只能利用路由器测试(也无法进入后台)，只能查看现象了。</li><li>此处未进行实践，可参考：<a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li></ol><h2 id="2-2-MAC地址泛洪攻击"><a href="#2-2-MAC地址泛洪攻击" class="headerlink" title="2.2 MAC地址泛洪攻击"></a>2.2 MAC地址泛洪攻击</h2><ol><li>以<code>kali</code>为攻击机，使用<code>macof</code>命令向网络中发送大量网络不存在的源mac地址，堵塞交换机(路由器)的CAM表；</li><li>攻击前，<code>Win物理机</code>可以ping通kali、node01、node02、node03；</li><li>攻击后，按道理此时的路由器中的CAM表中存在大量陌生MAC地址记录，但是目前无法查看；现象为：请求超时或间断ping通，但可以ping通外网及局域网内其它主机。</li></ol><h1 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3 存在问题"></a>3 存在问题</h1><ul><li>没有物理交换机，虚拟交换机无法登陆后台</li><li>用路由器测试，但是无法登录后台查看CAM表，可参考：<a href="https://cloud.tencent.com/developer/article/1482014" target="_blank" rel="noopener">小米路由器开启SSH</a></li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://baike.baidu.com/item/MAC%E5%9C%B0%E5%9D%80/1254181?fr=aladdin" target="_blank" rel="noopener">百度百科-MAC地址</a></li><li><a href="https://blog.csdn.net/weixin_34234829/article/details/85088965?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&amp;dist_request_id=&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs" target="_blank" rel="noopener">MAC泛洪<em>*</em>的实施与防御</a></li><li><a href="https://blog.csdn.net/redwand/article/details/105388491?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-0&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">MAC地址欺骗与MAC地址泛洪攻击（eNSP环境演示）</a></li><li><a href="https://www.youtube.com/watch?v=FiDq8g0gBsI" target="_blank" rel="noopener">亁颐堂现任明教教主CCNA Security 2019 7 第三天 2 MAC泛洪MAC欺骗</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARP攻击</title>
      <link href="/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/"/>
      <url>/2021/02/17/ARP%E6%AC%BA%E9%AA%97-%E6%96%AD%E7%BD%91%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="1-理论"><a href="#1-理论" class="headerlink" title="1 理论"></a>1 理论</h1><h2 id="1-1-原理"><a href="#1-1-原理" class="headerlink" title="1.1 原理"></a>1.1 原理</h2><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-18_14-20-42.jpg" width="600" height="400" alt="图片名称" align="center" id="25"></p><p>　　ARP攻击主要是通过伪造IP地址和MAC地址进行欺骗。假设A、B、C位于<code>同一局域网</code>内，A是PC主机，B是攻击主机，C是路由器。攻击过程如下：</p><ol><li>A将包含目标IP地址(10.0.1.1)信息的ARP Request，广播到网络中的所有主机，源主机A的IP地址和MAC地址都包括在ARP请求中；</li><li>C确定ARP请求中的IP地址与自己的IP地址匹配，则将主机A的IP地址和MAC地址<a href="https://baike.baidu.com/item/映射" target="_blank" rel="noopener">映射</a>添加到本地ARP缓存中；并将包含其MAC地址的ARP回复消息直接发送回主机A；</li><li>当主机A收到从C发来的ARP回复消息时，会用C的IP和MAC地址映射更新ARP缓存；</li><li>攻击主机B向A发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为C的IP地址，而MAC地址为B的MAC地址；</li><li>A在接收到这个应答包后，会刷新它的ARP缓存，这样在A的ARP缓存表中就出现了IP-C与MAC-B的映射；</li><li>攻击主机B向C发送伪造的ARP应答包，在这个伪造的应答包中，IP地址为A的IP地址，而MAC地址为B的MAC地址；</li><li>C在接收到这个应答包后，会刷新它的ARP缓存，这样在C的ARP缓存表中就出现了IP-A与MAC-B的映射。</li></ol><p>　　这样一来，A与C之间的流量交换都会经过B，可以进行<code>监听、篡改信息、断网攻击</code>。</p><h2 id="1-2-知识储备"><a href="#1-2-知识储备" class="headerlink" title="1.2 知识储备"></a>1.2 知识储备</h2><ul><li><p><strong>网关</strong>：网关(Gateway)在网络层以上实现网络互连。由于历史的原因，许多有关TCP/IP的文献曾经把网络层使用的路由器称为网关，在今天很多局域网采用路由来接入网络，因此通常指的网关就是路由器的IP！</p></li><li><p><strong>Bridged(桥接模式)</strong>：将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。其网络结构如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/v2-0e29e8f13495c269f3fdc723aa2255c2_r.jpg" width="800" height="600" alt="图片名称" align="center" id="26"></p></li></ul><h1 id="2-实战"><a href="#2-实战" class="headerlink" title="2 实战"></a>2 实战</h1><h2 id="2-1-断网攻击"><a href="#2-1-断网攻击" class="headerlink" title="2.1 断网攻击"></a>2.1 断网攻击</h2><ol><li><p><strong>准备</strong>：<code>kali</code>虚拟机，设置桥接模式，否则断网无效；</p></li><li><p><strong>查看自己的网卡信息</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-40-47.jpg" width="600" height="300" alt="图片名称" align="center" id="27"></p></li><li><p><strong>找到目标IP</strong>：<code>nmap</code>扫描内网(命令<code>nmap -sP 192.168.1.*</code>)或使用安卓端的<code>Net Analyzer</code>进行<code>LAN Scan</code>；</p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/Snipaste_2021-02-17_22-04-15.jpg" width="600" height="300" alt="图片名称" align="center" id="28"></p></li><li><p><strong>arpspoof进行攻击</strong>：执行下面命令后目的主机无法上网；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i 自己网卡信息 -t 目标IP -r 网关</span><br><span class="line">例：arpspoof -i eth0  -t  192.168.1.7 -r 192.168.1.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-窃听"><a href="#2-2-窃听" class="headerlink" title="2.2 窃听"></a>2.2 窃听</h2><ol><li><strong>开启IP转发</strong>：<code>echo 1 &gt;/proc/sys/net/ipv4/ip_forward</code></li><li><strong>arp攻击</strong>：<code>arpspoof -i eth0 -t targetIP -r gateway（具体参考上面）</code></li><li><strong>窃听</strong>：<code>driftnet -i eth0（你的网卡）</code>或<code>wireshark</code></li></ol><h1 id="3-存在问题"><a href="#3-存在问题" class="headerlink" title="3 存在问题"></a>3 存在问题</h1><ul><li>攻击局域网其他系统时，kali虚拟机可以上网，但是其宿主机(物理机win10)无法上网；<font color="#008000">开启IP转发可以解决</font></li><li>窃听时目标主机虽然可以ping通，当时网速太慢且不稳定；driftnet无法正确抓取图片；</li></ul><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4 参考"></a>4 参考</h1><ul><li><a href="https://baike.baidu.com/item/ARP/609343" target="_blank" rel="noopener">百度百科-ARP</a></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%94%BB%E5%87%BB#:~:text=ARP%20%E7%97%85%E6%AF%92%E6%94%BB%E5%87%BB%E6%98%AF%E5%B1%80%E5%9F%9F%E7%BD%91,%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91%E5%92%8C%E9%80%9A%E4%BF%A1%E5%AE%89%E5%85%A8%E3%80%82" target="_blank" rel="noopener">百度百科-ARP攻击</a></p></li><li><p><a href="https://baike.baidu.com/item/ARP%E6%AC%BA%E9%AA%97" target="_blank" rel="noopener">百度百科-ARP欺骗</a></p></li><li><a href="https://baike.baidu.com/item/%E7%BD%91%E5%85%B3" target="_blank" rel="noopener">百度百科-网关</a></li><li><p><a href="https://zhuanlan.zhihu.com/p/56658358#:~:text=%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F%E5%B0%B1%E6%98%AF%E5%B0%86%E4%B8%BB%E6%9C%BA,%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E8%80%8C%E4%B8%8D%E5%B9%B2%E6%89%B0%E3%80%82" target="_blank" rel="noopener">vmware 虚拟机三种网络模式—“桥接、NAT 、仅主机”区别？</a></p></li><li><p><a href="https://blog.csdn.net/weixin_43343144/article/details/102679135" target="_blank" rel="noopener">Kali Linux使用arpspoof命令进行断网攻击（ARP欺骗）【VMware一定要设置桥接模式，否则断网会无效】</a></p></li><li><p><a href="https://blog.csdn.net/weixin_44839457/article/details/108333653?utm_source=app&amp;app_version=4.5.2" target="_blank" rel="noopener">使用kali进行ARP攻击与欺骗</a></p></li><li><a href="https://blog.csdn.net/qq_42039946/article/details/112968942?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control" target="_blank" rel="noopener">使用kali进行局域网ARP欺骗攻击与监听</a></li><li><a href="https://www.youtube.com/watch?v=ko4VvZuO4rs" target="_blank" rel="noopener">秦柯-ARP攻击</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图像滤波整理</title>
      <link href="/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/"/>
      <url>/2020/11/08/%E5%9B%BE%E5%83%8F%E6%BB%A4%E6%B3%A2%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="图像滤波"><a href="#图像滤波" class="headerlink" title="图像滤波"></a>图像滤波</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol><li><strong>定义</strong>：图像滤波，即在尽量保留图像细节特征的条件下对目标图像的噪声进行抑制，是图像预处理中不可缺少的操作，其处理效果的好坏将直接影响到后续图像处理和分析的有效性和可靠性。</li><li><strong>比喻：</strong>我们可以把滤波器想象成一个包含加权系数的窗口，当使用这个滤波器平滑处理图像时，就把这个窗口放到图像之上，透过这个窗口来看我们得到的图像。</li><li><strong>公式：</strong> <script type="math/tex">O(i, j) = \sum_{m,n}I(i+m,j+n)K(m,n)</script> 其中O(i, j)是像素输出值，I(i+m, j+n)是像素输入值，K为滤波器（核：二维矩阵，核的不同值表示不同的算法。）</li><li><strong>种类</strong>：低通滤波器可以消除噪声、模糊化，高通滤波器可以提取边缘。<a href="https://blog.csdn.net/u013631121/article/details/80444602?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">白话文讲计算机视觉-第三讲-滤波器</a></li><li><strong>作用</strong>：图像滤波可以更改或者增强图像。通过滤波，可以强调一些特征或者去除图像中一些不需要的部分。滤波是一个邻域操作算子，利用给定像素周围的像素的值决定此像素的最终的输出值。常见的应用包括去噪、图像增强、检测边缘、检测角点、模板匹配等。</li></ol><h2 id="非学习类型算法"><a href="#非学习类型算法" class="headerlink" title="非学习类型算法"></a>非学习类型算法</h2><h3 id="0x01-均值滤波"><a href="#0x01-均值滤波" class="headerlink" title="0x01 均值滤波"></a>0x01 均值滤波</h3><ol><li><strong>定义</strong>：用其像素点周围像素的平均值代替元像素值，在滤除噪声的同时也会滤掉图像的边缘信息。</li><li><strong>代码</strong>：Python调用OpenCV实现均值滤波的核心函数：<strong>result = cv2.blur(原始图像,  核大小)</strong>   其中，核大小是以（宽度，高度）表示的元组形式，常见的形式包括：核大小（3，3）和（5，5）。<strong>boxFilter</strong>也可实现。</li></ol><h3 id="0x02-方框滤波"><a href="#0x02-方框滤波" class="headerlink" title="0x02 方框滤波"></a>0x02 方框滤波</h3><ol><li><strong>定义</strong>：方框滤波和均值滤波核基本一致，区别是需不需要均一化处理。</li><li><strong>代码</strong>： OpenCV调用boxFilter()函数实现方框滤波。函数：<strong>result = cv2.boxFilter(原始图像, 目标图像深度, 核大小, normalize属性)</strong>  其中，目标图像深度是int类型，通常用“-1”表示与原始图像一致；核大小主要包括（3，3）和（5，5）；normalize属性表示是否对目标图像进行归一化处理，当normalize为true时需要执行均值化处理，当normalize为false时，不进行均值化处理，实际上为求周围各像素的和，很容易发生溢出，溢出时均为白色，对应像素值为255。</li></ol><h3 id="0x03-中值滤波"><a href="#0x03-中值滤波" class="headerlink" title="0x03 中值滤波"></a><strong>0x03 中值滤波</strong></h3><ol><li><strong>定义：</strong>中值滤波用测试像素周围邻域像素集中的中值代替原像素。中值滤波去除椒盐噪声和斑块噪声时，效果非常明显。在OpenCV中，可以使用函数medianBlur进行操作。</li><li><strong>代码</strong>： OpenCV主要调用medianBlur()函数实现中值滤波。图像平滑里中值滤波的效果最好。<strong>dst = cv2.medianBlur(src, ksize)</strong>   其中，src表示源文件，ksize表示核大小。核必须是大于1的奇数，如3、5、7等。</li></ol><h3 id="0x04-高斯滤波"><a href="#0x04-高斯滤波" class="headerlink" title="0x04 高斯滤波"></a>0x04 高斯滤波</h3><ol><li><strong>定义</strong>：加权平均，距离越近的点权重越大，距离越远的点权重越小。由于图像是二维矩阵，则采用二维高斯函数(正态分布)<script type="math/tex">f(x,y)= \frac{1}{2πσ^2} e^{\frac{-(x^2+y^2)}{2σ^2}}</script> 。如果原图是彩色图片，可以对RGB三个通道分别做高斯模糊。参考：<a href="https://blog.csdn.net/nima1994/article/details/79776802" target="_blank" rel="noopener">高斯模糊（高斯滤波）的原理与算法</a></li><li><strong>边界处理</strong>：把已有的点拷贝到另一面的对应位置，模拟出完整的矩阵。</li><li><strong>公式</strong>：以 q为中心的窗口中，某一点 p在高斯滤波过程中。 权重(空间)： <script type="math/tex">G(p) = \frac{1}{2πσ^2} e^{\frac{-||p-q||^2}{2σ^2}}</script> </li><li><strong>代码</strong>：Python中OpenCV主要调用GaussianBlur函数：<strong>dst = cv2.GaussianBlur(src, ksize, sigmaX)</strong>   其中，src表示原始图像；ksize表示核大小，核大小（N, N）必须是奇数；sigmaX表示X方向方差，主要控制权重，sigmaX小，表现在高斯曲线上就是曲线越高越尖，表现在滤波效果上就是模糊程度小（sigmaX大，表现在高斯曲线上就是曲线越矮越平缓，表现在滤波效果上就是模糊程度大）。 </li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#方框滤波</span></span><br><span class="line">img_box = cv2.boxFilter(source, <span class="number">-1</span>, (<span class="number">5</span>,<span class="number">5</span>), normalize=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line">img_blur = cv2.blur(source, (<span class="number">5</span>,<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#中值滤波</span></span><br><span class="line">img_median = cv2.medianBlur(source, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">img_Guassian = cv2.GaussianBlur(source, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'BoxFilter Image'</span>, <span class="string">'Blur Image'</span>, </span><br><span class="line">         <span class="string">'Median Image'</span>, <span class="string">'Guassian Image'</span>]  </span><br><span class="line">images = [source, img_box, img_blur, img_Guassian, img_median]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):  </span><br><span class="line">   plt.subplot(<span class="number">2</span>, <span class="number">3</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([])  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/Eastmount/article/details/82216380?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><h3 id="0x05-双边滤波-—-边缘保护滤波"><a href="#0x05-双边滤波-—-边缘保护滤波" class="headerlink" title="0x05 双边滤波 —  边缘保护滤波"></a>0x05 双边滤波 —  <strong>边缘保护滤波</strong></h3><ol><li><strong>定义</strong>：高斯滤波只考虑了周边点与中心点的空间距离来计算得到权重，会模糊掉边缘。在高斯滤波的基础上加入了像素值(灰度)权重项，也就是说既要考虑距离因素，也要考虑像素值差异的影响，像素值越相近，权重越大。参考：<a href="http://www.360doc.com/content/17/0306/14/28838452_634420847.shtml" target="_blank" rel="noopener">双边滤波详解</a>、<a href="https://blog.csdn.net/u013921430/article/details/84532068" target="_blank" rel="noopener">【图像处理】——双边滤波</a></li><li><strong>公式：</strong> 像素值权重     <script type="math/tex">G_r= exp(-{\frac{||I_p-I_q||^2}{2σ^2_r}})</script>  空间距离权重  <script type="math/tex">G_s= exp(-{\frac{||p-q||^2}{2σ^2_s}})</script>  滤波窗口内每个像素值的权重和 <script type="math/tex">W(q) = \sum_{p\in S} G_s(p)G_r(p)</script> —-用于权重的归一化 滤波结果： <script type="math/tex">BF = \frac {1}{W_q}\sum_{p\in S} G_s(p)G_r(p)*I_p</script> </li><li><strong>代码</strong>：OpenCV在Python中双边滤波函数是<strong>cv2.bilateralFilter(src, d, sigmaColor, sigmaSpace）</strong>时间复杂度 <script type="math/tex">O(Nr^2)</script>  <strong>① s</strong>rc是输入图像； ② d是在过滤期间使用的每个像素邻域的直径，如果输入d非0，则sigmaSpace由d计算得出，如果sigmaColor没输入，则sigmaColor由sigmaSpace计算得出； ③ sigmaColor是灰度值相似性高斯函数标准差，色彩空间的标准方差，一般尽可能大， 较大的参数值意味着像素邻域内较远的颜色会混合在一起， 从而产生更大面积的半相等颜色； ④ sigmaSpace是空间高斯函数标准差，坐标空间的标准方差(像素单位)，一般尽可能小。 参数值越大意味着只要它们的颜色足够接近，越远的像素都会相互影响。 当d &gt; 0时，它指定邻域大小而不考虑sigmaSpace。 否则，d与sigmaSpace成正比。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取图片</span></span><br><span class="line">img = cv2.imread(<span class="string">'02.png'</span>)</span><br><span class="line">source = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#双边滤波</span></span><br><span class="line">img_bilateral = cv2.bilateralFilter(source, <span class="number">7</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#显示图形</span></span><br><span class="line">titles = [<span class="string">'Source Image'</span>, <span class="string">'bilateralFilter Image'</span>]  </span><br><span class="line">images = [source, img_bilateral]  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">   plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">   plt.title(titles[i])  </span><br><span class="line">   plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h3 id="0x06-引导滤波-—-边缘保护滤波"><a href="#0x06-引导滤波-—-边缘保护滤波" class="headerlink" title="0x06  引导滤波 — 边缘保护滤波"></a>0x06  引导滤波 — <strong>边缘保护滤波</strong></h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a><strong>1. 定义</strong></h4><p>　　引导滤波的思想用一张引导图像产生权重，从而对输入图像进行处理。引导滤波除了可以用于图像平滑，还可以用于HDR压缩、细节增强、图像去雾、联合上采样等图像处理任务。引导滤波中空间域的贡献自然取决于窗口的大小，即由参数 r 决定。而标准差则是评判颜色差异性的参数，窗口中标准差越大，说明局部的像素相似性越差。</p><h4 id="2-公式：【图像处理】引导滤波"><a href="#2-公式：【图像处理】引导滤波" class="headerlink" title="2. 公式：【图像处理】引导滤波"></a><strong>2. 公式：</strong><a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">【图像处理】引导滤波</a></h4><ol><li><strong>权重</strong> <script type="math/tex">W_{ij}(i,j) = \frac{1}{|ω|^2} \sum_{k:(i,j)\in ω_k} (1+ \frac{(I_i-μ_k)(I_j-μ_k)}{σ_k^2+ϵ})</script>   (局部窗口 <script type="math/tex">ω_k</script> ；ϵ是 <script type="math/tex">L_2</script> 范数正则化系数，防止<script type="math/tex">a_k</script> 过大； <script type="math/tex">μ_k</script>与 <script type="math/tex">σ_k</script> 表示 <script type="math/tex">I_i</script> 在窗口内的均值、标准差； <script type="math/tex">∣w∣</script> 表示窗口内像素块的总数 )</li><li><strong>结果</strong> <script type="math/tex">q_i = \sum_{j}{W_{ij}(I)*p_j}</script>   (q、I、p分表表示输出图像、引导图像和输入图像 ，i、j 分别表示图像中像素点的索引。权重 W 仅与引导图像 I 有关，而在双边滤波中权重 W 由输入图像自身决定。)</li></ol><h4 id="3-代码1-引导滤波-："><a href="#3-代码1-引导滤波-：" class="headerlink" title="3. 代码1(引导滤波)："></a><strong>3. 代码1(引导滤波)</strong>：</h4><p>　　第一个代码块是手写实现引导滤波。时间复杂度O(N)，当 r 与 ϵ 越大，图像被平滑的程度越大。伪代码中：r是窗口半径， <script type="math/tex">f_{mean}(I,r)</script>​ 表示在(r, r)窗口对图像做均值滤波。大佬博客：<a href="https://blog.csdn.net/u013921430/article/details/99695647" target="_blank" rel="noopener">我跳</a><br>　　第二个代码块是使用的现有库。参考：<a href="https://jinzhangyu.github.io/2018/09/06/2018-09-06-OpenCV-Python%E6%95%99%E7%A8%8B-16-%E5%B9%B3%E6%BB%91%E5%9B%BE%E5%83%8F-3/" target="_blank" rel="noopener">我跳</a></p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/GF.png" width="500" height="400" alt="图片名称" align="center" id="23"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: 不用先生</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">input_fn = <span class="string">'03.png'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_oneChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于单通道图像（灰度图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为单通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为单通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_oneChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">13</span>, eps=<span class="number">0.1</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换数值类型，并归一化</span></span><br><span class="line">    srcImg = srcImg/<span class="number">255.0</span></span><br><span class="line">    guidedImg = guidedImg/<span class="number">255.0</span></span><br><span class="line">    img_shape = np.shape(srcImg)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 在(rad, rad)窗口的内对图像做均值滤波。</span></span><br><span class="line">    P_mean = cv2.boxFilter(srcImg, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># p的均值平滑</span></span><br><span class="line">    I_mean = cv2.boxFilter(guidedImg,<span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># I的均值平滑</span></span><br><span class="line"></span><br><span class="line">    I_square_mean = cv2.boxFilter(np.multiply(guidedImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment">#I*I的均值平滑</span></span><br><span class="line">    I_mul_P_mean = cv2.boxFilter(np.multiply(srcImg, guidedImg), <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)<span class="comment"># I*p的均值平滑</span></span><br><span class="line">    </span><br><span class="line">    var_I = I_square_mean-np.multiply(I_mean,I_mean)<span class="comment"># 方差</span></span><br><span class="line">    cov_I_P = I_mul_P_mean-np.multiply(I_mean,P_mean)<span class="comment"># 协方差</span></span><br><span class="line">    </span><br><span class="line">    a = cov_I_P/(var_I+eps)<span class="comment"># 相关因子a</span></span><br><span class="line">    b = P_mean-np.multiply(a,I_mean)<span class="comment"># 相关因子b</span></span><br><span class="line">    </span><br><span class="line">    a_mean = cv2.boxFilter(a, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>) <span class="comment"># 对a进行均值平滑</span></span><br><span class="line">    b_mean = cv2.boxFilter(b, <span class="number">-1</span>, (rad, rad), normalize=<span class="literal">True</span>)  <span class="comment"># 对b进行均值平滑</span></span><br><span class="line">    </span><br><span class="line">    dstImg = np.multiply(a_mean,guidedImg)+b_mean</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg*<span class="number">255.0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 函数名：my_guidedFilter_threeChannel</span></span><br><span class="line"><span class="comment"># 函数功能：用于三通道图像（RGB彩色图）的引导滤波函数；</span></span><br><span class="line"><span class="comment"># 参数：srcImg：输入图像，为三通道图像；</span></span><br><span class="line"><span class="comment"># 参数：guideImg：引导图像，为三通道图像，尺寸与输入图像一致；</span></span><br><span class="line"><span class="comment"># 参数：rad：滤波器大小r，应该保证为奇数，默认值为9；</span></span><br><span class="line"><span class="comment"># 参数：eps：防止a过大的正则化参数ϵ，</span></span><br><span class="line"><span class="comment"># 返回：dstImg：输出图像，尺寸、通道数与输入图像吻合；</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_guidedFilter_threeChannel</span><span class="params">(srcImg, guidedImg, rad=<span class="number">9</span>, eps=<span class="number">0.01</span>)</span>:</span></span><br><span class="line">    </span><br><span class="line">    img_shape = np.shape(srcImg)</span><br><span class="line"></span><br><span class="line">    dstImg = np.zeros(img_shape, dtype=float)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ind <span class="keyword">in</span> range(<span class="number">0</span>,img_shape[<span class="number">2</span>]):</span><br><span class="line">        dstImg[:,:,ind] = my_guidedFilter_oneChannel(srcImg[:,:,ind],</span><br><span class="line">              guidedImg[:,:,ind], rad, eps)</span><br><span class="line">    </span><br><span class="line">    dstImg = dstImg.astype(np.uint8)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> dstImg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    img = cv2.imread(input_fn)<span class="comment">#读入图像</span></span><br><span class="line">    print( np.shape(img) )</span><br><span class="line"></span><br><span class="line">    dstimg = my_guidedFilter_threeChannel(img, img, <span class="number">9</span> , <span class="number">0.01</span>)<span class="comment">#输入图像作为自身的引导图</span></span><br><span class="line">    print( np.shape(dstimg) )</span><br><span class="line">    <span class="comment"># cv2.imwrite('output.jpg',dstimg)</span></span><br><span class="line">    cv2.imshow(<span class="string">'output'</span>, dstimg)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: Jin ZhangYu</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-contrib-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 导入库</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> skimage</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造参数解析器</span></span><br><span class="line"><span class="comment"># ap = argparse.ArgumentParser()</span></span><br><span class="line"><span class="comment"># ap.add_argument("-H:\project_work\Machine_Vision_Lab\thesis\Gaussian\code", "--02.png", required=True, help = "Path to the image")</span></span><br><span class="line"><span class="comment"># args = vars(ap.parse_args())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载图像并显示</span></span><br><span class="line">input_fn = <span class="string">'02.png'</span></span><br><span class="line"><span class="comment"># img = cv2.imread(args["image"],1)</span></span><br><span class="line">img = cv2.imread(input_fn)</span><br><span class="line">img = img[:,:,::<span class="number">-1</span>]</span><br><span class="line">guide = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行导向滤波</span></span><br><span class="line">dst1 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">50</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst2 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">200</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line">dst3 = cv2.ximgproc.guidedFilter(</span><br><span class="line">            guide=guide, src=img, radius=<span class="number">16</span>, eps=<span class="number">1000</span>, dDepth=<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图片</span></span><br><span class="line">images = [img,[dst1,dst2,dst3]]</span><br><span class="line">titles =    [</span><br><span class="line">                <span class="string">'Original'</span>,</span><br><span class="line">                [<span class="string">'Guided Filter eps=50'</span>,<span class="string">'Guided Filter eps=200'</span>,<span class="string">'Guided Filter eps=1000'</span>]</span><br><span class="line">            ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制原图</span></span><br><span class="line">plt.figure(figsize=(<span class="number">9</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>),plt.imshow(images[<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">0</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">0</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">1</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>),plt.imshow(images[<span class="number">1</span>][<span class="number">2</span>])</span><br><span class="line">plt.title(titles[<span class="number">1</span>][<span class="number">2</span>], fontsize=<span class="number">10</span>),plt.xticks([]), plt.yticks([])</span><br><span class="line"></span><br><span class="line"><span class="comment"># plt.savefig('1_out.png', transparent=True, dpi=300, pad_inches = 0)</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h4 id="4-代码2-快速导向滤波"><a href="#4-代码2-快速导向滤波" class="headerlink" title="4. 代码2(快速导向滤波)"></a>4. 代码2(快速导向滤波)</h4><p>　　通过下采样减少像素点，计算mean_a &amp; mean_b后进行上采样恢复到原有的尺寸大小。假设缩放比例为s,那么缩小后像素点的个数为 <script type="math/tex">\frac {N}{s^2}</script> ，那么时间复杂度变为 <script type="math/tex">O(\frac {N}{s^2})</script>​ 。伪代码中：fmean代表均值平滑，fsubsample代表图像下采样即缩小图像，fupsample代表图片上采样即放大图像，s为缩小系数。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/84228939?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/FGF.png" width="400" height="400" alt="图片名称" align="center" id="24"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWangSongpingWangs</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">guideFilter</span><span class="params">(I, p, winSize, eps, s)</span>:</span></span><br><span class="line">    <span class="comment"># 输入图像的高、宽</span></span><br><span class="line">    h, w = I.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小图像</span></span><br><span class="line">    size = (int(round(w * s)), int(round(h * s)))</span><br><span class="line">    small_I = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    small_p = cv2.resize(I, size, interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缩小滑动窗口</span></span><br><span class="line">    X = winSize[<span class="number">0</span>]</span><br><span class="line">    small_winSize = (int(round(X * s)), int(round(X * s)))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I的均值平滑 p的均值平滑</span></span><br><span class="line">    mean_small_I = cv2.blur(small_I, small_winSize)</span><br><span class="line">    mean_small_p = cv2.blur(small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># I*I和I*p的均值平滑</span></span><br><span class="line">    mean_small_II = cv2.blur(small_I * small_I, small_winSize)</span><br><span class="line">    mean_small_Ip = cv2.blur(small_I * small_p, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 方差、协方差</span></span><br><span class="line">    var_small_I = mean_small_II - mean_small_I * mean_small_I</span><br><span class="line">    cov_small_Ip = mean_small_Ip - mean_small_I * mean_small_p</span><br><span class="line"></span><br><span class="line">    small_a = cov_small_Ip / (var_small_I + eps)</span><br><span class="line">    small_b = mean_small_p - small_a * mean_small_I</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对a、b进行均值平滑</span></span><br><span class="line">    mean_small_a = cv2.blur(small_a, small_winSize)</span><br><span class="line">    mean_small_b = cv2.blur(small_b, small_winSize)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 放大</span></span><br><span class="line">    size1 = (w, h)</span><br><span class="line">    mean_a = cv2.resize(mean_small_a, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line">    mean_b = cv2.resize(mean_small_b, size1, interpolation=cv2.INTER_LINEAR)</span><br><span class="line"></span><br><span class="line">    q = mean_a * I + mean_b</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> q</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    eps = <span class="number">0.01</span></span><br><span class="line">    winSize = (<span class="number">16</span>,<span class="number">16</span>)       <span class="comment">#类似卷积核（数字越大，磨皮效果越好）</span></span><br><span class="line">    image = cv2.imread(<span class="string">r'02.png'</span>, cv2.IMREAD_ANYCOLOR)</span><br><span class="line">    image = cv2.resize(image,<span class="literal">None</span>,fx=<span class="number">0.8</span>,fy=<span class="number">0.8</span>,interpolation=cv2.INTER_CUBIC)</span><br><span class="line">    I = image/<span class="number">255.0</span>       <span class="comment">#将图像归一化</span></span><br><span class="line">    p =I</span><br><span class="line">    s = <span class="number">3</span> <span class="comment">#步长</span></span><br><span class="line">    guideFilter_img = guideFilter(I, p, winSize, eps,s)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存导向滤波结果</span></span><br><span class="line">    guideFilter_img = guideFilter_img  * <span class="number">255</span>         <span class="comment">#(0,1)-&gt;(0,255)</span></span><br><span class="line">    guideFilter_img[guideFilter_img  &gt; <span class="number">255</span>] = <span class="number">255</span>    <span class="comment">#防止像素溢出</span></span><br><span class="line">    guideFilter_img = np.round(guideFilter_img )</span><br><span class="line">    guideFilter_img = guideFilter_img.astype(np.uint8)</span><br><span class="line">    cv2.imshow(<span class="string">"image"</span>,image)</span><br><span class="line">    cv2.imshow(<span class="string">"winSize_16"</span>, guideFilter_img )</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x07-高通滤波-—-边缘检测-高反差保留"><a href="#0x07-高通滤波-—-边缘检测-高反差保留" class="headerlink" title="0x07 高通滤波 — 边缘检测/高反差保留"></a>0x07 高通滤波 — 边缘检测/高反差保留</h3><ol><li><strong>定义</strong>：</li><li><strong>代码</strong>：使用的函数有：<code>cv2.Sobel()</code> , <code>cv2.Schar()</code> , <code>cv2.Laplacian()</code> Sobel, scharr其实是求一阶或者二阶导数。scharr是对Sobel的优化。 Laplacian是求二阶导数。cv2.Sobel() 是一种带有方向过滤器。参考：<a href="https://blog.csdn.net/wsp_1138886114/article/details/82872838?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">我跳</a></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@First_author: SongpingWang</span></span><br><span class="line"><span class="string">@Second_author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/16</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">dst = cv2.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])</span></span><br><span class="line"><span class="string">src:    需要处理的图像；</span></span><br><span class="line"><span class="string">ddepth: 图像的深度，-1表示采用的是与原图像相同的深度。 </span></span><br><span class="line"><span class="string">        目标图像的深度必须大于等于原图像的深度；</span></span><br><span class="line"><span class="string">dx和dy: 求导的阶数，0表示这个方向上没有求导，一般为0、1、2。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">dst     不用解释了；</span></span><br><span class="line"><span class="string">ksize： Sobel算子的大小，必须为1、3、5、7。  ksize=-1时，会用3x3的Scharr滤波器，</span></span><br><span class="line"><span class="string">        它的效果要比3x3的Sobel滤波器要好 </span></span><br><span class="line"><span class="string">scale： 是缩放导数的比例常数，默认没有伸缩系数；</span></span><br><span class="line"><span class="string">delta： 是一个可选的增量，将会加到最终的dst中， 默认情况下没有额外的值加到dst中</span></span><br><span class="line"><span class="string">borderType： 是判断图像边界的模式。这个参数默认值为cv2.BORDER_DEFAULT。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">img=cv2.imread(<span class="string">'02.png'</span>,cv2.IMREAD_COLOR)</span><br><span class="line">x=cv2.Sobel(img,cv2.CV_16S,<span class="number">1</span>,<span class="number">0</span>)</span><br><span class="line">y=cv2.Sobel(img,cv2.CV_16S,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">absx=cv2.convertScaleAbs(x)</span><br><span class="line">absy=cv2.convertScaleAbs(y)</span><br><span class="line">dist=cv2.addWeighted(absx,<span class="number">0.5</span>,absy,<span class="number">0.5</span>,<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cv2.imshow(<span class="string">'original_img'</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">'y'</span>,absy)</span><br><span class="line">cv2.imshow(<span class="string">'x'</span>,absx)</span><br><span class="line">cv2.imshow(<span class="string">'dsit'</span>,dist)</span><br><span class="line"></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h3 id="0x08-窗口感知的高斯引导滤波"><a href="#0x08-窗口感知的高斯引导滤波" class="headerlink" title="0x08 窗口感知的高斯引导滤波"></a>0x08 窗口感知的高斯引导滤波</h3><ul><li><strong>gr.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gr(px, py, qx, qy, dr)</span><br><span class="line">% 高斯空间核函数</span><br><span class="line">    result = exp( - ( (qx - px)^<span class="number">2</span> + (qy - py)^<span class="number">2</span> ) / (<span class="number">2</span> * dr^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>gzeta.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function result = gzeta(guide_img, div, px, py, qx, qy, dzeta)</span><br><span class="line">% 高斯频域核函数</span><br><span class="line">    result = exp( - ( ( guide_img(px, py, div) - guide_img(qx, qy, div) )^<span class="number">2</span> )  / (<span class="number">2</span> * dzeta^<span class="number">2</span>) );</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>GS.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function output = GS(image, r, dr, px, py, div)</span><br><span class="line">% 求解高斯空间域滤波，返回指定像素点(p)的输出</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r % 以p为中心的窗口半径为<span class="number">2</span>r+<span class="number">1</span>的区域</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            Upsilon = Upsilon + gr(px, py, px + i, py + j, dr);</span><br><span class="line">            output = output + gr(px, py, px + i, py + j, dr) * image(px + i,py + j,div);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">    output = output / Upsilon ;</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>WGGF.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function output = WGGF(guide_img, source, r, dzeta, px, py, div, <span class="keyword">lambda</span>)</span><br><span class="line">% 窗口感知的高斯引导滤波</span><br><span class="line">%求解WGGF在每个像素点p的输出并返回</span><br><span class="line">    Upsilon = <span class="number">0</span>;%τ，归一化系数</span><br><span class="line">    output = <span class="number">0</span>;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> i = -r : r</span><br><span class="line">        <span class="keyword">for</span> j = -r : r</span><br><span class="line">            temp = abs( guide_img(px + i, py + <span class="number">1</span>, div) - guide_img(px, py, div) );</span><br><span class="line">            <span class="keyword">if</span> temp &lt;= <span class="keyword">lambda</span> </span><br><span class="line">                flag = flag + <span class="number">1</span>;</span><br><span class="line">                Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">                output = output + guide_img(px + i,py + j,div) * gzeta(guide_img, div, px, py, px+i, py+j, dzeta);</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">1</span> %不满足窗口感知的要求，返回<span class="number">3</span>*<span class="number">3</span>窗口中的像素点中值</span><br><span class="line">        output = medfilt2( source( (px - <span class="number">1</span>):(px + <span class="number">1</span>), (py - <span class="number">1</span>):(py + <span class="number">1</span>), j), [<span class="number">3</span>,<span class="number">3</span>] );</span><br><span class="line">    <span class="keyword">else</span> %满足条件</span><br><span class="line">        output = output / Upsilon ;</span><br><span class="line">    end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><ul><li><strong>Main.m</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">%% 读取图片</span><br><span class="line">source = im2double( imread(<span class="string">'01.jpg'</span>) );</span><br><span class="line">guide_img = source;</span><br><span class="line"></span><br><span class="line">%% 求解高斯引导滤波</span><br><span class="line">[m ,n, div] = size(source);</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dr = <span class="number">0.5</span>; %空域带宽</span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r %图片四周处理(原像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                guide_img(i,j,k) = GS(source, r, dr, i, j, k); %空间域滤波</span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 求解WGGF</span><br><span class="line">target = guide_img;</span><br><span class="line">r = <span class="number">5</span>; %窗口半径</span><br><span class="line">dzeta = <span class="number">0.1</span>; %频域带宽</span><br><span class="line"><span class="keyword">lambda</span> = <span class="number">0.12</span>; % λ为一选定的阈值 </span><br><span class="line"><span class="keyword">for</span> k = <span class="number">1</span> : div</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> : m</span><br><span class="line">        <span class="keyword">for</span> j = <span class="number">1</span> : n</span><br><span class="line">            <span class="keyword">if</span> i &lt;= r || i &gt;= m - r || j &lt;= r || j &gt;= n - r%图片四周处理(引导像素)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                target(i, j, k) = WGGF(guide_img, source, r, dzeta, i, j, k, <span class="keyword">lambda</span>); </span><br><span class="line">            end</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">%% 显示图形</span><br><span class="line">figure;</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>), imshow(source), title(<span class="string">'Source image'</span>);</span><br><span class="line">subplot(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>), imshow(target), title(<span class="string">'WGGF image'</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>WGGF.py(Bug)</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#encoding:utf-8</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: Dragon Liu</span></span><br><span class="line"><span class="string">Operating environment: Python 3.7.1</span></span><br><span class="line"><span class="string">lib:  opencv-python</span></span><br><span class="line"><span class="string">Date: 2020/3/22</span></span><br><span class="line"><span class="string">BUG: 时间复杂度O(m*n*div*r*r)，不可行，另外存在img[]访问问题</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#导入库</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯空间核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gr</span><span class="params">(px, py, qx, qy, dr)</span>:</span></span><br><span class="line"></span><br><span class="line">   nut = math.exp( - ( pow((qx - px), <span class="number">2</span>) + pow((qy - py), <span class="number">2</span>) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dr, <span class="number">2</span>) <span class="comment">#分母</span></span><br><span class="line">   result =  nut / det  </span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯频域核函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gzeta</span><span class="params">(guide_img, div, px, py, qx, qy, dzeta)</span>:</span></span><br><span class="line"></span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   nut = math.exp( - ( pow( ( guide_img[px, py, div] - guide_img[qx, qy, div] ), <span class="number">2</span> ) ) ) <span class="comment">#分子</span></span><br><span class="line">   det = <span class="number">2</span> * pow(dzeta, <span class="number">2</span>)</span><br><span class="line">   result =  nut / det</span><br><span class="line">   <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解高斯空间域滤波，返回指定像素点(p)的输出</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GS</span><span class="params">(image, r, dr, px, py, div)</span>:</span></span><br><span class="line"></span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         Upsilon = Upsilon + gr(px, py, px + i, py + j, dr)</span><br><span class="line">         output = output + gr(px, py, px + i, py + j, dr) * image[px + i,py + j,div]</span><br><span class="line">   </span><br><span class="line">   output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment">#求解指定窗口(3*3)的中值</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">medbox</span><span class="params">(img, x, y, div, length, width)</span>:</span></span><br><span class="line">   </span><br><span class="line">   nums = []</span><br><span class="line">   length = width = <span class="number">3</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(math.floor(length/<span class="number">2</span>), -math.floor(length/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(math.floor(width/<span class="number">2</span>), -math.floor(width/<span class="number">2</span>)<span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">         nums.append( img[x+i, y+j, div])</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> np.median(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment">#窗口感知的高斯引导滤波</span></span><br><span class="line"><span class="comment">#求解WGGF在每个像素点p的输出并返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WGGF</span><span class="params">(guide_img,source,r,dzeta,px,py,div, lam)</span>:</span></span><br><span class="line">   </span><br><span class="line">   guide_img = guide_img </span><br><span class="line">   source = source  </span><br><span class="line">   Upsilon = <span class="number">0</span> <span class="comment">#τ，归一化系数</span></span><br><span class="line">   output = <span class="number">0</span></span><br><span class="line">   flag = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):<span class="comment"># 以p为中心的窗口半径为2r+1的区域</span></span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> range(r, -(r+<span class="number">1</span>), <span class="number">-1</span>):</span><br><span class="line">         temp = abs( guide_img[px + i, py + <span class="number">1</span>, div] - guide_img[px, py, div] )</span><br><span class="line">         <span class="keyword">if</span> temp &lt;= lam:</span><br><span class="line">               flag = flag + <span class="number">1</span></span><br><span class="line">               Upsilon = Upsilon + gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line">               output = output + guide_img[px + i,py + j,div] * gzeta(guide_img, div, px, py, px+i, py+j, dzeta)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> flag == <span class="number">1</span> <span class="keyword">or</span> Upsilon == <span class="number">0</span>: <span class="comment">#不满足窗口感知的要求，返回3*3窗口中的像素点中值</span></span><br><span class="line">      output = medbox( source, px, py, j, <span class="number">3</span>, <span class="number">3</span> )</span><br><span class="line">   <span class="keyword">else</span>: <span class="comment">#满足条件</span></span><br><span class="line">      output = output / Upsilon </span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数，测试</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">   <span class="comment">#读取图片</span></span><br><span class="line">   img = cv2.imread(<span class="string">'02.png'</span>, <span class="number">1</span>)</span><br><span class="line">   source = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)</span><br><span class="line">   source = source / <span class="number">255.0</span></span><br><span class="line">   guide_img = source</span><br><span class="line">   </span><br><span class="line">   print(<span class="number">1.666</span>)</span><br><span class="line">   <span class="comment">#求解高斯引导滤波</span></span><br><span class="line">   [m ,n, div] = np.shape(source)<span class="comment">#查看矩阵或者数组的维数。</span></span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dr = <span class="number">0.5</span> <span class="comment">#空域带宽</span></span><br><span class="line">   <span class="comment"># 高斯滤波</span></span><br><span class="line">   guide_img = cv2.GaussianBlur(source, (r,r), dr)</span><br><span class="line">               </span><br><span class="line">   </span><br><span class="line">   print(<span class="number">2.666</span>)</span><br><span class="line">   <span class="comment">#求解WGGF</span></span><br><span class="line">   target = guide_img</span><br><span class="line">   r = <span class="number">5</span> <span class="comment">#窗口半径</span></span><br><span class="line">   dzeta = <span class="number">0.1</span> <span class="comment">#频域带宽</span></span><br><span class="line">   lam = <span class="number">0.12</span> <span class="comment">#λ为一选定的阈值 </span></span><br><span class="line">   num = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> k <span class="keyword">in</span> range(div):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</span><br><span class="line">         <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</span><br><span class="line">               <span class="keyword">if</span> i &lt;= r <span class="keyword">or</span> i &gt;= m - r <span class="keyword">or</span> j &lt;= r <span class="keyword">or</span> j &gt;= n - r: <span class="comment">#图片边界处理(引导像素)</span></span><br><span class="line">                  <span class="keyword">continue</span></span><br><span class="line">               <span class="keyword">else</span>:</span><br><span class="line">                  target[i, j, k] = WGGF(guide_img, source, r, dzeta, i, j, k, lam)</span><br><span class="line">               num = num + <span class="number">1</span></span><br><span class="line">               print(num)</span><br><span class="line">   print(<span class="number">3.666</span>)</span><br><span class="line">   <span class="comment">#显示图形</span></span><br><span class="line">   titles = [<span class="string">'Source Image'</span>, <span class="string">'WGGF Image'</span>]  </span><br><span class="line">   images = [source*<span class="number">255.0</span>, target*<span class="number">255.0</span>]  </span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):  </span><br><span class="line">      plt.subplot(<span class="number">1</span>, <span class="number">2</span>, i+<span class="number">1</span>), plt.imshow(images[i], <span class="string">'gray'</span>)  </span><br><span class="line">      plt.title(titles[i])  </span><br><span class="line">      plt.xticks([]),plt.yticks([]) <span class="comment">#禁止输出坐标轴 </span></span><br><span class="line">   plt.show()  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区块链综述</title>
      <link href="/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2020/06/27/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>　　有人说区块链是一场伟大的实验，有人说区块链是一场革命，有人说区块链是一个世纪骗局，还有人说区块链是百年难得一遇的良机，人人参与是社会发展的必然趋势<strong>[1]</strong>。而且，区块链的发明者中本聪是何许人也？仍然未知，无疑为其蒙上了一层神秘面纱。<br>　　这里需要指出的是不要将区块链与比特币混淆，区块链是以比特币为代表的加密货币的底层支撑技术；比特币是区块链的一个应用。巴菲特表示：“这是一个赌博的东西……有很多欺诈与之有关。比特币没有产生任何价值<strong>[2]</strong>。” 换言之，与其说比特币用来投资，倒不如说是用来投机。否定比特币并不意味着否定区块链，恰恰相反，我们应该好好领悟区块链的技术原理。国家支持区块链的技术的发展：在2019年10月24日中央政治局第十八次集体学习中，习总书记指出：区块链技术应用已延伸到数字金融、物联网、智能制造、供应链管理、数字资产交易等多个领域，要加快推动区块链技术和产业创新发展，积极推进区块链和经济社会融合发展<strong>[3]</strong>。 2020年4月20日国家发改委也正式将区块链技术纳入新基建范畴<strong>[3]</strong>。</p><p>　　表明立场，谈技术。技术主要是来自于《比特币白皮书》，<a href="https://dragonliu.ml/lun-wen-ji-lei/qu-kuai-lian/bitcoin-a-peer-to-peer-electronic-cash-system" target="_blank" rel="noopener">我跳</a>。</p><h1 id="01-介绍"><a href="#01-介绍" class="headerlink" title="01 介绍"></a>01 介绍</h1><p>　　区块链技术依靠共识机制和分布式账本，不需要第三方信用机构就可以避免双重支付问题；同时，通过“工作量证明”（POW，proof of work）及“权益证明”（proof of stake），区块链使得所有参与者可以在某些方面达成一致，无需信任单个节点，从而解决拜占庭将军问题。</p><p>　　比特币网络的全节点时时刻刻都在进行数学运算（挖矿、工作量证明），每个节点贡献自己的算力来竞争解决一个动态可调整的数学问题（进行 SHA256 运算的结果小于某个值），成功解决该数学问题的节点将获得一定数量的比特币以及该区块的记账权，并且该节点将当前时间段的所有交易打包计入一个新的区块，获得基于自愿原则的交易手续费，所有的交易都会经过算法处理（SHA256），并且经过验证，产生一定格式的区块并将该区块链接到主链上。整个比特币网络周而复始，比特币网络顺利运行。</p><p>中本聪在其比特币白皮书中非常详细地介绍了区块链系统的建立过程：</p><p>第１步 新的交易向全网所有节点广播；</p><p>第２步 每个节点把收到的交易都写入到一个区块中；</p><p>第３步 每个节点都在新的区块上进行计算，寻找一个工作量证明解；</p><p>第４步 某个节点找到工作量证明解时，就把其所在区块向全网进行广播；</p><p>第５步 其他节点收到广播的这个区块后对其进行验证，只有所有交易都被 验证是有效的且未被使用的之后，该区块才能被认可；</p><p>第６步 每个节点通过将此区块的哈希值作为父哈希值来进行下一个区块的 计算，表示节点认可了此区块有效。</p><p>由于每个区块都带有前一区块的特征，想要篡改一个区块的交易记录，必须要重新计算该块之后的所有区块，需要修改时间越久的区块，所花费的算力越大。一般来说，一个区块后面有 6 个区块，这个区块就无法被修改了，也就是认为这个区块可信。[6]</p><h1 id="02-自问自答"><a href="#02-自问自答" class="headerlink" title="02 自问自答"></a>02 自问自答</h1><ul><li><p><strong>问</strong>：比特币就是区块链吗？</p></li><li><p><strong>答</strong>：虽然前面有提及，但仍需再重复一遍。以比特币为代表的加密货币的底层支撑技术被称为区块链技术，比特币是区块链的一个应用。</p></li><li><p><strong>问</strong>：为什么要设计工作量证明呢？</p></li><li><p><strong>答</strong>：这个问题从两个方面回答：</p><ul><li>为了控制比特币生成的速度。中本聪的设计是比特币最多被细分到小数点后8位，之后将再也无法被细分。且第一个区块会有50个比特币奖励，每过21万个区块，比特币的产量减半。中本聪通过调节工作量证明的难度，使每一个新区块生成大概需要10分钟。所以比特币每四年产出速度减半一次，直到2140年，每一个区块的比特币将不能再被细分，这时比特币就开采完毕了，等比数列求和可得总量约为2100万个。</li><li>如果不设计工作量证明，将无法抵御黑客的攻击。例如，你在饿了么上支付了18元你的外卖费用。你作为黑客，如果想要修改这一笔交易，就必须重新玩一次这个区块上的新的跳一跳到1000分，且这笔交易所在的区块，之后的所有区块，你都必须完成游戏并修改直到你的链子是全网络最长的一条时，你才修改成功了。当然，中本聪实际设计的“游戏”要比跳一跳难的多，他会消耗全网巨大的CPU算力，只要黑客手上的算力无法达到全网算力的51%,要改变任意一笔交易将会变得很难，且难度系数会随着时间成指数增长。</li></ul><hr></li></ul><h1 id="03-常见攻击"><a href="#03-常见攻击" class="headerlink" title="03 常见攻击"></a>03 常见攻击</h1><h2 id="0x01-doublespend"><a href="#0x01-doublespend" class="headerlink" title="0x01  doublespend"></a>0x01  doublespend</h2><p>　　翻译为双重支付，或直译为“双花”。所表达的意思也很简单，一笔数字资产既支付给了A，又支付给了B。结合<strong>51％的攻击力</strong>一起食用。</p><h2 id="0x02-Selfish-mining"><a href="#0x02-Selfish-mining" class="headerlink" title="0x02 Selfish mining"></a>0x02 Selfish mining</h2><p>​        目前还没有找到中文解释，先直译为“私自挖矿攻击”。正常挖矿过程中，矿工挖到矿了都会立刻广播结果，生怕别人跟我来抢这个区块。但是在Selfish mining中则不然。假设目前所有矿工都工作在区块0上。这时攻击者首先发信新的区块（区块1），他会保留刚挖到的区块，把该区块当做自己的私有链，在私有连上进行挖下一个区块。假如攻击者又挖到了第二个区块（区块2），而这时其他矿工挖到了新区块（区块1’，因为没有听到区块1，还工作在区块0上），攻击者会直接提交两个区块。因为这时候0-1-2这条链长于0-1’这条链，0-1-2会被选做主链。因此，攻击者能获得2个区块的奖励，而别人的算力浪费了，无法获得奖励。[3]</p><h2 id="0x03-DoS-amp-DDoS"><a href="#0x03-DoS-amp-DDoS" class="headerlink" title="0x03 DoS &amp; DDoS"></a>0x03 DoS &amp; DDoS</h2><p>　　计算中的分布式拒绝服务（DDOS）攻击是一种攻击，其中犯罪者试图通过向网络充斥大量多余请求以试图使系统过载，使其用户无法使用网络资源。这是一种攻击不仅是区块链，而且任何在线服务都会受到影响。 [5]</p><h2 id="0x04-Sybil-女巫攻击"><a href="#0x04-Sybil-女巫攻击" class="headerlink" title="0x04 Sybil 女巫攻击"></a>0x04 Sybil 女巫攻击</h2><p>　　Sybil 攻击是通过创建多个虚假身份来尝试操纵 P2P 网络。 对于观察者来说，这些不同的身份看起来像个人用户，但在幕后，单个实体一次控制所有这些假实体。特别是当您考虑在线投票时，这种类型的攻击非常重要。 我们看到 Sybil 攻击的另一个领域是社交网络，过多假账户可以引导公众的讨论。</p><p>　　Sybil 攻击的另一个可能用途是审查某些参与者。 许多 Sybil 节点可以围绕您的节点，并阻止它连接到网络上的其他诚实节点。这样可以防止您向网络发送或接收信息。</p><p>　　缓解 Sybil 攻击的一种方法是引入或提高创建身份的成本。这个成本必须仔细平衡。它必须足够低，以便不限制新参与者加入网络并创建合法身份。它同时也必须足够高，以至于在短时间内创建大量身份变得非常困难。在 PoW 区块链中，实际对交易打包的节点是挖矿节点。有一个现实世界的成本，即购买矿机的成本，与创建虚假的“采矿标识”相关联。另外，拥有大量挖掘节点仍然不足以对网络产生巨大影响。要产生大影响，你还需要大量的算力。换句话说，您需要大型计算机集群。相关的成本使 Sybil 难以对工作证明区块链发起攻击。[5]</p><h2 id="0x05-51％的攻击力"><a href="#0x05-51％的攻击力" class="headerlink" title="0x05 51％的攻击力"></a>0x05 51％的攻击力</h2><p>　　对公共 PoW 区块链的最著名的攻击类型是 51％的攻击。51％攻击的目标是执行双重花费，这意味着将硬币同时花出去两次。要对区块链网络执行 51％的攻击，您需要控制网络的大部分哈希率或计算能力，正如名字一样，需要控制 51% 的算力才能发起攻击。</p><p>　　想要执行双花攻击的恶意矿工，他首先创建一个常规交易，再将其硬币存到交易所，再换成好币或其它货币。这发生在下面的<strong>40</strong> 区块中。与此同时，他们将开始私下挖出一条私链。这意味着他们将遵循通常的挖掘协议，但有两个例外。</p><p><img src="https://cdn.jsdelivr.net/gh/Dragonliu2018/FigureBed@master/img/ggggg.jpg" width="900" height="200" alt="图片名称" align="center" id="22"></p><p>　　首先，他们不会将自己的交易打包在自己的私人开采的链中。其次，他们不会将他们找到的块广播到网络，因此我们将其称为私有链。</p><p>　　如果他们控制大部分算力，他们的链条平均出块速度将比诚实链条快。PoW 区块链中的最长链规则，也称为中本聪共识，用于在这种情况下发生的情况。具有更多区块的分支链，被认为是有效链。</p><p>　　一旦攻击者收到用他们的硬币购买的货币或其他货币，他们就会将私链广播到整个网络。所有诚实的矿工将放弃诚实的链条，并开始挖掘恶意链。攻击者的交易视为从未发生过，因为攻击者未将其包含在恶意链中。攻击者仍在控制他们的资金，现在可以再次使用它们。</p><hr><h1 id="04-名词解释"><a href="#04-名词解释" class="headerlink" title="04 名词解释"></a>04 名词解释</h1><h2 id="0x01-Inter-block-time"><a href="#0x01-Inter-block-time" class="headerlink" title="0x01 Inter-block time"></a>0x01 Inter-block time</h2><p>　　This is the time elapsed between the generation of each block. For bitcoin the blocks are generated every 10 minutes, for litecoin it’s 2.5 minutes. Any value can be used but an appropriate value is usually between a few minutes; if the generation time is too fast it might destabilize the blockchain, if it’s too slow it may not attract many users[4].</p><h2 id="0x02-proof-of-work-PoW"><a href="#0x02-proof-of-work-PoW" class="headerlink" title="0x02 proof of work(PoW)"></a>0x02 proof of work(PoW)</h2><p>　　工作证明（Proof Of Work，POW），也称为工作量的证明。这里的工作是指找到一个合理的区块哈希值，它需要不断地进行大量的计算，计算时间取决于当前目标的难度和机器的运算速度。当一个节点找到这个值之后，就说明该节点确实经过了大量的计算，这就是工作量证明。由于验证只需对结果值进行一次哈希运算，因此ＰＯＷ的验证效率很高。</p><h2 id="0x03-Hash"><a href="#0x03-Hash" class="headerlink" title="0x03 Hash"></a>0x03 Hash</h2><p>　　哈希（也称为散列）算法将任意长度的输入值映射为较短的固定长度的二进制值。例如，SHA256算法就是将任意长度的输入映射为长度为256位的固定长度输出，这个二进制值称为哈希值（也称为散列值）。数据的哈希值可以检验数据的完整性，一般用于快速查找和加密算法。哈希算法广泛应用于区块链中，区块链通常不保存原始数据，而是保存该数据的哈希值。</p><h2 id="0x04-Merkle-树"><a href="#0x04-Merkle-树" class="headerlink" title="0x04 Merkle 树"></a>0x04 Merkle 树</h2><p>　　Merkle树是由Ralph Merkle发明的一种基于数据哈希构建的树。区块链系统采用二叉树型的 Merkle树对该区块的所有交易进行归纳表示，同时生成该交易集合的数字签名。</p><h2 id="0x05-时间戳服务"><a href="#0x05-时间戳服务" class="headerlink" title="0x05 时间戳服务"></a>0x05 时间戳服务</h2><p>　　区块链系统通过给每一笔交易盖上正确的时间戳，以此证明在这个时刻这笔交易确实发生，交易中资金的所属权已经转移，之前资金所有者再次使用这笔资金时就会报错，从而解决重复支付问题。另外，每一个区块也会盖上正确的时间戳，从而形成一个按时间顺序发展的正确链表。</p><h2 id="0x06-拜占庭将军问题-Byzantine-failures"><a href="#0x06-拜占庭将军问题-Byzantine-failures" class="headerlink" title="0x06 拜占庭将军问题(Byzantine failures)"></a>0x06 拜占庭将军问题(Byzantine failures)</h2><p>　　拜占庭将军问题，是由莱斯利·兰伯特提出的点对点通信中的基本问题。含义是在存在消息丢失的不可靠信道上试图通过消息传递的方式达到一致性是不可能的。</p><p>　　拜占庭将军问题是一个协议问题，拜占庭帝国军队的将军们必须全体一致的决定是否攻击某一支敌军。问题是这些将军在地理上是分隔开来的，并且将军中存在叛徒。叛徒可以任意行动以达到以下目标：欺骗某些将军采取进攻行动；促成一个不是所有将军都同意的决定，如当将军们不希望进攻时促成进攻行动；或者迷惑某些将军，使他们无法做出决定。如果叛徒达到了这些目的之一，则任何攻击行动的结果都是注定要失败的，只有完全达成一致的努力才能获得胜利。[7]</p><hr><h1 id="05-发展现状"><a href="#05-发展现状" class="headerlink" title="05 发展现状"></a>05 发展现状</h1><h2 id="0x01-信息共享领域"><a href="#0x01-信息共享领域" class="headerlink" title="0x01 信息共享领域"></a>0x01 信息共享领域</h2><p>　　区块链与其他行业融合的应用，其中最直接的一个领域就是信息领域。首先，区块链本身就是需要保持各个节点的数据一致性的，可以说是自带信息共享功能；其次，实时的问题通过区块链的P2P技术可以实现；最后，利用区块链的不可篡改和共识机制，可构建其一条安全可靠的信息共享通道。[1]</p><h2 id="0x02-版权保护"><a href="#0x02-版权保护" class="headerlink" title="0x02 版权保护"></a>0x02 版权保护</h2><p><strong>区块链 + 鉴证证明</strong></p><p><strong>流程简化</strong>：区块链应用到鉴证证明后，无论是登记还是查询都非常方便，无需再奔走于各个部门之间。</p><p><strong>安全可靠</strong>：区块链的去中心化存储，<strong>保证没有一家机构可以任意篡改数据</strong>。</p><p><strong>应用案例</strong>：2017年12月,微众银行 仲裁委(广州仲裁委) 杭州亦笔科技有限公司共同推出的仲裁联盟链,用于司法场景下的存证;2018年3月,广州首个 仲裁链 判决书出炉。[1]</p><h2 id="0x03-物流链"><a href="#0x03-物流链" class="headerlink" title="0x03 物流链"></a>0x03 物流链</h2><p>　　区块链没有中心化节点，各节点是平等的，掌握单个节点无法实现修改数据；需要掌控足够多的节点，才可能伪造数据，大大提高伪造数据的成本。</p><p>　　区块链天生的开放、透明，使得任何人都可以公开查询，伪造数据被发现的概率大增。</p><p>　　区块链的数据不可篡改性，也保证了已销售出去的产品信息已永久记录，无法通过简单复制防伪信息蒙混过关，实现二次销售。 </p><p>　　物流链的所有节点接入区块链后，商品从生产商到消费者手里都有迹可循，形成完整链条；商品缺失的环节越多，将暴露出其是伪劣产品概率更大。</p><p>　　应用案例：目前,入局物流链的玩家较多,包括腾讯 阿里 京东 沃尔玛等。[1]</p><h1 id="06-参考"><a href="#06-参考" class="headerlink" title="06 参考"></a>06 参考</h1><p>[1] <a href="https://www.zhihu.com/question/55570521" target="_blank" rel="noopener">知乎：区块链怎么赚钱，有什么经济前景？</a></p><p>[2] <a href="https://finance.sina.com.cn/stock/usstock/c/2019-05-04/doc-ihvhiqax6629170.shtml" target="_blank" rel="noopener">巴菲特:比特币是一种“赌博” 很多欺诈行为与之有关</a></p><p>[3] <a href="http://www.vodvv.com/index.php/2020/06/25/9018/" target="_blank" rel="noopener">【区块链技术】区块链技术如何赋能智能制造？</a></p><p>[4] <a href="https://learning.oreilly.com/library/view/mastering-blockchain-/9781788839044/" target="_blank" rel="noopener">Mastering Blockchain - Second Edition by Imran Bashir</a></p><p>[5] <a href="chainnews.com/articles/114443917083.htm">科普：区块链里常见的攻击</a></p><p>[6] <a href="https://blog.csdn.net/qq_36764147/article/details/89766063?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Deconstructing%20the%20Blockchain%20&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-89766063#1.%20%E6%AF%94%E7%89%B9%E5%B8%81%E7%9A%84%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B%5B4%5D" target="_blank" rel="noopener">区块链技术概述</a></p><p>[7] <a href="[https://baike.baidu.com/item/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98#4](https://baike.baidu.com/item/拜占庭将军问题#4">百度百科：拜占庭将军问题</a>)</p><hr><ul><li>回形针视频介绍：<a href="https://www.bilibili.com/video/BV1oJ411E7Lg?p=1&amp;share_medium=android&amp;share_plat=android&amp;share_source=COPY&amp;share_tag=s_i&amp;timestamp=1593348364&amp;unique_k=TEpPdG" target="_blank" rel="noopener">区块链到底是什么？</a></li><li><a href="https://www.youtube.com/watch?v=g_fSistU3MQ" target="_blank" rel="noopener">比特币和区块链啥原理？矿机挖矿咋回事？李永乐老师讲比特币(1)</a></li><li><a href="https://www.youtube.com/watch?v=pbAVauYsqP0" target="_blank" rel="noopener">比特币交易如何防伪？私钥公钥地址啥意思？李永乐老师讲比特币(2)</a></li><li><a href="https://www.youtube.com/watch?v=e9KVmyI1eCg" target="_blank" rel="noopener">拜占庭将军问题是什么？区块链如何解决防范恶意节点？</a></li><li><a href="https://www.bilibili.com/video/av12465079" target="_blank" rel="noopener">【官方双语】想知道比特币（和其他加密货币）的原理吗？</a></li><li><a href="https://www.ruanyifeng.com/blog/2017/12/blockchain-tutorial.html" target="_blank" rel="noopener">区块链入门教程</a></li><li><a href="https://zhuanlan.zhihu.com/p/79450808" target="_blank" rel="noopener">比特币挖矿攻击中的PAW和BSM</a></li><li><a href="https://zhuanlan.zhihu.com/p/52901666" target="_blank" rel="noopener">比特币中的挖矿攻击</a></li><li><a href="https://zhuanlan.zhihu.com/p/32585236" target="_blank" rel="noopener">区块链数字货币的9种共识机制比较</a></li><li><a href="https://zhuanlan.zhihu.com/p/102893427" target="_blank" rel="noopener">从POW到POS看区块链共识的发展</a></li></ul><h1 id="07-一些网站"><a href="#07-一些网站" class="headerlink" title="07 一些网站"></a>07 一些网站</h1><ul><li>寻找中本聪：<a href="https://nakamotoinstitute.org/" target="_blank" rel="noopener">Satoshi Nakamoto Institute</a></li><li><a href="https://www.blockchain.com/explorer?utm_campaign=expnav_explorer" target="_blank" rel="noopener">Blockchain</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/13/hello-world/"/>
      <url>/2019/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="install-Hexo"><a href="#install-Hexo" class="headerlink" title="install Hexo"></a>install Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><h3 id="upgrade-Hexo"><a href="#upgrade-Hexo" class="headerlink" title="upgrade Hexo"></a>upgrade Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm update hexo -g</span><br></pre></td></tr></table></figure><h3 id="init-Blog"><a href="#init-Blog" class="headerlink" title="init Blog"></a>init Blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"My New Post"</span> </span><br><span class="line">hexo n <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="Clear-cache"><a href="#Clear-cache" class="headerlink" title="Clear cache"></a>Clear cache</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="Local-Testing"><a href="#Local-Testing" class="headerlink" title="Local Testing"></a>Local Testing</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server <span class="comment">#Hexo会监视文件变动并自动更新，无须重启服务器</span></span><br><span class="line">hexo server -s <span class="comment">#静态模式</span></span><br><span class="line">hexo server -p 5000 <span class="comment">#更改端口</span></span><br><span class="line">hexo server -i 192.168.1.1 <span class="comment">#自定义 IP</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境与工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
